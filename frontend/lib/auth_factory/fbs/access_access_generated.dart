// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library access;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class AccessResponse {
  AccessResponse._(this._bc, this._bcOffset);
  factory AccessResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AccessResponse> reader = _AccessResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get accessToken => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get expiresIn => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get idToken => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get refreshToken => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get scope => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get tokenType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'AccessResponse{accessToken: ${accessToken}, expiresIn: ${expiresIn}, idToken: ${idToken}, refreshToken: ${refreshToken}, scope: ${scope}, tokenType: ${tokenType}}';
  }
}

class _AccessResponseReader extends fb.TableReader<AccessResponse> {
  const _AccessResponseReader();

  @override
  AccessResponse createObject(fb.BufferContext bc, int offset) => 
    AccessResponse._(bc, offset);
}

class AccessResponseBuilder {
  AccessResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addAccessTokenOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addExpiresIn(int? expiresIn) {
    fbBuilder.addUint64(1, expiresIn);
    return fbBuilder.offset;
  }
  int addIdTokenOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addRefreshTokenOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addScopeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTokenTypeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AccessResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _accessToken;
  final int? _expiresIn;
  final String? _idToken;
  final String? _refreshToken;
  final String? _scope;
  final String? _tokenType;

  AccessResponseObjectBuilder({
    String? accessToken,
    int? expiresIn,
    String? idToken,
    String? refreshToken,
    String? scope,
    String? tokenType,
  })
      : _accessToken = accessToken,
        _expiresIn = expiresIn,
        _idToken = idToken,
        _refreshToken = refreshToken,
        _scope = scope,
        _tokenType = tokenType;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? accessTokenOffset = _accessToken == null ? null
        : fbBuilder.writeString(_accessToken!);
    final int? idTokenOffset = _idToken == null ? null
        : fbBuilder.writeString(_idToken!);
    final int? refreshTokenOffset = _refreshToken == null ? null
        : fbBuilder.writeString(_refreshToken!);
    final int? scopeOffset = _scope == null ? null
        : fbBuilder.writeString(_scope!);
    final int? tokenTypeOffset = _tokenType == null ? null
        : fbBuilder.writeString(_tokenType!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, accessTokenOffset);
    fbBuilder.addUint64(1, _expiresIn);
    fbBuilder.addOffset(2, idTokenOffset);
    fbBuilder.addOffset(3, refreshTokenOffset);
    fbBuilder.addOffset(4, scopeOffset);
    fbBuilder.addOffset(5, tokenTypeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
