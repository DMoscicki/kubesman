// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.apiserverinternal.v1_alpha1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class ServerStorageVersion {
  ServerStorageVersion._(this._bc, this._bcOffset);
  factory ServerStorageVersion(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServerStorageVersion> reader = _ServerStorageVersionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get apiServerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get encodingVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get decodableVersions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  List<String>? get servedVersions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ServerStorageVersion{apiServerId: ${apiServerId}, encodingVersion: ${encodingVersion}, decodableVersions: ${decodableVersions}, servedVersions: ${servedVersions}}';
  }
}

class _ServerStorageVersionReader extends fb.TableReader<ServerStorageVersion> {
  const _ServerStorageVersionReader();

  @override
  ServerStorageVersion createObject(fb.BufferContext bc, int offset) => 
    ServerStorageVersion._(bc, offset);
}

class ServerStorageVersionBuilder {
  ServerStorageVersionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addApiServerIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addEncodingVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDecodableVersionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addServedVersionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServerStorageVersionObjectBuilder extends fb.ObjectBuilder {
  final String? _apiServerId;
  final String? _encodingVersion;
  final List<String>? _decodableVersions;
  final List<String>? _servedVersions;

  ServerStorageVersionObjectBuilder({
    String? apiServerId,
    String? encodingVersion,
    List<String>? decodableVersions,
    List<String>? servedVersions,
  })
      : _apiServerId = apiServerId,
        _encodingVersion = encodingVersion,
        _decodableVersions = decodableVersions,
        _servedVersions = servedVersions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiServerIdOffset = _apiServerId == null ? null
        : fbBuilder.writeString(_apiServerId!);
    final int? encodingVersionOffset = _encodingVersion == null ? null
        : fbBuilder.writeString(_encodingVersion!);
    final int? decodableVersionsOffset = _decodableVersions == null ? null
        : fbBuilder.writeList(_decodableVersions!.map(fbBuilder.writeString).toList());
    final int? servedVersionsOffset = _servedVersions == null ? null
        : fbBuilder.writeList(_servedVersions!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, apiServerIdOffset);
    fbBuilder.addOffset(1, encodingVersionOffset);
    fbBuilder.addOffset(2, decodableVersionsOffset);
    fbBuilder.addOffset(3, servedVersionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StorageVersion {
  StorageVersion._(this._bc, this._bcOffset);
  factory StorageVersion(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StorageVersion> reader = _StorageVersionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  StorageVersionSpec? get spec => StorageVersionSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  StorageVersionStatus? get status => StorageVersionStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'StorageVersion{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _StorageVersionReader extends fb.TableReader<StorageVersion> {
  const _StorageVersionReader();

  @override
  StorageVersion createObject(fb.BufferContext bc, int offset) => 
    StorageVersion._(bc, offset);
}

class StorageVersionBuilder {
  StorageVersionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StorageVersionObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final StorageVersionSpecObjectBuilder? _spec;
  final StorageVersionStatusObjectBuilder? _status;

  StorageVersionObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    StorageVersionSpecObjectBuilder? spec,
    StorageVersionStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StorageVersionCondition {
  StorageVersionCondition._(this._bc, this._bcOffset);
  factory StorageVersionCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StorageVersionCondition> reader = _StorageVersionConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'StorageVersionCondition{type: ${type}, status: ${status}, observedGeneration: ${observedGeneration}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _StorageVersionConditionReader extends fb.TableReader<StorageVersionCondition> {
  const _StorageVersionConditionReader();

  @override
  StorageVersionCondition createObject(fb.BufferContext bc, int offset) => 
    StorageVersionCondition._(bc, offset);
}

class StorageVersionConditionBuilder {
  StorageVersionConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(2, observedGeneration);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StorageVersionConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final int? _observedGeneration;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  StorageVersionConditionObjectBuilder({
    String? type,
    String? status,
    int? observedGeneration,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _observedGeneration = observedGeneration,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addInt64(2, _observedGeneration);
    fbBuilder.addOffset(3, lastTransitionTimeOffset);
    fbBuilder.addOffset(4, reasonOffset);
    fbBuilder.addOffset(5, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StorageVersionList {
  StorageVersionList._(this._bc, this._bcOffset);
  factory StorageVersionList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StorageVersionList> reader = _StorageVersionListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<StorageVersion>? get items => const fb.ListReader<StorageVersion>(StorageVersion.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'StorageVersionList{metadata: ${metadata}, items: ${items}}';
  }
}

class _StorageVersionListReader extends fb.TableReader<StorageVersionList> {
  const _StorageVersionListReader();

  @override
  StorageVersionList createObject(fb.BufferContext bc, int offset) => 
    StorageVersionList._(bc, offset);
}

class StorageVersionListBuilder {
  StorageVersionListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StorageVersionListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<StorageVersionObjectBuilder>? _items;

  StorageVersionListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<StorageVersionObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StorageVersionSpec {
  StorageVersionSpec._(this._bc, this._bcOffset);
  factory StorageVersionSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StorageVersionSpec> reader = _StorageVersionSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;


  @override
  String toString() {
    return 'StorageVersionSpec{}';
  }
}

class _StorageVersionSpecReader extends fb.TableReader<StorageVersionSpec> {
  const _StorageVersionSpecReader();

  @override
  StorageVersionSpec createObject(fb.BufferContext bc, int offset) => 
    StorageVersionSpec._(bc, offset);
}

class StorageVersionSpecObjectBuilder extends fb.ObjectBuilder {

  StorageVersionSpecObjectBuilder();

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(0);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StorageVersionStatus {
  StorageVersionStatus._(this._bc, this._bcOffset);
  factory StorageVersionStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StorageVersionStatus> reader = _StorageVersionStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ServerStorageVersion>? get storageVersions => const fb.ListReader<ServerStorageVersion>(ServerStorageVersion.reader).vTableGetNullable(_bc, _bcOffset, 4);
  String? get commonEncodingVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<StorageVersionCondition>? get conditions => const fb.ListReader<StorageVersionCondition>(StorageVersionCondition.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'StorageVersionStatus{storageVersions: ${storageVersions}, commonEncodingVersion: ${commonEncodingVersion}, conditions: ${conditions}}';
  }
}

class _StorageVersionStatusReader extends fb.TableReader<StorageVersionStatus> {
  const _StorageVersionStatusReader();

  @override
  StorageVersionStatus createObject(fb.BufferContext bc, int offset) => 
    StorageVersionStatus._(bc, offset);
}

class StorageVersionStatusBuilder {
  StorageVersionStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addStorageVersionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addCommonEncodingVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StorageVersionStatusObjectBuilder extends fb.ObjectBuilder {
  final List<ServerStorageVersionObjectBuilder>? _storageVersions;
  final String? _commonEncodingVersion;
  final List<StorageVersionConditionObjectBuilder>? _conditions;

  StorageVersionStatusObjectBuilder({
    List<ServerStorageVersionObjectBuilder>? storageVersions,
    String? commonEncodingVersion,
    List<StorageVersionConditionObjectBuilder>? conditions,
  })
      : _storageVersions = storageVersions,
        _commonEncodingVersion = commonEncodingVersion,
        _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? storageVersionsOffset = _storageVersions == null ? null
        : fbBuilder.writeList(_storageVersions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? commonEncodingVersionOffset = _commonEncodingVersion == null ? null
        : fbBuilder.writeString(_commonEncodingVersion!);
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, storageVersionsOffset);
    fbBuilder.addOffset(1, commonEncodingVersionOffset);
    fbBuilder.addOffset(2, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
