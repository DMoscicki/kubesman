// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.apps.v1_beta2;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.apps.v1_beta2.scale_status__generated.dart' as api_apps_v1_beta2_scale_status_;
import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

class ControllerRevision {
  ControllerRevision._(this._bc, this._bcOffset);
  factory ControllerRevision(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ControllerRevision> reader = _ControllerRevisionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_runtime.RawExtension? get data => apimachinery_pkg_runtime.RawExtension.reader.vTableGetNullable(_bc, _bcOffset, 6);
  int get revision => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'ControllerRevision{metadata: ${metadata}, data: ${data}, revision: ${revision}}';
  }
}

class _ControllerRevisionReader extends fb.TableReader<ControllerRevision> {
  const _ControllerRevisionReader();

  @override
  ControllerRevision createObject(fb.BufferContext bc, int offset) => 
    ControllerRevision._(bc, offset);
}

class ControllerRevisionBuilder {
  ControllerRevisionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRevision(int? revision) {
    fbBuilder.addInt64(2, revision);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ControllerRevisionObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final apimachinery_pkg_runtime.RawExtensionObjectBuilder? _data;
  final int? _revision;

  ControllerRevisionObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    apimachinery_pkg_runtime.RawExtensionObjectBuilder? data,
    int? revision,
  })
      : _metadata = metadata,
        _data = data,
        _revision = revision;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? dataOffset = _data?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, dataOffset);
    fbBuilder.addInt64(2, _revision);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ControllerRevisionList {
  ControllerRevisionList._(this._bc, this._bcOffset);
  factory ControllerRevisionList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ControllerRevisionList> reader = _ControllerRevisionListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ControllerRevision>? get items => const fb.ListReader<ControllerRevision>(ControllerRevision.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ControllerRevisionList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ControllerRevisionListReader extends fb.TableReader<ControllerRevisionList> {
  const _ControllerRevisionListReader();

  @override
  ControllerRevisionList createObject(fb.BufferContext bc, int offset) => 
    ControllerRevisionList._(bc, offset);
}

class ControllerRevisionListBuilder {
  ControllerRevisionListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ControllerRevisionListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ControllerRevisionObjectBuilder>? _items;

  ControllerRevisionListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ControllerRevisionObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSet {
  DaemonSet._(this._bc, this._bcOffset);
  factory DaemonSet(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSet> reader = _DaemonSetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  DaemonSetSpec? get spec => DaemonSetSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  DaemonSetStatus? get status => DaemonSetStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'DaemonSet{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _DaemonSetReader extends fb.TableReader<DaemonSet> {
  const _DaemonSetReader();

  @override
  DaemonSet createObject(fb.BufferContext bc, int offset) => 
    DaemonSet._(bc, offset);
}

class DaemonSetBuilder {
  DaemonSetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final DaemonSetSpecObjectBuilder? _spec;
  final DaemonSetStatusObjectBuilder? _status;

  DaemonSetObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    DaemonSetSpecObjectBuilder? spec,
    DaemonSetStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetCondition {
  DaemonSetCondition._(this._bc, this._bcOffset);
  factory DaemonSetCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetCondition> reader = _DaemonSetConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'DaemonSetCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _DaemonSetConditionReader extends fb.TableReader<DaemonSetCondition> {
  const _DaemonSetConditionReader();

  @override
  DaemonSetCondition createObject(fb.BufferContext bc, int offset) => 
    DaemonSetCondition._(bc, offset);
}

class DaemonSetConditionBuilder {
  DaemonSetConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  DaemonSetConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetList {
  DaemonSetList._(this._bc, this._bcOffset);
  factory DaemonSetList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetList> reader = _DaemonSetListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<DaemonSet>? get items => const fb.ListReader<DaemonSet>(DaemonSet.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DaemonSetList{metadata: ${metadata}, items: ${items}}';
  }
}

class _DaemonSetListReader extends fb.TableReader<DaemonSetList> {
  const _DaemonSetListReader();

  @override
  DaemonSetList createObject(fb.BufferContext bc, int offset) => 
    DaemonSetList._(bc, offset);
}

class DaemonSetListBuilder {
  DaemonSetListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<DaemonSetObjectBuilder>? _items;

  DaemonSetListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<DaemonSetObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetSpec {
  DaemonSetSpec._(this._bc, this._bcOffset);
  factory DaemonSetSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetSpec> reader = _DaemonSetSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.LabelSelector? get selector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 4);
  api_core_v1.PodTemplateSpec? get template => api_core_v1.PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  DaemonSetUpdateStrategy? get updateStrategy => DaemonSetUpdateStrategy.reader.vTableGetNullable(_bc, _bcOffset, 8);
  int get minReadySeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get revisionHistoryLimit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);

  @override
  String toString() {
    return 'DaemonSetSpec{selector: ${selector}, template: ${template}, updateStrategy: ${updateStrategy}, minReadySeconds: ${minReadySeconds}, revisionHistoryLimit: ${revisionHistoryLimit}}';
  }
}

class _DaemonSetSpecReader extends fb.TableReader<DaemonSetSpec> {
  const _DaemonSetSpecReader();

  @override
  DaemonSetSpec createObject(fb.BufferContext bc, int offset) => 
    DaemonSetSpec._(bc, offset);
}

class DaemonSetSpecBuilder {
  DaemonSetSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUpdateStrategyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMinReadySeconds(int? minReadySeconds) {
    fbBuilder.addInt32(3, minReadySeconds);
    return fbBuilder.offset;
  }
  int addRevisionHistoryLimit(int? revisionHistoryLimit) {
    fbBuilder.addInt32(4, revisionHistoryLimit);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetSpecObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _selector;
  final api_core_v1.PodTemplateSpecObjectBuilder? _template;
  final DaemonSetUpdateStrategyObjectBuilder? _updateStrategy;
  final int? _minReadySeconds;
  final int? _revisionHistoryLimit;

  DaemonSetSpecObjectBuilder({
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? selector,
    api_core_v1.PodTemplateSpecObjectBuilder? template,
    DaemonSetUpdateStrategyObjectBuilder? updateStrategy,
    int? minReadySeconds,
    int? revisionHistoryLimit,
  })
      : _selector = selector,
        _template = template,
        _updateStrategy = updateStrategy,
        _minReadySeconds = minReadySeconds,
        _revisionHistoryLimit = revisionHistoryLimit;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector?.getOrCreateOffset(fbBuilder);
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    final int? updateStrategyOffset = _updateStrategy?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, selectorOffset);
    fbBuilder.addOffset(1, templateOffset);
    fbBuilder.addOffset(2, updateStrategyOffset);
    fbBuilder.addInt32(3, _minReadySeconds);
    fbBuilder.addInt32(4, _revisionHistoryLimit);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetStatus {
  DaemonSetStatus._(this._bc, this._bcOffset);
  factory DaemonSetStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetStatus> reader = _DaemonSetStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get currentNumberScheduled => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get numberMisscheduled => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get desiredNumberScheduled => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get numberReady => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get updatedNumberScheduled => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get numberAvailable => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  int get numberUnavailable => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  int get collisionCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  List<DaemonSetCondition>? get conditions => const fb.ListReader<DaemonSetCondition>(DaemonSetCondition.reader).vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'DaemonSetStatus{currentNumberScheduled: ${currentNumberScheduled}, numberMisscheduled: ${numberMisscheduled}, desiredNumberScheduled: ${desiredNumberScheduled}, numberReady: ${numberReady}, observedGeneration: ${observedGeneration}, updatedNumberScheduled: ${updatedNumberScheduled}, numberAvailable: ${numberAvailable}, numberUnavailable: ${numberUnavailable}, collisionCount: ${collisionCount}, conditions: ${conditions}}';
  }
}

class _DaemonSetStatusReader extends fb.TableReader<DaemonSetStatus> {
  const _DaemonSetStatusReader();

  @override
  DaemonSetStatus createObject(fb.BufferContext bc, int offset) => 
    DaemonSetStatus._(bc, offset);
}

class DaemonSetStatusBuilder {
  DaemonSetStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addCurrentNumberScheduled(int? currentNumberScheduled) {
    fbBuilder.addInt32(0, currentNumberScheduled);
    return fbBuilder.offset;
  }
  int addNumberMisscheduled(int? numberMisscheduled) {
    fbBuilder.addInt32(1, numberMisscheduled);
    return fbBuilder.offset;
  }
  int addDesiredNumberScheduled(int? desiredNumberScheduled) {
    fbBuilder.addInt32(2, desiredNumberScheduled);
    return fbBuilder.offset;
  }
  int addNumberReady(int? numberReady) {
    fbBuilder.addInt32(3, numberReady);
    return fbBuilder.offset;
  }
  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(4, observedGeneration);
    return fbBuilder.offset;
  }
  int addUpdatedNumberScheduled(int? updatedNumberScheduled) {
    fbBuilder.addInt32(5, updatedNumberScheduled);
    return fbBuilder.offset;
  }
  int addNumberAvailable(int? numberAvailable) {
    fbBuilder.addInt32(6, numberAvailable);
    return fbBuilder.offset;
  }
  int addNumberUnavailable(int? numberUnavailable) {
    fbBuilder.addInt32(7, numberUnavailable);
    return fbBuilder.offset;
  }
  int addCollisionCount(int? collisionCount) {
    fbBuilder.addInt32(8, collisionCount);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _currentNumberScheduled;
  final int? _numberMisscheduled;
  final int? _desiredNumberScheduled;
  final int? _numberReady;
  final int? _observedGeneration;
  final int? _updatedNumberScheduled;
  final int? _numberAvailable;
  final int? _numberUnavailable;
  final int? _collisionCount;
  final List<DaemonSetConditionObjectBuilder>? _conditions;

  DaemonSetStatusObjectBuilder({
    int? currentNumberScheduled,
    int? numberMisscheduled,
    int? desiredNumberScheduled,
    int? numberReady,
    int? observedGeneration,
    int? updatedNumberScheduled,
    int? numberAvailable,
    int? numberUnavailable,
    int? collisionCount,
    List<DaemonSetConditionObjectBuilder>? conditions,
  })
      : _currentNumberScheduled = currentNumberScheduled,
        _numberMisscheduled = numberMisscheduled,
        _desiredNumberScheduled = desiredNumberScheduled,
        _numberReady = numberReady,
        _observedGeneration = observedGeneration,
        _updatedNumberScheduled = updatedNumberScheduled,
        _numberAvailable = numberAvailable,
        _numberUnavailable = numberUnavailable,
        _collisionCount = collisionCount,
        _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(10);
    fbBuilder.addInt32(0, _currentNumberScheduled);
    fbBuilder.addInt32(1, _numberMisscheduled);
    fbBuilder.addInt32(2, _desiredNumberScheduled);
    fbBuilder.addInt32(3, _numberReady);
    fbBuilder.addInt64(4, _observedGeneration);
    fbBuilder.addInt32(5, _updatedNumberScheduled);
    fbBuilder.addInt32(6, _numberAvailable);
    fbBuilder.addInt32(7, _numberUnavailable);
    fbBuilder.addInt32(8, _collisionCount);
    fbBuilder.addOffset(9, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetUpdateStrategy {
  DaemonSetUpdateStrategy._(this._bc, this._bcOffset);
  factory DaemonSetUpdateStrategy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetUpdateStrategy> reader = _DaemonSetUpdateStrategyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  RollingUpdateDaemonSet? get rollingUpdate => RollingUpdateDaemonSet.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DaemonSetUpdateStrategy{type: ${type}, rollingUpdate: ${rollingUpdate}}';
  }
}

class _DaemonSetUpdateStrategyReader extends fb.TableReader<DaemonSetUpdateStrategy> {
  const _DaemonSetUpdateStrategyReader();

  @override
  DaemonSetUpdateStrategy createObject(fb.BufferContext bc, int offset) => 
    DaemonSetUpdateStrategy._(bc, offset);
}

class DaemonSetUpdateStrategyBuilder {
  DaemonSetUpdateStrategyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRollingUpdateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetUpdateStrategyObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final RollingUpdateDaemonSetObjectBuilder? _rollingUpdate;

  DaemonSetUpdateStrategyObjectBuilder({
    String? type,
    RollingUpdateDaemonSetObjectBuilder? rollingUpdate,
  })
      : _type = type,
        _rollingUpdate = rollingUpdate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? rollingUpdateOffset = _rollingUpdate?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, rollingUpdateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Deployment {
  Deployment._(this._bc, this._bcOffset);
  factory Deployment(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Deployment> reader = _DeploymentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  DeploymentSpec? get spec => DeploymentSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  DeploymentStatus? get status => DeploymentStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Deployment{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _DeploymentReader extends fb.TableReader<Deployment> {
  const _DeploymentReader();

  @override
  Deployment createObject(fb.BufferContext bc, int offset) => 
    Deployment._(bc, offset);
}

class DeploymentBuilder {
  DeploymentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final DeploymentSpecObjectBuilder? _spec;
  final DeploymentStatusObjectBuilder? _status;

  DeploymentObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    DeploymentSpecObjectBuilder? spec,
    DeploymentStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentCondition {
  DeploymentCondition._(this._bc, this._bcOffset);
  factory DeploymentCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentCondition> reader = _DeploymentConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastUpdateTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'DeploymentCondition{type: ${type}, status: ${status}, lastUpdateTime: ${lastUpdateTime}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _DeploymentConditionReader extends fb.TableReader<DeploymentCondition> {
  const _DeploymentConditionReader();

  @override
  DeploymentCondition createObject(fb.BufferContext bc, int offset) => 
    DeploymentCondition._(bc, offset);
}

class DeploymentConditionBuilder {
  DeploymentConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastUpdateTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastUpdateTime;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  DeploymentConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastUpdateTime,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastUpdateTime = lastUpdateTime,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastUpdateTimeOffset = _lastUpdateTime?.getOrCreateOffset(fbBuilder);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastUpdateTimeOffset);
    fbBuilder.addOffset(3, lastTransitionTimeOffset);
    fbBuilder.addOffset(4, reasonOffset);
    fbBuilder.addOffset(5, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentList {
  DeploymentList._(this._bc, this._bcOffset);
  factory DeploymentList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentList> reader = _DeploymentListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Deployment>? get items => const fb.ListReader<Deployment>(Deployment.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DeploymentList{metadata: ${metadata}, items: ${items}}';
  }
}

class _DeploymentListReader extends fb.TableReader<DeploymentList> {
  const _DeploymentListReader();

  @override
  DeploymentList createObject(fb.BufferContext bc, int offset) => 
    DeploymentList._(bc, offset);
}

class DeploymentListBuilder {
  DeploymentListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<DeploymentObjectBuilder>? _items;

  DeploymentListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<DeploymentObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentSpec {
  DeploymentSpec._(this._bc, this._bcOffset);
  factory DeploymentSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentSpec> reader = _DeploymentSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get selector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  api_core_v1.PodTemplateSpec? get template => api_core_v1.PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 8);
  DeploymentStrategy? get strategy => DeploymentStrategy.reader.vTableGetNullable(_bc, _bcOffset, 10);
  int get minReadySeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get revisionHistoryLimit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  bool get paused => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  int get progressDeadlineSeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);

  @override
  String toString() {
    return 'DeploymentSpec{replicas: ${replicas}, selector: ${selector}, template: ${template}, strategy: ${strategy}, minReadySeconds: ${minReadySeconds}, revisionHistoryLimit: ${revisionHistoryLimit}, paused: ${paused}, progressDeadlineSeconds: ${progressDeadlineSeconds}}';
  }
}

class _DeploymentSpecReader extends fb.TableReader<DeploymentSpec> {
  const _DeploymentSpecReader();

  @override
  DeploymentSpec createObject(fb.BufferContext bc, int offset) => 
    DeploymentSpec._(bc, offset);
}

class DeploymentSpecBuilder {
  DeploymentSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStrategyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMinReadySeconds(int? minReadySeconds) {
    fbBuilder.addInt32(4, minReadySeconds);
    return fbBuilder.offset;
  }
  int addRevisionHistoryLimit(int? revisionHistoryLimit) {
    fbBuilder.addInt32(5, revisionHistoryLimit);
    return fbBuilder.offset;
  }
  int addPaused(bool? paused) {
    fbBuilder.addBool(6, paused);
    return fbBuilder.offset;
  }
  int addProgressDeadlineSeconds(int? progressDeadlineSeconds) {
    fbBuilder.addInt32(7, progressDeadlineSeconds);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentSpecObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _selector;
  final api_core_v1.PodTemplateSpecObjectBuilder? _template;
  final DeploymentStrategyObjectBuilder? _strategy;
  final int? _minReadySeconds;
  final int? _revisionHistoryLimit;
  final bool? _paused;
  final int? _progressDeadlineSeconds;

  DeploymentSpecObjectBuilder({
    int? replicas,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? selector,
    api_core_v1.PodTemplateSpecObjectBuilder? template,
    DeploymentStrategyObjectBuilder? strategy,
    int? minReadySeconds,
    int? revisionHistoryLimit,
    bool? paused,
    int? progressDeadlineSeconds,
  })
      : _replicas = replicas,
        _selector = selector,
        _template = template,
        _strategy = strategy,
        _minReadySeconds = minReadySeconds,
        _revisionHistoryLimit = revisionHistoryLimit,
        _paused = paused,
        _progressDeadlineSeconds = progressDeadlineSeconds;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector?.getOrCreateOffset(fbBuilder);
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    final int? strategyOffset = _strategy?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(8);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addOffset(1, selectorOffset);
    fbBuilder.addOffset(2, templateOffset);
    fbBuilder.addOffset(3, strategyOffset);
    fbBuilder.addInt32(4, _minReadySeconds);
    fbBuilder.addInt32(5, _revisionHistoryLimit);
    fbBuilder.addBool(6, _paused);
    fbBuilder.addInt32(7, _progressDeadlineSeconds);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentStatus {
  DeploymentStatus._(this._bc, this._bcOffset);
  factory DeploymentStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentStatus> reader = _DeploymentStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get updatedReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get readyReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get availableReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get unavailableReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  List<DeploymentCondition>? get conditions => const fb.ListReader<DeploymentCondition>(DeploymentCondition.reader).vTableGetNullable(_bc, _bcOffset, 16);
  int get collisionCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);

  @override
  String toString() {
    return 'DeploymentStatus{observedGeneration: ${observedGeneration}, replicas: ${replicas}, updatedReplicas: ${updatedReplicas}, readyReplicas: ${readyReplicas}, availableReplicas: ${availableReplicas}, unavailableReplicas: ${unavailableReplicas}, conditions: ${conditions}, collisionCount: ${collisionCount}}';
  }
}

class _DeploymentStatusReader extends fb.TableReader<DeploymentStatus> {
  const _DeploymentStatusReader();

  @override
  DeploymentStatus createObject(fb.BufferContext bc, int offset) => 
    DeploymentStatus._(bc, offset);
}

class DeploymentStatusBuilder {
  DeploymentStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(0, observedGeneration);
    return fbBuilder.offset;
  }
  int addReplicas(int? replicas) {
    fbBuilder.addInt32(1, replicas);
    return fbBuilder.offset;
  }
  int addUpdatedReplicas(int? updatedReplicas) {
    fbBuilder.addInt32(2, updatedReplicas);
    return fbBuilder.offset;
  }
  int addReadyReplicas(int? readyReplicas) {
    fbBuilder.addInt32(3, readyReplicas);
    return fbBuilder.offset;
  }
  int addAvailableReplicas(int? availableReplicas) {
    fbBuilder.addInt32(4, availableReplicas);
    return fbBuilder.offset;
  }
  int addUnavailableReplicas(int? unavailableReplicas) {
    fbBuilder.addInt32(5, unavailableReplicas);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCollisionCount(int? collisionCount) {
    fbBuilder.addInt32(7, collisionCount);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _observedGeneration;
  final int? _replicas;
  final int? _updatedReplicas;
  final int? _readyReplicas;
  final int? _availableReplicas;
  final int? _unavailableReplicas;
  final List<DeploymentConditionObjectBuilder>? _conditions;
  final int? _collisionCount;

  DeploymentStatusObjectBuilder({
    int? observedGeneration,
    int? replicas,
    int? updatedReplicas,
    int? readyReplicas,
    int? availableReplicas,
    int? unavailableReplicas,
    List<DeploymentConditionObjectBuilder>? conditions,
    int? collisionCount,
  })
      : _observedGeneration = observedGeneration,
        _replicas = replicas,
        _updatedReplicas = updatedReplicas,
        _readyReplicas = readyReplicas,
        _availableReplicas = availableReplicas,
        _unavailableReplicas = unavailableReplicas,
        _conditions = conditions,
        _collisionCount = collisionCount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addInt64(0, _observedGeneration);
    fbBuilder.addInt32(1, _replicas);
    fbBuilder.addInt32(2, _updatedReplicas);
    fbBuilder.addInt32(3, _readyReplicas);
    fbBuilder.addInt32(4, _availableReplicas);
    fbBuilder.addInt32(5, _unavailableReplicas);
    fbBuilder.addOffset(6, conditionsOffset);
    fbBuilder.addInt32(7, _collisionCount);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentStrategy {
  DeploymentStrategy._(this._bc, this._bcOffset);
  factory DeploymentStrategy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentStrategy> reader = _DeploymentStrategyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  RollingUpdateDeployment? get rollingUpdate => RollingUpdateDeployment.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DeploymentStrategy{type: ${type}, rollingUpdate: ${rollingUpdate}}';
  }
}

class _DeploymentStrategyReader extends fb.TableReader<DeploymentStrategy> {
  const _DeploymentStrategyReader();

  @override
  DeploymentStrategy createObject(fb.BufferContext bc, int offset) => 
    DeploymentStrategy._(bc, offset);
}

class DeploymentStrategyBuilder {
  DeploymentStrategyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRollingUpdateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentStrategyObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final RollingUpdateDeploymentObjectBuilder? _rollingUpdate;

  DeploymentStrategyObjectBuilder({
    String? type,
    RollingUpdateDeploymentObjectBuilder? rollingUpdate,
  })
      : _type = type,
        _rollingUpdate = rollingUpdate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? rollingUpdateOffset = _rollingUpdate?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, rollingUpdateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSet {
  ReplicaSet._(this._bc, this._bcOffset);
  factory ReplicaSet(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSet> reader = _ReplicaSetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ReplicaSetSpec? get spec => ReplicaSetSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ReplicaSetStatus? get status => ReplicaSetStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ReplicaSet{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ReplicaSetReader extends fb.TableReader<ReplicaSet> {
  const _ReplicaSetReader();

  @override
  ReplicaSet createObject(fb.BufferContext bc, int offset) => 
    ReplicaSet._(bc, offset);
}

class ReplicaSetBuilder {
  ReplicaSetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ReplicaSetSpecObjectBuilder? _spec;
  final ReplicaSetStatusObjectBuilder? _status;

  ReplicaSetObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ReplicaSetSpecObjectBuilder? spec,
    ReplicaSetStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSetCondition {
  ReplicaSetCondition._(this._bc, this._bcOffset);
  factory ReplicaSetCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSetCondition> reader = _ReplicaSetConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'ReplicaSetCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _ReplicaSetConditionReader extends fb.TableReader<ReplicaSetCondition> {
  const _ReplicaSetConditionReader();

  @override
  ReplicaSetCondition createObject(fb.BufferContext bc, int offset) => 
    ReplicaSetCondition._(bc, offset);
}

class ReplicaSetConditionBuilder {
  ReplicaSetConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  ReplicaSetConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSetList {
  ReplicaSetList._(this._bc, this._bcOffset);
  factory ReplicaSetList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSetList> reader = _ReplicaSetListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ReplicaSet>? get items => const fb.ListReader<ReplicaSet>(ReplicaSet.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ReplicaSetList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ReplicaSetListReader extends fb.TableReader<ReplicaSetList> {
  const _ReplicaSetListReader();

  @override
  ReplicaSetList createObject(fb.BufferContext bc, int offset) => 
    ReplicaSetList._(bc, offset);
}

class ReplicaSetListBuilder {
  ReplicaSetListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ReplicaSetObjectBuilder>? _items;

  ReplicaSetListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ReplicaSetObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSetSpec {
  ReplicaSetSpec._(this._bc, this._bcOffset);
  factory ReplicaSetSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSetSpec> reader = _ReplicaSetSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get minReadySeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get selector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 8);
  api_core_v1.PodTemplateSpec? get template => api_core_v1.PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ReplicaSetSpec{replicas: ${replicas}, minReadySeconds: ${minReadySeconds}, selector: ${selector}, template: ${template}}';
  }
}

class _ReplicaSetSpecReader extends fb.TableReader<ReplicaSetSpec> {
  const _ReplicaSetSpecReader();

  @override
  ReplicaSetSpec createObject(fb.BufferContext bc, int offset) => 
    ReplicaSetSpec._(bc, offset);
}

class ReplicaSetSpecBuilder {
  ReplicaSetSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addMinReadySeconds(int? minReadySeconds) {
    fbBuilder.addInt32(1, minReadySeconds);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetSpecObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final int? _minReadySeconds;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _selector;
  final api_core_v1.PodTemplateSpecObjectBuilder? _template;

  ReplicaSetSpecObjectBuilder({
    int? replicas,
    int? minReadySeconds,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? selector,
    api_core_v1.PodTemplateSpecObjectBuilder? template,
  })
      : _replicas = replicas,
        _minReadySeconds = minReadySeconds,
        _selector = selector,
        _template = template;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector?.getOrCreateOffset(fbBuilder);
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addInt32(1, _minReadySeconds);
    fbBuilder.addOffset(2, selectorOffset);
    fbBuilder.addOffset(3, templateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSetStatus {
  ReplicaSetStatus._(this._bc, this._bcOffset);
  factory ReplicaSetStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSetStatus> reader = _ReplicaSetStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get fullyLabeledReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get readyReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get availableReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  List<ReplicaSetCondition>? get conditions => const fb.ListReader<ReplicaSetCondition>(ReplicaSetCondition.reader).vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'ReplicaSetStatus{replicas: ${replicas}, fullyLabeledReplicas: ${fullyLabeledReplicas}, readyReplicas: ${readyReplicas}, availableReplicas: ${availableReplicas}, observedGeneration: ${observedGeneration}, conditions: ${conditions}}';
  }
}

class _ReplicaSetStatusReader extends fb.TableReader<ReplicaSetStatus> {
  const _ReplicaSetStatusReader();

  @override
  ReplicaSetStatus createObject(fb.BufferContext bc, int offset) => 
    ReplicaSetStatus._(bc, offset);
}

class ReplicaSetStatusBuilder {
  ReplicaSetStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addFullyLabeledReplicas(int? fullyLabeledReplicas) {
    fbBuilder.addInt32(1, fullyLabeledReplicas);
    return fbBuilder.offset;
  }
  int addReadyReplicas(int? readyReplicas) {
    fbBuilder.addInt32(2, readyReplicas);
    return fbBuilder.offset;
  }
  int addAvailableReplicas(int? availableReplicas) {
    fbBuilder.addInt32(3, availableReplicas);
    return fbBuilder.offset;
  }
  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(4, observedGeneration);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final int? _fullyLabeledReplicas;
  final int? _readyReplicas;
  final int? _availableReplicas;
  final int? _observedGeneration;
  final List<ReplicaSetConditionObjectBuilder>? _conditions;

  ReplicaSetStatusObjectBuilder({
    int? replicas,
    int? fullyLabeledReplicas,
    int? readyReplicas,
    int? availableReplicas,
    int? observedGeneration,
    List<ReplicaSetConditionObjectBuilder>? conditions,
  })
      : _replicas = replicas,
        _fullyLabeledReplicas = fullyLabeledReplicas,
        _readyReplicas = readyReplicas,
        _availableReplicas = availableReplicas,
        _observedGeneration = observedGeneration,
        _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(6);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addInt32(1, _fullyLabeledReplicas);
    fbBuilder.addInt32(2, _readyReplicas);
    fbBuilder.addInt32(3, _availableReplicas);
    fbBuilder.addInt64(4, _observedGeneration);
    fbBuilder.addOffset(5, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RollingUpdateDaemonSet {
  RollingUpdateDaemonSet._(this._bc, this._bcOffset);
  factory RollingUpdateDaemonSet(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RollingUpdateDaemonSet> reader = _RollingUpdateDaemonSetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_util_intstr.IntOrString? get maxUnavailable => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_util_intstr.IntOrString? get maxSurge => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'RollingUpdateDaemonSet{maxUnavailable: ${maxUnavailable}, maxSurge: ${maxSurge}}';
  }
}

class _RollingUpdateDaemonSetReader extends fb.TableReader<RollingUpdateDaemonSet> {
  const _RollingUpdateDaemonSetReader();

  @override
  RollingUpdateDaemonSet createObject(fb.BufferContext bc, int offset) => 
    RollingUpdateDaemonSet._(bc, offset);
}

class RollingUpdateDaemonSetBuilder {
  RollingUpdateDaemonSetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMaxUnavailableOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMaxSurgeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RollingUpdateDaemonSetObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _maxUnavailable;
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _maxSurge;

  RollingUpdateDaemonSetObjectBuilder({
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? maxUnavailable,
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? maxSurge,
  })
      : _maxUnavailable = maxUnavailable,
        _maxSurge = maxSurge;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? maxUnavailableOffset = _maxUnavailable?.getOrCreateOffset(fbBuilder);
    final int? maxSurgeOffset = _maxSurge?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, maxUnavailableOffset);
    fbBuilder.addOffset(1, maxSurgeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RollingUpdateDeployment {
  RollingUpdateDeployment._(this._bc, this._bcOffset);
  factory RollingUpdateDeployment(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RollingUpdateDeployment> reader = _RollingUpdateDeploymentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_util_intstr.IntOrString? get maxUnavailable => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_util_intstr.IntOrString? get maxSurge => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'RollingUpdateDeployment{maxUnavailable: ${maxUnavailable}, maxSurge: ${maxSurge}}';
  }
}

class _RollingUpdateDeploymentReader extends fb.TableReader<RollingUpdateDeployment> {
  const _RollingUpdateDeploymentReader();

  @override
  RollingUpdateDeployment createObject(fb.BufferContext bc, int offset) => 
    RollingUpdateDeployment._(bc, offset);
}

class RollingUpdateDeploymentBuilder {
  RollingUpdateDeploymentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMaxUnavailableOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMaxSurgeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RollingUpdateDeploymentObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _maxUnavailable;
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _maxSurge;

  RollingUpdateDeploymentObjectBuilder({
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? maxUnavailable,
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? maxSurge,
  })
      : _maxUnavailable = maxUnavailable,
        _maxSurge = maxSurge;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? maxUnavailableOffset = _maxUnavailable?.getOrCreateOffset(fbBuilder);
    final int? maxSurgeOffset = _maxSurge?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, maxUnavailableOffset);
    fbBuilder.addOffset(1, maxSurgeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RollingUpdateStatefulSetStrategy {
  RollingUpdateStatefulSetStrategy._(this._bc, this._bcOffset);
  factory RollingUpdateStatefulSetStrategy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RollingUpdateStatefulSetStrategy> reader = _RollingUpdateStatefulSetStrategyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get partition => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  apimachinery_pkg_util_intstr.IntOrString? get maxUnavailable => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'RollingUpdateStatefulSetStrategy{partition: ${partition}, maxUnavailable: ${maxUnavailable}}';
  }
}

class _RollingUpdateStatefulSetStrategyReader extends fb.TableReader<RollingUpdateStatefulSetStrategy> {
  const _RollingUpdateStatefulSetStrategyReader();

  @override
  RollingUpdateStatefulSetStrategy createObject(fb.BufferContext bc, int offset) => 
    RollingUpdateStatefulSetStrategy._(bc, offset);
}

class RollingUpdateStatefulSetStrategyBuilder {
  RollingUpdateStatefulSetStrategyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPartition(int? partition) {
    fbBuilder.addInt32(0, partition);
    return fbBuilder.offset;
  }
  int addMaxUnavailableOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RollingUpdateStatefulSetStrategyObjectBuilder extends fb.ObjectBuilder {
  final int? _partition;
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _maxUnavailable;

  RollingUpdateStatefulSetStrategyObjectBuilder({
    int? partition,
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? maxUnavailable,
  })
      : _partition = partition,
        _maxUnavailable = maxUnavailable;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? maxUnavailableOffset = _maxUnavailable?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addInt32(0, _partition);
    fbBuilder.addOffset(1, maxUnavailableOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Scale {
  Scale._(this._bc, this._bcOffset);
  factory Scale(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Scale> reader = _ScaleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ScaleSpec? get spec => ScaleSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ScaleStatus? get status => ScaleStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Scale{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ScaleReader extends fb.TableReader<Scale> {
  const _ScaleReader();

  @override
  Scale createObject(fb.BufferContext bc, int offset) => 
    Scale._(bc, offset);
}

class ScaleBuilder {
  ScaleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScaleObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ScaleSpecObjectBuilder? _spec;
  final ScaleStatusObjectBuilder? _status;

  ScaleObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ScaleSpecObjectBuilder? spec,
    ScaleStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScaleSpec {
  ScaleSpec._(this._bc, this._bcOffset);
  factory ScaleSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScaleSpec> reader = _ScaleSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'ScaleSpec{replicas: ${replicas}}';
  }
}

class _ScaleSpecReader extends fb.TableReader<ScaleSpec> {
  const _ScaleSpecReader();

  @override
  ScaleSpec createObject(fb.BufferContext bc, int offset) => 
    ScaleSpec._(bc, offset);
}

class ScaleSpecBuilder {
  ScaleSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScaleSpecObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;

  ScaleSpecObjectBuilder({
    int? replicas,
  })
      : _replicas = replicas;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt32(0, _replicas);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScaleStatus {
  ScaleStatus._(this._bc, this._bcOffset);
  factory ScaleStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScaleStatus> reader = _ScaleStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<api_apps_v1_beta2_scale_status_.SelectorEntry>? get selector => const fb.ListReader<api_apps_v1_beta2_scale_status_.SelectorEntry>(api_apps_v1_beta2_scale_status_.SelectorEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  String? get targetSelector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ScaleStatus{replicas: ${replicas}, selector: ${selector}, targetSelector: ${targetSelector}}';
  }
}

class _ScaleStatusReader extends fb.TableReader<ScaleStatus> {
  const _ScaleStatusReader();

  @override
  ScaleStatus createObject(fb.BufferContext bc, int offset) => 
    ScaleStatus._(bc, offset);
}

class ScaleStatusBuilder {
  ScaleStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTargetSelectorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScaleStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final List<api_apps_v1_beta2_scale_status_.SelectorEntryObjectBuilder>? _selector;
  final String? _targetSelector;

  ScaleStatusObjectBuilder({
    int? replicas,
    List<api_apps_v1_beta2_scale_status_.SelectorEntryObjectBuilder>? selector,
    String? targetSelector,
  })
      : _replicas = replicas,
        _selector = selector,
        _targetSelector = targetSelector;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector == null ? null
        : fbBuilder.writeList(_selector!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? targetSelectorOffset = _targetSelector == null ? null
        : fbBuilder.writeString(_targetSelector!);
    fbBuilder.startTable(3);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addOffset(1, selectorOffset);
    fbBuilder.addOffset(2, targetSelectorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatefulSet {
  StatefulSet._(this._bc, this._bcOffset);
  factory StatefulSet(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatefulSet> reader = _StatefulSetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  StatefulSetSpec? get spec => StatefulSetSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  StatefulSetStatus? get status => StatefulSetStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'StatefulSet{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _StatefulSetReader extends fb.TableReader<StatefulSet> {
  const _StatefulSetReader();

  @override
  StatefulSet createObject(fb.BufferContext bc, int offset) => 
    StatefulSet._(bc, offset);
}

class StatefulSetBuilder {
  StatefulSetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatefulSetObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final StatefulSetSpecObjectBuilder? _spec;
  final StatefulSetStatusObjectBuilder? _status;

  StatefulSetObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    StatefulSetSpecObjectBuilder? spec,
    StatefulSetStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatefulSetCondition {
  StatefulSetCondition._(this._bc, this._bcOffset);
  factory StatefulSetCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatefulSetCondition> reader = _StatefulSetConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'StatefulSetCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _StatefulSetConditionReader extends fb.TableReader<StatefulSetCondition> {
  const _StatefulSetConditionReader();

  @override
  StatefulSetCondition createObject(fb.BufferContext bc, int offset) => 
    StatefulSetCondition._(bc, offset);
}

class StatefulSetConditionBuilder {
  StatefulSetConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatefulSetConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  StatefulSetConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatefulSetList {
  StatefulSetList._(this._bc, this._bcOffset);
  factory StatefulSetList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatefulSetList> reader = _StatefulSetListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<StatefulSet>? get items => const fb.ListReader<StatefulSet>(StatefulSet.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'StatefulSetList{metadata: ${metadata}, items: ${items}}';
  }
}

class _StatefulSetListReader extends fb.TableReader<StatefulSetList> {
  const _StatefulSetListReader();

  @override
  StatefulSetList createObject(fb.BufferContext bc, int offset) => 
    StatefulSetList._(bc, offset);
}

class StatefulSetListBuilder {
  StatefulSetListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatefulSetListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<StatefulSetObjectBuilder>? _items;

  StatefulSetListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<StatefulSetObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatefulSetOrdinals {
  StatefulSetOrdinals._(this._bc, this._bcOffset);
  factory StatefulSetOrdinals(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatefulSetOrdinals> reader = _StatefulSetOrdinalsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get start => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'StatefulSetOrdinals{start: ${start}}';
  }
}

class _StatefulSetOrdinalsReader extends fb.TableReader<StatefulSetOrdinals> {
  const _StatefulSetOrdinalsReader();

  @override
  StatefulSetOrdinals createObject(fb.BufferContext bc, int offset) => 
    StatefulSetOrdinals._(bc, offset);
}

class StatefulSetOrdinalsBuilder {
  StatefulSetOrdinalsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addStart(int? start) {
    fbBuilder.addInt32(0, start);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatefulSetOrdinalsObjectBuilder extends fb.ObjectBuilder {
  final int? _start;

  StatefulSetOrdinalsObjectBuilder({
    int? start,
  })
      : _start = start;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt32(0, _start);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatefulSetPersistentVolumeClaimRetentionPolicy {
  StatefulSetPersistentVolumeClaimRetentionPolicy._(this._bc, this._bcOffset);
  factory StatefulSetPersistentVolumeClaimRetentionPolicy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatefulSetPersistentVolumeClaimRetentionPolicy> reader = _StatefulSetPersistentVolumeClaimRetentionPolicyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get whenDeleted => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get whenScaled => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'StatefulSetPersistentVolumeClaimRetentionPolicy{whenDeleted: ${whenDeleted}, whenScaled: ${whenScaled}}';
  }
}

class _StatefulSetPersistentVolumeClaimRetentionPolicyReader extends fb.TableReader<StatefulSetPersistentVolumeClaimRetentionPolicy> {
  const _StatefulSetPersistentVolumeClaimRetentionPolicyReader();

  @override
  StatefulSetPersistentVolumeClaimRetentionPolicy createObject(fb.BufferContext bc, int offset) => 
    StatefulSetPersistentVolumeClaimRetentionPolicy._(bc, offset);
}

class StatefulSetPersistentVolumeClaimRetentionPolicyBuilder {
  StatefulSetPersistentVolumeClaimRetentionPolicyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addWhenDeletedOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addWhenScaledOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatefulSetPersistentVolumeClaimRetentionPolicyObjectBuilder extends fb.ObjectBuilder {
  final String? _whenDeleted;
  final String? _whenScaled;

  StatefulSetPersistentVolumeClaimRetentionPolicyObjectBuilder({
    String? whenDeleted,
    String? whenScaled,
  })
      : _whenDeleted = whenDeleted,
        _whenScaled = whenScaled;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? whenDeletedOffset = _whenDeleted == null ? null
        : fbBuilder.writeString(_whenDeleted!);
    final int? whenScaledOffset = _whenScaled == null ? null
        : fbBuilder.writeString(_whenScaled!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, whenDeletedOffset);
    fbBuilder.addOffset(1, whenScaledOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatefulSetSpec {
  StatefulSetSpec._(this._bc, this._bcOffset);
  factory StatefulSetSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatefulSetSpec> reader = _StatefulSetSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get selector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  api_core_v1.PodTemplateSpec? get template => api_core_v1.PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 8);
  List<api_core_v1.PersistentVolumeClaim>? get volumeClaimTemplates => const fb.ListReader<api_core_v1.PersistentVolumeClaim>(api_core_v1.PersistentVolumeClaim.reader).vTableGetNullable(_bc, _bcOffset, 10);
  String? get serviceName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get podManagementPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  StatefulSetUpdateStrategy? get updateStrategy => StatefulSetUpdateStrategy.reader.vTableGetNullable(_bc, _bcOffset, 16);
  int get revisionHistoryLimit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  int get minReadySeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  StatefulSetPersistentVolumeClaimRetentionPolicy? get persistentVolumeClaimRetentionPolicy => StatefulSetPersistentVolumeClaimRetentionPolicy.reader.vTableGetNullable(_bc, _bcOffset, 22);
  StatefulSetOrdinals? get ordinals => StatefulSetOrdinals.reader.vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'StatefulSetSpec{replicas: ${replicas}, selector: ${selector}, template: ${template}, volumeClaimTemplates: ${volumeClaimTemplates}, serviceName: ${serviceName}, podManagementPolicy: ${podManagementPolicy}, updateStrategy: ${updateStrategy}, revisionHistoryLimit: ${revisionHistoryLimit}, minReadySeconds: ${minReadySeconds}, persistentVolumeClaimRetentionPolicy: ${persistentVolumeClaimRetentionPolicy}, ordinals: ${ordinals}}';
  }
}

class _StatefulSetSpecReader extends fb.TableReader<StatefulSetSpec> {
  const _StatefulSetSpecReader();

  @override
  StatefulSetSpec createObject(fb.BufferContext bc, int offset) => 
    StatefulSetSpec._(bc, offset);
}

class StatefulSetSpecBuilder {
  StatefulSetSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addVolumeClaimTemplatesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addServiceNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPodManagementPolicyOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addUpdateStrategyOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addRevisionHistoryLimit(int? revisionHistoryLimit) {
    fbBuilder.addInt32(7, revisionHistoryLimit);
    return fbBuilder.offset;
  }
  int addMinReadySeconds(int? minReadySeconds) {
    fbBuilder.addInt32(8, minReadySeconds);
    return fbBuilder.offset;
  }
  int addPersistentVolumeClaimRetentionPolicyOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOrdinalsOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatefulSetSpecObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _selector;
  final api_core_v1.PodTemplateSpecObjectBuilder? _template;
  final List<api_core_v1.PersistentVolumeClaimObjectBuilder>? _volumeClaimTemplates;
  final String? _serviceName;
  final String? _podManagementPolicy;
  final StatefulSetUpdateStrategyObjectBuilder? _updateStrategy;
  final int? _revisionHistoryLimit;
  final int? _minReadySeconds;
  final StatefulSetPersistentVolumeClaimRetentionPolicyObjectBuilder? _persistentVolumeClaimRetentionPolicy;
  final StatefulSetOrdinalsObjectBuilder? _ordinals;

  StatefulSetSpecObjectBuilder({
    int? replicas,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? selector,
    api_core_v1.PodTemplateSpecObjectBuilder? template,
    List<api_core_v1.PersistentVolumeClaimObjectBuilder>? volumeClaimTemplates,
    String? serviceName,
    String? podManagementPolicy,
    StatefulSetUpdateStrategyObjectBuilder? updateStrategy,
    int? revisionHistoryLimit,
    int? minReadySeconds,
    StatefulSetPersistentVolumeClaimRetentionPolicyObjectBuilder? persistentVolumeClaimRetentionPolicy,
    StatefulSetOrdinalsObjectBuilder? ordinals,
  })
      : _replicas = replicas,
        _selector = selector,
        _template = template,
        _volumeClaimTemplates = volumeClaimTemplates,
        _serviceName = serviceName,
        _podManagementPolicy = podManagementPolicy,
        _updateStrategy = updateStrategy,
        _revisionHistoryLimit = revisionHistoryLimit,
        _minReadySeconds = minReadySeconds,
        _persistentVolumeClaimRetentionPolicy = persistentVolumeClaimRetentionPolicy,
        _ordinals = ordinals;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector?.getOrCreateOffset(fbBuilder);
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    final int? volumeClaimTemplatesOffset = _volumeClaimTemplates == null ? null
        : fbBuilder.writeList(_volumeClaimTemplates!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? serviceNameOffset = _serviceName == null ? null
        : fbBuilder.writeString(_serviceName!);
    final int? podManagementPolicyOffset = _podManagementPolicy == null ? null
        : fbBuilder.writeString(_podManagementPolicy!);
    final int? updateStrategyOffset = _updateStrategy?.getOrCreateOffset(fbBuilder);
    final int? persistentVolumeClaimRetentionPolicyOffset = _persistentVolumeClaimRetentionPolicy?.getOrCreateOffset(fbBuilder);
    final int? ordinalsOffset = _ordinals?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(11);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addOffset(1, selectorOffset);
    fbBuilder.addOffset(2, templateOffset);
    fbBuilder.addOffset(3, volumeClaimTemplatesOffset);
    fbBuilder.addOffset(4, serviceNameOffset);
    fbBuilder.addOffset(5, podManagementPolicyOffset);
    fbBuilder.addOffset(6, updateStrategyOffset);
    fbBuilder.addInt32(7, _revisionHistoryLimit);
    fbBuilder.addInt32(8, _minReadySeconds);
    fbBuilder.addOffset(9, persistentVolumeClaimRetentionPolicyOffset);
    fbBuilder.addOffset(10, ordinalsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatefulSetStatus {
  StatefulSetStatus._(this._bc, this._bcOffset);
  factory StatefulSetStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatefulSetStatus> reader = _StatefulSetStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get readyReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get currentReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get updatedReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  String? get currentRevision => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get updateRevision => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  int get collisionCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  List<StatefulSetCondition>? get conditions => const fb.ListReader<StatefulSetCondition>(StatefulSetCondition.reader).vTableGetNullable(_bc, _bcOffset, 20);
  int get availableReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 22, 0);

  @override
  String toString() {
    return 'StatefulSetStatus{observedGeneration: ${observedGeneration}, replicas: ${replicas}, readyReplicas: ${readyReplicas}, currentReplicas: ${currentReplicas}, updatedReplicas: ${updatedReplicas}, currentRevision: ${currentRevision}, updateRevision: ${updateRevision}, collisionCount: ${collisionCount}, conditions: ${conditions}, availableReplicas: ${availableReplicas}}';
  }
}

class _StatefulSetStatusReader extends fb.TableReader<StatefulSetStatus> {
  const _StatefulSetStatusReader();

  @override
  StatefulSetStatus createObject(fb.BufferContext bc, int offset) => 
    StatefulSetStatus._(bc, offset);
}

class StatefulSetStatusBuilder {
  StatefulSetStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(0, observedGeneration);
    return fbBuilder.offset;
  }
  int addReplicas(int? replicas) {
    fbBuilder.addInt32(1, replicas);
    return fbBuilder.offset;
  }
  int addReadyReplicas(int? readyReplicas) {
    fbBuilder.addInt32(2, readyReplicas);
    return fbBuilder.offset;
  }
  int addCurrentReplicas(int? currentReplicas) {
    fbBuilder.addInt32(3, currentReplicas);
    return fbBuilder.offset;
  }
  int addUpdatedReplicas(int? updatedReplicas) {
    fbBuilder.addInt32(4, updatedReplicas);
    return fbBuilder.offset;
  }
  int addCurrentRevisionOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addUpdateRevisionOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCollisionCount(int? collisionCount) {
    fbBuilder.addInt32(7, collisionCount);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addAvailableReplicas(int? availableReplicas) {
    fbBuilder.addInt32(9, availableReplicas);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatefulSetStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _observedGeneration;
  final int? _replicas;
  final int? _readyReplicas;
  final int? _currentReplicas;
  final int? _updatedReplicas;
  final String? _currentRevision;
  final String? _updateRevision;
  final int? _collisionCount;
  final List<StatefulSetConditionObjectBuilder>? _conditions;
  final int? _availableReplicas;

  StatefulSetStatusObjectBuilder({
    int? observedGeneration,
    int? replicas,
    int? readyReplicas,
    int? currentReplicas,
    int? updatedReplicas,
    String? currentRevision,
    String? updateRevision,
    int? collisionCount,
    List<StatefulSetConditionObjectBuilder>? conditions,
    int? availableReplicas,
  })
      : _observedGeneration = observedGeneration,
        _replicas = replicas,
        _readyReplicas = readyReplicas,
        _currentReplicas = currentReplicas,
        _updatedReplicas = updatedReplicas,
        _currentRevision = currentRevision,
        _updateRevision = updateRevision,
        _collisionCount = collisionCount,
        _conditions = conditions,
        _availableReplicas = availableReplicas;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? currentRevisionOffset = _currentRevision == null ? null
        : fbBuilder.writeString(_currentRevision!);
    final int? updateRevisionOffset = _updateRevision == null ? null
        : fbBuilder.writeString(_updateRevision!);
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(10);
    fbBuilder.addInt64(0, _observedGeneration);
    fbBuilder.addInt32(1, _replicas);
    fbBuilder.addInt32(2, _readyReplicas);
    fbBuilder.addInt32(3, _currentReplicas);
    fbBuilder.addInt32(4, _updatedReplicas);
    fbBuilder.addOffset(5, currentRevisionOffset);
    fbBuilder.addOffset(6, updateRevisionOffset);
    fbBuilder.addInt32(7, _collisionCount);
    fbBuilder.addOffset(8, conditionsOffset);
    fbBuilder.addInt32(9, _availableReplicas);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatefulSetUpdateStrategy {
  StatefulSetUpdateStrategy._(this._bc, this._bcOffset);
  factory StatefulSetUpdateStrategy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatefulSetUpdateStrategy> reader = _StatefulSetUpdateStrategyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  RollingUpdateStatefulSetStrategy? get rollingUpdate => RollingUpdateStatefulSetStrategy.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'StatefulSetUpdateStrategy{type: ${type}, rollingUpdate: ${rollingUpdate}}';
  }
}

class _StatefulSetUpdateStrategyReader extends fb.TableReader<StatefulSetUpdateStrategy> {
  const _StatefulSetUpdateStrategyReader();

  @override
  StatefulSetUpdateStrategy createObject(fb.BufferContext bc, int offset) => 
    StatefulSetUpdateStrategy._(bc, offset);
}

class StatefulSetUpdateStrategyBuilder {
  StatefulSetUpdateStrategyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRollingUpdateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatefulSetUpdateStrategyObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final RollingUpdateStatefulSetStrategyObjectBuilder? _rollingUpdate;

  StatefulSetUpdateStrategyObjectBuilder({
    String? type,
    RollingUpdateStatefulSetStrategyObjectBuilder? rollingUpdate,
  })
      : _type = type,
        _rollingUpdate = rollingUpdate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? rollingUpdateOffset = _rollingUpdate?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, rollingUpdateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
