// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.authorization.v1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.authorization.v1.subject_access_review_spec__generated.dart' as api_authorization_v1_subject_access_review_spec_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class ExtraValue {
  ExtraValue._(this._bc, this._bcOffset);
  factory ExtraValue(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ExtraValue> reader = _ExtraValueReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get items => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ExtraValue{items: ${items}}';
  }
}

class _ExtraValueReader extends fb.TableReader<ExtraValue> {
  const _ExtraValueReader();

  @override
  ExtraValue createObject(fb.BufferContext bc, int offset) => 
    ExtraValue._(bc, offset);
}

class ExtraValueBuilder {
  ExtraValueBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ExtraValueObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _items;

  ExtraValueObjectBuilder({
    List<String>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LocalSubjectAccessReview {
  LocalSubjectAccessReview._(this._bc, this._bcOffset);
  factory LocalSubjectAccessReview(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LocalSubjectAccessReview> reader = _LocalSubjectAccessReviewReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  SubjectAccessReviewSpec? get spec => SubjectAccessReviewSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  SubjectAccessReviewStatus? get status => SubjectAccessReviewStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'LocalSubjectAccessReview{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _LocalSubjectAccessReviewReader extends fb.TableReader<LocalSubjectAccessReview> {
  const _LocalSubjectAccessReviewReader();

  @override
  LocalSubjectAccessReview createObject(fb.BufferContext bc, int offset) => 
    LocalSubjectAccessReview._(bc, offset);
}

class LocalSubjectAccessReviewBuilder {
  LocalSubjectAccessReviewBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LocalSubjectAccessReviewObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final SubjectAccessReviewSpecObjectBuilder? _spec;
  final SubjectAccessReviewStatusObjectBuilder? _status;

  LocalSubjectAccessReviewObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    SubjectAccessReviewSpecObjectBuilder? spec,
    SubjectAccessReviewStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NonResourceAttributes {
  NonResourceAttributes._(this._bc, this._bcOffset);
  factory NonResourceAttributes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NonResourceAttributes> reader = _NonResourceAttributesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get verb => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NonResourceAttributes{path: ${path}, verb: ${verb}}';
  }
}

class _NonResourceAttributesReader extends fb.TableReader<NonResourceAttributes> {
  const _NonResourceAttributesReader();

  @override
  NonResourceAttributes createObject(fb.BufferContext bc, int offset) => 
    NonResourceAttributes._(bc, offset);
}

class NonResourceAttributesBuilder {
  NonResourceAttributesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVerbOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NonResourceAttributesObjectBuilder extends fb.ObjectBuilder {
  final String? _path;
  final String? _verb;

  NonResourceAttributesObjectBuilder({
    String? path,
    String? verb,
  })
      : _path = path,
        _verb = verb;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    final int? verbOffset = _verb == null ? null
        : fbBuilder.writeString(_verb!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pathOffset);
    fbBuilder.addOffset(1, verbOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NonResourceRule {
  NonResourceRule._(this._bc, this._bcOffset);
  factory NonResourceRule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NonResourceRule> reader = _NonResourceRuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get verbs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get nonResourceUrls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NonResourceRule{verbs: ${verbs}, nonResourceUrls: ${nonResourceUrls}}';
  }
}

class _NonResourceRuleReader extends fb.TableReader<NonResourceRule> {
  const _NonResourceRuleReader();

  @override
  NonResourceRule createObject(fb.BufferContext bc, int offset) => 
    NonResourceRule._(bc, offset);
}

class NonResourceRuleBuilder {
  NonResourceRuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addVerbsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNonResourceUrlsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NonResourceRuleObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _verbs;
  final List<String>? _nonResourceUrls;

  NonResourceRuleObjectBuilder({
    List<String>? verbs,
    List<String>? nonResourceUrls,
  })
      : _verbs = verbs,
        _nonResourceUrls = nonResourceUrls;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? verbsOffset = _verbs == null ? null
        : fbBuilder.writeList(_verbs!.map(fbBuilder.writeString).toList());
    final int? nonResourceUrlsOffset = _nonResourceUrls == null ? null
        : fbBuilder.writeList(_nonResourceUrls!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, verbsOffset);
    fbBuilder.addOffset(1, nonResourceUrlsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceAttributes {
  ResourceAttributes._(this._bc, this._bcOffset);
  factory ResourceAttributes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceAttributes> reader = _ResourceAttributesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get verb => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get resource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get subresource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'ResourceAttributes{namespace: ${namespace}, verb: ${verb}, group: ${group}, version: ${version}, resource: ${resource}, subresource: ${subresource}, name: ${name}}';
  }
}

class _ResourceAttributesReader extends fb.TableReader<ResourceAttributes> {
  const _ResourceAttributesReader();

  @override
  ResourceAttributes createObject(fb.BufferContext bc, int offset) => 
    ResourceAttributes._(bc, offset);
}

class ResourceAttributesBuilder {
  ResourceAttributesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVerbOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addResourceOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSubresourceOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceAttributesObjectBuilder extends fb.ObjectBuilder {
  final String? _namespace;
  final String? _verb;
  final String? _group;
  final String? _version;
  final String? _resource;
  final String? _subresource;
  final String? _name;

  ResourceAttributesObjectBuilder({
    String? namespace,
    String? verb,
    String? group,
    String? version,
    String? resource,
    String? subresource,
    String? name,
  })
      : _namespace = namespace,
        _verb = verb,
        _group = group,
        _version = version,
        _resource = resource,
        _subresource = subresource,
        _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    final int? verbOffset = _verb == null ? null
        : fbBuilder.writeString(_verb!);
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    final int? resourceOffset = _resource == null ? null
        : fbBuilder.writeString(_resource!);
    final int? subresourceOffset = _subresource == null ? null
        : fbBuilder.writeString(_subresource!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, namespaceOffset);
    fbBuilder.addOffset(1, verbOffset);
    fbBuilder.addOffset(2, groupOffset);
    fbBuilder.addOffset(3, versionOffset);
    fbBuilder.addOffset(4, resourceOffset);
    fbBuilder.addOffset(5, subresourceOffset);
    fbBuilder.addOffset(6, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceRule {
  ResourceRule._(this._bc, this._bcOffset);
  factory ResourceRule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceRule> reader = _ResourceRuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get verbs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get apiGroups => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get resources => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  List<String>? get resourceNames => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ResourceRule{verbs: ${verbs}, apiGroups: ${apiGroups}, resources: ${resources}, resourceNames: ${resourceNames}}';
  }
}

class _ResourceRuleReader extends fb.TableReader<ResourceRule> {
  const _ResourceRuleReader();

  @override
  ResourceRule createObject(fb.BufferContext bc, int offset) => 
    ResourceRule._(bc, offset);
}

class ResourceRuleBuilder {
  ResourceRuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addVerbsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addApiGroupsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addResourcesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addResourceNamesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceRuleObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _verbs;
  final List<String>? _apiGroups;
  final List<String>? _resources;
  final List<String>? _resourceNames;

  ResourceRuleObjectBuilder({
    List<String>? verbs,
    List<String>? apiGroups,
    List<String>? resources,
    List<String>? resourceNames,
  })
      : _verbs = verbs,
        _apiGroups = apiGroups,
        _resources = resources,
        _resourceNames = resourceNames;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? verbsOffset = _verbs == null ? null
        : fbBuilder.writeList(_verbs!.map(fbBuilder.writeString).toList());
    final int? apiGroupsOffset = _apiGroups == null ? null
        : fbBuilder.writeList(_apiGroups!.map(fbBuilder.writeString).toList());
    final int? resourcesOffset = _resources == null ? null
        : fbBuilder.writeList(_resources!.map(fbBuilder.writeString).toList());
    final int? resourceNamesOffset = _resourceNames == null ? null
        : fbBuilder.writeList(_resourceNames!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, verbsOffset);
    fbBuilder.addOffset(1, apiGroupsOffset);
    fbBuilder.addOffset(2, resourcesOffset);
    fbBuilder.addOffset(3, resourceNamesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SelfSubjectAccessReview {
  SelfSubjectAccessReview._(this._bc, this._bcOffset);
  factory SelfSubjectAccessReview(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SelfSubjectAccessReview> reader = _SelfSubjectAccessReviewReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  SelfSubjectAccessReviewSpec? get spec => SelfSubjectAccessReviewSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  SubjectAccessReviewStatus? get status => SubjectAccessReviewStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'SelfSubjectAccessReview{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _SelfSubjectAccessReviewReader extends fb.TableReader<SelfSubjectAccessReview> {
  const _SelfSubjectAccessReviewReader();

  @override
  SelfSubjectAccessReview createObject(fb.BufferContext bc, int offset) => 
    SelfSubjectAccessReview._(bc, offset);
}

class SelfSubjectAccessReviewBuilder {
  SelfSubjectAccessReviewBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SelfSubjectAccessReviewObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final SelfSubjectAccessReviewSpecObjectBuilder? _spec;
  final SubjectAccessReviewStatusObjectBuilder? _status;

  SelfSubjectAccessReviewObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    SelfSubjectAccessReviewSpecObjectBuilder? spec,
    SubjectAccessReviewStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SelfSubjectAccessReviewSpec {
  SelfSubjectAccessReviewSpec._(this._bc, this._bcOffset);
  factory SelfSubjectAccessReviewSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SelfSubjectAccessReviewSpec> reader = _SelfSubjectAccessReviewSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ResourceAttributes? get resourceAttributes => ResourceAttributes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  NonResourceAttributes? get nonResourceAttributes => NonResourceAttributes.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'SelfSubjectAccessReviewSpec{resourceAttributes: ${resourceAttributes}, nonResourceAttributes: ${nonResourceAttributes}}';
  }
}

class _SelfSubjectAccessReviewSpecReader extends fb.TableReader<SelfSubjectAccessReviewSpec> {
  const _SelfSubjectAccessReviewSpecReader();

  @override
  SelfSubjectAccessReviewSpec createObject(fb.BufferContext bc, int offset) => 
    SelfSubjectAccessReviewSpec._(bc, offset);
}

class SelfSubjectAccessReviewSpecBuilder {
  SelfSubjectAccessReviewSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addResourceAttributesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNonResourceAttributesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SelfSubjectAccessReviewSpecObjectBuilder extends fb.ObjectBuilder {
  final ResourceAttributesObjectBuilder? _resourceAttributes;
  final NonResourceAttributesObjectBuilder? _nonResourceAttributes;

  SelfSubjectAccessReviewSpecObjectBuilder({
    ResourceAttributesObjectBuilder? resourceAttributes,
    NonResourceAttributesObjectBuilder? nonResourceAttributes,
  })
      : _resourceAttributes = resourceAttributes,
        _nonResourceAttributes = nonResourceAttributes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? resourceAttributesOffset = _resourceAttributes?.getOrCreateOffset(fbBuilder);
    final int? nonResourceAttributesOffset = _nonResourceAttributes?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, resourceAttributesOffset);
    fbBuilder.addOffset(1, nonResourceAttributesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SelfSubjectRulesReview {
  SelfSubjectRulesReview._(this._bc, this._bcOffset);
  factory SelfSubjectRulesReview(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SelfSubjectRulesReview> reader = _SelfSubjectRulesReviewReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  SelfSubjectRulesReviewSpec? get spec => SelfSubjectRulesReviewSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  SubjectRulesReviewStatus? get status => SubjectRulesReviewStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'SelfSubjectRulesReview{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _SelfSubjectRulesReviewReader extends fb.TableReader<SelfSubjectRulesReview> {
  const _SelfSubjectRulesReviewReader();

  @override
  SelfSubjectRulesReview createObject(fb.BufferContext bc, int offset) => 
    SelfSubjectRulesReview._(bc, offset);
}

class SelfSubjectRulesReviewBuilder {
  SelfSubjectRulesReviewBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SelfSubjectRulesReviewObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final SelfSubjectRulesReviewSpecObjectBuilder? _spec;
  final SubjectRulesReviewStatusObjectBuilder? _status;

  SelfSubjectRulesReviewObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    SelfSubjectRulesReviewSpecObjectBuilder? spec,
    SubjectRulesReviewStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SelfSubjectRulesReviewSpec {
  SelfSubjectRulesReviewSpec._(this._bc, this._bcOffset);
  factory SelfSubjectRulesReviewSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SelfSubjectRulesReviewSpec> reader = _SelfSubjectRulesReviewSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SelfSubjectRulesReviewSpec{namespace: ${namespace}}';
  }
}

class _SelfSubjectRulesReviewSpecReader extends fb.TableReader<SelfSubjectRulesReviewSpec> {
  const _SelfSubjectRulesReviewSpecReader();

  @override
  SelfSubjectRulesReviewSpec createObject(fb.BufferContext bc, int offset) => 
    SelfSubjectRulesReviewSpec._(bc, offset);
}

class SelfSubjectRulesReviewSpecBuilder {
  SelfSubjectRulesReviewSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SelfSubjectRulesReviewSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _namespace;

  SelfSubjectRulesReviewSpecObjectBuilder({
    String? namespace,
  })
      : _namespace = namespace;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, namespaceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SubjectAccessReview {
  SubjectAccessReview._(this._bc, this._bcOffset);
  factory SubjectAccessReview(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SubjectAccessReview> reader = _SubjectAccessReviewReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  SubjectAccessReviewSpec? get spec => SubjectAccessReviewSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  SubjectAccessReviewStatus? get status => SubjectAccessReviewStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'SubjectAccessReview{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _SubjectAccessReviewReader extends fb.TableReader<SubjectAccessReview> {
  const _SubjectAccessReviewReader();

  @override
  SubjectAccessReview createObject(fb.BufferContext bc, int offset) => 
    SubjectAccessReview._(bc, offset);
}

class SubjectAccessReviewBuilder {
  SubjectAccessReviewBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SubjectAccessReviewObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final SubjectAccessReviewSpecObjectBuilder? _spec;
  final SubjectAccessReviewStatusObjectBuilder? _status;

  SubjectAccessReviewObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    SubjectAccessReviewSpecObjectBuilder? spec,
    SubjectAccessReviewStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SubjectAccessReviewSpec {
  SubjectAccessReviewSpec._(this._bc, this._bcOffset);
  factory SubjectAccessReviewSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SubjectAccessReviewSpec> reader = _SubjectAccessReviewSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ResourceAttributes? get resourceAttributes => ResourceAttributes.reader.vTableGetNullable(_bc, _bcOffset, 4);
  NonResourceAttributes? get nonResourceAttributes => NonResourceAttributes.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get user => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<String>? get groups => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);
  List<api_authorization_v1_subject_access_review_spec_.ExtraEntry>? get extra => const fb.ListReader<api_authorization_v1_subject_access_review_spec_.ExtraEntry>(api_authorization_v1_subject_access_review_spec_.ExtraEntry.reader).vTableGetNullable(_bc, _bcOffset, 12);
  String? get uid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'SubjectAccessReviewSpec{resourceAttributes: ${resourceAttributes}, nonResourceAttributes: ${nonResourceAttributes}, user: ${user}, groups: ${groups}, extra: ${extra}, uid: ${uid}}';
  }
}

class _SubjectAccessReviewSpecReader extends fb.TableReader<SubjectAccessReviewSpec> {
  const _SubjectAccessReviewSpecReader();

  @override
  SubjectAccessReviewSpec createObject(fb.BufferContext bc, int offset) => 
    SubjectAccessReviewSpec._(bc, offset);
}

class SubjectAccessReviewSpecBuilder {
  SubjectAccessReviewSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addResourceAttributesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNonResourceAttributesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUserOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addGroupsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addExtraOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addUidOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SubjectAccessReviewSpecObjectBuilder extends fb.ObjectBuilder {
  final ResourceAttributesObjectBuilder? _resourceAttributes;
  final NonResourceAttributesObjectBuilder? _nonResourceAttributes;
  final String? _user;
  final List<String>? _groups;
  final List<api_authorization_v1_subject_access_review_spec_.ExtraEntryObjectBuilder>? _extra;
  final String? _uid;

  SubjectAccessReviewSpecObjectBuilder({
    ResourceAttributesObjectBuilder? resourceAttributes,
    NonResourceAttributesObjectBuilder? nonResourceAttributes,
    String? user,
    List<String>? groups,
    List<api_authorization_v1_subject_access_review_spec_.ExtraEntryObjectBuilder>? extra,
    String? uid,
  })
      : _resourceAttributes = resourceAttributes,
        _nonResourceAttributes = nonResourceAttributes,
        _user = user,
        _groups = groups,
        _extra = extra,
        _uid = uid;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? resourceAttributesOffset = _resourceAttributes?.getOrCreateOffset(fbBuilder);
    final int? nonResourceAttributesOffset = _nonResourceAttributes?.getOrCreateOffset(fbBuilder);
    final int? userOffset = _user == null ? null
        : fbBuilder.writeString(_user!);
    final int? groupsOffset = _groups == null ? null
        : fbBuilder.writeList(_groups!.map(fbBuilder.writeString).toList());
    final int? extraOffset = _extra == null ? null
        : fbBuilder.writeList(_extra!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? uidOffset = _uid == null ? null
        : fbBuilder.writeString(_uid!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, resourceAttributesOffset);
    fbBuilder.addOffset(1, nonResourceAttributesOffset);
    fbBuilder.addOffset(2, userOffset);
    fbBuilder.addOffset(3, groupsOffset);
    fbBuilder.addOffset(4, extraOffset);
    fbBuilder.addOffset(5, uidOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SubjectAccessReviewStatus {
  SubjectAccessReviewStatus._(this._bc, this._bcOffset);
  factory SubjectAccessReviewStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SubjectAccessReviewStatus> reader = _SubjectAccessReviewStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get allowed => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  bool get denied => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get evaluationError => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'SubjectAccessReviewStatus{allowed: ${allowed}, denied: ${denied}, reason: ${reason}, evaluationError: ${evaluationError}}';
  }
}

class _SubjectAccessReviewStatusReader extends fb.TableReader<SubjectAccessReviewStatus> {
  const _SubjectAccessReviewStatusReader();

  @override
  SubjectAccessReviewStatus createObject(fb.BufferContext bc, int offset) => 
    SubjectAccessReviewStatus._(bc, offset);
}

class SubjectAccessReviewStatusBuilder {
  SubjectAccessReviewStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addAllowed(bool? allowed) {
    fbBuilder.addBool(0, allowed);
    return fbBuilder.offset;
  }
  int addDenied(bool? denied) {
    fbBuilder.addBool(1, denied);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addEvaluationErrorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SubjectAccessReviewStatusObjectBuilder extends fb.ObjectBuilder {
  final bool? _allowed;
  final bool? _denied;
  final String? _reason;
  final String? _evaluationError;

  SubjectAccessReviewStatusObjectBuilder({
    bool? allowed,
    bool? denied,
    String? reason,
    String? evaluationError,
  })
      : _allowed = allowed,
        _denied = denied,
        _reason = reason,
        _evaluationError = evaluationError;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? evaluationErrorOffset = _evaluationError == null ? null
        : fbBuilder.writeString(_evaluationError!);
    fbBuilder.startTable(4);
    fbBuilder.addBool(0, _allowed);
    fbBuilder.addBool(1, _denied);
    fbBuilder.addOffset(2, reasonOffset);
    fbBuilder.addOffset(3, evaluationErrorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SubjectRulesReviewStatus {
  SubjectRulesReviewStatus._(this._bc, this._bcOffset);
  factory SubjectRulesReviewStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SubjectRulesReviewStatus> reader = _SubjectRulesReviewStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ResourceRule>? get resourceRules => const fb.ListReader<ResourceRule>(ResourceRule.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<NonResourceRule>? get nonResourceRules => const fb.ListReader<NonResourceRule>(NonResourceRule.reader).vTableGetNullable(_bc, _bcOffset, 6);
  bool get incomplete => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  String? get evaluationError => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'SubjectRulesReviewStatus{resourceRules: ${resourceRules}, nonResourceRules: ${nonResourceRules}, incomplete: ${incomplete}, evaluationError: ${evaluationError}}';
  }
}

class _SubjectRulesReviewStatusReader extends fb.TableReader<SubjectRulesReviewStatus> {
  const _SubjectRulesReviewStatusReader();

  @override
  SubjectRulesReviewStatus createObject(fb.BufferContext bc, int offset) => 
    SubjectRulesReviewStatus._(bc, offset);
}

class SubjectRulesReviewStatusBuilder {
  SubjectRulesReviewStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addResourceRulesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNonResourceRulesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIncomplete(bool? incomplete) {
    fbBuilder.addBool(2, incomplete);
    return fbBuilder.offset;
  }
  int addEvaluationErrorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SubjectRulesReviewStatusObjectBuilder extends fb.ObjectBuilder {
  final List<ResourceRuleObjectBuilder>? _resourceRules;
  final List<NonResourceRuleObjectBuilder>? _nonResourceRules;
  final bool? _incomplete;
  final String? _evaluationError;

  SubjectRulesReviewStatusObjectBuilder({
    List<ResourceRuleObjectBuilder>? resourceRules,
    List<NonResourceRuleObjectBuilder>? nonResourceRules,
    bool? incomplete,
    String? evaluationError,
  })
      : _resourceRules = resourceRules,
        _nonResourceRules = nonResourceRules,
        _incomplete = incomplete,
        _evaluationError = evaluationError;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? resourceRulesOffset = _resourceRules == null ? null
        : fbBuilder.writeList(_resourceRules!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? nonResourceRulesOffset = _nonResourceRules == null ? null
        : fbBuilder.writeList(_nonResourceRules!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? evaluationErrorOffset = _evaluationError == null ? null
        : fbBuilder.writeString(_evaluationError!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, resourceRulesOffset);
    fbBuilder.addOffset(1, nonResourceRulesOffset);
    fbBuilder.addBool(2, _incomplete);
    fbBuilder.addOffset(3, evaluationErrorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
