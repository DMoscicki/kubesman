// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.batch.v1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.batch.v1_beta1_generated.dart' as api_batch_v1_beta1;
import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

import './generated_api.batch.v1_generated.dart' as api_batch_v1;
import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class CronJob {
  CronJob._(this._bc, this._bcOffset);
  factory CronJob(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CronJob> reader = _CronJobReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  CronJobSpec? get spec => CronJobSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  CronJobStatus? get status => CronJobStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'CronJob{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _CronJobReader extends fb.TableReader<CronJob> {
  const _CronJobReader();

  @override
  CronJob createObject(fb.BufferContext bc, int offset) => 
    CronJob._(bc, offset);
}

class CronJobBuilder {
  CronJobBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CronJobObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final CronJobSpecObjectBuilder? _spec;
  final CronJobStatusObjectBuilder? _status;

  CronJobObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    CronJobSpecObjectBuilder? spec,
    CronJobStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CronJobList {
  CronJobList._(this._bc, this._bcOffset);
  factory CronJobList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CronJobList> reader = _CronJobListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<CronJob>? get items => const fb.ListReader<CronJob>(CronJob.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'CronJobList{metadata: ${metadata}, items: ${items}}';
  }
}

class _CronJobListReader extends fb.TableReader<CronJobList> {
  const _CronJobListReader();

  @override
  CronJobList createObject(fb.BufferContext bc, int offset) => 
    CronJobList._(bc, offset);
}

class CronJobListBuilder {
  CronJobListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CronJobListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<CronJobObjectBuilder>? _items;

  CronJobListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<CronJobObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CronJobSpec {
  CronJobSpec._(this._bc, this._bcOffset);
  factory CronJobSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CronJobSpec> reader = _CronJobSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get schedule => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get timeZone => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get startingDeadlineSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get concurrencyPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  bool get suspend => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  JobTemplateSpec? get jobTemplate => JobTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 14);
  int get successfulJobsHistoryLimit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  int get failedJobsHistoryLimit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);

  @override
  String toString() {
    return 'CronJobSpec{schedule: ${schedule}, timeZone: ${timeZone}, startingDeadlineSeconds: ${startingDeadlineSeconds}, concurrencyPolicy: ${concurrencyPolicy}, suspend: ${suspend}, jobTemplate: ${jobTemplate}, successfulJobsHistoryLimit: ${successfulJobsHistoryLimit}, failedJobsHistoryLimit: ${failedJobsHistoryLimit}}';
  }
}

class _CronJobSpecReader extends fb.TableReader<CronJobSpec> {
  const _CronJobSpecReader();

  @override
  CronJobSpec createObject(fb.BufferContext bc, int offset) => 
    CronJobSpec._(bc, offset);
}

class CronJobSpecBuilder {
  CronJobSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addScheduleOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTimeZoneOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStartingDeadlineSeconds(int? startingDeadlineSeconds) {
    fbBuilder.addInt64(2, startingDeadlineSeconds);
    return fbBuilder.offset;
  }
  int addConcurrencyPolicyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSuspend(bool? suspend) {
    fbBuilder.addBool(4, suspend);
    return fbBuilder.offset;
  }
  int addJobTemplateOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSuccessfulJobsHistoryLimit(int? successfulJobsHistoryLimit) {
    fbBuilder.addInt32(6, successfulJobsHistoryLimit);
    return fbBuilder.offset;
  }
  int addFailedJobsHistoryLimit(int? failedJobsHistoryLimit) {
    fbBuilder.addInt32(7, failedJobsHistoryLimit);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CronJobSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _schedule;
  final String? _timeZone;
  final int? _startingDeadlineSeconds;
  final String? _concurrencyPolicy;
  final bool? _suspend;
  final JobTemplateSpecObjectBuilder? _jobTemplate;
  final int? _successfulJobsHistoryLimit;
  final int? _failedJobsHistoryLimit;

  CronJobSpecObjectBuilder({
    String? schedule,
    String? timeZone,
    int? startingDeadlineSeconds,
    String? concurrencyPolicy,
    bool? suspend,
    JobTemplateSpecObjectBuilder? jobTemplate,
    int? successfulJobsHistoryLimit,
    int? failedJobsHistoryLimit,
  })
      : _schedule = schedule,
        _timeZone = timeZone,
        _startingDeadlineSeconds = startingDeadlineSeconds,
        _concurrencyPolicy = concurrencyPolicy,
        _suspend = suspend,
        _jobTemplate = jobTemplate,
        _successfulJobsHistoryLimit = successfulJobsHistoryLimit,
        _failedJobsHistoryLimit = failedJobsHistoryLimit;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? scheduleOffset = _schedule == null ? null
        : fbBuilder.writeString(_schedule!);
    final int? timeZoneOffset = _timeZone == null ? null
        : fbBuilder.writeString(_timeZone!);
    final int? concurrencyPolicyOffset = _concurrencyPolicy == null ? null
        : fbBuilder.writeString(_concurrencyPolicy!);
    final int? jobTemplateOffset = _jobTemplate?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, scheduleOffset);
    fbBuilder.addOffset(1, timeZoneOffset);
    fbBuilder.addInt64(2, _startingDeadlineSeconds);
    fbBuilder.addOffset(3, concurrencyPolicyOffset);
    fbBuilder.addBool(4, _suspend);
    fbBuilder.addOffset(5, jobTemplateOffset);
    fbBuilder.addInt32(6, _successfulJobsHistoryLimit);
    fbBuilder.addInt32(7, _failedJobsHistoryLimit);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CronJobStatus {
  CronJobStatus._(this._bc, this._bcOffset);
  factory CronJobStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CronJobStatus> reader = _CronJobStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<api_core_v1.ObjectReference>? get active => const fb.ListReader<api_core_v1.ObjectReference>(api_core_v1.ObjectReference.reader).vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_apis_meta_v1.Time? get lastScheduleTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastSuccessfulTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'CronJobStatus{active: ${active}, lastScheduleTime: ${lastScheduleTime}, lastSuccessfulTime: ${lastSuccessfulTime}}';
  }
}

class _CronJobStatusReader extends fb.TableReader<CronJobStatus> {
  const _CronJobStatusReader();

  @override
  CronJobStatus createObject(fb.BufferContext bc, int offset) => 
    CronJobStatus._(bc, offset);
}

class CronJobStatusBuilder {
  CronJobStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addActiveOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLastScheduleTimeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastSuccessfulTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CronJobStatusObjectBuilder extends fb.ObjectBuilder {
  final List<api_core_v1.ObjectReferenceObjectBuilder>? _active;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastScheduleTime;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastSuccessfulTime;

  CronJobStatusObjectBuilder({
    List<api_core_v1.ObjectReferenceObjectBuilder>? active,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastScheduleTime,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastSuccessfulTime,
  })
      : _active = active,
        _lastScheduleTime = lastScheduleTime,
        _lastSuccessfulTime = lastSuccessfulTime;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? activeOffset = _active == null ? null
        : fbBuilder.writeList(_active!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? lastScheduleTimeOffset = _lastScheduleTime?.getOrCreateOffset(fbBuilder);
    final int? lastSuccessfulTimeOffset = _lastSuccessfulTime?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, activeOffset);
    fbBuilder.addOffset(1, lastScheduleTimeOffset);
    fbBuilder.addOffset(2, lastSuccessfulTimeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Job {
  Job._(this._bc, this._bcOffset);
  factory Job(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Job> reader = _JobReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  JobSpec? get spec => JobSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  JobStatus? get status => JobStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Job{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _JobReader extends fb.TableReader<Job> {
  const _JobReader();

  @override
  Job createObject(fb.BufferContext bc, int offset) => 
    Job._(bc, offset);
}

class JobBuilder {
  JobBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class JobObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final JobSpecObjectBuilder? _spec;
  final JobStatusObjectBuilder? _status;

  JobObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    JobSpecObjectBuilder? spec,
    JobStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class JobCondition {
  JobCondition._(this._bc, this._bcOffset);
  factory JobCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<JobCondition> reader = _JobConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastProbeTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'JobCondition{type: ${type}, status: ${status}, lastProbeTime: ${lastProbeTime}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _JobConditionReader extends fb.TableReader<JobCondition> {
  const _JobConditionReader();

  @override
  JobCondition createObject(fb.BufferContext bc, int offset) => 
    JobCondition._(bc, offset);
}

class JobConditionBuilder {
  JobConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastProbeTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class JobConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastProbeTime;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  JobConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastProbeTime,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastProbeTime = lastProbeTime,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastProbeTimeOffset = _lastProbeTime?.getOrCreateOffset(fbBuilder);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastProbeTimeOffset);
    fbBuilder.addOffset(3, lastTransitionTimeOffset);
    fbBuilder.addOffset(4, reasonOffset);
    fbBuilder.addOffset(5, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class JobList {
  JobList._(this._bc, this._bcOffset);
  factory JobList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<JobList> reader = _JobListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Job>? get items => const fb.ListReader<Job>(Job.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'JobList{metadata: ${metadata}, items: ${items}}';
  }
}

class _JobListReader extends fb.TableReader<JobList> {
  const _JobListReader();

  @override
  JobList createObject(fb.BufferContext bc, int offset) => 
    JobList._(bc, offset);
}

class JobListBuilder {
  JobListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class JobListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<JobObjectBuilder>? _items;

  JobListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<JobObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class JobSpec {
  JobSpec._(this._bc, this._bcOffset);
  factory JobSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<JobSpec> reader = _JobSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get parallelism => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get completions => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get activeDeadlineSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  PodFailurePolicy? get podFailurePolicy => PodFailurePolicy.reader.vTableGetNullable(_bc, _bcOffset, 10);
  SuccessPolicy? get successPolicy => SuccessPolicy.reader.vTableGetNullable(_bc, _bcOffset, 12);
  int get backoffLimit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get backoffLimitPerIndex => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  int get maxFailedIndexes => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get selector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 20);
  bool get manualSelector => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  api_core_v1.PodTemplateSpec? get template => api_core_v1.PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 24);
  int get ttlSecondsAfterFinished => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  String? get completionMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  bool get suspend => const fb.BoolReader().vTableGet(_bc, _bcOffset, 30, false);
  String? get podReplacementPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  String? get managedBy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);

  @override
  String toString() {
    return 'JobSpec{parallelism: ${parallelism}, completions: ${completions}, activeDeadlineSeconds: ${activeDeadlineSeconds}, podFailurePolicy: ${podFailurePolicy}, successPolicy: ${successPolicy}, backoffLimit: ${backoffLimit}, backoffLimitPerIndex: ${backoffLimitPerIndex}, maxFailedIndexes: ${maxFailedIndexes}, selector: ${selector}, manualSelector: ${manualSelector}, template: ${template}, ttlSecondsAfterFinished: ${ttlSecondsAfterFinished}, completionMode: ${completionMode}, suspend: ${suspend}, podReplacementPolicy: ${podReplacementPolicy}, managedBy: ${managedBy}}';
  }
}

class _JobSpecReader extends fb.TableReader<JobSpec> {
  const _JobSpecReader();

  @override
  JobSpec createObject(fb.BufferContext bc, int offset) => 
    JobSpec._(bc, offset);
}

class JobSpecBuilder {
  JobSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(16);
  }

  int addParallelism(int? parallelism) {
    fbBuilder.addInt32(0, parallelism);
    return fbBuilder.offset;
  }
  int addCompletions(int? completions) {
    fbBuilder.addInt32(1, completions);
    return fbBuilder.offset;
  }
  int addActiveDeadlineSeconds(int? activeDeadlineSeconds) {
    fbBuilder.addInt64(2, activeDeadlineSeconds);
    return fbBuilder.offset;
  }
  int addPodFailurePolicyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSuccessPolicyOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addBackoffLimit(int? backoffLimit) {
    fbBuilder.addInt32(5, backoffLimit);
    return fbBuilder.offset;
  }
  int addBackoffLimitPerIndex(int? backoffLimitPerIndex) {
    fbBuilder.addInt32(6, backoffLimitPerIndex);
    return fbBuilder.offset;
  }
  int addMaxFailedIndexes(int? maxFailedIndexes) {
    fbBuilder.addInt32(7, maxFailedIndexes);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addManualSelector(bool? manualSelector) {
    fbBuilder.addBool(9, manualSelector);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addTtlSecondsAfterFinished(int? ttlSecondsAfterFinished) {
    fbBuilder.addInt32(11, ttlSecondsAfterFinished);
    return fbBuilder.offset;
  }
  int addCompletionModeOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addSuspend(bool? suspend) {
    fbBuilder.addBool(13, suspend);
    return fbBuilder.offset;
  }
  int addPodReplacementPolicyOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addManagedByOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class JobSpecObjectBuilder extends fb.ObjectBuilder {
  final int? _parallelism;
  final int? _completions;
  final int? _activeDeadlineSeconds;
  final PodFailurePolicyObjectBuilder? _podFailurePolicy;
  final SuccessPolicyObjectBuilder? _successPolicy;
  final int? _backoffLimit;
  final int? _backoffLimitPerIndex;
  final int? _maxFailedIndexes;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _selector;
  final bool? _manualSelector;
  final api_core_v1.PodTemplateSpecObjectBuilder? _template;
  final int? _ttlSecondsAfterFinished;
  final String? _completionMode;
  final bool? _suspend;
  final String? _podReplacementPolicy;
  final String? _managedBy;

  JobSpecObjectBuilder({
    int? parallelism,
    int? completions,
    int? activeDeadlineSeconds,
    PodFailurePolicyObjectBuilder? podFailurePolicy,
    SuccessPolicyObjectBuilder? successPolicy,
    int? backoffLimit,
    int? backoffLimitPerIndex,
    int? maxFailedIndexes,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? selector,
    bool? manualSelector,
    api_core_v1.PodTemplateSpecObjectBuilder? template,
    int? ttlSecondsAfterFinished,
    String? completionMode,
    bool? suspend,
    String? podReplacementPolicy,
    String? managedBy,
  })
      : _parallelism = parallelism,
        _completions = completions,
        _activeDeadlineSeconds = activeDeadlineSeconds,
        _podFailurePolicy = podFailurePolicy,
        _successPolicy = successPolicy,
        _backoffLimit = backoffLimit,
        _backoffLimitPerIndex = backoffLimitPerIndex,
        _maxFailedIndexes = maxFailedIndexes,
        _selector = selector,
        _manualSelector = manualSelector,
        _template = template,
        _ttlSecondsAfterFinished = ttlSecondsAfterFinished,
        _completionMode = completionMode,
        _suspend = suspend,
        _podReplacementPolicy = podReplacementPolicy,
        _managedBy = managedBy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? podFailurePolicyOffset = _podFailurePolicy?.getOrCreateOffset(fbBuilder);
    final int? successPolicyOffset = _successPolicy?.getOrCreateOffset(fbBuilder);
    final int? selectorOffset = _selector?.getOrCreateOffset(fbBuilder);
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    final int? completionModeOffset = _completionMode == null ? null
        : fbBuilder.writeString(_completionMode!);
    final int? podReplacementPolicyOffset = _podReplacementPolicy == null ? null
        : fbBuilder.writeString(_podReplacementPolicy!);
    final int? managedByOffset = _managedBy == null ? null
        : fbBuilder.writeString(_managedBy!);
    fbBuilder.startTable(16);
    fbBuilder.addInt32(0, _parallelism);
    fbBuilder.addInt32(1, _completions);
    fbBuilder.addInt64(2, _activeDeadlineSeconds);
    fbBuilder.addOffset(3, podFailurePolicyOffset);
    fbBuilder.addOffset(4, successPolicyOffset);
    fbBuilder.addInt32(5, _backoffLimit);
    fbBuilder.addInt32(6, _backoffLimitPerIndex);
    fbBuilder.addInt32(7, _maxFailedIndexes);
    fbBuilder.addOffset(8, selectorOffset);
    fbBuilder.addBool(9, _manualSelector);
    fbBuilder.addOffset(10, templateOffset);
    fbBuilder.addInt32(11, _ttlSecondsAfterFinished);
    fbBuilder.addOffset(12, completionModeOffset);
    fbBuilder.addBool(13, _suspend);
    fbBuilder.addOffset(14, podReplacementPolicyOffset);
    fbBuilder.addOffset(15, managedByOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class JobStatus {
  JobStatus._(this._bc, this._bcOffset);
  factory JobStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<JobStatus> reader = _JobStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<JobCondition>? get conditions => const fb.ListReader<JobCondition>(JobCondition.reader).vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_apis_meta_v1.Time? get startTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get completionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  int get active => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get succeeded => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get failed => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get terminating => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  String? get completedIndexes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get failedIndexes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  UncountedTerminatedPods? get uncountedTerminatedPods => UncountedTerminatedPods.reader.vTableGetNullable(_bc, _bcOffset, 22);
  int get ready => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 24, 0);

  @override
  String toString() {
    return 'JobStatus{conditions: ${conditions}, startTime: ${startTime}, completionTime: ${completionTime}, active: ${active}, succeeded: ${succeeded}, failed: ${failed}, terminating: ${terminating}, completedIndexes: ${completedIndexes}, failedIndexes: ${failedIndexes}, uncountedTerminatedPods: ${uncountedTerminatedPods}, ready: ${ready}}';
  }
}

class _JobStatusReader extends fb.TableReader<JobStatus> {
  const _JobStatusReader();

  @override
  JobStatus createObject(fb.BufferContext bc, int offset) => 
    JobStatus._(bc, offset);
}

class JobStatusBuilder {
  JobStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCompletionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addActive(int? active) {
    fbBuilder.addInt32(3, active);
    return fbBuilder.offset;
  }
  int addSucceeded(int? succeeded) {
    fbBuilder.addInt32(4, succeeded);
    return fbBuilder.offset;
  }
  int addFailed(int? failed) {
    fbBuilder.addInt32(5, failed);
    return fbBuilder.offset;
  }
  int addTerminating(int? terminating) {
    fbBuilder.addInt32(6, terminating);
    return fbBuilder.offset;
  }
  int addCompletedIndexesOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addFailedIndexesOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addUncountedTerminatedPodsOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addReady(int? ready) {
    fbBuilder.addInt32(10, ready);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class JobStatusObjectBuilder extends fb.ObjectBuilder {
  final List<JobConditionObjectBuilder>? _conditions;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _startTime;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _completionTime;
  final int? _active;
  final int? _succeeded;
  final int? _failed;
  final int? _terminating;
  final String? _completedIndexes;
  final String? _failedIndexes;
  final UncountedTerminatedPodsObjectBuilder? _uncountedTerminatedPods;
  final int? _ready;

  JobStatusObjectBuilder({
    List<JobConditionObjectBuilder>? conditions,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? startTime,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? completionTime,
    int? active,
    int? succeeded,
    int? failed,
    int? terminating,
    String? completedIndexes,
    String? failedIndexes,
    UncountedTerminatedPodsObjectBuilder? uncountedTerminatedPods,
    int? ready,
  })
      : _conditions = conditions,
        _startTime = startTime,
        _completionTime = completionTime,
        _active = active,
        _succeeded = succeeded,
        _failed = failed,
        _terminating = terminating,
        _completedIndexes = completedIndexes,
        _failedIndexes = failedIndexes,
        _uncountedTerminatedPods = uncountedTerminatedPods,
        _ready = ready;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? startTimeOffset = _startTime?.getOrCreateOffset(fbBuilder);
    final int? completionTimeOffset = _completionTime?.getOrCreateOffset(fbBuilder);
    final int? completedIndexesOffset = _completedIndexes == null ? null
        : fbBuilder.writeString(_completedIndexes!);
    final int? failedIndexesOffset = _failedIndexes == null ? null
        : fbBuilder.writeString(_failedIndexes!);
    final int? uncountedTerminatedPodsOffset = _uncountedTerminatedPods?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, conditionsOffset);
    fbBuilder.addOffset(1, startTimeOffset);
    fbBuilder.addOffset(2, completionTimeOffset);
    fbBuilder.addInt32(3, _active);
    fbBuilder.addInt32(4, _succeeded);
    fbBuilder.addInt32(5, _failed);
    fbBuilder.addInt32(6, _terminating);
    fbBuilder.addOffset(7, completedIndexesOffset);
    fbBuilder.addOffset(8, failedIndexesOffset);
    fbBuilder.addOffset(9, uncountedTerminatedPodsOffset);
    fbBuilder.addInt32(10, _ready);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class JobTemplateSpec {
  JobTemplateSpec._(this._bc, this._bcOffset);
  factory JobTemplateSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<JobTemplateSpec> reader = _JobTemplateSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  JobSpec? get spec => JobSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'JobTemplateSpec{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _JobTemplateSpecReader extends fb.TableReader<JobTemplateSpec> {
  const _JobTemplateSpecReader();

  @override
  JobTemplateSpec createObject(fb.BufferContext bc, int offset) => 
    JobTemplateSpec._(bc, offset);
}

class JobTemplateSpecBuilder {
  JobTemplateSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class JobTemplateSpecObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final JobSpecObjectBuilder? _spec;

  JobTemplateSpecObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    JobSpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodFailurePolicy {
  PodFailurePolicy._(this._bc, this._bcOffset);
  factory PodFailurePolicy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodFailurePolicy> reader = _PodFailurePolicyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<PodFailurePolicyRule>? get rules => const fb.ListReader<PodFailurePolicyRule>(PodFailurePolicyRule.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PodFailurePolicy{rules: ${rules}}';
  }
}

class _PodFailurePolicyReader extends fb.TableReader<PodFailurePolicy> {
  const _PodFailurePolicyReader();

  @override
  PodFailurePolicy createObject(fb.BufferContext bc, int offset) => 
    PodFailurePolicy._(bc, offset);
}

class PodFailurePolicyBuilder {
  PodFailurePolicyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRulesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodFailurePolicyObjectBuilder extends fb.ObjectBuilder {
  final List<PodFailurePolicyRuleObjectBuilder>? _rules;

  PodFailurePolicyObjectBuilder({
    List<PodFailurePolicyRuleObjectBuilder>? rules,
  })
      : _rules = rules;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rulesOffset = _rules == null ? null
        : fbBuilder.writeList(_rules!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, rulesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodFailurePolicyOnExitCodesRequirement {
  PodFailurePolicyOnExitCodesRequirement._(this._bc, this._bcOffset);
  factory PodFailurePolicyOnExitCodesRequirement(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodFailurePolicyOnExitCodesRequirement> reader = _PodFailurePolicyOnExitCodesRequirementReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get containerName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get $operator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<int>? get values => const fb.ListReader<int>(fb.Int32Reader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PodFailurePolicyOnExitCodesRequirement{containerName: ${containerName}, \$operator: ${$operator}, values: ${values}}';
  }
}

class _PodFailurePolicyOnExitCodesRequirementReader extends fb.TableReader<PodFailurePolicyOnExitCodesRequirement> {
  const _PodFailurePolicyOnExitCodesRequirementReader();

  @override
  PodFailurePolicyOnExitCodesRequirement createObject(fb.BufferContext bc, int offset) => 
    PodFailurePolicyOnExitCodesRequirement._(bc, offset);
}

class PodFailurePolicyOnExitCodesRequirementBuilder {
  PodFailurePolicyOnExitCodesRequirementBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addContainerNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOperatorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodFailurePolicyOnExitCodesRequirementObjectBuilder extends fb.ObjectBuilder {
  final String? _containerName;
  final String? _$operator;
  final List<int>? _values;

  PodFailurePolicyOnExitCodesRequirementObjectBuilder({
    String? containerName,
    String? $operator,
    List<int>? values,
  })
      : _containerName = containerName,
        _$operator = $operator,
        _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? containerNameOffset = _containerName == null ? null
        : fbBuilder.writeString(_containerName!);
    final int? $operatorOffset = _$operator == null ? null
        : fbBuilder.writeString(_$operator!);
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeListInt32(_values!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, containerNameOffset);
    fbBuilder.addOffset(1, $operatorOffset);
    fbBuilder.addOffset(2, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodFailurePolicyOnPodConditionsPattern {
  PodFailurePolicyOnPodConditionsPattern._(this._bc, this._bcOffset);
  factory PodFailurePolicyOnPodConditionsPattern(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodFailurePolicyOnPodConditionsPattern> reader = _PodFailurePolicyOnPodConditionsPatternReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodFailurePolicyOnPodConditionsPattern{type: ${type}, status: ${status}}';
  }
}

class _PodFailurePolicyOnPodConditionsPatternReader extends fb.TableReader<PodFailurePolicyOnPodConditionsPattern> {
  const _PodFailurePolicyOnPodConditionsPatternReader();

  @override
  PodFailurePolicyOnPodConditionsPattern createObject(fb.BufferContext bc, int offset) => 
    PodFailurePolicyOnPodConditionsPattern._(bc, offset);
}

class PodFailurePolicyOnPodConditionsPatternBuilder {
  PodFailurePolicyOnPodConditionsPatternBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodFailurePolicyOnPodConditionsPatternObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;

  PodFailurePolicyOnPodConditionsPatternObjectBuilder({
    String? type,
    String? status,
  })
      : _type = type,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodFailurePolicyRule {
  PodFailurePolicyRule._(this._bc, this._bcOffset);
  factory PodFailurePolicyRule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodFailurePolicyRule> reader = _PodFailurePolicyRuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get action => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  PodFailurePolicyOnExitCodesRequirement? get onExitCodes => PodFailurePolicyOnExitCodesRequirement.reader.vTableGetNullable(_bc, _bcOffset, 6);
  List<PodFailurePolicyOnPodConditionsPattern>? get onPodConditions => const fb.ListReader<PodFailurePolicyOnPodConditionsPattern>(PodFailurePolicyOnPodConditionsPattern.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PodFailurePolicyRule{action: ${action}, onExitCodes: ${onExitCodes}, onPodConditions: ${onPodConditions}}';
  }
}

class _PodFailurePolicyRuleReader extends fb.TableReader<PodFailurePolicyRule> {
  const _PodFailurePolicyRuleReader();

  @override
  PodFailurePolicyRule createObject(fb.BufferContext bc, int offset) => 
    PodFailurePolicyRule._(bc, offset);
}

class PodFailurePolicyRuleBuilder {
  PodFailurePolicyRuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addActionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOnExitCodesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOnPodConditionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodFailurePolicyRuleObjectBuilder extends fb.ObjectBuilder {
  final String? _action;
  final PodFailurePolicyOnExitCodesRequirementObjectBuilder? _onExitCodes;
  final List<PodFailurePolicyOnPodConditionsPatternObjectBuilder>? _onPodConditions;

  PodFailurePolicyRuleObjectBuilder({
    String? action,
    PodFailurePolicyOnExitCodesRequirementObjectBuilder? onExitCodes,
    List<PodFailurePolicyOnPodConditionsPatternObjectBuilder>? onPodConditions,
  })
      : _action = action,
        _onExitCodes = onExitCodes,
        _onPodConditions = onPodConditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? actionOffset = _action == null ? null
        : fbBuilder.writeString(_action!);
    final int? onExitCodesOffset = _onExitCodes?.getOrCreateOffset(fbBuilder);
    final int? onPodConditionsOffset = _onPodConditions == null ? null
        : fbBuilder.writeList(_onPodConditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, actionOffset);
    fbBuilder.addOffset(1, onExitCodesOffset);
    fbBuilder.addOffset(2, onPodConditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SuccessPolicy {
  SuccessPolicy._(this._bc, this._bcOffset);
  factory SuccessPolicy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SuccessPolicy> reader = _SuccessPolicyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<SuccessPolicyRule>? get rules => const fb.ListReader<SuccessPolicyRule>(SuccessPolicyRule.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SuccessPolicy{rules: ${rules}}';
  }
}

class _SuccessPolicyReader extends fb.TableReader<SuccessPolicy> {
  const _SuccessPolicyReader();

  @override
  SuccessPolicy createObject(fb.BufferContext bc, int offset) => 
    SuccessPolicy._(bc, offset);
}

class SuccessPolicyBuilder {
  SuccessPolicyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRulesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SuccessPolicyObjectBuilder extends fb.ObjectBuilder {
  final List<SuccessPolicyRuleObjectBuilder>? _rules;

  SuccessPolicyObjectBuilder({
    List<SuccessPolicyRuleObjectBuilder>? rules,
  })
      : _rules = rules;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rulesOffset = _rules == null ? null
        : fbBuilder.writeList(_rules!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, rulesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SuccessPolicyRule {
  SuccessPolicyRule._(this._bc, this._bcOffset);
  factory SuccessPolicyRule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SuccessPolicyRule> reader = _SuccessPolicyRuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get succeededIndexes => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get succeededCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'SuccessPolicyRule{succeededIndexes: ${succeededIndexes}, succeededCount: ${succeededCount}}';
  }
}

class _SuccessPolicyRuleReader extends fb.TableReader<SuccessPolicyRule> {
  const _SuccessPolicyRuleReader();

  @override
  SuccessPolicyRule createObject(fb.BufferContext bc, int offset) => 
    SuccessPolicyRule._(bc, offset);
}

class SuccessPolicyRuleBuilder {
  SuccessPolicyRuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSucceededIndexesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSucceededCount(int? succeededCount) {
    fbBuilder.addInt32(1, succeededCount);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SuccessPolicyRuleObjectBuilder extends fb.ObjectBuilder {
  final String? _succeededIndexes;
  final int? _succeededCount;

  SuccessPolicyRuleObjectBuilder({
    String? succeededIndexes,
    int? succeededCount,
  })
      : _succeededIndexes = succeededIndexes,
        _succeededCount = succeededCount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? succeededIndexesOffset = _succeededIndexes == null ? null
        : fbBuilder.writeString(_succeededIndexes!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, succeededIndexesOffset);
    fbBuilder.addInt32(1, _succeededCount);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UncountedTerminatedPods {
  UncountedTerminatedPods._(this._bc, this._bcOffset);
  factory UncountedTerminatedPods(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UncountedTerminatedPods> reader = _UncountedTerminatedPodsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get succeeded => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get failed => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'UncountedTerminatedPods{succeeded: ${succeeded}, failed: ${failed}}';
  }
}

class _UncountedTerminatedPodsReader extends fb.TableReader<UncountedTerminatedPods> {
  const _UncountedTerminatedPodsReader();

  @override
  UncountedTerminatedPods createObject(fb.BufferContext bc, int offset) => 
    UncountedTerminatedPods._(bc, offset);
}

class UncountedTerminatedPodsBuilder {
  UncountedTerminatedPodsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSucceededOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFailedOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UncountedTerminatedPodsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _succeeded;
  final List<String>? _failed;

  UncountedTerminatedPodsObjectBuilder({
    List<String>? succeeded,
    List<String>? failed,
  })
      : _succeeded = succeeded,
        _failed = failed;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? succeededOffset = _succeeded == null ? null
        : fbBuilder.writeList(_succeeded!.map(fbBuilder.writeString).toList());
    final int? failedOffset = _failed == null ? null
        : fbBuilder.writeList(_failed!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, succeededOffset);
    fbBuilder.addOffset(1, failedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
