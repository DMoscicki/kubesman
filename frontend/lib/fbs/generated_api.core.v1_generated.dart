// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.core.v1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.apps.v1_beta1_generated.dart' as api_apps_v1_beta1;
import './generated_api.apps.v1_beta1.deployment_rollback__generated.dart' as api_apps_v1_beta1_deployment_rollback_;
import './generated_api.apps.v1_beta1.scale_status__generated.dart' as api_apps_v1_beta1_scale_status_;
import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

class AwselasticBlockStoreVolumeSource {
  AwselasticBlockStoreVolumeSource._(this._bc, this._bcOffset);
  factory AwselasticBlockStoreVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AwselasticBlockStoreVolumeSource> reader = _AwselasticBlockStoreVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get volumeId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get partition => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  @override
  String toString() {
    return 'AwselasticBlockStoreVolumeSource{volumeId: ${volumeId}, fsType: ${fsType}, partition: ${partition}, readOnly: ${readOnly}}';
  }
}

class _AwselasticBlockStoreVolumeSourceReader extends fb.TableReader<AwselasticBlockStoreVolumeSource> {
  const _AwselasticBlockStoreVolumeSourceReader();

  @override
  AwselasticBlockStoreVolumeSource createObject(fb.BufferContext bc, int offset) => 
    AwselasticBlockStoreVolumeSource._(bc, offset);
}

class AwselasticBlockStoreVolumeSourceBuilder {
  AwselasticBlockStoreVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addVolumeIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPartition(int? partition) {
    fbBuilder.addInt32(2, partition);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(3, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AwselasticBlockStoreVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _volumeId;
  final String? _fsType;
  final int? _partition;
  final bool? _readOnly;

  AwselasticBlockStoreVolumeSourceObjectBuilder({
    String? volumeId,
    String? fsType,
    int? partition,
    bool? readOnly,
  })
      : _volumeId = volumeId,
        _fsType = fsType,
        _partition = partition,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumeIdOffset = _volumeId == null ? null
        : fbBuilder.writeString(_volumeId!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, volumeIdOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    fbBuilder.addInt32(2, _partition);
    fbBuilder.addBool(3, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Affinity {
  Affinity._(this._bc, this._bcOffset);
  factory Affinity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Affinity> reader = _AffinityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  NodeAffinity? get nodeAffinity => NodeAffinity.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PodAffinity? get podAffinity => PodAffinity.reader.vTableGetNullable(_bc, _bcOffset, 6);
  PodAntiAffinity? get podAntiAffinity => PodAntiAffinity.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Affinity{nodeAffinity: ${nodeAffinity}, podAffinity: ${podAffinity}, podAntiAffinity: ${podAntiAffinity}}';
  }
}

class _AffinityReader extends fb.TableReader<Affinity> {
  const _AffinityReader();

  @override
  Affinity createObject(fb.BufferContext bc, int offset) => 
    Affinity._(bc, offset);
}

class AffinityBuilder {
  AffinityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNodeAffinityOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPodAffinityOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPodAntiAffinityOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AffinityObjectBuilder extends fb.ObjectBuilder {
  final NodeAffinityObjectBuilder? _nodeAffinity;
  final PodAffinityObjectBuilder? _podAffinity;
  final PodAntiAffinityObjectBuilder? _podAntiAffinity;

  AffinityObjectBuilder({
    NodeAffinityObjectBuilder? nodeAffinity,
    PodAffinityObjectBuilder? podAffinity,
    PodAntiAffinityObjectBuilder? podAntiAffinity,
  })
      : _nodeAffinity = nodeAffinity,
        _podAffinity = podAffinity,
        _podAntiAffinity = podAntiAffinity;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nodeAffinityOffset = _nodeAffinity?.getOrCreateOffset(fbBuilder);
    final int? podAffinityOffset = _podAffinity?.getOrCreateOffset(fbBuilder);
    final int? podAntiAffinityOffset = _podAntiAffinity?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, nodeAffinityOffset);
    fbBuilder.addOffset(1, podAffinityOffset);
    fbBuilder.addOffset(2, podAntiAffinityOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AppArmorProfile {
  AppArmorProfile._(this._bc, this._bcOffset);
  factory AppArmorProfile(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AppArmorProfile> reader = _AppArmorProfileReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get localhostProfile => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'AppArmorProfile{type: ${type}, localhostProfile: ${localhostProfile}}';
  }
}

class _AppArmorProfileReader extends fb.TableReader<AppArmorProfile> {
  const _AppArmorProfileReader();

  @override
  AppArmorProfile createObject(fb.BufferContext bc, int offset) => 
    AppArmorProfile._(bc, offset);
}

class AppArmorProfileBuilder {
  AppArmorProfileBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLocalhostProfileOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AppArmorProfileObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _localhostProfile;

  AppArmorProfileObjectBuilder({
    String? type,
    String? localhostProfile,
  })
      : _type = type,
        _localhostProfile = localhostProfile;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? localhostProfileOffset = _localhostProfile == null ? null
        : fbBuilder.writeString(_localhostProfile!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, localhostProfileOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AttachedVolume {
  AttachedVolume._(this._bc, this._bcOffset);
  factory AttachedVolume(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AttachedVolume> reader = _AttachedVolumeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get devicePath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'AttachedVolume{name: ${name}, devicePath: ${devicePath}}';
  }
}

class _AttachedVolumeReader extends fb.TableReader<AttachedVolume> {
  const _AttachedVolumeReader();

  @override
  AttachedVolume createObject(fb.BufferContext bc, int offset) => 
    AttachedVolume._(bc, offset);
}

class AttachedVolumeBuilder {
  AttachedVolumeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDevicePathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AttachedVolumeObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _devicePath;

  AttachedVolumeObjectBuilder({
    String? name,
    String? devicePath,
  })
      : _name = name,
        _devicePath = devicePath;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? devicePathOffset = _devicePath == null ? null
        : fbBuilder.writeString(_devicePath!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, devicePathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AvoidPods {
  AvoidPods._(this._bc, this._bcOffset);
  factory AvoidPods(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AvoidPods> reader = _AvoidPodsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<PreferAvoidPodsEntry>? get preferAvoidPods => const fb.ListReader<PreferAvoidPodsEntry>(PreferAvoidPodsEntry.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'AvoidPods{preferAvoidPods: ${preferAvoidPods}}';
  }
}

class _AvoidPodsReader extends fb.TableReader<AvoidPods> {
  const _AvoidPodsReader();

  @override
  AvoidPods createObject(fb.BufferContext bc, int offset) => 
    AvoidPods._(bc, offset);
}

class AvoidPodsBuilder {
  AvoidPodsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPreferAvoidPodsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AvoidPodsObjectBuilder extends fb.ObjectBuilder {
  final List<PreferAvoidPodsEntryObjectBuilder>? _preferAvoidPods;

  AvoidPodsObjectBuilder({
    List<PreferAvoidPodsEntryObjectBuilder>? preferAvoidPods,
  })
      : _preferAvoidPods = preferAvoidPods;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? preferAvoidPodsOffset = _preferAvoidPods == null ? null
        : fbBuilder.writeList(_preferAvoidPods!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, preferAvoidPodsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AzureDiskVolumeSource {
  AzureDiskVolumeSource._(this._bc, this._bcOffset);
  factory AzureDiskVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AzureDiskVolumeSource> reader = _AzureDiskVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get diskName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get diskUri => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get cachingMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'AzureDiskVolumeSource{diskName: ${diskName}, diskUri: ${diskUri}, cachingMode: ${cachingMode}, fsType: ${fsType}, readOnly: ${readOnly}, kind: ${kind}}';
  }
}

class _AzureDiskVolumeSourceReader extends fb.TableReader<AzureDiskVolumeSource> {
  const _AzureDiskVolumeSourceReader();

  @override
  AzureDiskVolumeSource createObject(fb.BufferContext bc, int offset) => 
    AzureDiskVolumeSource._(bc, offset);
}

class AzureDiskVolumeSourceBuilder {
  AzureDiskVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addDiskNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDiskUriOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCachingModeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(4, readOnly);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AzureDiskVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _diskName;
  final String? _diskUri;
  final String? _cachingMode;
  final String? _fsType;
  final bool? _readOnly;
  final String? _kind;

  AzureDiskVolumeSourceObjectBuilder({
    String? diskName,
    String? diskUri,
    String? cachingMode,
    String? fsType,
    bool? readOnly,
    String? kind,
  })
      : _diskName = diskName,
        _diskUri = diskUri,
        _cachingMode = cachingMode,
        _fsType = fsType,
        _readOnly = readOnly,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? diskNameOffset = _diskName == null ? null
        : fbBuilder.writeString(_diskName!);
    final int? diskUriOffset = _diskUri == null ? null
        : fbBuilder.writeString(_diskUri!);
    final int? cachingModeOffset = _cachingMode == null ? null
        : fbBuilder.writeString(_cachingMode!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, diskNameOffset);
    fbBuilder.addOffset(1, diskUriOffset);
    fbBuilder.addOffset(2, cachingModeOffset);
    fbBuilder.addOffset(3, fsTypeOffset);
    fbBuilder.addBool(4, _readOnly);
    fbBuilder.addOffset(5, kindOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AzureFilePersistentVolumeSource {
  AzureFilePersistentVolumeSource._(this._bc, this._bcOffset);
  factory AzureFilePersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AzureFilePersistentVolumeSource> reader = _AzureFilePersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get secretName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get shareName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  String? get secretNamespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'AzureFilePersistentVolumeSource{secretName: ${secretName}, shareName: ${shareName}, readOnly: ${readOnly}, secretNamespace: ${secretNamespace}}';
  }
}

class _AzureFilePersistentVolumeSourceReader extends fb.TableReader<AzureFilePersistentVolumeSource> {
  const _AzureFilePersistentVolumeSourceReader();

  @override
  AzureFilePersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    AzureFilePersistentVolumeSource._(bc, offset);
}

class AzureFilePersistentVolumeSourceBuilder {
  AzureFilePersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addSecretNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addShareNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }
  int addSecretNamespaceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AzureFilePersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _secretName;
  final String? _shareName;
  final bool? _readOnly;
  final String? _secretNamespace;

  AzureFilePersistentVolumeSourceObjectBuilder({
    String? secretName,
    String? shareName,
    bool? readOnly,
    String? secretNamespace,
  })
      : _secretName = secretName,
        _shareName = shareName,
        _readOnly = readOnly,
        _secretNamespace = secretNamespace;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? secretNameOffset = _secretName == null ? null
        : fbBuilder.writeString(_secretName!);
    final int? shareNameOffset = _shareName == null ? null
        : fbBuilder.writeString(_shareName!);
    final int? secretNamespaceOffset = _secretNamespace == null ? null
        : fbBuilder.writeString(_secretNamespace!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, secretNameOffset);
    fbBuilder.addOffset(1, shareNameOffset);
    fbBuilder.addBool(2, _readOnly);
    fbBuilder.addOffset(3, secretNamespaceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AzureFileVolumeSource {
  AzureFileVolumeSource._(this._bc, this._bcOffset);
  factory AzureFileVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AzureFileVolumeSource> reader = _AzureFileVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get secretName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get shareName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'AzureFileVolumeSource{secretName: ${secretName}, shareName: ${shareName}, readOnly: ${readOnly}}';
  }
}

class _AzureFileVolumeSourceReader extends fb.TableReader<AzureFileVolumeSource> {
  const _AzureFileVolumeSourceReader();

  @override
  AzureFileVolumeSource createObject(fb.BufferContext bc, int offset) => 
    AzureFileVolumeSource._(bc, offset);
}

class AzureFileVolumeSourceBuilder {
  AzureFileVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSecretNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addShareNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AzureFileVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _secretName;
  final String? _shareName;
  final bool? _readOnly;

  AzureFileVolumeSourceObjectBuilder({
    String? secretName,
    String? shareName,
    bool? readOnly,
  })
      : _secretName = secretName,
        _shareName = shareName,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? secretNameOffset = _secretName == null ? null
        : fbBuilder.writeString(_secretName!);
    final int? shareNameOffset = _shareName == null ? null
        : fbBuilder.writeString(_shareName!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, secretNameOffset);
    fbBuilder.addOffset(1, shareNameOffset);
    fbBuilder.addBool(2, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Binding {
  Binding._(this._bc, this._bcOffset);
  factory Binding(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Binding> reader = _BindingReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ObjectReference? get target => ObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Binding{metadata: ${metadata}, target: ${target}}';
  }
}

class _BindingReader extends fb.TableReader<Binding> {
  const _BindingReader();

  @override
  Binding createObject(fb.BufferContext bc, int offset) => 
    Binding._(bc, offset);
}

class BindingBuilder {
  BindingBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTargetOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BindingObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ObjectReferenceObjectBuilder? _target;

  BindingObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ObjectReferenceObjectBuilder? target,
  })
      : _metadata = metadata,
        _target = target;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? targetOffset = _target?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, targetOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsipersistentVolumeSource {
  CsipersistentVolumeSource._(this._bc, this._bcOffset);
  factory CsipersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsipersistentVolumeSource> reader = _CsipersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get driver => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get volumeHandle => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<api_core_v1_csipersistent_volume_source_.VolumeAttributesEntry>? get volumeAttributes => const fb.ListReader<api_core_v1_csipersistent_volume_source_.VolumeAttributesEntry>(api_core_v1_csipersistent_volume_source_.VolumeAttributesEntry.reader).vTableGetNullable(_bc, _bcOffset, 12);
  SecretReference? get controllerPublishSecretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 14);
  SecretReference? get nodeStageSecretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 16);
  SecretReference? get nodePublishSecretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 18);
  SecretReference? get controllerExpandSecretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 20);
  SecretReference? get nodeExpandSecretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'CsipersistentVolumeSource{driver: ${driver}, volumeHandle: ${volumeHandle}, readOnly: ${readOnly}, fsType: ${fsType}, volumeAttributes: ${volumeAttributes}, controllerPublishSecretRef: ${controllerPublishSecretRef}, nodeStageSecretRef: ${nodeStageSecretRef}, nodePublishSecretRef: ${nodePublishSecretRef}, controllerExpandSecretRef: ${controllerExpandSecretRef}, nodeExpandSecretRef: ${nodeExpandSecretRef}}';
  }
}

class _CsipersistentVolumeSourceReader extends fb.TableReader<CsipersistentVolumeSource> {
  const _CsipersistentVolumeSourceReader();

  @override
  CsipersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    CsipersistentVolumeSource._(bc, offset);
}

class CsipersistentVolumeSourceBuilder {
  CsipersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addDriverOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVolumeHandleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addVolumeAttributesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addControllerPublishSecretRefOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNodeStageSecretRefOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addNodePublishSecretRefOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addControllerExpandSecretRefOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addNodeExpandSecretRefOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsipersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _driver;
  final String? _volumeHandle;
  final bool? _readOnly;
  final String? _fsType;
  final List<api_core_v1_csipersistent_volume_source_.VolumeAttributesEntryObjectBuilder>? _volumeAttributes;
  final SecretReferenceObjectBuilder? _controllerPublishSecretRef;
  final SecretReferenceObjectBuilder? _nodeStageSecretRef;
  final SecretReferenceObjectBuilder? _nodePublishSecretRef;
  final SecretReferenceObjectBuilder? _controllerExpandSecretRef;
  final SecretReferenceObjectBuilder? _nodeExpandSecretRef;

  CsipersistentVolumeSourceObjectBuilder({
    String? driver,
    String? volumeHandle,
    bool? readOnly,
    String? fsType,
    List<api_core_v1_csipersistent_volume_source_.VolumeAttributesEntryObjectBuilder>? volumeAttributes,
    SecretReferenceObjectBuilder? controllerPublishSecretRef,
    SecretReferenceObjectBuilder? nodeStageSecretRef,
    SecretReferenceObjectBuilder? nodePublishSecretRef,
    SecretReferenceObjectBuilder? controllerExpandSecretRef,
    SecretReferenceObjectBuilder? nodeExpandSecretRef,
  })
      : _driver = driver,
        _volumeHandle = volumeHandle,
        _readOnly = readOnly,
        _fsType = fsType,
        _volumeAttributes = volumeAttributes,
        _controllerPublishSecretRef = controllerPublishSecretRef,
        _nodeStageSecretRef = nodeStageSecretRef,
        _nodePublishSecretRef = nodePublishSecretRef,
        _controllerExpandSecretRef = controllerExpandSecretRef,
        _nodeExpandSecretRef = nodeExpandSecretRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driverOffset = _driver == null ? null
        : fbBuilder.writeString(_driver!);
    final int? volumeHandleOffset = _volumeHandle == null ? null
        : fbBuilder.writeString(_volumeHandle!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? volumeAttributesOffset = _volumeAttributes == null ? null
        : fbBuilder.writeList(_volumeAttributes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? controllerPublishSecretRefOffset = _controllerPublishSecretRef?.getOrCreateOffset(fbBuilder);
    final int? nodeStageSecretRefOffset = _nodeStageSecretRef?.getOrCreateOffset(fbBuilder);
    final int? nodePublishSecretRefOffset = _nodePublishSecretRef?.getOrCreateOffset(fbBuilder);
    final int? controllerExpandSecretRefOffset = _controllerExpandSecretRef?.getOrCreateOffset(fbBuilder);
    final int? nodeExpandSecretRefOffset = _nodeExpandSecretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, driverOffset);
    fbBuilder.addOffset(1, volumeHandleOffset);
    fbBuilder.addBool(2, _readOnly);
    fbBuilder.addOffset(3, fsTypeOffset);
    fbBuilder.addOffset(4, volumeAttributesOffset);
    fbBuilder.addOffset(5, controllerPublishSecretRefOffset);
    fbBuilder.addOffset(6, nodeStageSecretRefOffset);
    fbBuilder.addOffset(7, nodePublishSecretRefOffset);
    fbBuilder.addOffset(8, controllerExpandSecretRefOffset);
    fbBuilder.addOffset(9, nodeExpandSecretRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsivolumeSource {
  CsivolumeSource._(this._bc, this._bcOffset);
  factory CsivolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsivolumeSource> reader = _CsivolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get driver => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<api_core_v1_csivolume_source_.VolumeAttributesEntry>? get volumeAttributes => const fb.ListReader<api_core_v1_csivolume_source_.VolumeAttributesEntry>(api_core_v1_csivolume_source_.VolumeAttributesEntry.reader).vTableGetNullable(_bc, _bcOffset, 10);
  LocalObjectReference? get nodePublishSecretRef => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'CsivolumeSource{driver: ${driver}, readOnly: ${readOnly}, fsType: ${fsType}, volumeAttributes: ${volumeAttributes}, nodePublishSecretRef: ${nodePublishSecretRef}}';
  }
}

class _CsivolumeSourceReader extends fb.TableReader<CsivolumeSource> {
  const _CsivolumeSourceReader();

  @override
  CsivolumeSource createObject(fb.BufferContext bc, int offset) => 
    CsivolumeSource._(bc, offset);
}

class CsivolumeSourceBuilder {
  CsivolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addDriverOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(1, readOnly);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addVolumeAttributesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addNodePublishSecretRefOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsivolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _driver;
  final bool? _readOnly;
  final String? _fsType;
  final List<api_core_v1_csivolume_source_.VolumeAttributesEntryObjectBuilder>? _volumeAttributes;
  final LocalObjectReferenceObjectBuilder? _nodePublishSecretRef;

  CsivolumeSourceObjectBuilder({
    String? driver,
    bool? readOnly,
    String? fsType,
    List<api_core_v1_csivolume_source_.VolumeAttributesEntryObjectBuilder>? volumeAttributes,
    LocalObjectReferenceObjectBuilder? nodePublishSecretRef,
  })
      : _driver = driver,
        _readOnly = readOnly,
        _fsType = fsType,
        _volumeAttributes = volumeAttributes,
        _nodePublishSecretRef = nodePublishSecretRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driverOffset = _driver == null ? null
        : fbBuilder.writeString(_driver!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? volumeAttributesOffset = _volumeAttributes == null ? null
        : fbBuilder.writeList(_volumeAttributes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? nodePublishSecretRefOffset = _nodePublishSecretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, driverOffset);
    fbBuilder.addBool(1, _readOnly);
    fbBuilder.addOffset(2, fsTypeOffset);
    fbBuilder.addOffset(3, volumeAttributesOffset);
    fbBuilder.addOffset(4, nodePublishSecretRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Capabilities {
  Capabilities._(this._bc, this._bcOffset);
  factory Capabilities(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Capabilities> reader = _CapabilitiesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get add => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get drop => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Capabilities{add: ${add}, drop: ${drop}}';
  }
}

class _CapabilitiesReader extends fb.TableReader<Capabilities> {
  const _CapabilitiesReader();

  @override
  Capabilities createObject(fb.BufferContext bc, int offset) => 
    Capabilities._(bc, offset);
}

class CapabilitiesBuilder {
  CapabilitiesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addAddOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDropOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CapabilitiesObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _add;
  final List<String>? _drop;

  CapabilitiesObjectBuilder({
    List<String>? add,
    List<String>? drop,
  })
      : _add = add,
        _drop = drop;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addOffset = _add == null ? null
        : fbBuilder.writeList(_add!.map(fbBuilder.writeString).toList());
    final int? dropOffset = _drop == null ? null
        : fbBuilder.writeList(_drop!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, addOffset);
    fbBuilder.addOffset(1, dropOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CephFspersistentVolumeSource {
  CephFspersistentVolumeSource._(this._bc, this._bcOffset);
  factory CephFspersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CephFspersistentVolumeSource> reader = _CephFspersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get monitors => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get user => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get secretFile => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  SecretReference? get secretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 12);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);

  @override
  String toString() {
    return 'CephFspersistentVolumeSource{monitors: ${monitors}, path: ${path}, user: ${user}, secretFile: ${secretFile}, secretRef: ${secretRef}, readOnly: ${readOnly}}';
  }
}

class _CephFspersistentVolumeSourceReader extends fb.TableReader<CephFspersistentVolumeSource> {
  const _CephFspersistentVolumeSourceReader();

  @override
  CephFspersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    CephFspersistentVolumeSource._(bc, offset);
}

class CephFspersistentVolumeSourceBuilder {
  CephFspersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addMonitorsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUserOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSecretFileOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(5, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CephFspersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _monitors;
  final String? _path;
  final String? _user;
  final String? _secretFile;
  final SecretReferenceObjectBuilder? _secretRef;
  final bool? _readOnly;

  CephFspersistentVolumeSourceObjectBuilder({
    List<String>? monitors,
    String? path,
    String? user,
    String? secretFile,
    SecretReferenceObjectBuilder? secretRef,
    bool? readOnly,
  })
      : _monitors = monitors,
        _path = path,
        _user = user,
        _secretFile = secretFile,
        _secretRef = secretRef,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? monitorsOffset = _monitors == null ? null
        : fbBuilder.writeList(_monitors!.map(fbBuilder.writeString).toList());
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    final int? userOffset = _user == null ? null
        : fbBuilder.writeString(_user!);
    final int? secretFileOffset = _secretFile == null ? null
        : fbBuilder.writeString(_secretFile!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, monitorsOffset);
    fbBuilder.addOffset(1, pathOffset);
    fbBuilder.addOffset(2, userOffset);
    fbBuilder.addOffset(3, secretFileOffset);
    fbBuilder.addOffset(4, secretRefOffset);
    fbBuilder.addBool(5, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CephFsvolumeSource {
  CephFsvolumeSource._(this._bc, this._bcOffset);
  factory CephFsvolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CephFsvolumeSource> reader = _CephFsvolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get monitors => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get user => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get secretFile => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  LocalObjectReference? get secretRef => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 12);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);

  @override
  String toString() {
    return 'CephFsvolumeSource{monitors: ${monitors}, path: ${path}, user: ${user}, secretFile: ${secretFile}, secretRef: ${secretRef}, readOnly: ${readOnly}}';
  }
}

class _CephFsvolumeSourceReader extends fb.TableReader<CephFsvolumeSource> {
  const _CephFsvolumeSourceReader();

  @override
  CephFsvolumeSource createObject(fb.BufferContext bc, int offset) => 
    CephFsvolumeSource._(bc, offset);
}

class CephFsvolumeSourceBuilder {
  CephFsvolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addMonitorsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUserOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSecretFileOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(5, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CephFsvolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _monitors;
  final String? _path;
  final String? _user;
  final String? _secretFile;
  final LocalObjectReferenceObjectBuilder? _secretRef;
  final bool? _readOnly;

  CephFsvolumeSourceObjectBuilder({
    List<String>? monitors,
    String? path,
    String? user,
    String? secretFile,
    LocalObjectReferenceObjectBuilder? secretRef,
    bool? readOnly,
  })
      : _monitors = monitors,
        _path = path,
        _user = user,
        _secretFile = secretFile,
        _secretRef = secretRef,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? monitorsOffset = _monitors == null ? null
        : fbBuilder.writeList(_monitors!.map(fbBuilder.writeString).toList());
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    final int? userOffset = _user == null ? null
        : fbBuilder.writeString(_user!);
    final int? secretFileOffset = _secretFile == null ? null
        : fbBuilder.writeString(_secretFile!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, monitorsOffset);
    fbBuilder.addOffset(1, pathOffset);
    fbBuilder.addOffset(2, userOffset);
    fbBuilder.addOffset(3, secretFileOffset);
    fbBuilder.addOffset(4, secretRefOffset);
    fbBuilder.addBool(5, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CinderPersistentVolumeSource {
  CinderPersistentVolumeSource._(this._bc, this._bcOffset);
  factory CinderPersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CinderPersistentVolumeSource> reader = _CinderPersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get volumeId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  SecretReference? get secretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'CinderPersistentVolumeSource{volumeId: ${volumeId}, fsType: ${fsType}, readOnly: ${readOnly}, secretRef: ${secretRef}}';
  }
}

class _CinderPersistentVolumeSourceReader extends fb.TableReader<CinderPersistentVolumeSource> {
  const _CinderPersistentVolumeSourceReader();

  @override
  CinderPersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    CinderPersistentVolumeSource._(bc, offset);
}

class CinderPersistentVolumeSourceBuilder {
  CinderPersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addVolumeIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CinderPersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _volumeId;
  final String? _fsType;
  final bool? _readOnly;
  final SecretReferenceObjectBuilder? _secretRef;

  CinderPersistentVolumeSourceObjectBuilder({
    String? volumeId,
    String? fsType,
    bool? readOnly,
    SecretReferenceObjectBuilder? secretRef,
  })
      : _volumeId = volumeId,
        _fsType = fsType,
        _readOnly = readOnly,
        _secretRef = secretRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumeIdOffset = _volumeId == null ? null
        : fbBuilder.writeString(_volumeId!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, volumeIdOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    fbBuilder.addBool(2, _readOnly);
    fbBuilder.addOffset(3, secretRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CinderVolumeSource {
  CinderVolumeSource._(this._bc, this._bcOffset);
  factory CinderVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CinderVolumeSource> reader = _CinderVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get volumeId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  LocalObjectReference? get secretRef => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'CinderVolumeSource{volumeId: ${volumeId}, fsType: ${fsType}, readOnly: ${readOnly}, secretRef: ${secretRef}}';
  }
}

class _CinderVolumeSourceReader extends fb.TableReader<CinderVolumeSource> {
  const _CinderVolumeSourceReader();

  @override
  CinderVolumeSource createObject(fb.BufferContext bc, int offset) => 
    CinderVolumeSource._(bc, offset);
}

class CinderVolumeSourceBuilder {
  CinderVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addVolumeIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CinderVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _volumeId;
  final String? _fsType;
  final bool? _readOnly;
  final LocalObjectReferenceObjectBuilder? _secretRef;

  CinderVolumeSourceObjectBuilder({
    String? volumeId,
    String? fsType,
    bool? readOnly,
    LocalObjectReferenceObjectBuilder? secretRef,
  })
      : _volumeId = volumeId,
        _fsType = fsType,
        _readOnly = readOnly,
        _secretRef = secretRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumeIdOffset = _volumeId == null ? null
        : fbBuilder.writeString(_volumeId!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, volumeIdOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    fbBuilder.addBool(2, _readOnly);
    fbBuilder.addOffset(3, secretRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ClaimSource {
  ClaimSource._(this._bc, this._bcOffset);
  factory ClaimSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ClaimSource> reader = _ClaimSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get resourceClaimName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get resourceClaimTemplateName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ClaimSource{resourceClaimName: ${resourceClaimName}, resourceClaimTemplateName: ${resourceClaimTemplateName}}';
  }
}

class _ClaimSourceReader extends fb.TableReader<ClaimSource> {
  const _ClaimSourceReader();

  @override
  ClaimSource createObject(fb.BufferContext bc, int offset) => 
    ClaimSource._(bc, offset);
}

class ClaimSourceBuilder {
  ClaimSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addResourceClaimNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceClaimTemplateNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ClaimSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _resourceClaimName;
  final String? _resourceClaimTemplateName;

  ClaimSourceObjectBuilder({
    String? resourceClaimName,
    String? resourceClaimTemplateName,
  })
      : _resourceClaimName = resourceClaimName,
        _resourceClaimTemplateName = resourceClaimTemplateName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? resourceClaimNameOffset = _resourceClaimName == null ? null
        : fbBuilder.writeString(_resourceClaimName!);
    final int? resourceClaimTemplateNameOffset = _resourceClaimTemplateName == null ? null
        : fbBuilder.writeString(_resourceClaimTemplateName!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, resourceClaimNameOffset);
    fbBuilder.addOffset(1, resourceClaimTemplateNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ClientIpconfig {
  ClientIpconfig._(this._bc, this._bcOffset);
  factory ClientIpconfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ClientIpconfig> reader = _ClientIpconfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timeoutSeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'ClientIpconfig{timeoutSeconds: ${timeoutSeconds}}';
  }
}

class _ClientIpconfigReader extends fb.TableReader<ClientIpconfig> {
  const _ClientIpconfigReader();

  @override
  ClientIpconfig createObject(fb.BufferContext bc, int offset) => 
    ClientIpconfig._(bc, offset);
}

class ClientIpconfigBuilder {
  ClientIpconfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addTimeoutSeconds(int? timeoutSeconds) {
    fbBuilder.addInt32(0, timeoutSeconds);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ClientIpconfigObjectBuilder extends fb.ObjectBuilder {
  final int? _timeoutSeconds;

  ClientIpconfigObjectBuilder({
    int? timeoutSeconds,
  })
      : _timeoutSeconds = timeoutSeconds;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt32(0, _timeoutSeconds);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ClusterTrustBundleProjection {
  ClusterTrustBundleProjection._(this._bc, this._bcOffset);
  factory ClusterTrustBundleProjection(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ClusterTrustBundleProjection> reader = _ClusterTrustBundleProjectionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get signerName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get labelSelector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 8);
  bool get optional => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'ClusterTrustBundleProjection{name: ${name}, signerName: ${signerName}, labelSelector: ${labelSelector}, optional: ${optional}, path: ${path}}';
  }
}

class _ClusterTrustBundleProjectionReader extends fb.TableReader<ClusterTrustBundleProjection> {
  const _ClusterTrustBundleProjectionReader();

  @override
  ClusterTrustBundleProjection createObject(fb.BufferContext bc, int offset) => 
    ClusterTrustBundleProjection._(bc, offset);
}

class ClusterTrustBundleProjectionBuilder {
  ClusterTrustBundleProjectionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSignerNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLabelSelectorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addOptional(bool? optional) {
    fbBuilder.addBool(3, optional);
    return fbBuilder.offset;
  }
  int addPathOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ClusterTrustBundleProjectionObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _signerName;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _labelSelector;
  final bool? _optional;
  final String? _path;

  ClusterTrustBundleProjectionObjectBuilder({
    String? name,
    String? signerName,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? labelSelector,
    bool? optional,
    String? path,
  })
      : _name = name,
        _signerName = signerName,
        _labelSelector = labelSelector,
        _optional = optional,
        _path = path;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? signerNameOffset = _signerName == null ? null
        : fbBuilder.writeString(_signerName!);
    final int? labelSelectorOffset = _labelSelector?.getOrCreateOffset(fbBuilder);
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, signerNameOffset);
    fbBuilder.addOffset(2, labelSelectorOffset);
    fbBuilder.addBool(3, _optional);
    fbBuilder.addOffset(4, pathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ComponentCondition {
  ComponentCondition._(this._bc, this._bcOffset);
  factory ComponentCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ComponentCondition> reader = _ComponentConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ComponentCondition{type: ${type}, status: ${status}, message: ${message}, error: ${error}}';
  }
}

class _ComponentConditionReader extends fb.TableReader<ComponentCondition> {
  const _ComponentConditionReader();

  @override
  ComponentCondition createObject(fb.BufferContext bc, int offset) => 
    ComponentCondition._(bc, offset);
}

class ComponentConditionBuilder {
  ComponentConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ComponentConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final String? _message;
  final String? _error;

  ComponentConditionObjectBuilder({
    String? type,
    String? status,
    String? message,
    String? error,
  })
      : _type = type,
        _status = status,
        _message = message,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, messageOffset);
    fbBuilder.addOffset(3, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ComponentStatus {
  ComponentStatus._(this._bc, this._bcOffset);
  factory ComponentStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ComponentStatus> reader = _ComponentStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ComponentCondition>? get conditions => const fb.ListReader<ComponentCondition>(ComponentCondition.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ComponentStatus{metadata: ${metadata}, conditions: ${conditions}}';
  }
}

class _ComponentStatusReader extends fb.TableReader<ComponentStatus> {
  const _ComponentStatusReader();

  @override
  ComponentStatus createObject(fb.BufferContext bc, int offset) => 
    ComponentStatus._(bc, offset);
}

class ComponentStatusBuilder {
  ComponentStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ComponentStatusObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final List<ComponentConditionObjectBuilder>? _conditions;

  ComponentStatusObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    List<ComponentConditionObjectBuilder>? conditions,
  })
      : _metadata = metadata,
        _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ComponentStatusList {
  ComponentStatusList._(this._bc, this._bcOffset);
  factory ComponentStatusList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ComponentStatusList> reader = _ComponentStatusListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ComponentStatus>? get items => const fb.ListReader<ComponentStatus>(ComponentStatus.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ComponentStatusList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ComponentStatusListReader extends fb.TableReader<ComponentStatusList> {
  const _ComponentStatusListReader();

  @override
  ComponentStatusList createObject(fb.BufferContext bc, int offset) => 
    ComponentStatusList._(bc, offset);
}

class ComponentStatusListBuilder {
  ComponentStatusListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ComponentStatusListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ComponentStatusObjectBuilder>? _items;

  ComponentStatusListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ComponentStatusObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ConfigMap {
  ConfigMap._(this._bc, this._bcOffset);
  factory ConfigMap(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConfigMap> reader = _ConfigMapReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  bool get immutable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  List<api_core_v1_config_map_.DataEntry>? get data => const fb.ListReader<api_core_v1_config_map_.DataEntry>(api_core_v1_config_map_.DataEntry.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<api_core_v1_config_map_.BinaryDataEntry>? get binaryData => const fb.ListReader<api_core_v1_config_map_.BinaryDataEntry>(api_core_v1_config_map_.BinaryDataEntry.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ConfigMap{metadata: ${metadata}, immutable: ${immutable}, data: ${data}, binaryData: ${binaryData}}';
  }
}

class _ConfigMapReader extends fb.TableReader<ConfigMap> {
  const _ConfigMapReader();

  @override
  ConfigMap createObject(fb.BufferContext bc, int offset) => 
    ConfigMap._(bc, offset);
}

class ConfigMapBuilder {
  ConfigMapBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addImmutable(bool? immutable) {
    fbBuilder.addBool(1, immutable);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addBinaryDataOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigMapObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final bool? _immutable;
  final List<api_core_v1_config_map_.DataEntryObjectBuilder>? _data;
  final List<api_core_v1_config_map_.BinaryDataEntryObjectBuilder>? _binaryData;

  ConfigMapObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    bool? immutable,
    List<api_core_v1_config_map_.DataEntryObjectBuilder>? data,
    List<api_core_v1_config_map_.BinaryDataEntryObjectBuilder>? binaryData,
  })
      : _metadata = metadata,
        _immutable = immutable,
        _data = data,
        _binaryData = binaryData;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeList(_data!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? binaryDataOffset = _binaryData == null ? null
        : fbBuilder.writeList(_binaryData!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addBool(1, _immutable);
    fbBuilder.addOffset(2, dataOffset);
    fbBuilder.addOffset(3, binaryDataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ConfigMapEnvSource {
  ConfigMapEnvSource._(this._bc, this._bcOffset);
  factory ConfigMapEnvSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConfigMapEnvSource> reader = _ConfigMapEnvSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LocalObjectReference? get localObjectReference => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 4);
  bool get optional => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'ConfigMapEnvSource{localObjectReference: ${localObjectReference}, optional: ${optional}}';
  }
}

class _ConfigMapEnvSourceReader extends fb.TableReader<ConfigMapEnvSource> {
  const _ConfigMapEnvSourceReader();

  @override
  ConfigMapEnvSource createObject(fb.BufferContext bc, int offset) => 
    ConfigMapEnvSource._(bc, offset);
}

class ConfigMapEnvSourceBuilder {
  ConfigMapEnvSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addLocalObjectReferenceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOptional(bool? optional) {
    fbBuilder.addBool(1, optional);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigMapEnvSourceObjectBuilder extends fb.ObjectBuilder {
  final LocalObjectReferenceObjectBuilder? _localObjectReference;
  final bool? _optional;

  ConfigMapEnvSourceObjectBuilder({
    LocalObjectReferenceObjectBuilder? localObjectReference,
    bool? optional,
  })
      : _localObjectReference = localObjectReference,
        _optional = optional;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? localObjectReferenceOffset = _localObjectReference?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, localObjectReferenceOffset);
    fbBuilder.addBool(1, _optional);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ConfigMapKeySelector {
  ConfigMapKeySelector._(this._bc, this._bcOffset);
  factory ConfigMapKeySelector(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConfigMapKeySelector> reader = _ConfigMapKeySelectorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LocalObjectReference? get localObjectReference => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get optional => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'ConfigMapKeySelector{localObjectReference: ${localObjectReference}, key: ${key}, optional: ${optional}}';
  }
}

class _ConfigMapKeySelectorReader extends fb.TableReader<ConfigMapKeySelector> {
  const _ConfigMapKeySelectorReader();

  @override
  ConfigMapKeySelector createObject(fb.BufferContext bc, int offset) => 
    ConfigMapKeySelector._(bc, offset);
}

class ConfigMapKeySelectorBuilder {
  ConfigMapKeySelectorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addLocalObjectReferenceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOptional(bool? optional) {
    fbBuilder.addBool(2, optional);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigMapKeySelectorObjectBuilder extends fb.ObjectBuilder {
  final LocalObjectReferenceObjectBuilder? _localObjectReference;
  final String? _key;
  final bool? _optional;

  ConfigMapKeySelectorObjectBuilder({
    LocalObjectReferenceObjectBuilder? localObjectReference,
    String? key,
    bool? optional,
  })
      : _localObjectReference = localObjectReference,
        _key = key,
        _optional = optional;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? localObjectReferenceOffset = _localObjectReference?.getOrCreateOffset(fbBuilder);
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, localObjectReferenceOffset);
    fbBuilder.addOffset(1, keyOffset);
    fbBuilder.addBool(2, _optional);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ConfigMapList {
  ConfigMapList._(this._bc, this._bcOffset);
  factory ConfigMapList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConfigMapList> reader = _ConfigMapListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ConfigMap>? get items => const fb.ListReader<ConfigMap>(ConfigMap.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ConfigMapList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ConfigMapListReader extends fb.TableReader<ConfigMapList> {
  const _ConfigMapListReader();

  @override
  ConfigMapList createObject(fb.BufferContext bc, int offset) => 
    ConfigMapList._(bc, offset);
}

class ConfigMapListBuilder {
  ConfigMapListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigMapListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ConfigMapObjectBuilder>? _items;

  ConfigMapListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ConfigMapObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ConfigMapNodeConfigSource {
  ConfigMapNodeConfigSource._(this._bc, this._bcOffset);
  factory ConfigMapNodeConfigSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConfigMapNodeConfigSource> reader = _ConfigMapNodeConfigSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get uid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get resourceVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get kubeletConfigKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'ConfigMapNodeConfigSource{namespace: ${namespace}, name: ${name}, uid: ${uid}, resourceVersion: ${resourceVersion}, kubeletConfigKey: ${kubeletConfigKey}}';
  }
}

class _ConfigMapNodeConfigSourceReader extends fb.TableReader<ConfigMapNodeConfigSource> {
  const _ConfigMapNodeConfigSourceReader();

  @override
  ConfigMapNodeConfigSource createObject(fb.BufferContext bc, int offset) => 
    ConfigMapNodeConfigSource._(bc, offset);
}

class ConfigMapNodeConfigSourceBuilder {
  ConfigMapNodeConfigSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUidOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addResourceVersionOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addKubeletConfigKeyOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigMapNodeConfigSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _namespace;
  final String? _name;
  final String? _uid;
  final String? _resourceVersion;
  final String? _kubeletConfigKey;

  ConfigMapNodeConfigSourceObjectBuilder({
    String? namespace,
    String? name,
    String? uid,
    String? resourceVersion,
    String? kubeletConfigKey,
  })
      : _namespace = namespace,
        _name = name,
        _uid = uid,
        _resourceVersion = resourceVersion,
        _kubeletConfigKey = kubeletConfigKey;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? uidOffset = _uid == null ? null
        : fbBuilder.writeString(_uid!);
    final int? resourceVersionOffset = _resourceVersion == null ? null
        : fbBuilder.writeString(_resourceVersion!);
    final int? kubeletConfigKeyOffset = _kubeletConfigKey == null ? null
        : fbBuilder.writeString(_kubeletConfigKey!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, namespaceOffset);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addOffset(2, uidOffset);
    fbBuilder.addOffset(3, resourceVersionOffset);
    fbBuilder.addOffset(4, kubeletConfigKeyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ConfigMapProjection {
  ConfigMapProjection._(this._bc, this._bcOffset);
  factory ConfigMapProjection(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConfigMapProjection> reader = _ConfigMapProjectionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LocalObjectReference? get localObjectReference => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<KeyToPath>? get items => const fb.ListReader<KeyToPath>(KeyToPath.reader).vTableGetNullable(_bc, _bcOffset, 6);
  bool get optional => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'ConfigMapProjection{localObjectReference: ${localObjectReference}, items: ${items}, optional: ${optional}}';
  }
}

class _ConfigMapProjectionReader extends fb.TableReader<ConfigMapProjection> {
  const _ConfigMapProjectionReader();

  @override
  ConfigMapProjection createObject(fb.BufferContext bc, int offset) => 
    ConfigMapProjection._(bc, offset);
}

class ConfigMapProjectionBuilder {
  ConfigMapProjectionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addLocalObjectReferenceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOptional(bool? optional) {
    fbBuilder.addBool(2, optional);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigMapProjectionObjectBuilder extends fb.ObjectBuilder {
  final LocalObjectReferenceObjectBuilder? _localObjectReference;
  final List<KeyToPathObjectBuilder>? _items;
  final bool? _optional;

  ConfigMapProjectionObjectBuilder({
    LocalObjectReferenceObjectBuilder? localObjectReference,
    List<KeyToPathObjectBuilder>? items,
    bool? optional,
  })
      : _localObjectReference = localObjectReference,
        _items = items,
        _optional = optional;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? localObjectReferenceOffset = _localObjectReference?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, localObjectReferenceOffset);
    fbBuilder.addOffset(1, itemsOffset);
    fbBuilder.addBool(2, _optional);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ConfigMapVolumeSource {
  ConfigMapVolumeSource._(this._bc, this._bcOffset);
  factory ConfigMapVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ConfigMapVolumeSource> reader = _ConfigMapVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LocalObjectReference? get localObjectReference => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<KeyToPath>? get items => const fb.ListReader<KeyToPath>(KeyToPath.reader).vTableGetNullable(_bc, _bcOffset, 6);
  int get defaultMode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  bool get optional => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  @override
  String toString() {
    return 'ConfigMapVolumeSource{localObjectReference: ${localObjectReference}, items: ${items}, defaultMode: ${defaultMode}, optional: ${optional}}';
  }
}

class _ConfigMapVolumeSourceReader extends fb.TableReader<ConfigMapVolumeSource> {
  const _ConfigMapVolumeSourceReader();

  @override
  ConfigMapVolumeSource createObject(fb.BufferContext bc, int offset) => 
    ConfigMapVolumeSource._(bc, offset);
}

class ConfigMapVolumeSourceBuilder {
  ConfigMapVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addLocalObjectReferenceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDefaultMode(int? defaultMode) {
    fbBuilder.addInt32(2, defaultMode);
    return fbBuilder.offset;
  }
  int addOptional(bool? optional) {
    fbBuilder.addBool(3, optional);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConfigMapVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final LocalObjectReferenceObjectBuilder? _localObjectReference;
  final List<KeyToPathObjectBuilder>? _items;
  final int? _defaultMode;
  final bool? _optional;

  ConfigMapVolumeSourceObjectBuilder({
    LocalObjectReferenceObjectBuilder? localObjectReference,
    List<KeyToPathObjectBuilder>? items,
    int? defaultMode,
    bool? optional,
  })
      : _localObjectReference = localObjectReference,
        _items = items,
        _defaultMode = defaultMode,
        _optional = optional;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? localObjectReferenceOffset = _localObjectReference?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, localObjectReferenceOffset);
    fbBuilder.addOffset(1, itemsOffset);
    fbBuilder.addInt32(2, _defaultMode);
    fbBuilder.addBool(3, _optional);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Container {
  Container._(this._bc, this._bcOffset);
  factory Container(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Container> reader = _ContainerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get image => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get command => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  List<String>? get args => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);
  String? get workingDir => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  List<ContainerPort>? get ports => const fb.ListReader<ContainerPort>(ContainerPort.reader).vTableGetNullable(_bc, _bcOffset, 14);
  List<EnvFromSource>? get envFrom => const fb.ListReader<EnvFromSource>(EnvFromSource.reader).vTableGetNullable(_bc, _bcOffset, 16);
  List<EnvVar>? get env => const fb.ListReader<EnvVar>(EnvVar.reader).vTableGetNullable(_bc, _bcOffset, 18);
  ResourceRequirements? get resources => ResourceRequirements.reader.vTableGetNullable(_bc, _bcOffset, 20);
  List<ContainerResizePolicy>? get resizePolicy => const fb.ListReader<ContainerResizePolicy>(ContainerResizePolicy.reader).vTableGetNullable(_bc, _bcOffset, 22);
  String? get restartPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  List<VolumeMount>? get volumeMounts => const fb.ListReader<VolumeMount>(VolumeMount.reader).vTableGetNullable(_bc, _bcOffset, 26);
  List<VolumeDevice>? get volumeDevices => const fb.ListReader<VolumeDevice>(VolumeDevice.reader).vTableGetNullable(_bc, _bcOffset, 28);
  Probe? get livenessProbe => Probe.reader.vTableGetNullable(_bc, _bcOffset, 30);
  Probe? get readinessProbe => Probe.reader.vTableGetNullable(_bc, _bcOffset, 32);
  Probe? get startupProbe => Probe.reader.vTableGetNullable(_bc, _bcOffset, 34);
  Lifecycle? get lifecycle => Lifecycle.reader.vTableGetNullable(_bc, _bcOffset, 36);
  String? get terminationMessagePath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  String? get terminationMessagePolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  String? get imagePullPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  SecurityContext? get securityContext => SecurityContext.reader.vTableGetNullable(_bc, _bcOffset, 44);
  bool get stdin => const fb.BoolReader().vTableGet(_bc, _bcOffset, 46, false);
  bool get stdinOnce => const fb.BoolReader().vTableGet(_bc, _bcOffset, 48, false);
  bool get tty => const fb.BoolReader().vTableGet(_bc, _bcOffset, 50, false);

  @override
  String toString() {
    return 'Container{name: ${name}, image: ${image}, command: ${command}, args: ${args}, workingDir: ${workingDir}, ports: ${ports}, envFrom: ${envFrom}, env: ${env}, resources: ${resources}, resizePolicy: ${resizePolicy}, restartPolicy: ${restartPolicy}, volumeMounts: ${volumeMounts}, volumeDevices: ${volumeDevices}, livenessProbe: ${livenessProbe}, readinessProbe: ${readinessProbe}, startupProbe: ${startupProbe}, lifecycle: ${lifecycle}, terminationMessagePath: ${terminationMessagePath}, terminationMessagePolicy: ${terminationMessagePolicy}, imagePullPolicy: ${imagePullPolicy}, securityContext: ${securityContext}, stdin: ${stdin}, stdinOnce: ${stdinOnce}, tty: ${tty}}';
  }
}

class _ContainerReader extends fb.TableReader<Container> {
  const _ContainerReader();

  @override
  Container createObject(fb.BufferContext bc, int offset) => 
    Container._(bc, offset);
}

class ContainerBuilder {
  ContainerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addImageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCommandOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addArgsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addWorkingDirOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPortsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addEnvFromOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addEnvOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addResourcesOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addResizePolicyOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addRestartPolicyOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addVolumeMountsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addVolumeDevicesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addLivenessProbeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addReadinessProbeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addStartupProbeOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addLifecycleOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addTerminationMessagePathOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addTerminationMessagePolicyOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addImagePullPolicyOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addSecurityContextOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addStdin(bool? stdin) {
    fbBuilder.addBool(21, stdin);
    return fbBuilder.offset;
  }
  int addStdinOnce(bool? stdinOnce) {
    fbBuilder.addBool(22, stdinOnce);
    return fbBuilder.offset;
  }
  int addTty(bool? tty) {
    fbBuilder.addBool(23, tty);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContainerObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _image;
  final List<String>? _command;
  final List<String>? _args;
  final String? _workingDir;
  final List<ContainerPortObjectBuilder>? _ports;
  final List<EnvFromSourceObjectBuilder>? _envFrom;
  final List<EnvVarObjectBuilder>? _env;
  final ResourceRequirementsObjectBuilder? _resources;
  final List<ContainerResizePolicyObjectBuilder>? _resizePolicy;
  final String? _restartPolicy;
  final List<VolumeMountObjectBuilder>? _volumeMounts;
  final List<VolumeDeviceObjectBuilder>? _volumeDevices;
  final ProbeObjectBuilder? _livenessProbe;
  final ProbeObjectBuilder? _readinessProbe;
  final ProbeObjectBuilder? _startupProbe;
  final LifecycleObjectBuilder? _lifecycle;
  final String? _terminationMessagePath;
  final String? _terminationMessagePolicy;
  final String? _imagePullPolicy;
  final SecurityContextObjectBuilder? _securityContext;
  final bool? _stdin;
  final bool? _stdinOnce;
  final bool? _tty;

  ContainerObjectBuilder({
    String? name,
    String? image,
    List<String>? command,
    List<String>? args,
    String? workingDir,
    List<ContainerPortObjectBuilder>? ports,
    List<EnvFromSourceObjectBuilder>? envFrom,
    List<EnvVarObjectBuilder>? env,
    ResourceRequirementsObjectBuilder? resources,
    List<ContainerResizePolicyObjectBuilder>? resizePolicy,
    String? restartPolicy,
    List<VolumeMountObjectBuilder>? volumeMounts,
    List<VolumeDeviceObjectBuilder>? volumeDevices,
    ProbeObjectBuilder? livenessProbe,
    ProbeObjectBuilder? readinessProbe,
    ProbeObjectBuilder? startupProbe,
    LifecycleObjectBuilder? lifecycle,
    String? terminationMessagePath,
    String? terminationMessagePolicy,
    String? imagePullPolicy,
    SecurityContextObjectBuilder? securityContext,
    bool? stdin,
    bool? stdinOnce,
    bool? tty,
  })
      : _name = name,
        _image = image,
        _command = command,
        _args = args,
        _workingDir = workingDir,
        _ports = ports,
        _envFrom = envFrom,
        _env = env,
        _resources = resources,
        _resizePolicy = resizePolicy,
        _restartPolicy = restartPolicy,
        _volumeMounts = volumeMounts,
        _volumeDevices = volumeDevices,
        _livenessProbe = livenessProbe,
        _readinessProbe = readinessProbe,
        _startupProbe = startupProbe,
        _lifecycle = lifecycle,
        _terminationMessagePath = terminationMessagePath,
        _terminationMessagePolicy = terminationMessagePolicy,
        _imagePullPolicy = imagePullPolicy,
        _securityContext = securityContext,
        _stdin = stdin,
        _stdinOnce = stdinOnce,
        _tty = tty;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? imageOffset = _image == null ? null
        : fbBuilder.writeString(_image!);
    final int? commandOffset = _command == null ? null
        : fbBuilder.writeList(_command!.map(fbBuilder.writeString).toList());
    final int? argsOffset = _args == null ? null
        : fbBuilder.writeList(_args!.map(fbBuilder.writeString).toList());
    final int? workingDirOffset = _workingDir == null ? null
        : fbBuilder.writeString(_workingDir!);
    final int? portsOffset = _ports == null ? null
        : fbBuilder.writeList(_ports!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? envFromOffset = _envFrom == null ? null
        : fbBuilder.writeList(_envFrom!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? envOffset = _env == null ? null
        : fbBuilder.writeList(_env!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? resourcesOffset = _resources?.getOrCreateOffset(fbBuilder);
    final int? resizePolicyOffset = _resizePolicy == null ? null
        : fbBuilder.writeList(_resizePolicy!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? restartPolicyOffset = _restartPolicy == null ? null
        : fbBuilder.writeString(_restartPolicy!);
    final int? volumeMountsOffset = _volumeMounts == null ? null
        : fbBuilder.writeList(_volumeMounts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? volumeDevicesOffset = _volumeDevices == null ? null
        : fbBuilder.writeList(_volumeDevices!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? livenessProbeOffset = _livenessProbe?.getOrCreateOffset(fbBuilder);
    final int? readinessProbeOffset = _readinessProbe?.getOrCreateOffset(fbBuilder);
    final int? startupProbeOffset = _startupProbe?.getOrCreateOffset(fbBuilder);
    final int? lifecycleOffset = _lifecycle?.getOrCreateOffset(fbBuilder);
    final int? terminationMessagePathOffset = _terminationMessagePath == null ? null
        : fbBuilder.writeString(_terminationMessagePath!);
    final int? terminationMessagePolicyOffset = _terminationMessagePolicy == null ? null
        : fbBuilder.writeString(_terminationMessagePolicy!);
    final int? imagePullPolicyOffset = _imagePullPolicy == null ? null
        : fbBuilder.writeString(_imagePullPolicy!);
    final int? securityContextOffset = _securityContext?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, imageOffset);
    fbBuilder.addOffset(2, commandOffset);
    fbBuilder.addOffset(3, argsOffset);
    fbBuilder.addOffset(4, workingDirOffset);
    fbBuilder.addOffset(5, portsOffset);
    fbBuilder.addOffset(6, envFromOffset);
    fbBuilder.addOffset(7, envOffset);
    fbBuilder.addOffset(8, resourcesOffset);
    fbBuilder.addOffset(9, resizePolicyOffset);
    fbBuilder.addOffset(10, restartPolicyOffset);
    fbBuilder.addOffset(11, volumeMountsOffset);
    fbBuilder.addOffset(12, volumeDevicesOffset);
    fbBuilder.addOffset(13, livenessProbeOffset);
    fbBuilder.addOffset(14, readinessProbeOffset);
    fbBuilder.addOffset(15, startupProbeOffset);
    fbBuilder.addOffset(16, lifecycleOffset);
    fbBuilder.addOffset(17, terminationMessagePathOffset);
    fbBuilder.addOffset(18, terminationMessagePolicyOffset);
    fbBuilder.addOffset(19, imagePullPolicyOffset);
    fbBuilder.addOffset(20, securityContextOffset);
    fbBuilder.addBool(21, _stdin);
    fbBuilder.addBool(22, _stdinOnce);
    fbBuilder.addBool(23, _tty);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContainerImage {
  ContainerImage._(this._bc, this._bcOffset);
  factory ContainerImage(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContainerImage> reader = _ContainerImageReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get names => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  int get sizeBytes => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'ContainerImage{names: ${names}, sizeBytes: ${sizeBytes}}';
  }
}

class _ContainerImageReader extends fb.TableReader<ContainerImage> {
  const _ContainerImageReader();

  @override
  ContainerImage createObject(fb.BufferContext bc, int offset) => 
    ContainerImage._(bc, offset);
}

class ContainerImageBuilder {
  ContainerImageBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNamesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSizeBytes(int? sizeBytes) {
    fbBuilder.addInt64(1, sizeBytes);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContainerImageObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _names;
  final int? _sizeBytes;

  ContainerImageObjectBuilder({
    List<String>? names,
    int? sizeBytes,
  })
      : _names = names,
        _sizeBytes = sizeBytes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namesOffset = _names == null ? null
        : fbBuilder.writeList(_names!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, namesOffset);
    fbBuilder.addInt64(1, _sizeBytes);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContainerPort {
  ContainerPort._(this._bc, this._bcOffset);
  factory ContainerPort(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContainerPort> reader = _ContainerPortReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get hostPort => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get containerPort => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get protocol => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get hostIp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'ContainerPort{name: ${name}, hostPort: ${hostPort}, containerPort: ${containerPort}, protocol: ${protocol}, hostIp: ${hostIp}}';
  }
}

class _ContainerPortReader extends fb.TableReader<ContainerPort> {
  const _ContainerPortReader();

  @override
  ContainerPort createObject(fb.BufferContext bc, int offset) => 
    ContainerPort._(bc, offset);
}

class ContainerPortBuilder {
  ContainerPortBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHostPort(int? hostPort) {
    fbBuilder.addInt32(1, hostPort);
    return fbBuilder.offset;
  }
  int addContainerPort(int? containerPort) {
    fbBuilder.addInt32(2, containerPort);
    return fbBuilder.offset;
  }
  int addProtocolOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHostIpOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContainerPortObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final int? _hostPort;
  final int? _containerPort;
  final String? _protocol;
  final String? _hostIp;

  ContainerPortObjectBuilder({
    String? name,
    int? hostPort,
    int? containerPort,
    String? protocol,
    String? hostIp,
  })
      : _name = name,
        _hostPort = hostPort,
        _containerPort = containerPort,
        _protocol = protocol,
        _hostIp = hostIp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? protocolOffset = _protocol == null ? null
        : fbBuilder.writeString(_protocol!);
    final int? hostIpOffset = _hostIp == null ? null
        : fbBuilder.writeString(_hostIp!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addInt32(1, _hostPort);
    fbBuilder.addInt32(2, _containerPort);
    fbBuilder.addOffset(3, protocolOffset);
    fbBuilder.addOffset(4, hostIpOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContainerResizePolicy {
  ContainerResizePolicy._(this._bc, this._bcOffset);
  factory ContainerResizePolicy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContainerResizePolicy> reader = _ContainerResizePolicyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get resourceName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get restartPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ContainerResizePolicy{resourceName: ${resourceName}, restartPolicy: ${restartPolicy}}';
  }
}

class _ContainerResizePolicyReader extends fb.TableReader<ContainerResizePolicy> {
  const _ContainerResizePolicyReader();

  @override
  ContainerResizePolicy createObject(fb.BufferContext bc, int offset) => 
    ContainerResizePolicy._(bc, offset);
}

class ContainerResizePolicyBuilder {
  ContainerResizePolicyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addResourceNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRestartPolicyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContainerResizePolicyObjectBuilder extends fb.ObjectBuilder {
  final String? _resourceName;
  final String? _restartPolicy;

  ContainerResizePolicyObjectBuilder({
    String? resourceName,
    String? restartPolicy,
  })
      : _resourceName = resourceName,
        _restartPolicy = restartPolicy;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? resourceNameOffset = _resourceName == null ? null
        : fbBuilder.writeString(_resourceName!);
    final int? restartPolicyOffset = _restartPolicy == null ? null
        : fbBuilder.writeString(_restartPolicy!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, resourceNameOffset);
    fbBuilder.addOffset(1, restartPolicyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContainerState {
  ContainerState._(this._bc, this._bcOffset);
  factory ContainerState(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContainerState> reader = _ContainerStateReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ContainerStateWaiting? get waiting => ContainerStateWaiting.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ContainerStateRunning? get running => ContainerStateRunning.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ContainerStateTerminated? get terminated => ContainerStateTerminated.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ContainerState{waiting: ${waiting}, running: ${running}, terminated: ${terminated}}';
  }
}

class _ContainerStateReader extends fb.TableReader<ContainerState> {
  const _ContainerStateReader();

  @override
  ContainerState createObject(fb.BufferContext bc, int offset) => 
    ContainerState._(bc, offset);
}

class ContainerStateBuilder {
  ContainerStateBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addWaitingOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRunningOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTerminatedOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContainerStateObjectBuilder extends fb.ObjectBuilder {
  final ContainerStateWaitingObjectBuilder? _waiting;
  final ContainerStateRunningObjectBuilder? _running;
  final ContainerStateTerminatedObjectBuilder? _terminated;

  ContainerStateObjectBuilder({
    ContainerStateWaitingObjectBuilder? waiting,
    ContainerStateRunningObjectBuilder? running,
    ContainerStateTerminatedObjectBuilder? terminated,
  })
      : _waiting = waiting,
        _running = running,
        _terminated = terminated;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? waitingOffset = _waiting?.getOrCreateOffset(fbBuilder);
    final int? runningOffset = _running?.getOrCreateOffset(fbBuilder);
    final int? terminatedOffset = _terminated?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, waitingOffset);
    fbBuilder.addOffset(1, runningOffset);
    fbBuilder.addOffset(2, terminatedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContainerStateRunning {
  ContainerStateRunning._(this._bc, this._bcOffset);
  factory ContainerStateRunning(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContainerStateRunning> reader = _ContainerStateRunningReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.Time? get startedAt => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ContainerStateRunning{startedAt: ${startedAt}}';
  }
}

class _ContainerStateRunningReader extends fb.TableReader<ContainerStateRunning> {
  const _ContainerStateRunningReader();

  @override
  ContainerStateRunning createObject(fb.BufferContext bc, int offset) => 
    ContainerStateRunning._(bc, offset);
}

class ContainerStateRunningBuilder {
  ContainerStateRunningBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addStartedAtOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContainerStateRunningObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _startedAt;

  ContainerStateRunningObjectBuilder({
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? startedAt,
  })
      : _startedAt = startedAt;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? startedAtOffset = _startedAt?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, startedAtOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContainerStateTerminated {
  ContainerStateTerminated._(this._bc, this._bcOffset);
  factory ContainerStateTerminated(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContainerStateTerminated> reader = _ContainerStateTerminatedReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get exitCode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get signal => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  apimachinery_pkg_apis_meta_v1.Time? get startedAt => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 12);
  apimachinery_pkg_apis_meta_v1.Time? get finishedAt => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 14);
  String? get containerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'ContainerStateTerminated{exitCode: ${exitCode}, signal: ${signal}, reason: ${reason}, message: ${message}, startedAt: ${startedAt}, finishedAt: ${finishedAt}, containerId: ${containerId}}';
  }
}

class _ContainerStateTerminatedReader extends fb.TableReader<ContainerStateTerminated> {
  const _ContainerStateTerminatedReader();

  @override
  ContainerStateTerminated createObject(fb.BufferContext bc, int offset) => 
    ContainerStateTerminated._(bc, offset);
}

class ContainerStateTerminatedBuilder {
  ContainerStateTerminatedBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addExitCode(int? exitCode) {
    fbBuilder.addInt32(0, exitCode);
    return fbBuilder.offset;
  }
  int addSignal(int? signal) {
    fbBuilder.addInt32(1, signal);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStartedAtOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addFinishedAtOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addContainerIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContainerStateTerminatedObjectBuilder extends fb.ObjectBuilder {
  final int? _exitCode;
  final int? _signal;
  final String? _reason;
  final String? _message;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _startedAt;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _finishedAt;
  final String? _containerId;

  ContainerStateTerminatedObjectBuilder({
    int? exitCode,
    int? signal,
    String? reason,
    String? message,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? startedAt,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? finishedAt,
    String? containerId,
  })
      : _exitCode = exitCode,
        _signal = signal,
        _reason = reason,
        _message = message,
        _startedAt = startedAt,
        _finishedAt = finishedAt,
        _containerId = containerId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    final int? startedAtOffset = _startedAt?.getOrCreateOffset(fbBuilder);
    final int? finishedAtOffset = _finishedAt?.getOrCreateOffset(fbBuilder);
    final int? containerIdOffset = _containerId == null ? null
        : fbBuilder.writeString(_containerId!);
    fbBuilder.startTable(7);
    fbBuilder.addInt32(0, _exitCode);
    fbBuilder.addInt32(1, _signal);
    fbBuilder.addOffset(2, reasonOffset);
    fbBuilder.addOffset(3, messageOffset);
    fbBuilder.addOffset(4, startedAtOffset);
    fbBuilder.addOffset(5, finishedAtOffset);
    fbBuilder.addOffset(6, containerIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContainerStateWaiting {
  ContainerStateWaiting._(this._bc, this._bcOffset);
  factory ContainerStateWaiting(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContainerStateWaiting> reader = _ContainerStateWaitingReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ContainerStateWaiting{reason: ${reason}, message: ${message}}';
  }
}

class _ContainerStateWaitingReader extends fb.TableReader<ContainerStateWaiting> {
  const _ContainerStateWaitingReader();

  @override
  ContainerStateWaiting createObject(fb.BufferContext bc, int offset) => 
    ContainerStateWaiting._(bc, offset);
}

class ContainerStateWaitingBuilder {
  ContainerStateWaitingBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContainerStateWaitingObjectBuilder extends fb.ObjectBuilder {
  final String? _reason;
  final String? _message;

  ContainerStateWaitingObjectBuilder({
    String? reason,
    String? message,
  })
      : _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, reasonOffset);
    fbBuilder.addOffset(1, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ContainerStatus {
  ContainerStatus._(this._bc, this._bcOffset);
  factory ContainerStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ContainerStatus> reader = _ContainerStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ContainerState? get state => ContainerState.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ContainerState? get lastState => ContainerState.reader.vTableGetNullable(_bc, _bcOffset, 8);
  bool get ready => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  int get restartCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  String? get image => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get imageId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get containerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  bool get started => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  List<api_core_v1_container_status_.AllocatedResourcesEntry>? get allocatedResources => const fb.ListReader<api_core_v1_container_status_.AllocatedResourcesEntry>(api_core_v1_container_status_.AllocatedResourcesEntry.reader).vTableGetNullable(_bc, _bcOffset, 22);
  ResourceRequirements? get resources => ResourceRequirements.reader.vTableGetNullable(_bc, _bcOffset, 24);
  List<VolumeMountStatus>? get volumeMounts => const fb.ListReader<VolumeMountStatus>(VolumeMountStatus.reader).vTableGetNullable(_bc, _bcOffset, 26);

  @override
  String toString() {
    return 'ContainerStatus{name: ${name}, state: ${state}, lastState: ${lastState}, ready: ${ready}, restartCount: ${restartCount}, image: ${image}, imageId: ${imageId}, containerId: ${containerId}, started: ${started}, allocatedResources: ${allocatedResources}, resources: ${resources}, volumeMounts: ${volumeMounts}}';
  }
}

class _ContainerStatusReader extends fb.TableReader<ContainerStatus> {
  const _ContainerStatusReader();

  @override
  ContainerStatus createObject(fb.BufferContext bc, int offset) => 
    ContainerStatus._(bc, offset);
}

class ContainerStatusBuilder {
  ContainerStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastStateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReady(bool? ready) {
    fbBuilder.addBool(3, ready);
    return fbBuilder.offset;
  }
  int addRestartCount(int? restartCount) {
    fbBuilder.addInt32(4, restartCount);
    return fbBuilder.offset;
  }
  int addImageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addImageIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addContainerIdOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addStarted(bool? started) {
    fbBuilder.addBool(8, started);
    return fbBuilder.offset;
  }
  int addAllocatedResourcesOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addResourcesOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addVolumeMountsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ContainerStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final ContainerStateObjectBuilder? _state;
  final ContainerStateObjectBuilder? _lastState;
  final bool? _ready;
  final int? _restartCount;
  final String? _image;
  final String? _imageId;
  final String? _containerId;
  final bool? _started;
  final List<api_core_v1_container_status_.AllocatedResourcesEntryObjectBuilder>? _allocatedResources;
  final ResourceRequirementsObjectBuilder? _resources;
  final List<VolumeMountStatusObjectBuilder>? _volumeMounts;

  ContainerStatusObjectBuilder({
    String? name,
    ContainerStateObjectBuilder? state,
    ContainerStateObjectBuilder? lastState,
    bool? ready,
    int? restartCount,
    String? image,
    String? imageId,
    String? containerId,
    bool? started,
    List<api_core_v1_container_status_.AllocatedResourcesEntryObjectBuilder>? allocatedResources,
    ResourceRequirementsObjectBuilder? resources,
    List<VolumeMountStatusObjectBuilder>? volumeMounts,
  })
      : _name = name,
        _state = state,
        _lastState = lastState,
        _ready = ready,
        _restartCount = restartCount,
        _image = image,
        _imageId = imageId,
        _containerId = containerId,
        _started = started,
        _allocatedResources = allocatedResources,
        _resources = resources,
        _volumeMounts = volumeMounts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? stateOffset = _state?.getOrCreateOffset(fbBuilder);
    final int? lastStateOffset = _lastState?.getOrCreateOffset(fbBuilder);
    final int? imageOffset = _image == null ? null
        : fbBuilder.writeString(_image!);
    final int? imageIdOffset = _imageId == null ? null
        : fbBuilder.writeString(_imageId!);
    final int? containerIdOffset = _containerId == null ? null
        : fbBuilder.writeString(_containerId!);
    final int? allocatedResourcesOffset = _allocatedResources == null ? null
        : fbBuilder.writeList(_allocatedResources!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? resourcesOffset = _resources?.getOrCreateOffset(fbBuilder);
    final int? volumeMountsOffset = _volumeMounts == null ? null
        : fbBuilder.writeList(_volumeMounts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, stateOffset);
    fbBuilder.addOffset(2, lastStateOffset);
    fbBuilder.addBool(3, _ready);
    fbBuilder.addInt32(4, _restartCount);
    fbBuilder.addOffset(5, imageOffset);
    fbBuilder.addOffset(6, imageIdOffset);
    fbBuilder.addOffset(7, containerIdOffset);
    fbBuilder.addBool(8, _started);
    fbBuilder.addOffset(9, allocatedResourcesOffset);
    fbBuilder.addOffset(10, resourcesOffset);
    fbBuilder.addOffset(11, volumeMountsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonEndpoint {
  DaemonEndpoint._(this._bc, this._bcOffset);
  factory DaemonEndpoint(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonEndpoint> reader = _DaemonEndpointReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get port => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'DaemonEndpoint{port: ${port}}';
  }
}

class _DaemonEndpointReader extends fb.TableReader<DaemonEndpoint> {
  const _DaemonEndpointReader();

  @override
  DaemonEndpoint createObject(fb.BufferContext bc, int offset) => 
    DaemonEndpoint._(bc, offset);
}

class DaemonEndpointBuilder {
  DaemonEndpointBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPort(int? port) {
    fbBuilder.addInt32(0, port);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonEndpointObjectBuilder extends fb.ObjectBuilder {
  final int? _port;

  DaemonEndpointObjectBuilder({
    int? port,
  })
      : _port = port;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt32(0, _port);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DownwardApiprojection {
  DownwardApiprojection._(this._bc, this._bcOffset);
  factory DownwardApiprojection(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DownwardApiprojection> reader = _DownwardApiprojectionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<DownwardApivolumeFile>? get items => const fb.ListReader<DownwardApivolumeFile>(DownwardApivolumeFile.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'DownwardApiprojection{items: ${items}}';
  }
}

class _DownwardApiprojectionReader extends fb.TableReader<DownwardApiprojection> {
  const _DownwardApiprojectionReader();

  @override
  DownwardApiprojection createObject(fb.BufferContext bc, int offset) => 
    DownwardApiprojection._(bc, offset);
}

class DownwardApiprojectionBuilder {
  DownwardApiprojectionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DownwardApiprojectionObjectBuilder extends fb.ObjectBuilder {
  final List<DownwardApivolumeFileObjectBuilder>? _items;

  DownwardApiprojectionObjectBuilder({
    List<DownwardApivolumeFileObjectBuilder>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DownwardApivolumeFile {
  DownwardApivolumeFile._(this._bc, this._bcOffset);
  factory DownwardApivolumeFile(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DownwardApivolumeFile> reader = _DownwardApivolumeFileReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ObjectFieldSelector? get fieldRef => ObjectFieldSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ResourceFieldSelector? get resourceFieldRef => ResourceFieldSelector.reader.vTableGetNullable(_bc, _bcOffset, 8);
  int get mode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'DownwardApivolumeFile{path: ${path}, fieldRef: ${fieldRef}, resourceFieldRef: ${resourceFieldRef}, mode: ${mode}}';
  }
}

class _DownwardApivolumeFileReader extends fb.TableReader<DownwardApivolumeFile> {
  const _DownwardApivolumeFileReader();

  @override
  DownwardApivolumeFile createObject(fb.BufferContext bc, int offset) => 
    DownwardApivolumeFile._(bc, offset);
}

class DownwardApivolumeFileBuilder {
  DownwardApivolumeFileBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFieldRefOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addResourceFieldRefOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMode(int? mode) {
    fbBuilder.addInt32(3, mode);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DownwardApivolumeFileObjectBuilder extends fb.ObjectBuilder {
  final String? _path;
  final ObjectFieldSelectorObjectBuilder? _fieldRef;
  final ResourceFieldSelectorObjectBuilder? _resourceFieldRef;
  final int? _mode;

  DownwardApivolumeFileObjectBuilder({
    String? path,
    ObjectFieldSelectorObjectBuilder? fieldRef,
    ResourceFieldSelectorObjectBuilder? resourceFieldRef,
    int? mode,
  })
      : _path = path,
        _fieldRef = fieldRef,
        _resourceFieldRef = resourceFieldRef,
        _mode = mode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    final int? fieldRefOffset = _fieldRef?.getOrCreateOffset(fbBuilder);
    final int? resourceFieldRefOffset = _resourceFieldRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, pathOffset);
    fbBuilder.addOffset(1, fieldRefOffset);
    fbBuilder.addOffset(2, resourceFieldRefOffset);
    fbBuilder.addInt32(3, _mode);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DownwardApivolumeSource {
  DownwardApivolumeSource._(this._bc, this._bcOffset);
  factory DownwardApivolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DownwardApivolumeSource> reader = _DownwardApivolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<DownwardApivolumeFile>? get items => const fb.ListReader<DownwardApivolumeFile>(DownwardApivolumeFile.reader).vTableGetNullable(_bc, _bcOffset, 4);
  int get defaultMode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'DownwardApivolumeSource{items: ${items}, defaultMode: ${defaultMode}}';
  }
}

class _DownwardApivolumeSourceReader extends fb.TableReader<DownwardApivolumeSource> {
  const _DownwardApivolumeSourceReader();

  @override
  DownwardApivolumeSource createObject(fb.BufferContext bc, int offset) => 
    DownwardApivolumeSource._(bc, offset);
}

class DownwardApivolumeSourceBuilder {
  DownwardApivolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDefaultMode(int? defaultMode) {
    fbBuilder.addInt32(1, defaultMode);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DownwardApivolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final List<DownwardApivolumeFileObjectBuilder>? _items;
  final int? _defaultMode;

  DownwardApivolumeSourceObjectBuilder({
    List<DownwardApivolumeFileObjectBuilder>? items,
    int? defaultMode,
  })
      : _items = items,
        _defaultMode = defaultMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, itemsOffset);
    fbBuilder.addInt32(1, _defaultMode);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EmptyDirVolumeSource {
  EmptyDirVolumeSource._(this._bc, this._bcOffset);
  factory EmptyDirVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EmptyDirVolumeSource> reader = _EmptyDirVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get medium => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_api_resource.Quantity? get sizeLimit => apimachinery_pkg_api_resource.Quantity.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'EmptyDirVolumeSource{medium: ${medium}, sizeLimit: ${sizeLimit}}';
  }
}

class _EmptyDirVolumeSourceReader extends fb.TableReader<EmptyDirVolumeSource> {
  const _EmptyDirVolumeSourceReader();

  @override
  EmptyDirVolumeSource createObject(fb.BufferContext bc, int offset) => 
    EmptyDirVolumeSource._(bc, offset);
}

class EmptyDirVolumeSourceBuilder {
  EmptyDirVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMediumOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSizeLimitOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EmptyDirVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _medium;
  final apimachinery_pkg_api_resource.QuantityObjectBuilder? _sizeLimit;

  EmptyDirVolumeSourceObjectBuilder({
    String? medium,
    apimachinery_pkg_api_resource.QuantityObjectBuilder? sizeLimit,
  })
      : _medium = medium,
        _sizeLimit = sizeLimit;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? mediumOffset = _medium == null ? null
        : fbBuilder.writeString(_medium!);
    final int? sizeLimitOffset = _sizeLimit?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, mediumOffset);
    fbBuilder.addOffset(1, sizeLimitOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EndpointAddress {
  EndpointAddress._(this._bc, this._bcOffset);
  factory EndpointAddress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EndpointAddress> reader = _EndpointAddressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ip => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get hostname => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get nodeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ObjectReference? get targetRef => ObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EndpointAddress{ip: ${ip}, hostname: ${hostname}, nodeName: ${nodeName}, targetRef: ${targetRef}}';
  }
}

class _EndpointAddressReader extends fb.TableReader<EndpointAddress> {
  const _EndpointAddressReader();

  @override
  EndpointAddress createObject(fb.BufferContext bc, int offset) => 
    EndpointAddress._(bc, offset);
}

class EndpointAddressBuilder {
  EndpointAddressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHostnameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNodeNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTargetRefOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EndpointAddressObjectBuilder extends fb.ObjectBuilder {
  final String? _ip;
  final String? _hostname;
  final String? _nodeName;
  final ObjectReferenceObjectBuilder? _targetRef;

  EndpointAddressObjectBuilder({
    String? ip,
    String? hostname,
    String? nodeName,
    ObjectReferenceObjectBuilder? targetRef,
  })
      : _ip = ip,
        _hostname = hostname,
        _nodeName = nodeName,
        _targetRef = targetRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ipOffset = _ip == null ? null
        : fbBuilder.writeString(_ip!);
    final int? hostnameOffset = _hostname == null ? null
        : fbBuilder.writeString(_hostname!);
    final int? nodeNameOffset = _nodeName == null ? null
        : fbBuilder.writeString(_nodeName!);
    final int? targetRefOffset = _targetRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, ipOffset);
    fbBuilder.addOffset(1, hostnameOffset);
    fbBuilder.addOffset(2, nodeNameOffset);
    fbBuilder.addOffset(3, targetRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EndpointPort {
  EndpointPort._(this._bc, this._bcOffset);
  factory EndpointPort(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EndpointPort> reader = _EndpointPortReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get port => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get protocol => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get appProtocol => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EndpointPort{name: ${name}, port: ${port}, protocol: ${protocol}, appProtocol: ${appProtocol}}';
  }
}

class _EndpointPortReader extends fb.TableReader<EndpointPort> {
  const _EndpointPortReader();

  @override
  EndpointPort createObject(fb.BufferContext bc, int offset) => 
    EndpointPort._(bc, offset);
}

class EndpointPortBuilder {
  EndpointPortBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPort(int? port) {
    fbBuilder.addInt32(1, port);
    return fbBuilder.offset;
  }
  int addProtocolOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAppProtocolOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EndpointPortObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final int? _port;
  final String? _protocol;
  final String? _appProtocol;

  EndpointPortObjectBuilder({
    String? name,
    int? port,
    String? protocol,
    String? appProtocol,
  })
      : _name = name,
        _port = port,
        _protocol = protocol,
        _appProtocol = appProtocol;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? protocolOffset = _protocol == null ? null
        : fbBuilder.writeString(_protocol!);
    final int? appProtocolOffset = _appProtocol == null ? null
        : fbBuilder.writeString(_appProtocol!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addInt32(1, _port);
    fbBuilder.addOffset(2, protocolOffset);
    fbBuilder.addOffset(3, appProtocolOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EndpointSubset {
  EndpointSubset._(this._bc, this._bcOffset);
  factory EndpointSubset(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EndpointSubset> reader = _EndpointSubsetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<EndpointAddress>? get addresses => const fb.ListReader<EndpointAddress>(EndpointAddress.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<EndpointAddress>? get notReadyAddresses => const fb.ListReader<EndpointAddress>(EndpointAddress.reader).vTableGetNullable(_bc, _bcOffset, 6);
  List<EndpointPort>? get ports => const fb.ListReader<EndpointPort>(EndpointPort.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'EndpointSubset{addresses: ${addresses}, notReadyAddresses: ${notReadyAddresses}, ports: ${ports}}';
  }
}

class _EndpointSubsetReader extends fb.TableReader<EndpointSubset> {
  const _EndpointSubsetReader();

  @override
  EndpointSubset createObject(fb.BufferContext bc, int offset) => 
    EndpointSubset._(bc, offset);
}

class EndpointSubsetBuilder {
  EndpointSubsetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addAddressesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNotReadyAddressesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPortsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EndpointSubsetObjectBuilder extends fb.ObjectBuilder {
  final List<EndpointAddressObjectBuilder>? _addresses;
  final List<EndpointAddressObjectBuilder>? _notReadyAddresses;
  final List<EndpointPortObjectBuilder>? _ports;

  EndpointSubsetObjectBuilder({
    List<EndpointAddressObjectBuilder>? addresses,
    List<EndpointAddressObjectBuilder>? notReadyAddresses,
    List<EndpointPortObjectBuilder>? ports,
  })
      : _addresses = addresses,
        _notReadyAddresses = notReadyAddresses,
        _ports = ports;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? addressesOffset = _addresses == null ? null
        : fbBuilder.writeList(_addresses!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? notReadyAddressesOffset = _notReadyAddresses == null ? null
        : fbBuilder.writeList(_notReadyAddresses!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? portsOffset = _ports == null ? null
        : fbBuilder.writeList(_ports!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, addressesOffset);
    fbBuilder.addOffset(1, notReadyAddressesOffset);
    fbBuilder.addOffset(2, portsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Endpoints {
  Endpoints._(this._bc, this._bcOffset);
  factory Endpoints(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Endpoints> reader = _EndpointsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<EndpointSubset>? get subsets => const fb.ListReader<EndpointSubset>(EndpointSubset.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Endpoints{metadata: ${metadata}, subsets: ${subsets}}';
  }
}

class _EndpointsReader extends fb.TableReader<Endpoints> {
  const _EndpointsReader();

  @override
  Endpoints createObject(fb.BufferContext bc, int offset) => 
    Endpoints._(bc, offset);
}

class EndpointsBuilder {
  EndpointsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSubsetsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EndpointsObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final List<EndpointSubsetObjectBuilder>? _subsets;

  EndpointsObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    List<EndpointSubsetObjectBuilder>? subsets,
  })
      : _metadata = metadata,
        _subsets = subsets;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? subsetsOffset = _subsets == null ? null
        : fbBuilder.writeList(_subsets!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, subsetsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EndpointsList {
  EndpointsList._(this._bc, this._bcOffset);
  factory EndpointsList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EndpointsList> reader = _EndpointsListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Endpoints>? get items => const fb.ListReader<Endpoints>(Endpoints.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'EndpointsList{metadata: ${metadata}, items: ${items}}';
  }
}

class _EndpointsListReader extends fb.TableReader<EndpointsList> {
  const _EndpointsListReader();

  @override
  EndpointsList createObject(fb.BufferContext bc, int offset) => 
    EndpointsList._(bc, offset);
}

class EndpointsListBuilder {
  EndpointsListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EndpointsListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<EndpointsObjectBuilder>? _items;

  EndpointsListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<EndpointsObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EnvFromSource {
  EnvFromSource._(this._bc, this._bcOffset);
  factory EnvFromSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EnvFromSource> reader = _EnvFromSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get prefix => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ConfigMapEnvSource? get configMapRef => ConfigMapEnvSource.reader.vTableGetNullable(_bc, _bcOffset, 6);
  SecretEnvSource? get secretRef => SecretEnvSource.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'EnvFromSource{prefix: ${prefix}, configMapRef: ${configMapRef}, secretRef: ${secretRef}}';
  }
}

class _EnvFromSourceReader extends fb.TableReader<EnvFromSource> {
  const _EnvFromSourceReader();

  @override
  EnvFromSource createObject(fb.BufferContext bc, int offset) => 
    EnvFromSource._(bc, offset);
}

class EnvFromSourceBuilder {
  EnvFromSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPrefixOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addConfigMapRefOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EnvFromSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _prefix;
  final ConfigMapEnvSourceObjectBuilder? _configMapRef;
  final SecretEnvSourceObjectBuilder? _secretRef;

  EnvFromSourceObjectBuilder({
    String? prefix,
    ConfigMapEnvSourceObjectBuilder? configMapRef,
    SecretEnvSourceObjectBuilder? secretRef,
  })
      : _prefix = prefix,
        _configMapRef = configMapRef,
        _secretRef = secretRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? prefixOffset = _prefix == null ? null
        : fbBuilder.writeString(_prefix!);
    final int? configMapRefOffset = _configMapRef?.getOrCreateOffset(fbBuilder);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, prefixOffset);
    fbBuilder.addOffset(1, configMapRefOffset);
    fbBuilder.addOffset(2, secretRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EnvVar {
  EnvVar._(this._bc, this._bcOffset);
  factory EnvVar(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EnvVar> reader = _EnvVarReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get value => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  EnvVarSource? get valueFrom => EnvVarSource.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'EnvVar{name: ${name}, value: ${value}, valueFrom: ${valueFrom}}';
  }
}

class _EnvVarReader extends fb.TableReader<EnvVar> {
  const _EnvVarReader();

  @override
  EnvVar createObject(fb.BufferContext bc, int offset) => 
    EnvVar._(bc, offset);
}

class EnvVarBuilder {
  EnvVarBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addValueFromOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EnvVarObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _value;
  final EnvVarSourceObjectBuilder? _valueFrom;

  EnvVarObjectBuilder({
    String? name,
    String? value,
    EnvVarSourceObjectBuilder? valueFrom,
  })
      : _name = name,
        _value = value,
        _valueFrom = valueFrom;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? valueOffset = _value == null ? null
        : fbBuilder.writeString(_value!);
    final int? valueFromOffset = _valueFrom?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, valueOffset);
    fbBuilder.addOffset(2, valueFromOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EnvVarSource {
  EnvVarSource._(this._bc, this._bcOffset);
  factory EnvVarSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EnvVarSource> reader = _EnvVarSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ObjectFieldSelector? get fieldRef => ObjectFieldSelector.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ResourceFieldSelector? get resourceFieldRef => ResourceFieldSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ConfigMapKeySelector? get configMapKeyRef => ConfigMapKeySelector.reader.vTableGetNullable(_bc, _bcOffset, 8);
  SecretKeySelector? get secretKeyRef => SecretKeySelector.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'EnvVarSource{fieldRef: ${fieldRef}, resourceFieldRef: ${resourceFieldRef}, configMapKeyRef: ${configMapKeyRef}, secretKeyRef: ${secretKeyRef}}';
  }
}

class _EnvVarSourceReader extends fb.TableReader<EnvVarSource> {
  const _EnvVarSourceReader();

  @override
  EnvVarSource createObject(fb.BufferContext bc, int offset) => 
    EnvVarSource._(bc, offset);
}

class EnvVarSourceBuilder {
  EnvVarSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addFieldRefOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceFieldRefOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addConfigMapKeyRefOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSecretKeyRefOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EnvVarSourceObjectBuilder extends fb.ObjectBuilder {
  final ObjectFieldSelectorObjectBuilder? _fieldRef;
  final ResourceFieldSelectorObjectBuilder? _resourceFieldRef;
  final ConfigMapKeySelectorObjectBuilder? _configMapKeyRef;
  final SecretKeySelectorObjectBuilder? _secretKeyRef;

  EnvVarSourceObjectBuilder({
    ObjectFieldSelectorObjectBuilder? fieldRef,
    ResourceFieldSelectorObjectBuilder? resourceFieldRef,
    ConfigMapKeySelectorObjectBuilder? configMapKeyRef,
    SecretKeySelectorObjectBuilder? secretKeyRef,
  })
      : _fieldRef = fieldRef,
        _resourceFieldRef = resourceFieldRef,
        _configMapKeyRef = configMapKeyRef,
        _secretKeyRef = secretKeyRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? fieldRefOffset = _fieldRef?.getOrCreateOffset(fbBuilder);
    final int? resourceFieldRefOffset = _resourceFieldRef?.getOrCreateOffset(fbBuilder);
    final int? configMapKeyRefOffset = _configMapKeyRef?.getOrCreateOffset(fbBuilder);
    final int? secretKeyRefOffset = _secretKeyRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, fieldRefOffset);
    fbBuilder.addOffset(1, resourceFieldRefOffset);
    fbBuilder.addOffset(2, configMapKeyRefOffset);
    fbBuilder.addOffset(3, secretKeyRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EphemeralContainer {
  EphemeralContainer._(this._bc, this._bcOffset);
  factory EphemeralContainer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EphemeralContainer> reader = _EphemeralContainerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  EphemeralContainerCommon? get ephemeralContainerCommon => EphemeralContainerCommon.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get targetContainerName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'EphemeralContainer{ephemeralContainerCommon: ${ephemeralContainerCommon}, targetContainerName: ${targetContainerName}}';
  }
}

class _EphemeralContainerReader extends fb.TableReader<EphemeralContainer> {
  const _EphemeralContainerReader();

  @override
  EphemeralContainer createObject(fb.BufferContext bc, int offset) => 
    EphemeralContainer._(bc, offset);
}

class EphemeralContainerBuilder {
  EphemeralContainerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addEphemeralContainerCommonOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTargetContainerNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EphemeralContainerObjectBuilder extends fb.ObjectBuilder {
  final EphemeralContainerCommonObjectBuilder? _ephemeralContainerCommon;
  final String? _targetContainerName;

  EphemeralContainerObjectBuilder({
    EphemeralContainerCommonObjectBuilder? ephemeralContainerCommon,
    String? targetContainerName,
  })
      : _ephemeralContainerCommon = ephemeralContainerCommon,
        _targetContainerName = targetContainerName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ephemeralContainerCommonOffset = _ephemeralContainerCommon?.getOrCreateOffset(fbBuilder);
    final int? targetContainerNameOffset = _targetContainerName == null ? null
        : fbBuilder.writeString(_targetContainerName!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, ephemeralContainerCommonOffset);
    fbBuilder.addOffset(1, targetContainerNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EphemeralContainerCommon {
  EphemeralContainerCommon._(this._bc, this._bcOffset);
  factory EphemeralContainerCommon(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EphemeralContainerCommon> reader = _EphemeralContainerCommonReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get image => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get command => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  List<String>? get args => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);
  String? get workingDir => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  List<ContainerPort>? get ports => const fb.ListReader<ContainerPort>(ContainerPort.reader).vTableGetNullable(_bc, _bcOffset, 14);
  List<EnvFromSource>? get envFrom => const fb.ListReader<EnvFromSource>(EnvFromSource.reader).vTableGetNullable(_bc, _bcOffset, 16);
  List<EnvVar>? get env => const fb.ListReader<EnvVar>(EnvVar.reader).vTableGetNullable(_bc, _bcOffset, 18);
  ResourceRequirements? get resources => ResourceRequirements.reader.vTableGetNullable(_bc, _bcOffset, 20);
  List<ContainerResizePolicy>? get resizePolicy => const fb.ListReader<ContainerResizePolicy>(ContainerResizePolicy.reader).vTableGetNullable(_bc, _bcOffset, 22);
  String? get restartPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  List<VolumeMount>? get volumeMounts => const fb.ListReader<VolumeMount>(VolumeMount.reader).vTableGetNullable(_bc, _bcOffset, 26);
  List<VolumeDevice>? get volumeDevices => const fb.ListReader<VolumeDevice>(VolumeDevice.reader).vTableGetNullable(_bc, _bcOffset, 28);
  Probe? get livenessProbe => Probe.reader.vTableGetNullable(_bc, _bcOffset, 30);
  Probe? get readinessProbe => Probe.reader.vTableGetNullable(_bc, _bcOffset, 32);
  Probe? get startupProbe => Probe.reader.vTableGetNullable(_bc, _bcOffset, 34);
  Lifecycle? get lifecycle => Lifecycle.reader.vTableGetNullable(_bc, _bcOffset, 36);
  String? get terminationMessagePath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  String? get terminationMessagePolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  String? get imagePullPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  SecurityContext? get securityContext => SecurityContext.reader.vTableGetNullable(_bc, _bcOffset, 44);
  bool get stdin => const fb.BoolReader().vTableGet(_bc, _bcOffset, 46, false);
  bool get stdinOnce => const fb.BoolReader().vTableGet(_bc, _bcOffset, 48, false);
  bool get tty => const fb.BoolReader().vTableGet(_bc, _bcOffset, 50, false);

  @override
  String toString() {
    return 'EphemeralContainerCommon{name: ${name}, image: ${image}, command: ${command}, args: ${args}, workingDir: ${workingDir}, ports: ${ports}, envFrom: ${envFrom}, env: ${env}, resources: ${resources}, resizePolicy: ${resizePolicy}, restartPolicy: ${restartPolicy}, volumeMounts: ${volumeMounts}, volumeDevices: ${volumeDevices}, livenessProbe: ${livenessProbe}, readinessProbe: ${readinessProbe}, startupProbe: ${startupProbe}, lifecycle: ${lifecycle}, terminationMessagePath: ${terminationMessagePath}, terminationMessagePolicy: ${terminationMessagePolicy}, imagePullPolicy: ${imagePullPolicy}, securityContext: ${securityContext}, stdin: ${stdin}, stdinOnce: ${stdinOnce}, tty: ${tty}}';
  }
}

class _EphemeralContainerCommonReader extends fb.TableReader<EphemeralContainerCommon> {
  const _EphemeralContainerCommonReader();

  @override
  EphemeralContainerCommon createObject(fb.BufferContext bc, int offset) => 
    EphemeralContainerCommon._(bc, offset);
}

class EphemeralContainerCommonBuilder {
  EphemeralContainerCommonBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(24);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addImageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCommandOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addArgsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addWorkingDirOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPortsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addEnvFromOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addEnvOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addResourcesOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addResizePolicyOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addRestartPolicyOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addVolumeMountsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addVolumeDevicesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addLivenessProbeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addReadinessProbeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addStartupProbeOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addLifecycleOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addTerminationMessagePathOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addTerminationMessagePolicyOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addImagePullPolicyOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addSecurityContextOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addStdin(bool? stdin) {
    fbBuilder.addBool(21, stdin);
    return fbBuilder.offset;
  }
  int addStdinOnce(bool? stdinOnce) {
    fbBuilder.addBool(22, stdinOnce);
    return fbBuilder.offset;
  }
  int addTty(bool? tty) {
    fbBuilder.addBool(23, tty);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EphemeralContainerCommonObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _image;
  final List<String>? _command;
  final List<String>? _args;
  final String? _workingDir;
  final List<ContainerPortObjectBuilder>? _ports;
  final List<EnvFromSourceObjectBuilder>? _envFrom;
  final List<EnvVarObjectBuilder>? _env;
  final ResourceRequirementsObjectBuilder? _resources;
  final List<ContainerResizePolicyObjectBuilder>? _resizePolicy;
  final String? _restartPolicy;
  final List<VolumeMountObjectBuilder>? _volumeMounts;
  final List<VolumeDeviceObjectBuilder>? _volumeDevices;
  final ProbeObjectBuilder? _livenessProbe;
  final ProbeObjectBuilder? _readinessProbe;
  final ProbeObjectBuilder? _startupProbe;
  final LifecycleObjectBuilder? _lifecycle;
  final String? _terminationMessagePath;
  final String? _terminationMessagePolicy;
  final String? _imagePullPolicy;
  final SecurityContextObjectBuilder? _securityContext;
  final bool? _stdin;
  final bool? _stdinOnce;
  final bool? _tty;

  EphemeralContainerCommonObjectBuilder({
    String? name,
    String? image,
    List<String>? command,
    List<String>? args,
    String? workingDir,
    List<ContainerPortObjectBuilder>? ports,
    List<EnvFromSourceObjectBuilder>? envFrom,
    List<EnvVarObjectBuilder>? env,
    ResourceRequirementsObjectBuilder? resources,
    List<ContainerResizePolicyObjectBuilder>? resizePolicy,
    String? restartPolicy,
    List<VolumeMountObjectBuilder>? volumeMounts,
    List<VolumeDeviceObjectBuilder>? volumeDevices,
    ProbeObjectBuilder? livenessProbe,
    ProbeObjectBuilder? readinessProbe,
    ProbeObjectBuilder? startupProbe,
    LifecycleObjectBuilder? lifecycle,
    String? terminationMessagePath,
    String? terminationMessagePolicy,
    String? imagePullPolicy,
    SecurityContextObjectBuilder? securityContext,
    bool? stdin,
    bool? stdinOnce,
    bool? tty,
  })
      : _name = name,
        _image = image,
        _command = command,
        _args = args,
        _workingDir = workingDir,
        _ports = ports,
        _envFrom = envFrom,
        _env = env,
        _resources = resources,
        _resizePolicy = resizePolicy,
        _restartPolicy = restartPolicy,
        _volumeMounts = volumeMounts,
        _volumeDevices = volumeDevices,
        _livenessProbe = livenessProbe,
        _readinessProbe = readinessProbe,
        _startupProbe = startupProbe,
        _lifecycle = lifecycle,
        _terminationMessagePath = terminationMessagePath,
        _terminationMessagePolicy = terminationMessagePolicy,
        _imagePullPolicy = imagePullPolicy,
        _securityContext = securityContext,
        _stdin = stdin,
        _stdinOnce = stdinOnce,
        _tty = tty;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? imageOffset = _image == null ? null
        : fbBuilder.writeString(_image!);
    final int? commandOffset = _command == null ? null
        : fbBuilder.writeList(_command!.map(fbBuilder.writeString).toList());
    final int? argsOffset = _args == null ? null
        : fbBuilder.writeList(_args!.map(fbBuilder.writeString).toList());
    final int? workingDirOffset = _workingDir == null ? null
        : fbBuilder.writeString(_workingDir!);
    final int? portsOffset = _ports == null ? null
        : fbBuilder.writeList(_ports!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? envFromOffset = _envFrom == null ? null
        : fbBuilder.writeList(_envFrom!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? envOffset = _env == null ? null
        : fbBuilder.writeList(_env!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? resourcesOffset = _resources?.getOrCreateOffset(fbBuilder);
    final int? resizePolicyOffset = _resizePolicy == null ? null
        : fbBuilder.writeList(_resizePolicy!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? restartPolicyOffset = _restartPolicy == null ? null
        : fbBuilder.writeString(_restartPolicy!);
    final int? volumeMountsOffset = _volumeMounts == null ? null
        : fbBuilder.writeList(_volumeMounts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? volumeDevicesOffset = _volumeDevices == null ? null
        : fbBuilder.writeList(_volumeDevices!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? livenessProbeOffset = _livenessProbe?.getOrCreateOffset(fbBuilder);
    final int? readinessProbeOffset = _readinessProbe?.getOrCreateOffset(fbBuilder);
    final int? startupProbeOffset = _startupProbe?.getOrCreateOffset(fbBuilder);
    final int? lifecycleOffset = _lifecycle?.getOrCreateOffset(fbBuilder);
    final int? terminationMessagePathOffset = _terminationMessagePath == null ? null
        : fbBuilder.writeString(_terminationMessagePath!);
    final int? terminationMessagePolicyOffset = _terminationMessagePolicy == null ? null
        : fbBuilder.writeString(_terminationMessagePolicy!);
    final int? imagePullPolicyOffset = _imagePullPolicy == null ? null
        : fbBuilder.writeString(_imagePullPolicy!);
    final int? securityContextOffset = _securityContext?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(24);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, imageOffset);
    fbBuilder.addOffset(2, commandOffset);
    fbBuilder.addOffset(3, argsOffset);
    fbBuilder.addOffset(4, workingDirOffset);
    fbBuilder.addOffset(5, portsOffset);
    fbBuilder.addOffset(6, envFromOffset);
    fbBuilder.addOffset(7, envOffset);
    fbBuilder.addOffset(8, resourcesOffset);
    fbBuilder.addOffset(9, resizePolicyOffset);
    fbBuilder.addOffset(10, restartPolicyOffset);
    fbBuilder.addOffset(11, volumeMountsOffset);
    fbBuilder.addOffset(12, volumeDevicesOffset);
    fbBuilder.addOffset(13, livenessProbeOffset);
    fbBuilder.addOffset(14, readinessProbeOffset);
    fbBuilder.addOffset(15, startupProbeOffset);
    fbBuilder.addOffset(16, lifecycleOffset);
    fbBuilder.addOffset(17, terminationMessagePathOffset);
    fbBuilder.addOffset(18, terminationMessagePolicyOffset);
    fbBuilder.addOffset(19, imagePullPolicyOffset);
    fbBuilder.addOffset(20, securityContextOffset);
    fbBuilder.addBool(21, _stdin);
    fbBuilder.addBool(22, _stdinOnce);
    fbBuilder.addBool(23, _tty);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EphemeralVolumeSource {
  EphemeralVolumeSource._(this._bc, this._bcOffset);
  factory EphemeralVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EphemeralVolumeSource> reader = _EphemeralVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PersistentVolumeClaimTemplate? get volumeClaimTemplate => PersistentVolumeClaimTemplate.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'EphemeralVolumeSource{volumeClaimTemplate: ${volumeClaimTemplate}}';
  }
}

class _EphemeralVolumeSourceReader extends fb.TableReader<EphemeralVolumeSource> {
  const _EphemeralVolumeSourceReader();

  @override
  EphemeralVolumeSource createObject(fb.BufferContext bc, int offset) => 
    EphemeralVolumeSource._(bc, offset);
}

class EphemeralVolumeSourceBuilder {
  EphemeralVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addVolumeClaimTemplateOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EphemeralVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final PersistentVolumeClaimTemplateObjectBuilder? _volumeClaimTemplate;

  EphemeralVolumeSourceObjectBuilder({
    PersistentVolumeClaimTemplateObjectBuilder? volumeClaimTemplate,
  })
      : _volumeClaimTemplate = volumeClaimTemplate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumeClaimTemplateOffset = _volumeClaimTemplate?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, volumeClaimTemplateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Event {
  Event._(this._bc, this._bcOffset);
  factory Event(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Event> reader = _EventReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ObjectReference? get involvedObject => ObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  EventSource? get source => EventSource.reader.vTableGetNullable(_bc, _bcOffset, 12);
  apimachinery_pkg_apis_meta_v1.Time? get firstTimestamp => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 14);
  apimachinery_pkg_apis_meta_v1.Time? get lastTimestamp => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 16);
  int get count => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  apimachinery_pkg_apis_meta_v1.MicroTime? get eventTime => apimachinery_pkg_apis_meta_v1.MicroTime.reader.vTableGetNullable(_bc, _bcOffset, 22);
  EventSeries? get series => EventSeries.reader.vTableGetNullable(_bc, _bcOffset, 24);
  String? get action => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  ObjectReference? get related => ObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 28);
  String? get reportingComponent => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  String? get reportingInstance => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);

  @override
  String toString() {
    return 'Event{metadata: ${metadata}, involvedObject: ${involvedObject}, reason: ${reason}, message: ${message}, source: ${source}, firstTimestamp: ${firstTimestamp}, lastTimestamp: ${lastTimestamp}, count: ${count}, type: ${type}, eventTime: ${eventTime}, series: ${series}, action: ${action}, related: ${related}, reportingComponent: ${reportingComponent}, reportingInstance: ${reportingInstance}}';
  }
}

class _EventReader extends fb.TableReader<Event> {
  const _EventReader();

  @override
  Event createObject(fb.BufferContext bc, int offset) => 
    Event._(bc, offset);
}

class EventBuilder {
  EventBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(15);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addInvolvedObjectOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addFirstTimestampOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addLastTimestampOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCount(int? count) {
    fbBuilder.addInt32(7, count);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addEventTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSeriesOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addActionOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addRelatedOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addReportingComponentOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addReportingInstanceOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EventObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ObjectReferenceObjectBuilder? _involvedObject;
  final String? _reason;
  final String? _message;
  final EventSourceObjectBuilder? _source;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _firstTimestamp;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTimestamp;
  final int? _count;
  final String? _type;
  final apimachinery_pkg_apis_meta_v1.MicroTimeObjectBuilder? _eventTime;
  final EventSeriesObjectBuilder? _series;
  final String? _action;
  final ObjectReferenceObjectBuilder? _related;
  final String? _reportingComponent;
  final String? _reportingInstance;

  EventObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ObjectReferenceObjectBuilder? involvedObject,
    String? reason,
    String? message,
    EventSourceObjectBuilder? source,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? firstTimestamp,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTimestamp,
    int? count,
    String? type,
    apimachinery_pkg_apis_meta_v1.MicroTimeObjectBuilder? eventTime,
    EventSeriesObjectBuilder? series,
    String? action,
    ObjectReferenceObjectBuilder? related,
    String? reportingComponent,
    String? reportingInstance,
  })
      : _metadata = metadata,
        _involvedObject = involvedObject,
        _reason = reason,
        _message = message,
        _source = source,
        _firstTimestamp = firstTimestamp,
        _lastTimestamp = lastTimestamp,
        _count = count,
        _type = type,
        _eventTime = eventTime,
        _series = series,
        _action = action,
        _related = related,
        _reportingComponent = reportingComponent,
        _reportingInstance = reportingInstance;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? involvedObjectOffset = _involvedObject?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    final int? sourceOffset = _source?.getOrCreateOffset(fbBuilder);
    final int? firstTimestampOffset = _firstTimestamp?.getOrCreateOffset(fbBuilder);
    final int? lastTimestampOffset = _lastTimestamp?.getOrCreateOffset(fbBuilder);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? eventTimeOffset = _eventTime?.getOrCreateOffset(fbBuilder);
    final int? seriesOffset = _series?.getOrCreateOffset(fbBuilder);
    final int? actionOffset = _action == null ? null
        : fbBuilder.writeString(_action!);
    final int? relatedOffset = _related?.getOrCreateOffset(fbBuilder);
    final int? reportingComponentOffset = _reportingComponent == null ? null
        : fbBuilder.writeString(_reportingComponent!);
    final int? reportingInstanceOffset = _reportingInstance == null ? null
        : fbBuilder.writeString(_reportingInstance!);
    fbBuilder.startTable(15);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, involvedObjectOffset);
    fbBuilder.addOffset(2, reasonOffset);
    fbBuilder.addOffset(3, messageOffset);
    fbBuilder.addOffset(4, sourceOffset);
    fbBuilder.addOffset(5, firstTimestampOffset);
    fbBuilder.addOffset(6, lastTimestampOffset);
    fbBuilder.addInt32(7, _count);
    fbBuilder.addOffset(8, typeOffset);
    fbBuilder.addOffset(9, eventTimeOffset);
    fbBuilder.addOffset(10, seriesOffset);
    fbBuilder.addOffset(11, actionOffset);
    fbBuilder.addOffset(12, relatedOffset);
    fbBuilder.addOffset(13, reportingComponentOffset);
    fbBuilder.addOffset(14, reportingInstanceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EventList {
  EventList._(this._bc, this._bcOffset);
  factory EventList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EventList> reader = _EventListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Event>? get items => const fb.ListReader<Event>(Event.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'EventList{metadata: ${metadata}, items: ${items}}';
  }
}

class _EventListReader extends fb.TableReader<EventList> {
  const _EventListReader();

  @override
  EventList createObject(fb.BufferContext bc, int offset) => 
    EventList._(bc, offset);
}

class EventListBuilder {
  EventListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EventListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<EventObjectBuilder>? _items;

  EventListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<EventObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EventSeries {
  EventSeries._(this._bc, this._bcOffset);
  factory EventSeries(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EventSeries> reader = _EventSeriesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get count => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  apimachinery_pkg_apis_meta_v1.MicroTime? get lastObservedTime => apimachinery_pkg_apis_meta_v1.MicroTime.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'EventSeries{count: ${count}, lastObservedTime: ${lastObservedTime}}';
  }
}

class _EventSeriesReader extends fb.TableReader<EventSeries> {
  const _EventSeriesReader();

  @override
  EventSeries createObject(fb.BufferContext bc, int offset) => 
    EventSeries._(bc, offset);
}

class EventSeriesBuilder {
  EventSeriesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addCount(int? count) {
    fbBuilder.addInt32(0, count);
    return fbBuilder.offset;
  }
  int addLastObservedTimeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EventSeriesObjectBuilder extends fb.ObjectBuilder {
  final int? _count;
  final apimachinery_pkg_apis_meta_v1.MicroTimeObjectBuilder? _lastObservedTime;

  EventSeriesObjectBuilder({
    int? count,
    apimachinery_pkg_apis_meta_v1.MicroTimeObjectBuilder? lastObservedTime,
  })
      : _count = count,
        _lastObservedTime = lastObservedTime;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? lastObservedTimeOffset = _lastObservedTime?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addInt32(0, _count);
    fbBuilder.addOffset(1, lastObservedTimeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class EventSource {
  EventSource._(this._bc, this._bcOffset);
  factory EventSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EventSource> reader = _EventSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get component => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get host => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'EventSource{component: ${component}, host: ${host}}';
  }
}

class _EventSourceReader extends fb.TableReader<EventSource> {
  const _EventSourceReader();

  @override
  EventSource createObject(fb.BufferContext bc, int offset) => 
    EventSource._(bc, offset);
}

class EventSourceBuilder {
  EventSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addComponentOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHostOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EventSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _component;
  final String? _host;

  EventSourceObjectBuilder({
    String? component,
    String? host,
  })
      : _component = component,
        _host = host;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? componentOffset = _component == null ? null
        : fbBuilder.writeString(_component!);
    final int? hostOffset = _host == null ? null
        : fbBuilder.writeString(_host!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, componentOffset);
    fbBuilder.addOffset(1, hostOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ExecAction {
  ExecAction._(this._bc, this._bcOffset);
  factory ExecAction(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ExecAction> reader = _ExecActionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get command => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ExecAction{command: ${command}}';
  }
}

class _ExecActionReader extends fb.TableReader<ExecAction> {
  const _ExecActionReader();

  @override
  ExecAction createObject(fb.BufferContext bc, int offset) => 
    ExecAction._(bc, offset);
}

class ExecActionBuilder {
  ExecActionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addCommandOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ExecActionObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _command;

  ExecActionObjectBuilder({
    List<String>? command,
  })
      : _command = command;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? commandOffset = _command == null ? null
        : fbBuilder.writeList(_command!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, commandOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FcvolumeSource {
  FcvolumeSource._(this._bc, this._bcOffset);
  factory FcvolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FcvolumeSource> reader = _FcvolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get targetWwns => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  int get lun => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  List<String>? get wwids => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'FcvolumeSource{targetWwns: ${targetWwns}, lun: ${lun}, fsType: ${fsType}, readOnly: ${readOnly}, wwids: ${wwids}}';
  }
}

class _FcvolumeSourceReader extends fb.TableReader<FcvolumeSource> {
  const _FcvolumeSourceReader();

  @override
  FcvolumeSource createObject(fb.BufferContext bc, int offset) => 
    FcvolumeSource._(bc, offset);
}

class FcvolumeSourceBuilder {
  FcvolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTargetWwnsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLun(int? lun) {
    fbBuilder.addInt32(1, lun);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(3, readOnly);
    return fbBuilder.offset;
  }
  int addWwidsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FcvolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _targetWwns;
  final int? _lun;
  final String? _fsType;
  final bool? _readOnly;
  final List<String>? _wwids;

  FcvolumeSourceObjectBuilder({
    List<String>? targetWwns,
    int? lun,
    String? fsType,
    bool? readOnly,
    List<String>? wwids,
  })
      : _targetWwns = targetWwns,
        _lun = lun,
        _fsType = fsType,
        _readOnly = readOnly,
        _wwids = wwids;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? targetWwnsOffset = _targetWwns == null ? null
        : fbBuilder.writeList(_targetWwns!.map(fbBuilder.writeString).toList());
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? wwidsOffset = _wwids == null ? null
        : fbBuilder.writeList(_wwids!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, targetWwnsOffset);
    fbBuilder.addInt32(1, _lun);
    fbBuilder.addOffset(2, fsTypeOffset);
    fbBuilder.addBool(3, _readOnly);
    fbBuilder.addOffset(4, wwidsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlexPersistentVolumeSource {
  FlexPersistentVolumeSource._(this._bc, this._bcOffset);
  factory FlexPersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlexPersistentVolumeSource> reader = _FlexPersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get driver => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  SecretReference? get secretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 8);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  List<api_core_v1_flex_persistent_volume_source_.OptionsEntry>? get options => const fb.ListReader<api_core_v1_flex_persistent_volume_source_.OptionsEntry>(api_core_v1_flex_persistent_volume_source_.OptionsEntry.reader).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'FlexPersistentVolumeSource{driver: ${driver}, fsType: ${fsType}, secretRef: ${secretRef}, readOnly: ${readOnly}, options: ${options}}';
  }
}

class _FlexPersistentVolumeSourceReader extends fb.TableReader<FlexPersistentVolumeSource> {
  const _FlexPersistentVolumeSourceReader();

  @override
  FlexPersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    FlexPersistentVolumeSource._(bc, offset);
}

class FlexPersistentVolumeSourceBuilder {
  FlexPersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addDriverOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(3, readOnly);
    return fbBuilder.offset;
  }
  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlexPersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _driver;
  final String? _fsType;
  final SecretReferenceObjectBuilder? _secretRef;
  final bool? _readOnly;
  final List<api_core_v1_flex_persistent_volume_source_.OptionsEntryObjectBuilder>? _options;

  FlexPersistentVolumeSourceObjectBuilder({
    String? driver,
    String? fsType,
    SecretReferenceObjectBuilder? secretRef,
    bool? readOnly,
    List<api_core_v1_flex_persistent_volume_source_.OptionsEntryObjectBuilder>? options,
  })
      : _driver = driver,
        _fsType = fsType,
        _secretRef = secretRef,
        _readOnly = readOnly,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driverOffset = _driver == null ? null
        : fbBuilder.writeString(_driver!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    final int? optionsOffset = _options == null ? null
        : fbBuilder.writeList(_options!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, driverOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    fbBuilder.addOffset(2, secretRefOffset);
    fbBuilder.addBool(3, _readOnly);
    fbBuilder.addOffset(4, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlexVolumeSource {
  FlexVolumeSource._(this._bc, this._bcOffset);
  factory FlexVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlexVolumeSource> reader = _FlexVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get driver => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  LocalObjectReference? get secretRef => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 8);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  List<api_core_v1_flex_volume_source_.OptionsEntry>? get options => const fb.ListReader<api_core_v1_flex_volume_source_.OptionsEntry>(api_core_v1_flex_volume_source_.OptionsEntry.reader).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'FlexVolumeSource{driver: ${driver}, fsType: ${fsType}, secretRef: ${secretRef}, readOnly: ${readOnly}, options: ${options}}';
  }
}

class _FlexVolumeSourceReader extends fb.TableReader<FlexVolumeSource> {
  const _FlexVolumeSourceReader();

  @override
  FlexVolumeSource createObject(fb.BufferContext bc, int offset) => 
    FlexVolumeSource._(bc, offset);
}

class FlexVolumeSourceBuilder {
  FlexVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addDriverOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(3, readOnly);
    return fbBuilder.offset;
  }
  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlexVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _driver;
  final String? _fsType;
  final LocalObjectReferenceObjectBuilder? _secretRef;
  final bool? _readOnly;
  final List<api_core_v1_flex_volume_source_.OptionsEntryObjectBuilder>? _options;

  FlexVolumeSourceObjectBuilder({
    String? driver,
    String? fsType,
    LocalObjectReferenceObjectBuilder? secretRef,
    bool? readOnly,
    List<api_core_v1_flex_volume_source_.OptionsEntryObjectBuilder>? options,
  })
      : _driver = driver,
        _fsType = fsType,
        _secretRef = secretRef,
        _readOnly = readOnly,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driverOffset = _driver == null ? null
        : fbBuilder.writeString(_driver!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    final int? optionsOffset = _options == null ? null
        : fbBuilder.writeList(_options!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, driverOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    fbBuilder.addOffset(2, secretRefOffset);
    fbBuilder.addBool(3, _readOnly);
    fbBuilder.addOffset(4, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlockerVolumeSource {
  FlockerVolumeSource._(this._bc, this._bcOffset);
  factory FlockerVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlockerVolumeSource> reader = _FlockerVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get datasetName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get datasetUuid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'FlockerVolumeSource{datasetName: ${datasetName}, datasetUuid: ${datasetUuid}}';
  }
}

class _FlockerVolumeSourceReader extends fb.TableReader<FlockerVolumeSource> {
  const _FlockerVolumeSourceReader();

  @override
  FlockerVolumeSource createObject(fb.BufferContext bc, int offset) => 
    FlockerVolumeSource._(bc, offset);
}

class FlockerVolumeSourceBuilder {
  FlockerVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addDatasetNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDatasetUuidOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlockerVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _datasetName;
  final String? _datasetUuid;

  FlockerVolumeSourceObjectBuilder({
    String? datasetName,
    String? datasetUuid,
  })
      : _datasetName = datasetName,
        _datasetUuid = datasetUuid;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? datasetNameOffset = _datasetName == null ? null
        : fbBuilder.writeString(_datasetName!);
    final int? datasetUuidOffset = _datasetUuid == null ? null
        : fbBuilder.writeString(_datasetUuid!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, datasetNameOffset);
    fbBuilder.addOffset(1, datasetUuidOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GcepersistentDiskVolumeSource {
  GcepersistentDiskVolumeSource._(this._bc, this._bcOffset);
  factory GcepersistentDiskVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GcepersistentDiskVolumeSource> reader = _GcepersistentDiskVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get pdName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get partition => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  @override
  String toString() {
    return 'GcepersistentDiskVolumeSource{pdName: ${pdName}, fsType: ${fsType}, partition: ${partition}, readOnly: ${readOnly}}';
  }
}

class _GcepersistentDiskVolumeSourceReader extends fb.TableReader<GcepersistentDiskVolumeSource> {
  const _GcepersistentDiskVolumeSourceReader();

  @override
  GcepersistentDiskVolumeSource createObject(fb.BufferContext bc, int offset) => 
    GcepersistentDiskVolumeSource._(bc, offset);
}

class GcepersistentDiskVolumeSourceBuilder {
  GcepersistentDiskVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addPdNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPartition(int? partition) {
    fbBuilder.addInt32(2, partition);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(3, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GcepersistentDiskVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _pdName;
  final String? _fsType;
  final int? _partition;
  final bool? _readOnly;

  GcepersistentDiskVolumeSourceObjectBuilder({
    String? pdName,
    String? fsType,
    int? partition,
    bool? readOnly,
  })
      : _pdName = pdName,
        _fsType = fsType,
        _partition = partition,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pdNameOffset = _pdName == null ? null
        : fbBuilder.writeString(_pdName!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, pdNameOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    fbBuilder.addInt32(2, _partition);
    fbBuilder.addBool(3, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Grpcaction {
  Grpcaction._(this._bc, this._bcOffset);
  factory Grpcaction(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Grpcaction> reader = _GrpcactionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get port => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get service => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Grpcaction{port: ${port}, service: ${service}}';
  }
}

class _GrpcactionReader extends fb.TableReader<Grpcaction> {
  const _GrpcactionReader();

  @override
  Grpcaction createObject(fb.BufferContext bc, int offset) => 
    Grpcaction._(bc, offset);
}

class GrpcactionBuilder {
  GrpcactionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPort(int? port) {
    fbBuilder.addInt32(0, port);
    return fbBuilder.offset;
  }
  int addServiceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GrpcactionObjectBuilder extends fb.ObjectBuilder {
  final int? _port;
  final String? _service;

  GrpcactionObjectBuilder({
    int? port,
    String? service,
  })
      : _port = port,
        _service = service;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? serviceOffset = _service == null ? null
        : fbBuilder.writeString(_service!);
    fbBuilder.startTable(2);
    fbBuilder.addInt32(0, _port);
    fbBuilder.addOffset(1, serviceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GitRepoVolumeSource {
  GitRepoVolumeSource._(this._bc, this._bcOffset);
  factory GitRepoVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GitRepoVolumeSource> reader = _GitRepoVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get repository => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get revision => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get directory => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'GitRepoVolumeSource{repository: ${repository}, revision: ${revision}, directory: ${directory}}';
  }
}

class _GitRepoVolumeSourceReader extends fb.TableReader<GitRepoVolumeSource> {
  const _GitRepoVolumeSourceReader();

  @override
  GitRepoVolumeSource createObject(fb.BufferContext bc, int offset) => 
    GitRepoVolumeSource._(bc, offset);
}

class GitRepoVolumeSourceBuilder {
  GitRepoVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addRepositoryOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRevisionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDirectoryOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GitRepoVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _repository;
  final String? _revision;
  final String? _directory;

  GitRepoVolumeSourceObjectBuilder({
    String? repository,
    String? revision,
    String? directory,
  })
      : _repository = repository,
        _revision = revision,
        _directory = directory;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? repositoryOffset = _repository == null ? null
        : fbBuilder.writeString(_repository!);
    final int? revisionOffset = _revision == null ? null
        : fbBuilder.writeString(_revision!);
    final int? directoryOffset = _directory == null ? null
        : fbBuilder.writeString(_directory!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, repositoryOffset);
    fbBuilder.addOffset(1, revisionOffset);
    fbBuilder.addOffset(2, directoryOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GlusterfsPersistentVolumeSource {
  GlusterfsPersistentVolumeSource._(this._bc, this._bcOffset);
  factory GlusterfsPersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GlusterfsPersistentVolumeSource> reader = _GlusterfsPersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get endpoints => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  String? get endpointsNamespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'GlusterfsPersistentVolumeSource{endpoints: ${endpoints}, path: ${path}, readOnly: ${readOnly}, endpointsNamespace: ${endpointsNamespace}}';
  }
}

class _GlusterfsPersistentVolumeSourceReader extends fb.TableReader<GlusterfsPersistentVolumeSource> {
  const _GlusterfsPersistentVolumeSourceReader();

  @override
  GlusterfsPersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    GlusterfsPersistentVolumeSource._(bc, offset);
}

class GlusterfsPersistentVolumeSourceBuilder {
  GlusterfsPersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addEndpointsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }
  int addEndpointsNamespaceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GlusterfsPersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _endpoints;
  final String? _path;
  final bool? _readOnly;
  final String? _endpointsNamespace;

  GlusterfsPersistentVolumeSourceObjectBuilder({
    String? endpoints,
    String? path,
    bool? readOnly,
    String? endpointsNamespace,
  })
      : _endpoints = endpoints,
        _path = path,
        _readOnly = readOnly,
        _endpointsNamespace = endpointsNamespace;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? endpointsOffset = _endpoints == null ? null
        : fbBuilder.writeString(_endpoints!);
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    final int? endpointsNamespaceOffset = _endpointsNamespace == null ? null
        : fbBuilder.writeString(_endpointsNamespace!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, endpointsOffset);
    fbBuilder.addOffset(1, pathOffset);
    fbBuilder.addBool(2, _readOnly);
    fbBuilder.addOffset(3, endpointsNamespaceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GlusterfsVolumeSource {
  GlusterfsVolumeSource._(this._bc, this._bcOffset);
  factory GlusterfsVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GlusterfsVolumeSource> reader = _GlusterfsVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get endpoints => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'GlusterfsVolumeSource{endpoints: ${endpoints}, path: ${path}, readOnly: ${readOnly}}';
  }
}

class _GlusterfsVolumeSourceReader extends fb.TableReader<GlusterfsVolumeSource> {
  const _GlusterfsVolumeSourceReader();

  @override
  GlusterfsVolumeSource createObject(fb.BufferContext bc, int offset) => 
    GlusterfsVolumeSource._(bc, offset);
}

class GlusterfsVolumeSourceBuilder {
  GlusterfsVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addEndpointsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GlusterfsVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _endpoints;
  final String? _path;
  final bool? _readOnly;

  GlusterfsVolumeSourceObjectBuilder({
    String? endpoints,
    String? path,
    bool? readOnly,
  })
      : _endpoints = endpoints,
        _path = path,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? endpointsOffset = _endpoints == null ? null
        : fbBuilder.writeString(_endpoints!);
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, endpointsOffset);
    fbBuilder.addOffset(1, pathOffset);
    fbBuilder.addBool(2, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class HttpgetAction {
  HttpgetAction._(this._bc, this._bcOffset);
  factory HttpgetAction(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HttpgetAction> reader = _HttpgetActionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_util_intstr.IntOrString? get port => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get host => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get scheme => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<Httpheader>? get httpHeaders => const fb.ListReader<Httpheader>(Httpheader.reader).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'HttpgetAction{path: ${path}, port: ${port}, host: ${host}, scheme: ${scheme}, httpHeaders: ${httpHeaders}}';
  }
}

class _HttpgetActionReader extends fb.TableReader<HttpgetAction> {
  const _HttpgetActionReader();

  @override
  HttpgetAction createObject(fb.BufferContext bc, int offset) => 
    HttpgetAction._(bc, offset);
}

class HttpgetActionBuilder {
  HttpgetActionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPortOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addHostOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSchemeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHttpHeadersOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HttpgetActionObjectBuilder extends fb.ObjectBuilder {
  final String? _path;
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _port;
  final String? _host;
  final String? _scheme;
  final List<HttpheaderObjectBuilder>? _httpHeaders;

  HttpgetActionObjectBuilder({
    String? path,
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? port,
    String? host,
    String? scheme,
    List<HttpheaderObjectBuilder>? httpHeaders,
  })
      : _path = path,
        _port = port,
        _host = host,
        _scheme = scheme,
        _httpHeaders = httpHeaders;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    final int? portOffset = _port?.getOrCreateOffset(fbBuilder);
    final int? hostOffset = _host == null ? null
        : fbBuilder.writeString(_host!);
    final int? schemeOffset = _scheme == null ? null
        : fbBuilder.writeString(_scheme!);
    final int? httpHeadersOffset = _httpHeaders == null ? null
        : fbBuilder.writeList(_httpHeaders!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, pathOffset);
    fbBuilder.addOffset(1, portOffset);
    fbBuilder.addOffset(2, hostOffset);
    fbBuilder.addOffset(3, schemeOffset);
    fbBuilder.addOffset(4, httpHeadersOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Httpheader {
  Httpheader._(this._bc, this._bcOffset);
  factory Httpheader(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Httpheader> reader = _HttpheaderReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get value => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Httpheader{name: ${name}, value: ${value}}';
  }
}

class _HttpheaderReader extends fb.TableReader<Httpheader> {
  const _HttpheaderReader();

  @override
  Httpheader createObject(fb.BufferContext bc, int offset) => 
    Httpheader._(bc, offset);
}

class HttpheaderBuilder {
  HttpheaderBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HttpheaderObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _value;

  HttpheaderObjectBuilder({
    String? name,
    String? value,
  })
      : _name = name,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? valueOffset = _value == null ? null
        : fbBuilder.writeString(_value!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, valueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class HostAlias {
  HostAlias._(this._bc, this._bcOffset);
  factory HostAlias(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HostAlias> reader = _HostAliasReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ip => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get hostnames => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'HostAlias{ip: ${ip}, hostnames: ${hostnames}}';
  }
}

class _HostAliasReader extends fb.TableReader<HostAlias> {
  const _HostAliasReader();

  @override
  HostAlias createObject(fb.BufferContext bc, int offset) => 
    HostAlias._(bc, offset);
}

class HostAliasBuilder {
  HostAliasBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHostnamesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HostAliasObjectBuilder extends fb.ObjectBuilder {
  final String? _ip;
  final List<String>? _hostnames;

  HostAliasObjectBuilder({
    String? ip,
    List<String>? hostnames,
  })
      : _ip = ip,
        _hostnames = hostnames;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ipOffset = _ip == null ? null
        : fbBuilder.writeString(_ip!);
    final int? hostnamesOffset = _hostnames == null ? null
        : fbBuilder.writeList(_hostnames!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, ipOffset);
    fbBuilder.addOffset(1, hostnamesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class HostIp {
  HostIp._(this._bc, this._bcOffset);
  factory HostIp(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HostIp> reader = _HostIpReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ip => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'HostIp{ip: ${ip}}';
  }
}

class _HostIpReader extends fb.TableReader<HostIp> {
  const _HostIpReader();

  @override
  HostIp createObject(fb.BufferContext bc, int offset) => 
    HostIp._(bc, offset);
}

class HostIpBuilder {
  HostIpBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HostIpObjectBuilder extends fb.ObjectBuilder {
  final String? _ip;

  HostIpObjectBuilder({
    String? ip,
  })
      : _ip = ip;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ipOffset = _ip == null ? null
        : fbBuilder.writeString(_ip!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, ipOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class HostPathVolumeSource {
  HostPathVolumeSource._(this._bc, this._bcOffset);
  factory HostPathVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HostPathVolumeSource> reader = _HostPathVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'HostPathVolumeSource{path: ${path}, type: ${type}}';
  }
}

class _HostPathVolumeSourceReader extends fb.TableReader<HostPathVolumeSource> {
  const _HostPathVolumeSourceReader();

  @override
  HostPathVolumeSource createObject(fb.BufferContext bc, int offset) => 
    HostPathVolumeSource._(bc, offset);
}

class HostPathVolumeSourceBuilder {
  HostPathVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HostPathVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _path;
  final String? _type;

  HostPathVolumeSourceObjectBuilder({
    String? path,
    String? type,
  })
      : _path = path,
        _type = type;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pathOffset);
    fbBuilder.addOffset(1, typeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IscsipersistentVolumeSource {
  IscsipersistentVolumeSource._(this._bc, this._bcOffset);
  factory IscsipersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IscsipersistentVolumeSource> reader = _IscsipersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get targetPortal => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get iqn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get lun => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get iscsiInterface => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  List<String>? get portals => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  bool get chapAuthDiscovery => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  bool get chapAuthSession => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  SecretReference? get secretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 22);
  String? get initiatorName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'IscsipersistentVolumeSource{targetPortal: ${targetPortal}, iqn: ${iqn}, lun: ${lun}, iscsiInterface: ${iscsiInterface}, fsType: ${fsType}, readOnly: ${readOnly}, portals: ${portals}, chapAuthDiscovery: ${chapAuthDiscovery}, chapAuthSession: ${chapAuthSession}, secretRef: ${secretRef}, initiatorName: ${initiatorName}}';
  }
}

class _IscsipersistentVolumeSourceReader extends fb.TableReader<IscsipersistentVolumeSource> {
  const _IscsipersistentVolumeSourceReader();

  @override
  IscsipersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    IscsipersistentVolumeSource._(bc, offset);
}

class IscsipersistentVolumeSourceBuilder {
  IscsipersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addTargetPortalOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIqnOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLun(int? lun) {
    fbBuilder.addInt32(2, lun);
    return fbBuilder.offset;
  }
  int addIscsiInterfaceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(5, readOnly);
    return fbBuilder.offset;
  }
  int addPortalsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addChapAuthDiscovery(bool? chapAuthDiscovery) {
    fbBuilder.addBool(7, chapAuthDiscovery);
    return fbBuilder.offset;
  }
  int addChapAuthSession(bool? chapAuthSession) {
    fbBuilder.addBool(8, chapAuthSession);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addInitiatorNameOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IscsipersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _targetPortal;
  final String? _iqn;
  final int? _lun;
  final String? _iscsiInterface;
  final String? _fsType;
  final bool? _readOnly;
  final List<String>? _portals;
  final bool? _chapAuthDiscovery;
  final bool? _chapAuthSession;
  final SecretReferenceObjectBuilder? _secretRef;
  final String? _initiatorName;

  IscsipersistentVolumeSourceObjectBuilder({
    String? targetPortal,
    String? iqn,
    int? lun,
    String? iscsiInterface,
    String? fsType,
    bool? readOnly,
    List<String>? portals,
    bool? chapAuthDiscovery,
    bool? chapAuthSession,
    SecretReferenceObjectBuilder? secretRef,
    String? initiatorName,
  })
      : _targetPortal = targetPortal,
        _iqn = iqn,
        _lun = lun,
        _iscsiInterface = iscsiInterface,
        _fsType = fsType,
        _readOnly = readOnly,
        _portals = portals,
        _chapAuthDiscovery = chapAuthDiscovery,
        _chapAuthSession = chapAuthSession,
        _secretRef = secretRef,
        _initiatorName = initiatorName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? targetPortalOffset = _targetPortal == null ? null
        : fbBuilder.writeString(_targetPortal!);
    final int? iqnOffset = _iqn == null ? null
        : fbBuilder.writeString(_iqn!);
    final int? iscsiInterfaceOffset = _iscsiInterface == null ? null
        : fbBuilder.writeString(_iscsiInterface!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? portalsOffset = _portals == null ? null
        : fbBuilder.writeList(_portals!.map(fbBuilder.writeString).toList());
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    final int? initiatorNameOffset = _initiatorName == null ? null
        : fbBuilder.writeString(_initiatorName!);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, targetPortalOffset);
    fbBuilder.addOffset(1, iqnOffset);
    fbBuilder.addInt32(2, _lun);
    fbBuilder.addOffset(3, iscsiInterfaceOffset);
    fbBuilder.addOffset(4, fsTypeOffset);
    fbBuilder.addBool(5, _readOnly);
    fbBuilder.addOffset(6, portalsOffset);
    fbBuilder.addBool(7, _chapAuthDiscovery);
    fbBuilder.addBool(8, _chapAuthSession);
    fbBuilder.addOffset(9, secretRefOffset);
    fbBuilder.addOffset(10, initiatorNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IscsivolumeSource {
  IscsivolumeSource._(this._bc, this._bcOffset);
  factory IscsivolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IscsivolumeSource> reader = _IscsivolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get targetPortal => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get iqn => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get lun => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get iscsiInterface => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  List<String>? get portals => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  bool get chapAuthDiscovery => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  bool get chapAuthSession => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  LocalObjectReference? get secretRef => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 22);
  String? get initiatorName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'IscsivolumeSource{targetPortal: ${targetPortal}, iqn: ${iqn}, lun: ${lun}, iscsiInterface: ${iscsiInterface}, fsType: ${fsType}, readOnly: ${readOnly}, portals: ${portals}, chapAuthDiscovery: ${chapAuthDiscovery}, chapAuthSession: ${chapAuthSession}, secretRef: ${secretRef}, initiatorName: ${initiatorName}}';
  }
}

class _IscsivolumeSourceReader extends fb.TableReader<IscsivolumeSource> {
  const _IscsivolumeSourceReader();

  @override
  IscsivolumeSource createObject(fb.BufferContext bc, int offset) => 
    IscsivolumeSource._(bc, offset);
}

class IscsivolumeSourceBuilder {
  IscsivolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addTargetPortalOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIqnOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLun(int? lun) {
    fbBuilder.addInt32(2, lun);
    return fbBuilder.offset;
  }
  int addIscsiInterfaceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(5, readOnly);
    return fbBuilder.offset;
  }
  int addPortalsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addChapAuthDiscovery(bool? chapAuthDiscovery) {
    fbBuilder.addBool(7, chapAuthDiscovery);
    return fbBuilder.offset;
  }
  int addChapAuthSession(bool? chapAuthSession) {
    fbBuilder.addBool(8, chapAuthSession);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addInitiatorNameOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IscsivolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _targetPortal;
  final String? _iqn;
  final int? _lun;
  final String? _iscsiInterface;
  final String? _fsType;
  final bool? _readOnly;
  final List<String>? _portals;
  final bool? _chapAuthDiscovery;
  final bool? _chapAuthSession;
  final LocalObjectReferenceObjectBuilder? _secretRef;
  final String? _initiatorName;

  IscsivolumeSourceObjectBuilder({
    String? targetPortal,
    String? iqn,
    int? lun,
    String? iscsiInterface,
    String? fsType,
    bool? readOnly,
    List<String>? portals,
    bool? chapAuthDiscovery,
    bool? chapAuthSession,
    LocalObjectReferenceObjectBuilder? secretRef,
    String? initiatorName,
  })
      : _targetPortal = targetPortal,
        _iqn = iqn,
        _lun = lun,
        _iscsiInterface = iscsiInterface,
        _fsType = fsType,
        _readOnly = readOnly,
        _portals = portals,
        _chapAuthDiscovery = chapAuthDiscovery,
        _chapAuthSession = chapAuthSession,
        _secretRef = secretRef,
        _initiatorName = initiatorName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? targetPortalOffset = _targetPortal == null ? null
        : fbBuilder.writeString(_targetPortal!);
    final int? iqnOffset = _iqn == null ? null
        : fbBuilder.writeString(_iqn!);
    final int? iscsiInterfaceOffset = _iscsiInterface == null ? null
        : fbBuilder.writeString(_iscsiInterface!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? portalsOffset = _portals == null ? null
        : fbBuilder.writeList(_portals!.map(fbBuilder.writeString).toList());
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    final int? initiatorNameOffset = _initiatorName == null ? null
        : fbBuilder.writeString(_initiatorName!);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, targetPortalOffset);
    fbBuilder.addOffset(1, iqnOffset);
    fbBuilder.addInt32(2, _lun);
    fbBuilder.addOffset(3, iscsiInterfaceOffset);
    fbBuilder.addOffset(4, fsTypeOffset);
    fbBuilder.addBool(5, _readOnly);
    fbBuilder.addOffset(6, portalsOffset);
    fbBuilder.addBool(7, _chapAuthDiscovery);
    fbBuilder.addBool(8, _chapAuthSession);
    fbBuilder.addOffset(9, secretRefOffset);
    fbBuilder.addOffset(10, initiatorNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class KeyToPath {
  KeyToPath._(this._bc, this._bcOffset);
  factory KeyToPath(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<KeyToPath> reader = _KeyToPathReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get mode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'KeyToPath{key: ${key}, path: ${path}, mode: ${mode}}';
  }
}

class _KeyToPathReader extends fb.TableReader<KeyToPath> {
  const _KeyToPathReader();

  @override
  KeyToPath createObject(fb.BufferContext bc, int offset) => 
    KeyToPath._(bc, offset);
}

class KeyToPathBuilder {
  KeyToPathBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMode(int? mode) {
    fbBuilder.addInt32(2, mode);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class KeyToPathObjectBuilder extends fb.ObjectBuilder {
  final String? _key;
  final String? _path;
  final int? _mode;

  KeyToPathObjectBuilder({
    String? key,
    String? path,
    int? mode,
  })
      : _key = key,
        _path = path,
        _mode = mode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, keyOffset);
    fbBuilder.addOffset(1, pathOffset);
    fbBuilder.addInt32(2, _mode);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Lifecycle {
  Lifecycle._(this._bc, this._bcOffset);
  factory Lifecycle(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Lifecycle> reader = _LifecycleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LifecycleHandler? get postStart => LifecycleHandler.reader.vTableGetNullable(_bc, _bcOffset, 4);
  LifecycleHandler? get preStop => LifecycleHandler.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Lifecycle{postStart: ${postStart}, preStop: ${preStop}}';
  }
}

class _LifecycleReader extends fb.TableReader<Lifecycle> {
  const _LifecycleReader();

  @override
  Lifecycle createObject(fb.BufferContext bc, int offset) => 
    Lifecycle._(bc, offset);
}

class LifecycleBuilder {
  LifecycleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPostStartOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPreStopOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LifecycleObjectBuilder extends fb.ObjectBuilder {
  final LifecycleHandlerObjectBuilder? _postStart;
  final LifecycleHandlerObjectBuilder? _preStop;

  LifecycleObjectBuilder({
    LifecycleHandlerObjectBuilder? postStart,
    LifecycleHandlerObjectBuilder? preStop,
  })
      : _postStart = postStart,
        _preStop = preStop;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? postStartOffset = _postStart?.getOrCreateOffset(fbBuilder);
    final int? preStopOffset = _preStop?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, postStartOffset);
    fbBuilder.addOffset(1, preStopOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LifecycleHandler {
  LifecycleHandler._(this._bc, this._bcOffset);
  factory LifecycleHandler(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LifecycleHandler> reader = _LifecycleHandlerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ExecAction? get exec => ExecAction.reader.vTableGetNullable(_bc, _bcOffset, 4);
  HttpgetAction? get httpGet => HttpgetAction.reader.vTableGetNullable(_bc, _bcOffset, 6);
  TcpsocketAction? get tcpSocket => TcpsocketAction.reader.vTableGetNullable(_bc, _bcOffset, 8);
  SleepAction? get sleep => SleepAction.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'LifecycleHandler{exec: ${exec}, httpGet: ${httpGet}, tcpSocket: ${tcpSocket}, sleep: ${sleep}}';
  }
}

class _LifecycleHandlerReader extends fb.TableReader<LifecycleHandler> {
  const _LifecycleHandlerReader();

  @override
  LifecycleHandler createObject(fb.BufferContext bc, int offset) => 
    LifecycleHandler._(bc, offset);
}

class LifecycleHandlerBuilder {
  LifecycleHandlerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addExecOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHttpGetOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTcpSocketOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSleepOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LifecycleHandlerObjectBuilder extends fb.ObjectBuilder {
  final ExecActionObjectBuilder? _exec;
  final HttpgetActionObjectBuilder? _httpGet;
  final TcpsocketActionObjectBuilder? _tcpSocket;
  final SleepActionObjectBuilder? _sleep;

  LifecycleHandlerObjectBuilder({
    ExecActionObjectBuilder? exec,
    HttpgetActionObjectBuilder? httpGet,
    TcpsocketActionObjectBuilder? tcpSocket,
    SleepActionObjectBuilder? sleep,
  })
      : _exec = exec,
        _httpGet = httpGet,
        _tcpSocket = tcpSocket,
        _sleep = sleep;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? execOffset = _exec?.getOrCreateOffset(fbBuilder);
    final int? httpGetOffset = _httpGet?.getOrCreateOffset(fbBuilder);
    final int? tcpSocketOffset = _tcpSocket?.getOrCreateOffset(fbBuilder);
    final int? sleepOffset = _sleep?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, execOffset);
    fbBuilder.addOffset(1, httpGetOffset);
    fbBuilder.addOffset(2, tcpSocketOffset);
    fbBuilder.addOffset(3, sleepOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LimitRange {
  LimitRange._(this._bc, this._bcOffset);
  factory LimitRange(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LimitRange> reader = _LimitRangeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  LimitRangeSpec? get spec => LimitRangeSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'LimitRange{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _LimitRangeReader extends fb.TableReader<LimitRange> {
  const _LimitRangeReader();

  @override
  LimitRange createObject(fb.BufferContext bc, int offset) => 
    LimitRange._(bc, offset);
}

class LimitRangeBuilder {
  LimitRangeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LimitRangeObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final LimitRangeSpecObjectBuilder? _spec;

  LimitRangeObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    LimitRangeSpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LimitRangeItem {
  LimitRangeItem._(this._bc, this._bcOffset);
  factory LimitRangeItem(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LimitRangeItem> reader = _LimitRangeItemReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<api_core_v1_limit_range_item_.MaxEntry>? get max => const fb.ListReader<api_core_v1_limit_range_item_.MaxEntry>(api_core_v1_limit_range_item_.MaxEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  List<api_core_v1_limit_range_item_.MinEntry>? get min => const fb.ListReader<api_core_v1_limit_range_item_.MinEntry>(api_core_v1_limit_range_item_.MinEntry.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<api_core_v1_limit_range_item_.DefaultEntry>? get $default => const fb.ListReader<api_core_v1_limit_range_item_.DefaultEntry>(api_core_v1_limit_range_item_.DefaultEntry.reader).vTableGetNullable(_bc, _bcOffset, 10);
  List<api_core_v1_limit_range_item_.DefaultRequestEntry>? get defaultRequest => const fb.ListReader<api_core_v1_limit_range_item_.DefaultRequestEntry>(api_core_v1_limit_range_item_.DefaultRequestEntry.reader).vTableGetNullable(_bc, _bcOffset, 12);
  List<api_core_v1_limit_range_item_.MaxLimitRequestRatioEntry>? get maxLimitRequestRatio => const fb.ListReader<api_core_v1_limit_range_item_.MaxLimitRequestRatioEntry>(api_core_v1_limit_range_item_.MaxLimitRequestRatioEntry.reader).vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'LimitRangeItem{type: ${type}, max: ${max}, min: ${min}, \$default: ${$default}, defaultRequest: ${defaultRequest}, maxLimitRequestRatio: ${maxLimitRequestRatio}}';
  }
}

class _LimitRangeItemReader extends fb.TableReader<LimitRangeItem> {
  const _LimitRangeItemReader();

  @override
  LimitRangeItem createObject(fb.BufferContext bc, int offset) => 
    LimitRangeItem._(bc, offset);
}

class LimitRangeItemBuilder {
  LimitRangeItemBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMaxOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMinOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDefaultOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDefaultRequestOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMaxLimitRequestRatioOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LimitRangeItemObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final List<api_core_v1_limit_range_item_.MaxEntryObjectBuilder>? _max;
  final List<api_core_v1_limit_range_item_.MinEntryObjectBuilder>? _min;
  final List<api_core_v1_limit_range_item_.DefaultEntryObjectBuilder>? _$default;
  final List<api_core_v1_limit_range_item_.DefaultRequestEntryObjectBuilder>? _defaultRequest;
  final List<api_core_v1_limit_range_item_.MaxLimitRequestRatioEntryObjectBuilder>? _maxLimitRequestRatio;

  LimitRangeItemObjectBuilder({
    String? type,
    List<api_core_v1_limit_range_item_.MaxEntryObjectBuilder>? max,
    List<api_core_v1_limit_range_item_.MinEntryObjectBuilder>? min,
    List<api_core_v1_limit_range_item_.DefaultEntryObjectBuilder>? $default,
    List<api_core_v1_limit_range_item_.DefaultRequestEntryObjectBuilder>? defaultRequest,
    List<api_core_v1_limit_range_item_.MaxLimitRequestRatioEntryObjectBuilder>? maxLimitRequestRatio,
  })
      : _type = type,
        _max = max,
        _min = min,
        _$default = $default,
        _defaultRequest = defaultRequest,
        _maxLimitRequestRatio = maxLimitRequestRatio;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? maxOffset = _max == null ? null
        : fbBuilder.writeList(_max!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? minOffset = _min == null ? null
        : fbBuilder.writeList(_min!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? $defaultOffset = _$default == null ? null
        : fbBuilder.writeList(_$default!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? defaultRequestOffset = _defaultRequest == null ? null
        : fbBuilder.writeList(_defaultRequest!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? maxLimitRequestRatioOffset = _maxLimitRequestRatio == null ? null
        : fbBuilder.writeList(_maxLimitRequestRatio!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, maxOffset);
    fbBuilder.addOffset(2, minOffset);
    fbBuilder.addOffset(3, $defaultOffset);
    fbBuilder.addOffset(4, defaultRequestOffset);
    fbBuilder.addOffset(5, maxLimitRequestRatioOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LimitRangeList {
  LimitRangeList._(this._bc, this._bcOffset);
  factory LimitRangeList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LimitRangeList> reader = _LimitRangeListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<LimitRange>? get items => const fb.ListReader<LimitRange>(LimitRange.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'LimitRangeList{metadata: ${metadata}, items: ${items}}';
  }
}

class _LimitRangeListReader extends fb.TableReader<LimitRangeList> {
  const _LimitRangeListReader();

  @override
  LimitRangeList createObject(fb.BufferContext bc, int offset) => 
    LimitRangeList._(bc, offset);
}

class LimitRangeListBuilder {
  LimitRangeListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LimitRangeListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<LimitRangeObjectBuilder>? _items;

  LimitRangeListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<LimitRangeObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LimitRangeSpec {
  LimitRangeSpec._(this._bc, this._bcOffset);
  factory LimitRangeSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LimitRangeSpec> reader = _LimitRangeSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<LimitRangeItem>? get limits => const fb.ListReader<LimitRangeItem>(LimitRangeItem.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'LimitRangeSpec{limits: ${limits}}';
  }
}

class _LimitRangeSpecReader extends fb.TableReader<LimitRangeSpec> {
  const _LimitRangeSpecReader();

  @override
  LimitRangeSpec createObject(fb.BufferContext bc, int offset) => 
    LimitRangeSpec._(bc, offset);
}

class LimitRangeSpecBuilder {
  LimitRangeSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addLimitsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LimitRangeSpecObjectBuilder extends fb.ObjectBuilder {
  final List<LimitRangeItemObjectBuilder>? _limits;

  LimitRangeSpecObjectBuilder({
    List<LimitRangeItemObjectBuilder>? limits,
  })
      : _limits = limits;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? limitsOffset = _limits == null ? null
        : fbBuilder.writeList(_limits!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, limitsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class List {
  List._(this._bc, this._bcOffset);
  factory List(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<List> reader = _ListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<apimachinery_pkg_runtime.RawExtension>? get items => const fb.ListReader<apimachinery_pkg_runtime.RawExtension>(apimachinery_pkg_runtime.RawExtension.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'List{metadata: ${metadata}, items: ${items}}';
  }
}

class _ListReader extends fb.TableReader<List> {
  const _ListReader();

  @override
  List createObject(fb.BufferContext bc, int offset) => 
    List._(bc, offset);
}

class ListBuilder {
  ListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<apimachinery_pkg_runtime.RawExtensionObjectBuilder>? _items;

  ListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<apimachinery_pkg_runtime.RawExtensionObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LoadBalancerIngress {
  LoadBalancerIngress._(this._bc, this._bcOffset);
  factory LoadBalancerIngress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LoadBalancerIngress> reader = _LoadBalancerIngressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ip => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get hostname => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get ipMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<PortStatus>? get ports => const fb.ListReader<PortStatus>(PortStatus.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'LoadBalancerIngress{ip: ${ip}, hostname: ${hostname}, ipMode: ${ipMode}, ports: ${ports}}';
  }
}

class _LoadBalancerIngressReader extends fb.TableReader<LoadBalancerIngress> {
  const _LoadBalancerIngressReader();

  @override
  LoadBalancerIngress createObject(fb.BufferContext bc, int offset) => 
    LoadBalancerIngress._(bc, offset);
}

class LoadBalancerIngressBuilder {
  LoadBalancerIngressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHostnameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIpModeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPortsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LoadBalancerIngressObjectBuilder extends fb.ObjectBuilder {
  final String? _ip;
  final String? _hostname;
  final String? _ipMode;
  final List<PortStatusObjectBuilder>? _ports;

  LoadBalancerIngressObjectBuilder({
    String? ip,
    String? hostname,
    String? ipMode,
    List<PortStatusObjectBuilder>? ports,
  })
      : _ip = ip,
        _hostname = hostname,
        _ipMode = ipMode,
        _ports = ports;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ipOffset = _ip == null ? null
        : fbBuilder.writeString(_ip!);
    final int? hostnameOffset = _hostname == null ? null
        : fbBuilder.writeString(_hostname!);
    final int? ipModeOffset = _ipMode == null ? null
        : fbBuilder.writeString(_ipMode!);
    final int? portsOffset = _ports == null ? null
        : fbBuilder.writeList(_ports!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, ipOffset);
    fbBuilder.addOffset(1, hostnameOffset);
    fbBuilder.addOffset(2, ipModeOffset);
    fbBuilder.addOffset(3, portsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LoadBalancerStatus {
  LoadBalancerStatus._(this._bc, this._bcOffset);
  factory LoadBalancerStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LoadBalancerStatus> reader = _LoadBalancerStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<LoadBalancerIngress>? get ingress => const fb.ListReader<LoadBalancerIngress>(LoadBalancerIngress.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'LoadBalancerStatus{ingress: ${ingress}}';
  }
}

class _LoadBalancerStatusReader extends fb.TableReader<LoadBalancerStatus> {
  const _LoadBalancerStatusReader();

  @override
  LoadBalancerStatus createObject(fb.BufferContext bc, int offset) => 
    LoadBalancerStatus._(bc, offset);
}

class LoadBalancerStatusBuilder {
  LoadBalancerStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addIngressOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LoadBalancerStatusObjectBuilder extends fb.ObjectBuilder {
  final List<LoadBalancerIngressObjectBuilder>? _ingress;

  LoadBalancerStatusObjectBuilder({
    List<LoadBalancerIngressObjectBuilder>? ingress,
  })
      : _ingress = ingress;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ingressOffset = _ingress == null ? null
        : fbBuilder.writeList(_ingress!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, ingressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LocalObjectReference {
  LocalObjectReference._(this._bc, this._bcOffset);
  factory LocalObjectReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LocalObjectReference> reader = _LocalObjectReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'LocalObjectReference{name: ${name}}';
  }
}

class _LocalObjectReferenceReader extends fb.TableReader<LocalObjectReference> {
  const _LocalObjectReferenceReader();

  @override
  LocalObjectReference createObject(fb.BufferContext bc, int offset) => 
    LocalObjectReference._(bc, offset);
}

class LocalObjectReferenceBuilder {
  LocalObjectReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LocalObjectReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _name;

  LocalObjectReferenceObjectBuilder({
    String? name,
  })
      : _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LocalVolumeSource {
  LocalVolumeSource._(this._bc, this._bcOffset);
  factory LocalVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LocalVolumeSource> reader = _LocalVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'LocalVolumeSource{path: ${path}, fsType: ${fsType}}';
  }
}

class _LocalVolumeSourceReader extends fb.TableReader<LocalVolumeSource> {
  const _LocalVolumeSourceReader();

  @override
  LocalVolumeSource createObject(fb.BufferContext bc, int offset) => 
    LocalVolumeSource._(bc, offset);
}

class LocalVolumeSourceBuilder {
  LocalVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LocalVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _path;
  final String? _fsType;

  LocalVolumeSourceObjectBuilder({
    String? path,
    String? fsType,
  })
      : _path = path,
        _fsType = fsType;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pathOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ModifyVolumeStatus {
  ModifyVolumeStatus._(this._bc, this._bcOffset);
  factory ModifyVolumeStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ModifyVolumeStatus> reader = _ModifyVolumeStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get targetVolumeAttributesClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ModifyVolumeStatus{targetVolumeAttributesClassName: ${targetVolumeAttributesClassName}, status: ${status}}';
  }
}

class _ModifyVolumeStatusReader extends fb.TableReader<ModifyVolumeStatus> {
  const _ModifyVolumeStatusReader();

  @override
  ModifyVolumeStatus createObject(fb.BufferContext bc, int offset) => 
    ModifyVolumeStatus._(bc, offset);
}

class ModifyVolumeStatusBuilder {
  ModifyVolumeStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTargetVolumeAttributesClassNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ModifyVolumeStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _targetVolumeAttributesClassName;
  final String? _status;

  ModifyVolumeStatusObjectBuilder({
    String? targetVolumeAttributesClassName,
    String? status,
  })
      : _targetVolumeAttributesClassName = targetVolumeAttributesClassName,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? targetVolumeAttributesClassNameOffset = _targetVolumeAttributesClassName == null ? null
        : fbBuilder.writeString(_targetVolumeAttributesClassName!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, targetVolumeAttributesClassNameOffset);
    fbBuilder.addOffset(1, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NfsvolumeSource {
  NfsvolumeSource._(this._bc, this._bcOffset);
  factory NfsvolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NfsvolumeSource> reader = _NfsvolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get server => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'NfsvolumeSource{server: ${server}, path: ${path}, readOnly: ${readOnly}}';
  }
}

class _NfsvolumeSourceReader extends fb.TableReader<NfsvolumeSource> {
  const _NfsvolumeSourceReader();

  @override
  NfsvolumeSource createObject(fb.BufferContext bc, int offset) => 
    NfsvolumeSource._(bc, offset);
}

class NfsvolumeSourceBuilder {
  NfsvolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addServerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NfsvolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _server;
  final String? _path;
  final bool? _readOnly;

  NfsvolumeSourceObjectBuilder({
    String? server,
    String? path,
    bool? readOnly,
  })
      : _server = server,
        _path = path,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? serverOffset = _server == null ? null
        : fbBuilder.writeString(_server!);
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, serverOffset);
    fbBuilder.addOffset(1, pathOffset);
    fbBuilder.addBool(2, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Namespace {
  Namespace._(this._bc, this._bcOffset);
  factory Namespace(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Namespace> reader = _NamespaceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  NamespaceSpec? get spec => NamespaceSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  NamespaceStatus? get status => NamespaceStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Namespace{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _NamespaceReader extends fb.TableReader<Namespace> {
  const _NamespaceReader();

  @override
  Namespace createObject(fb.BufferContext bc, int offset) => 
    Namespace._(bc, offset);
}

class NamespaceBuilder {
  NamespaceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamespaceObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final NamespaceSpecObjectBuilder? _spec;
  final NamespaceStatusObjectBuilder? _status;

  NamespaceObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    NamespaceSpecObjectBuilder? spec,
    NamespaceStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamespaceCondition {
  NamespaceCondition._(this._bc, this._bcOffset);
  factory NamespaceCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamespaceCondition> reader = _NamespaceConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'NamespaceCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _NamespaceConditionReader extends fb.TableReader<NamespaceCondition> {
  const _NamespaceConditionReader();

  @override
  NamespaceCondition createObject(fb.BufferContext bc, int offset) => 
    NamespaceCondition._(bc, offset);
}

class NamespaceConditionBuilder {
  NamespaceConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamespaceConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  NamespaceConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamespaceList {
  NamespaceList._(this._bc, this._bcOffset);
  factory NamespaceList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamespaceList> reader = _NamespaceListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Namespace>? get items => const fb.ListReader<Namespace>(Namespace.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NamespaceList{metadata: ${metadata}, items: ${items}}';
  }
}

class _NamespaceListReader extends fb.TableReader<NamespaceList> {
  const _NamespaceListReader();

  @override
  NamespaceList createObject(fb.BufferContext bc, int offset) => 
    NamespaceList._(bc, offset);
}

class NamespaceListBuilder {
  NamespaceListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamespaceListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<NamespaceObjectBuilder>? _items;

  NamespaceListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<NamespaceObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamespaceSpec {
  NamespaceSpec._(this._bc, this._bcOffset);
  factory NamespaceSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamespaceSpec> reader = _NamespaceSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get finalizers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NamespaceSpec{finalizers: ${finalizers}}';
  }
}

class _NamespaceSpecReader extends fb.TableReader<NamespaceSpec> {
  const _NamespaceSpecReader();

  @override
  NamespaceSpec createObject(fb.BufferContext bc, int offset) => 
    NamespaceSpec._(bc, offset);
}

class NamespaceSpecBuilder {
  NamespaceSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addFinalizersOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamespaceSpecObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _finalizers;

  NamespaceSpecObjectBuilder({
    List<String>? finalizers,
  })
      : _finalizers = finalizers;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? finalizersOffset = _finalizers == null ? null
        : fbBuilder.writeList(_finalizers!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, finalizersOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamespaceStatus {
  NamespaceStatus._(this._bc, this._bcOffset);
  factory NamespaceStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamespaceStatus> reader = _NamespaceStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get phase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<NamespaceCondition>? get conditions => const fb.ListReader<NamespaceCondition>(NamespaceCondition.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NamespaceStatus{phase: ${phase}, conditions: ${conditions}}';
  }
}

class _NamespaceStatusReader extends fb.TableReader<NamespaceStatus> {
  const _NamespaceStatusReader();

  @override
  NamespaceStatus createObject(fb.BufferContext bc, int offset) => 
    NamespaceStatus._(bc, offset);
}

class NamespaceStatusBuilder {
  NamespaceStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPhaseOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamespaceStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _phase;
  final List<NamespaceConditionObjectBuilder>? _conditions;

  NamespaceStatusObjectBuilder({
    String? phase,
    List<NamespaceConditionObjectBuilder>? conditions,
  })
      : _phase = phase,
        _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? phaseOffset = _phase == null ? null
        : fbBuilder.writeString(_phase!);
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, phaseOffset);
    fbBuilder.addOffset(1, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Node {
  Node._(this._bc, this._bcOffset);
  factory Node(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Node> reader = _NodeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  NodeSpec? get spec => NodeSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  NodeStatus? get status => NodeStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Node{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _NodeReader extends fb.TableReader<Node> {
  const _NodeReader();

  @override
  Node createObject(fb.BufferContext bc, int offset) => 
    Node._(bc, offset);
}

class NodeBuilder {
  NodeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final NodeSpecObjectBuilder? _spec;
  final NodeStatusObjectBuilder? _status;

  NodeObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    NodeSpecObjectBuilder? spec,
    NodeStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeAddress {
  NodeAddress._(this._bc, this._bcOffset);
  factory NodeAddress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeAddress> reader = _NodeAddressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get address => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NodeAddress{type: ${type}, address: ${address}}';
  }
}

class _NodeAddressReader extends fb.TableReader<NodeAddress> {
  const _NodeAddressReader();

  @override
  NodeAddress createObject(fb.BufferContext bc, int offset) => 
    NodeAddress._(bc, offset);
}

class NodeAddressBuilder {
  NodeAddressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeAddressObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _address;

  NodeAddressObjectBuilder({
    String? type,
    String? address,
  })
      : _type = type,
        _address = address;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? addressOffset = _address == null ? null
        : fbBuilder.writeString(_address!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, addressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeAffinity {
  NodeAffinity._(this._bc, this._bcOffset);
  factory NodeAffinity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeAffinity> reader = _NodeAffinityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  NodeSelector? get requiredDuringSchedulingIgnoredDuringExecution => NodeSelector.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<PreferredSchedulingTerm>? get preferredDuringSchedulingIgnoredDuringExecution => const fb.ListReader<PreferredSchedulingTerm>(PreferredSchedulingTerm.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NodeAffinity{requiredDuringSchedulingIgnoredDuringExecution: ${requiredDuringSchedulingIgnoredDuringExecution}, preferredDuringSchedulingIgnoredDuringExecution: ${preferredDuringSchedulingIgnoredDuringExecution}}';
  }
}

class _NodeAffinityReader extends fb.TableReader<NodeAffinity> {
  const _NodeAffinityReader();

  @override
  NodeAffinity createObject(fb.BufferContext bc, int offset) => 
    NodeAffinity._(bc, offset);
}

class NodeAffinityBuilder {
  NodeAffinityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addRequiredDuringSchedulingIgnoredDuringExecutionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPreferredDuringSchedulingIgnoredDuringExecutionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeAffinityObjectBuilder extends fb.ObjectBuilder {
  final NodeSelectorObjectBuilder? _requiredDuringSchedulingIgnoredDuringExecution;
  final List<PreferredSchedulingTermObjectBuilder>? _preferredDuringSchedulingIgnoredDuringExecution;

  NodeAffinityObjectBuilder({
    NodeSelectorObjectBuilder? requiredDuringSchedulingIgnoredDuringExecution,
    List<PreferredSchedulingTermObjectBuilder>? preferredDuringSchedulingIgnoredDuringExecution,
  })
      : _requiredDuringSchedulingIgnoredDuringExecution = requiredDuringSchedulingIgnoredDuringExecution,
        _preferredDuringSchedulingIgnoredDuringExecution = preferredDuringSchedulingIgnoredDuringExecution;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? requiredDuringSchedulingIgnoredDuringExecutionOffset = _requiredDuringSchedulingIgnoredDuringExecution?.getOrCreateOffset(fbBuilder);
    final int? preferredDuringSchedulingIgnoredDuringExecutionOffset = _preferredDuringSchedulingIgnoredDuringExecution == null ? null
        : fbBuilder.writeList(_preferredDuringSchedulingIgnoredDuringExecution!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, requiredDuringSchedulingIgnoredDuringExecutionOffset);
    fbBuilder.addOffset(1, preferredDuringSchedulingIgnoredDuringExecutionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeCondition {
  NodeCondition._(this._bc, this._bcOffset);
  factory NodeCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeCondition> reader = _NodeConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastHeartbeatTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'NodeCondition{type: ${type}, status: ${status}, lastHeartbeatTime: ${lastHeartbeatTime}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _NodeConditionReader extends fb.TableReader<NodeCondition> {
  const _NodeConditionReader();

  @override
  NodeCondition createObject(fb.BufferContext bc, int offset) => 
    NodeCondition._(bc, offset);
}

class NodeConditionBuilder {
  NodeConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastHeartbeatTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastHeartbeatTime;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  NodeConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastHeartbeatTime,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastHeartbeatTime = lastHeartbeatTime,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastHeartbeatTimeOffset = _lastHeartbeatTime?.getOrCreateOffset(fbBuilder);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastHeartbeatTimeOffset);
    fbBuilder.addOffset(3, lastTransitionTimeOffset);
    fbBuilder.addOffset(4, reasonOffset);
    fbBuilder.addOffset(5, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeConfigSource {
  NodeConfigSource._(this._bc, this._bcOffset);
  factory NodeConfigSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeConfigSource> reader = _NodeConfigSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ConfigMapNodeConfigSource? get configMap => ConfigMapNodeConfigSource.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NodeConfigSource{configMap: ${configMap}}';
  }
}

class _NodeConfigSourceReader extends fb.TableReader<NodeConfigSource> {
  const _NodeConfigSourceReader();

  @override
  NodeConfigSource createObject(fb.BufferContext bc, int offset) => 
    NodeConfigSource._(bc, offset);
}

class NodeConfigSourceBuilder {
  NodeConfigSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addConfigMapOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeConfigSourceObjectBuilder extends fb.ObjectBuilder {
  final ConfigMapNodeConfigSourceObjectBuilder? _configMap;

  NodeConfigSourceObjectBuilder({
    ConfigMapNodeConfigSourceObjectBuilder? configMap,
  })
      : _configMap = configMap;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? configMapOffset = _configMap?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, configMapOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeConfigStatus {
  NodeConfigStatus._(this._bc, this._bcOffset);
  factory NodeConfigStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeConfigStatus> reader = _NodeConfigStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  NodeConfigSource? get assigned => NodeConfigSource.reader.vTableGetNullable(_bc, _bcOffset, 4);
  NodeConfigSource? get active => NodeConfigSource.reader.vTableGetNullable(_bc, _bcOffset, 6);
  NodeConfigSource? get lastKnownGood => NodeConfigSource.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'NodeConfigStatus{assigned: ${assigned}, active: ${active}, lastKnownGood: ${lastKnownGood}, error: ${error}}';
  }
}

class _NodeConfigStatusReader extends fb.TableReader<NodeConfigStatus> {
  const _NodeConfigStatusReader();

  @override
  NodeConfigStatus createObject(fb.BufferContext bc, int offset) => 
    NodeConfigStatus._(bc, offset);
}

class NodeConfigStatusBuilder {
  NodeConfigStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addAssignedOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addActiveOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastKnownGoodOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeConfigStatusObjectBuilder extends fb.ObjectBuilder {
  final NodeConfigSourceObjectBuilder? _assigned;
  final NodeConfigSourceObjectBuilder? _active;
  final NodeConfigSourceObjectBuilder? _lastKnownGood;
  final String? _error;

  NodeConfigStatusObjectBuilder({
    NodeConfigSourceObjectBuilder? assigned,
    NodeConfigSourceObjectBuilder? active,
    NodeConfigSourceObjectBuilder? lastKnownGood,
    String? error,
  })
      : _assigned = assigned,
        _active = active,
        _lastKnownGood = lastKnownGood,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? assignedOffset = _assigned?.getOrCreateOffset(fbBuilder);
    final int? activeOffset = _active?.getOrCreateOffset(fbBuilder);
    final int? lastKnownGoodOffset = _lastKnownGood?.getOrCreateOffset(fbBuilder);
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, assignedOffset);
    fbBuilder.addOffset(1, activeOffset);
    fbBuilder.addOffset(2, lastKnownGoodOffset);
    fbBuilder.addOffset(3, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeDaemonEndpoints {
  NodeDaemonEndpoints._(this._bc, this._bcOffset);
  factory NodeDaemonEndpoints(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeDaemonEndpoints> reader = _NodeDaemonEndpointsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  DaemonEndpoint? get kubeletEndpoint => DaemonEndpoint.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NodeDaemonEndpoints{kubeletEndpoint: ${kubeletEndpoint}}';
  }
}

class _NodeDaemonEndpointsReader extends fb.TableReader<NodeDaemonEndpoints> {
  const _NodeDaemonEndpointsReader();

  @override
  NodeDaemonEndpoints createObject(fb.BufferContext bc, int offset) => 
    NodeDaemonEndpoints._(bc, offset);
}

class NodeDaemonEndpointsBuilder {
  NodeDaemonEndpointsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addKubeletEndpointOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeDaemonEndpointsObjectBuilder extends fb.ObjectBuilder {
  final DaemonEndpointObjectBuilder? _kubeletEndpoint;

  NodeDaemonEndpointsObjectBuilder({
    DaemonEndpointObjectBuilder? kubeletEndpoint,
  })
      : _kubeletEndpoint = kubeletEndpoint;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? kubeletEndpointOffset = _kubeletEndpoint?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, kubeletEndpointOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeList {
  NodeList._(this._bc, this._bcOffset);
  factory NodeList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeList> reader = _NodeListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Node>? get items => const fb.ListReader<Node>(Node.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NodeList{metadata: ${metadata}, items: ${items}}';
  }
}

class _NodeListReader extends fb.TableReader<NodeList> {
  const _NodeListReader();

  @override
  NodeList createObject(fb.BufferContext bc, int offset) => 
    NodeList._(bc, offset);
}

class NodeListBuilder {
  NodeListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<NodeObjectBuilder>? _items;

  NodeListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<NodeObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeProxyOptions {
  NodeProxyOptions._(this._bc, this._bcOffset);
  factory NodeProxyOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeProxyOptions> reader = _NodeProxyOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NodeProxyOptions{path: ${path}}';
  }
}

class _NodeProxyOptionsReader extends fb.TableReader<NodeProxyOptions> {
  const _NodeProxyOptionsReader();

  @override
  NodeProxyOptions createObject(fb.BufferContext bc, int offset) => 
    NodeProxyOptions._(bc, offset);
}

class NodeProxyOptionsBuilder {
  NodeProxyOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeProxyOptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _path;

  NodeProxyOptionsObjectBuilder({
    String? path,
  })
      : _path = path;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, pathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeRuntimeHandler {
  NodeRuntimeHandler._(this._bc, this._bcOffset);
  factory NodeRuntimeHandler(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeRuntimeHandler> reader = _NodeRuntimeHandlerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  NodeRuntimeHandlerFeatures? get features => NodeRuntimeHandlerFeatures.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NodeRuntimeHandler{name: ${name}, features: ${features}}';
  }
}

class _NodeRuntimeHandlerReader extends fb.TableReader<NodeRuntimeHandler> {
  const _NodeRuntimeHandlerReader();

  @override
  NodeRuntimeHandler createObject(fb.BufferContext bc, int offset) => 
    NodeRuntimeHandler._(bc, offset);
}

class NodeRuntimeHandlerBuilder {
  NodeRuntimeHandlerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFeaturesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeRuntimeHandlerObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final NodeRuntimeHandlerFeaturesObjectBuilder? _features;

  NodeRuntimeHandlerObjectBuilder({
    String? name,
    NodeRuntimeHandlerFeaturesObjectBuilder? features,
  })
      : _name = name,
        _features = features;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? featuresOffset = _features?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, featuresOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeRuntimeHandlerFeatures {
  NodeRuntimeHandlerFeatures._(this._bc, this._bcOffset);
  factory NodeRuntimeHandlerFeatures(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeRuntimeHandlerFeatures> reader = _NodeRuntimeHandlerFeaturesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get recursiveReadOnlyMounts => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);

  @override
  String toString() {
    return 'NodeRuntimeHandlerFeatures{recursiveReadOnlyMounts: ${recursiveReadOnlyMounts}}';
  }
}

class _NodeRuntimeHandlerFeaturesReader extends fb.TableReader<NodeRuntimeHandlerFeatures> {
  const _NodeRuntimeHandlerFeaturesReader();

  @override
  NodeRuntimeHandlerFeatures createObject(fb.BufferContext bc, int offset) => 
    NodeRuntimeHandlerFeatures._(bc, offset);
}

class NodeRuntimeHandlerFeaturesBuilder {
  NodeRuntimeHandlerFeaturesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRecursiveReadOnlyMounts(bool? recursiveReadOnlyMounts) {
    fbBuilder.addBool(0, recursiveReadOnlyMounts);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeRuntimeHandlerFeaturesObjectBuilder extends fb.ObjectBuilder {
  final bool? _recursiveReadOnlyMounts;

  NodeRuntimeHandlerFeaturesObjectBuilder({
    bool? recursiveReadOnlyMounts,
  })
      : _recursiveReadOnlyMounts = recursiveReadOnlyMounts;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addBool(0, _recursiveReadOnlyMounts);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeSelector {
  NodeSelector._(this._bc, this._bcOffset);
  factory NodeSelector(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeSelector> reader = _NodeSelectorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<NodeSelectorTerm>? get nodeSelectorTerms => const fb.ListReader<NodeSelectorTerm>(NodeSelectorTerm.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NodeSelector{nodeSelectorTerms: ${nodeSelectorTerms}}';
  }
}

class _NodeSelectorReader extends fb.TableReader<NodeSelector> {
  const _NodeSelectorReader();

  @override
  NodeSelector createObject(fb.BufferContext bc, int offset) => 
    NodeSelector._(bc, offset);
}

class NodeSelectorBuilder {
  NodeSelectorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNodeSelectorTermsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeSelectorObjectBuilder extends fb.ObjectBuilder {
  final List<NodeSelectorTermObjectBuilder>? _nodeSelectorTerms;

  NodeSelectorObjectBuilder({
    List<NodeSelectorTermObjectBuilder>? nodeSelectorTerms,
  })
      : _nodeSelectorTerms = nodeSelectorTerms;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nodeSelectorTermsOffset = _nodeSelectorTerms == null ? null
        : fbBuilder.writeList(_nodeSelectorTerms!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nodeSelectorTermsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeSelectorRequirement {
  NodeSelectorRequirement._(this._bc, this._bcOffset);
  factory NodeSelectorRequirement(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeSelectorRequirement> reader = _NodeSelectorRequirementReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get $operator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get values => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'NodeSelectorRequirement{key: ${key}, \$operator: ${$operator}, values: ${values}}';
  }
}

class _NodeSelectorRequirementReader extends fb.TableReader<NodeSelectorRequirement> {
  const _NodeSelectorRequirementReader();

  @override
  NodeSelectorRequirement createObject(fb.BufferContext bc, int offset) => 
    NodeSelectorRequirement._(bc, offset);
}

class NodeSelectorRequirementBuilder {
  NodeSelectorRequirementBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOperatorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeSelectorRequirementObjectBuilder extends fb.ObjectBuilder {
  final String? _key;
  final String? _$operator;
  final List<String>? _values;

  NodeSelectorRequirementObjectBuilder({
    String? key,
    String? $operator,
    List<String>? values,
  })
      : _key = key,
        _$operator = $operator,
        _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    final int? $operatorOffset = _$operator == null ? null
        : fbBuilder.writeString(_$operator!);
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, keyOffset);
    fbBuilder.addOffset(1, $operatorOffset);
    fbBuilder.addOffset(2, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeSelectorTerm {
  NodeSelectorTerm._(this._bc, this._bcOffset);
  factory NodeSelectorTerm(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeSelectorTerm> reader = _NodeSelectorTermReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<NodeSelectorRequirement>? get matchExpressions => const fb.ListReader<NodeSelectorRequirement>(NodeSelectorRequirement.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<NodeSelectorRequirement>? get matchFields => const fb.ListReader<NodeSelectorRequirement>(NodeSelectorRequirement.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NodeSelectorTerm{matchExpressions: ${matchExpressions}, matchFields: ${matchFields}}';
  }
}

class _NodeSelectorTermReader extends fb.TableReader<NodeSelectorTerm> {
  const _NodeSelectorTermReader();

  @override
  NodeSelectorTerm createObject(fb.BufferContext bc, int offset) => 
    NodeSelectorTerm._(bc, offset);
}

class NodeSelectorTermBuilder {
  NodeSelectorTermBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMatchExpressionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMatchFieldsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeSelectorTermObjectBuilder extends fb.ObjectBuilder {
  final List<NodeSelectorRequirementObjectBuilder>? _matchExpressions;
  final List<NodeSelectorRequirementObjectBuilder>? _matchFields;

  NodeSelectorTermObjectBuilder({
    List<NodeSelectorRequirementObjectBuilder>? matchExpressions,
    List<NodeSelectorRequirementObjectBuilder>? matchFields,
  })
      : _matchExpressions = matchExpressions,
        _matchFields = matchFields;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? matchExpressionsOffset = _matchExpressions == null ? null
        : fbBuilder.writeList(_matchExpressions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? matchFieldsOffset = _matchFields == null ? null
        : fbBuilder.writeList(_matchFields!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, matchExpressionsOffset);
    fbBuilder.addOffset(1, matchFieldsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeSpec {
  NodeSpec._(this._bc, this._bcOffset);
  factory NodeSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeSpec> reader = _NodeSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get podCidr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get podCidrs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  String? get providerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  bool get unschedulable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  List<Taint>? get taints => const fb.ListReader<Taint>(Taint.reader).vTableGetNullable(_bc, _bcOffset, 12);
  NodeConfigSource? get configSource => NodeConfigSource.reader.vTableGetNullable(_bc, _bcOffset, 14);
  String? get externalId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'NodeSpec{podCidr: ${podCidr}, podCidrs: ${podCidrs}, providerId: ${providerId}, unschedulable: ${unschedulable}, taints: ${taints}, configSource: ${configSource}, externalId: ${externalId}}';
  }
}

class _NodeSpecReader extends fb.TableReader<NodeSpec> {
  const _NodeSpecReader();

  @override
  NodeSpec createObject(fb.BufferContext bc, int offset) => 
    NodeSpec._(bc, offset);
}

class NodeSpecBuilder {
  NodeSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addPodCidrOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPodCidrsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addProviderIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addUnschedulable(bool? unschedulable) {
    fbBuilder.addBool(3, unschedulable);
    return fbBuilder.offset;
  }
  int addTaintsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addConfigSourceOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addExternalIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _podCidr;
  final List<String>? _podCidrs;
  final String? _providerId;
  final bool? _unschedulable;
  final List<TaintObjectBuilder>? _taints;
  final NodeConfigSourceObjectBuilder? _configSource;
  final String? _externalId;

  NodeSpecObjectBuilder({
    String? podCidr,
    List<String>? podCidrs,
    String? providerId,
    bool? unschedulable,
    List<TaintObjectBuilder>? taints,
    NodeConfigSourceObjectBuilder? configSource,
    String? externalId,
  })
      : _podCidr = podCidr,
        _podCidrs = podCidrs,
        _providerId = providerId,
        _unschedulable = unschedulable,
        _taints = taints,
        _configSource = configSource,
        _externalId = externalId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? podCidrOffset = _podCidr == null ? null
        : fbBuilder.writeString(_podCidr!);
    final int? podCidrsOffset = _podCidrs == null ? null
        : fbBuilder.writeList(_podCidrs!.map(fbBuilder.writeString).toList());
    final int? providerIdOffset = _providerId == null ? null
        : fbBuilder.writeString(_providerId!);
    final int? taintsOffset = _taints == null ? null
        : fbBuilder.writeList(_taints!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? configSourceOffset = _configSource?.getOrCreateOffset(fbBuilder);
    final int? externalIdOffset = _externalId == null ? null
        : fbBuilder.writeString(_externalId!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, podCidrOffset);
    fbBuilder.addOffset(1, podCidrsOffset);
    fbBuilder.addOffset(2, providerIdOffset);
    fbBuilder.addBool(3, _unschedulable);
    fbBuilder.addOffset(4, taintsOffset);
    fbBuilder.addOffset(5, configSourceOffset);
    fbBuilder.addOffset(6, externalIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeStatus {
  NodeStatus._(this._bc, this._bcOffset);
  factory NodeStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeStatus> reader = _NodeStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<api_core_v1_node_status_.CapacityEntry>? get capacity => const fb.ListReader<api_core_v1_node_status_.CapacityEntry>(api_core_v1_node_status_.CapacityEntry.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<api_core_v1_node_status_.AllocatableEntry>? get allocatable => const fb.ListReader<api_core_v1_node_status_.AllocatableEntry>(api_core_v1_node_status_.AllocatableEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  String? get phase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<NodeCondition>? get conditions => const fb.ListReader<NodeCondition>(NodeCondition.reader).vTableGetNullable(_bc, _bcOffset, 10);
  List<NodeAddress>? get addresses => const fb.ListReader<NodeAddress>(NodeAddress.reader).vTableGetNullable(_bc, _bcOffset, 12);
  NodeDaemonEndpoints? get daemonEndpoints => NodeDaemonEndpoints.reader.vTableGetNullable(_bc, _bcOffset, 14);
  NodeSystemInfo? get nodeInfo => NodeSystemInfo.reader.vTableGetNullable(_bc, _bcOffset, 16);
  List<ContainerImage>? get images => const fb.ListReader<ContainerImage>(ContainerImage.reader).vTableGetNullable(_bc, _bcOffset, 18);
  List<String>? get volumesInUse => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  List<AttachedVolume>? get volumesAttached => const fb.ListReader<AttachedVolume>(AttachedVolume.reader).vTableGetNullable(_bc, _bcOffset, 22);
  NodeConfigStatus? get config => NodeConfigStatus.reader.vTableGetNullable(_bc, _bcOffset, 24);
  List<NodeRuntimeHandler>? get runtimeHandlers => const fb.ListReader<NodeRuntimeHandler>(NodeRuntimeHandler.reader).vTableGetNullable(_bc, _bcOffset, 26);

  @override
  String toString() {
    return 'NodeStatus{capacity: ${capacity}, allocatable: ${allocatable}, phase: ${phase}, conditions: ${conditions}, addresses: ${addresses}, daemonEndpoints: ${daemonEndpoints}, nodeInfo: ${nodeInfo}, images: ${images}, volumesInUse: ${volumesInUse}, volumesAttached: ${volumesAttached}, config: ${config}, runtimeHandlers: ${runtimeHandlers}}';
  }
}

class _NodeStatusReader extends fb.TableReader<NodeStatus> {
  const _NodeStatusReader();

  @override
  NodeStatus createObject(fb.BufferContext bc, int offset) => 
    NodeStatus._(bc, offset);
}

class NodeStatusBuilder {
  NodeStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addCapacityOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAllocatableOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPhaseOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAddressesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addDaemonEndpointsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNodeInfoOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addImagesOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addVolumesInUseOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addVolumesAttachedOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addConfigOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addRuntimeHandlersOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeStatusObjectBuilder extends fb.ObjectBuilder {
  final List<api_core_v1_node_status_.CapacityEntryObjectBuilder>? _capacity;
  final List<api_core_v1_node_status_.AllocatableEntryObjectBuilder>? _allocatable;
  final String? _phase;
  final List<NodeConditionObjectBuilder>? _conditions;
  final List<NodeAddressObjectBuilder>? _addresses;
  final NodeDaemonEndpointsObjectBuilder? _daemonEndpoints;
  final NodeSystemInfoObjectBuilder? _nodeInfo;
  final List<ContainerImageObjectBuilder>? _images;
  final List<String>? _volumesInUse;
  final List<AttachedVolumeObjectBuilder>? _volumesAttached;
  final NodeConfigStatusObjectBuilder? _config;
  final List<NodeRuntimeHandlerObjectBuilder>? _runtimeHandlers;

  NodeStatusObjectBuilder({
    List<api_core_v1_node_status_.CapacityEntryObjectBuilder>? capacity,
    List<api_core_v1_node_status_.AllocatableEntryObjectBuilder>? allocatable,
    String? phase,
    List<NodeConditionObjectBuilder>? conditions,
    List<NodeAddressObjectBuilder>? addresses,
    NodeDaemonEndpointsObjectBuilder? daemonEndpoints,
    NodeSystemInfoObjectBuilder? nodeInfo,
    List<ContainerImageObjectBuilder>? images,
    List<String>? volumesInUse,
    List<AttachedVolumeObjectBuilder>? volumesAttached,
    NodeConfigStatusObjectBuilder? config,
    List<NodeRuntimeHandlerObjectBuilder>? runtimeHandlers,
  })
      : _capacity = capacity,
        _allocatable = allocatable,
        _phase = phase,
        _conditions = conditions,
        _addresses = addresses,
        _daemonEndpoints = daemonEndpoints,
        _nodeInfo = nodeInfo,
        _images = images,
        _volumesInUse = volumesInUse,
        _volumesAttached = volumesAttached,
        _config = config,
        _runtimeHandlers = runtimeHandlers;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? capacityOffset = _capacity == null ? null
        : fbBuilder.writeList(_capacity!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? allocatableOffset = _allocatable == null ? null
        : fbBuilder.writeList(_allocatable!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? phaseOffset = _phase == null ? null
        : fbBuilder.writeString(_phase!);
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? addressesOffset = _addresses == null ? null
        : fbBuilder.writeList(_addresses!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? daemonEndpointsOffset = _daemonEndpoints?.getOrCreateOffset(fbBuilder);
    final int? nodeInfoOffset = _nodeInfo?.getOrCreateOffset(fbBuilder);
    final int? imagesOffset = _images == null ? null
        : fbBuilder.writeList(_images!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? volumesInUseOffset = _volumesInUse == null ? null
        : fbBuilder.writeList(_volumesInUse!.map(fbBuilder.writeString).toList());
    final int? volumesAttachedOffset = _volumesAttached == null ? null
        : fbBuilder.writeList(_volumesAttached!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? configOffset = _config?.getOrCreateOffset(fbBuilder);
    final int? runtimeHandlersOffset = _runtimeHandlers == null ? null
        : fbBuilder.writeList(_runtimeHandlers!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, capacityOffset);
    fbBuilder.addOffset(1, allocatableOffset);
    fbBuilder.addOffset(2, phaseOffset);
    fbBuilder.addOffset(3, conditionsOffset);
    fbBuilder.addOffset(4, addressesOffset);
    fbBuilder.addOffset(5, daemonEndpointsOffset);
    fbBuilder.addOffset(6, nodeInfoOffset);
    fbBuilder.addOffset(7, imagesOffset);
    fbBuilder.addOffset(8, volumesInUseOffset);
    fbBuilder.addOffset(9, volumesAttachedOffset);
    fbBuilder.addOffset(10, configOffset);
    fbBuilder.addOffset(11, runtimeHandlersOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeSystemInfo {
  NodeSystemInfo._(this._bc, this._bcOffset);
  factory NodeSystemInfo(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeSystemInfo> reader = _NodeSystemInfoReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get machineId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get systemUuid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get bootId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get kernelVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get osImage => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get containerRuntimeVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get kubeletVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get kubeProxyVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get operatingSystem => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  String? get architecture => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'NodeSystemInfo{machineId: ${machineId}, systemUuid: ${systemUuid}, bootId: ${bootId}, kernelVersion: ${kernelVersion}, osImage: ${osImage}, containerRuntimeVersion: ${containerRuntimeVersion}, kubeletVersion: ${kubeletVersion}, kubeProxyVersion: ${kubeProxyVersion}, operatingSystem: ${operatingSystem}, architecture: ${architecture}}';
  }
}

class _NodeSystemInfoReader extends fb.TableReader<NodeSystemInfo> {
  const _NodeSystemInfoReader();

  @override
  NodeSystemInfo createObject(fb.BufferContext bc, int offset) => 
    NodeSystemInfo._(bc, offset);
}

class NodeSystemInfoBuilder {
  NodeSystemInfoBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addMachineIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSystemUuidOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addBootIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addKernelVersionOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addOsImageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addContainerRuntimeVersionOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addKubeletVersionOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addKubeProxyVersionOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addOperatingSystemOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addArchitectureOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeSystemInfoObjectBuilder extends fb.ObjectBuilder {
  final String? _machineId;
  final String? _systemUuid;
  final String? _bootId;
  final String? _kernelVersion;
  final String? _osImage;
  final String? _containerRuntimeVersion;
  final String? _kubeletVersion;
  final String? _kubeProxyVersion;
  final String? _operatingSystem;
  final String? _architecture;

  NodeSystemInfoObjectBuilder({
    String? machineId,
    String? systemUuid,
    String? bootId,
    String? kernelVersion,
    String? osImage,
    String? containerRuntimeVersion,
    String? kubeletVersion,
    String? kubeProxyVersion,
    String? operatingSystem,
    String? architecture,
  })
      : _machineId = machineId,
        _systemUuid = systemUuid,
        _bootId = bootId,
        _kernelVersion = kernelVersion,
        _osImage = osImage,
        _containerRuntimeVersion = containerRuntimeVersion,
        _kubeletVersion = kubeletVersion,
        _kubeProxyVersion = kubeProxyVersion,
        _operatingSystem = operatingSystem,
        _architecture = architecture;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? machineIdOffset = _machineId == null ? null
        : fbBuilder.writeString(_machineId!);
    final int? systemUuidOffset = _systemUuid == null ? null
        : fbBuilder.writeString(_systemUuid!);
    final int? bootIdOffset = _bootId == null ? null
        : fbBuilder.writeString(_bootId!);
    final int? kernelVersionOffset = _kernelVersion == null ? null
        : fbBuilder.writeString(_kernelVersion!);
    final int? osImageOffset = _osImage == null ? null
        : fbBuilder.writeString(_osImage!);
    final int? containerRuntimeVersionOffset = _containerRuntimeVersion == null ? null
        : fbBuilder.writeString(_containerRuntimeVersion!);
    final int? kubeletVersionOffset = _kubeletVersion == null ? null
        : fbBuilder.writeString(_kubeletVersion!);
    final int? kubeProxyVersionOffset = _kubeProxyVersion == null ? null
        : fbBuilder.writeString(_kubeProxyVersion!);
    final int? operatingSystemOffset = _operatingSystem == null ? null
        : fbBuilder.writeString(_operatingSystem!);
    final int? architectureOffset = _architecture == null ? null
        : fbBuilder.writeString(_architecture!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, machineIdOffset);
    fbBuilder.addOffset(1, systemUuidOffset);
    fbBuilder.addOffset(2, bootIdOffset);
    fbBuilder.addOffset(3, kernelVersionOffset);
    fbBuilder.addOffset(4, osImageOffset);
    fbBuilder.addOffset(5, containerRuntimeVersionOffset);
    fbBuilder.addOffset(6, kubeletVersionOffset);
    fbBuilder.addOffset(7, kubeProxyVersionOffset);
    fbBuilder.addOffset(8, operatingSystemOffset);
    fbBuilder.addOffset(9, architectureOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ObjectFieldSelector {
  ObjectFieldSelector._(this._bc, this._bcOffset);
  factory ObjectFieldSelector(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ObjectFieldSelector> reader = _ObjectFieldSelectorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get apiVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fieldPath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ObjectFieldSelector{apiVersion: ${apiVersion}, fieldPath: ${fieldPath}}';
  }
}

class _ObjectFieldSelectorReader extends fb.TableReader<ObjectFieldSelector> {
  const _ObjectFieldSelectorReader();

  @override
  ObjectFieldSelector createObject(fb.BufferContext bc, int offset) => 
    ObjectFieldSelector._(bc, offset);
}

class ObjectFieldSelectorBuilder {
  ObjectFieldSelectorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addApiVersionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFieldPathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ObjectFieldSelectorObjectBuilder extends fb.ObjectBuilder {
  final String? _apiVersion;
  final String? _fieldPath;

  ObjectFieldSelectorObjectBuilder({
    String? apiVersion,
    String? fieldPath,
  })
      : _apiVersion = apiVersion,
        _fieldPath = fieldPath;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiVersionOffset = _apiVersion == null ? null
        : fbBuilder.writeString(_apiVersion!);
    final int? fieldPathOffset = _fieldPath == null ? null
        : fbBuilder.writeString(_fieldPath!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, apiVersionOffset);
    fbBuilder.addOffset(1, fieldPathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ObjectReference {
  ObjectReference._(this._bc, this._bcOffset);
  factory ObjectReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ObjectReference> reader = _ObjectReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get uid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get apiVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get resourceVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get fieldPath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'ObjectReference{kind: ${kind}, namespace: ${namespace}, name: ${name}, uid: ${uid}, apiVersion: ${apiVersion}, resourceVersion: ${resourceVersion}, fieldPath: ${fieldPath}}';
  }
}

class _ObjectReferenceReader extends fb.TableReader<ObjectReference> {
  const _ObjectReferenceReader();

  @override
  ObjectReference createObject(fb.BufferContext bc, int offset) => 
    ObjectReference._(bc, offset);
}

class ObjectReferenceBuilder {
  ObjectReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addKindOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addUidOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addApiVersionOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addResourceVersionOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addFieldPathOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ObjectReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _kind;
  final String? _namespace;
  final String? _name;
  final String? _uid;
  final String? _apiVersion;
  final String? _resourceVersion;
  final String? _fieldPath;

  ObjectReferenceObjectBuilder({
    String? kind,
    String? namespace,
    String? name,
    String? uid,
    String? apiVersion,
    String? resourceVersion,
    String? fieldPath,
  })
      : _kind = kind,
        _namespace = namespace,
        _name = name,
        _uid = uid,
        _apiVersion = apiVersion,
        _resourceVersion = resourceVersion,
        _fieldPath = fieldPath;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? uidOffset = _uid == null ? null
        : fbBuilder.writeString(_uid!);
    final int? apiVersionOffset = _apiVersion == null ? null
        : fbBuilder.writeString(_apiVersion!);
    final int? resourceVersionOffset = _resourceVersion == null ? null
        : fbBuilder.writeString(_resourceVersion!);
    final int? fieldPathOffset = _fieldPath == null ? null
        : fbBuilder.writeString(_fieldPath!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, kindOffset);
    fbBuilder.addOffset(1, namespaceOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, uidOffset);
    fbBuilder.addOffset(4, apiVersionOffset);
    fbBuilder.addOffset(5, resourceVersionOffset);
    fbBuilder.addOffset(6, fieldPathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolume {
  PersistentVolume._(this._bc, this._bcOffset);
  factory PersistentVolume(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolume> reader = _PersistentVolumeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PersistentVolumeSpec? get spec => PersistentVolumeSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  PersistentVolumeStatus? get status => PersistentVolumeStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PersistentVolume{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _PersistentVolumeReader extends fb.TableReader<PersistentVolume> {
  const _PersistentVolumeReader();

  @override
  PersistentVolume createObject(fb.BufferContext bc, int offset) => 
    PersistentVolume._(bc, offset);
}

class PersistentVolumeBuilder {
  PersistentVolumeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final PersistentVolumeSpecObjectBuilder? _spec;
  final PersistentVolumeStatusObjectBuilder? _status;

  PersistentVolumeObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    PersistentVolumeSpecObjectBuilder? spec,
    PersistentVolumeStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeClaim {
  PersistentVolumeClaim._(this._bc, this._bcOffset);
  factory PersistentVolumeClaim(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeClaim> reader = _PersistentVolumeClaimReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PersistentVolumeClaimSpec? get spec => PersistentVolumeClaimSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  PersistentVolumeClaimStatus? get status => PersistentVolumeClaimStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PersistentVolumeClaim{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _PersistentVolumeClaimReader extends fb.TableReader<PersistentVolumeClaim> {
  const _PersistentVolumeClaimReader();

  @override
  PersistentVolumeClaim createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeClaim._(bc, offset);
}

class PersistentVolumeClaimBuilder {
  PersistentVolumeClaimBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeClaimObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final PersistentVolumeClaimSpecObjectBuilder? _spec;
  final PersistentVolumeClaimStatusObjectBuilder? _status;

  PersistentVolumeClaimObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    PersistentVolumeClaimSpecObjectBuilder? spec,
    PersistentVolumeClaimStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeClaimCondition {
  PersistentVolumeClaimCondition._(this._bc, this._bcOffset);
  factory PersistentVolumeClaimCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeClaimCondition> reader = _PersistentVolumeClaimConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastProbeTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'PersistentVolumeClaimCondition{type: ${type}, status: ${status}, lastProbeTime: ${lastProbeTime}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _PersistentVolumeClaimConditionReader extends fb.TableReader<PersistentVolumeClaimCondition> {
  const _PersistentVolumeClaimConditionReader();

  @override
  PersistentVolumeClaimCondition createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeClaimCondition._(bc, offset);
}

class PersistentVolumeClaimConditionBuilder {
  PersistentVolumeClaimConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastProbeTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeClaimConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastProbeTime;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  PersistentVolumeClaimConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastProbeTime,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastProbeTime = lastProbeTime,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastProbeTimeOffset = _lastProbeTime?.getOrCreateOffset(fbBuilder);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastProbeTimeOffset);
    fbBuilder.addOffset(3, lastTransitionTimeOffset);
    fbBuilder.addOffset(4, reasonOffset);
    fbBuilder.addOffset(5, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeClaimList {
  PersistentVolumeClaimList._(this._bc, this._bcOffset);
  factory PersistentVolumeClaimList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeClaimList> reader = _PersistentVolumeClaimListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<PersistentVolumeClaim>? get items => const fb.ListReader<PersistentVolumeClaim>(PersistentVolumeClaim.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PersistentVolumeClaimList{metadata: ${metadata}, items: ${items}}';
  }
}

class _PersistentVolumeClaimListReader extends fb.TableReader<PersistentVolumeClaimList> {
  const _PersistentVolumeClaimListReader();

  @override
  PersistentVolumeClaimList createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeClaimList._(bc, offset);
}

class PersistentVolumeClaimListBuilder {
  PersistentVolumeClaimListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeClaimListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<PersistentVolumeClaimObjectBuilder>? _items;

  PersistentVolumeClaimListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<PersistentVolumeClaimObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeClaimSpec {
  PersistentVolumeClaimSpec._(this._bc, this._bcOffset);
  factory PersistentVolumeClaimSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeClaimSpec> reader = _PersistentVolumeClaimSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get accessModes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get selector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  VolumeResourceRequirements? get resources => VolumeResourceRequirements.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get volumeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get storageClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get volumeMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  TypedLocalObjectReference? get dataSource => TypedLocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 16);
  TypedObjectReference? get dataSourceRef => TypedObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 18);
  String? get volumeAttributesClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);

  @override
  String toString() {
    return 'PersistentVolumeClaimSpec{accessModes: ${accessModes}, selector: ${selector}, resources: ${resources}, volumeName: ${volumeName}, storageClassName: ${storageClassName}, volumeMode: ${volumeMode}, dataSource: ${dataSource}, dataSourceRef: ${dataSourceRef}, volumeAttributesClassName: ${volumeAttributesClassName}}';
  }
}

class _PersistentVolumeClaimSpecReader extends fb.TableReader<PersistentVolumeClaimSpec> {
  const _PersistentVolumeClaimSpecReader();

  @override
  PersistentVolumeClaimSpec createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeClaimSpec._(bc, offset);
}

class PersistentVolumeClaimSpecBuilder {
  PersistentVolumeClaimSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addAccessModesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addResourcesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addVolumeNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStorageClassNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addVolumeModeOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addDataSourceOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addDataSourceRefOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addVolumeAttributesClassNameOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeClaimSpecObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _accessModes;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _selector;
  final VolumeResourceRequirementsObjectBuilder? _resources;
  final String? _volumeName;
  final String? _storageClassName;
  final String? _volumeMode;
  final TypedLocalObjectReferenceObjectBuilder? _dataSource;
  final TypedObjectReferenceObjectBuilder? _dataSourceRef;
  final String? _volumeAttributesClassName;

  PersistentVolumeClaimSpecObjectBuilder({
    List<String>? accessModes,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? selector,
    VolumeResourceRequirementsObjectBuilder? resources,
    String? volumeName,
    String? storageClassName,
    String? volumeMode,
    TypedLocalObjectReferenceObjectBuilder? dataSource,
    TypedObjectReferenceObjectBuilder? dataSourceRef,
    String? volumeAttributesClassName,
  })
      : _accessModes = accessModes,
        _selector = selector,
        _resources = resources,
        _volumeName = volumeName,
        _storageClassName = storageClassName,
        _volumeMode = volumeMode,
        _dataSource = dataSource,
        _dataSourceRef = dataSourceRef,
        _volumeAttributesClassName = volumeAttributesClassName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? accessModesOffset = _accessModes == null ? null
        : fbBuilder.writeList(_accessModes!.map(fbBuilder.writeString).toList());
    final int? selectorOffset = _selector?.getOrCreateOffset(fbBuilder);
    final int? resourcesOffset = _resources?.getOrCreateOffset(fbBuilder);
    final int? volumeNameOffset = _volumeName == null ? null
        : fbBuilder.writeString(_volumeName!);
    final int? storageClassNameOffset = _storageClassName == null ? null
        : fbBuilder.writeString(_storageClassName!);
    final int? volumeModeOffset = _volumeMode == null ? null
        : fbBuilder.writeString(_volumeMode!);
    final int? dataSourceOffset = _dataSource?.getOrCreateOffset(fbBuilder);
    final int? dataSourceRefOffset = _dataSourceRef?.getOrCreateOffset(fbBuilder);
    final int? volumeAttributesClassNameOffset = _volumeAttributesClassName == null ? null
        : fbBuilder.writeString(_volumeAttributesClassName!);
    fbBuilder.startTable(9);
    fbBuilder.addOffset(0, accessModesOffset);
    fbBuilder.addOffset(1, selectorOffset);
    fbBuilder.addOffset(2, resourcesOffset);
    fbBuilder.addOffset(3, volumeNameOffset);
    fbBuilder.addOffset(4, storageClassNameOffset);
    fbBuilder.addOffset(5, volumeModeOffset);
    fbBuilder.addOffset(6, dataSourceOffset);
    fbBuilder.addOffset(7, dataSourceRefOffset);
    fbBuilder.addOffset(8, volumeAttributesClassNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeClaimStatus {
  PersistentVolumeClaimStatus._(this._bc, this._bcOffset);
  factory PersistentVolumeClaimStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeClaimStatus> reader = _PersistentVolumeClaimStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get phase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get accessModes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  List<api_core_v1_persistent_volume_claim_status_.CapacityEntry>? get capacity => const fb.ListReader<api_core_v1_persistent_volume_claim_status_.CapacityEntry>(api_core_v1_persistent_volume_claim_status_.CapacityEntry.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<PersistentVolumeClaimCondition>? get conditions => const fb.ListReader<PersistentVolumeClaimCondition>(PersistentVolumeClaimCondition.reader).vTableGetNullable(_bc, _bcOffset, 10);
  List<api_core_v1_persistent_volume_claim_status_.AllocatedResourcesEntry>? get allocatedResources => const fb.ListReader<api_core_v1_persistent_volume_claim_status_.AllocatedResourcesEntry>(api_core_v1_persistent_volume_claim_status_.AllocatedResourcesEntry.reader).vTableGetNullable(_bc, _bcOffset, 12);
  List<api_core_v1_persistent_volume_claim_status_.AllocatedResourceStatusesEntry>? get allocatedResourceStatuses => const fb.ListReader<api_core_v1_persistent_volume_claim_status_.AllocatedResourceStatusesEntry>(api_core_v1_persistent_volume_claim_status_.AllocatedResourceStatusesEntry.reader).vTableGetNullable(_bc, _bcOffset, 14);
  String? get currentVolumeAttributesClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  ModifyVolumeStatus? get modifyVolumeStatus => ModifyVolumeStatus.reader.vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'PersistentVolumeClaimStatus{phase: ${phase}, accessModes: ${accessModes}, capacity: ${capacity}, conditions: ${conditions}, allocatedResources: ${allocatedResources}, allocatedResourceStatuses: ${allocatedResourceStatuses}, currentVolumeAttributesClassName: ${currentVolumeAttributesClassName}, modifyVolumeStatus: ${modifyVolumeStatus}}';
  }
}

class _PersistentVolumeClaimStatusReader extends fb.TableReader<PersistentVolumeClaimStatus> {
  const _PersistentVolumeClaimStatusReader();

  @override
  PersistentVolumeClaimStatus createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeClaimStatus._(bc, offset);
}

class PersistentVolumeClaimStatusBuilder {
  PersistentVolumeClaimStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addPhaseOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAccessModesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addCapacityOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAllocatedResourcesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAllocatedResourceStatusesOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addCurrentVolumeAttributesClassNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addModifyVolumeStatusOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeClaimStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _phase;
  final List<String>? _accessModes;
  final List<api_core_v1_persistent_volume_claim_status_.CapacityEntryObjectBuilder>? _capacity;
  final List<PersistentVolumeClaimConditionObjectBuilder>? _conditions;
  final List<api_core_v1_persistent_volume_claim_status_.AllocatedResourcesEntryObjectBuilder>? _allocatedResources;
  final List<api_core_v1_persistent_volume_claim_status_.AllocatedResourceStatusesEntryObjectBuilder>? _allocatedResourceStatuses;
  final String? _currentVolumeAttributesClassName;
  final ModifyVolumeStatusObjectBuilder? _modifyVolumeStatus;

  PersistentVolumeClaimStatusObjectBuilder({
    String? phase,
    List<String>? accessModes,
    List<api_core_v1_persistent_volume_claim_status_.CapacityEntryObjectBuilder>? capacity,
    List<PersistentVolumeClaimConditionObjectBuilder>? conditions,
    List<api_core_v1_persistent_volume_claim_status_.AllocatedResourcesEntryObjectBuilder>? allocatedResources,
    List<api_core_v1_persistent_volume_claim_status_.AllocatedResourceStatusesEntryObjectBuilder>? allocatedResourceStatuses,
    String? currentVolumeAttributesClassName,
    ModifyVolumeStatusObjectBuilder? modifyVolumeStatus,
  })
      : _phase = phase,
        _accessModes = accessModes,
        _capacity = capacity,
        _conditions = conditions,
        _allocatedResources = allocatedResources,
        _allocatedResourceStatuses = allocatedResourceStatuses,
        _currentVolumeAttributesClassName = currentVolumeAttributesClassName,
        _modifyVolumeStatus = modifyVolumeStatus;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? phaseOffset = _phase == null ? null
        : fbBuilder.writeString(_phase!);
    final int? accessModesOffset = _accessModes == null ? null
        : fbBuilder.writeList(_accessModes!.map(fbBuilder.writeString).toList());
    final int? capacityOffset = _capacity == null ? null
        : fbBuilder.writeList(_capacity!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? allocatedResourcesOffset = _allocatedResources == null ? null
        : fbBuilder.writeList(_allocatedResources!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? allocatedResourceStatusesOffset = _allocatedResourceStatuses == null ? null
        : fbBuilder.writeList(_allocatedResourceStatuses!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? currentVolumeAttributesClassNameOffset = _currentVolumeAttributesClassName == null ? null
        : fbBuilder.writeString(_currentVolumeAttributesClassName!);
    final int? modifyVolumeStatusOffset = _modifyVolumeStatus?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, phaseOffset);
    fbBuilder.addOffset(1, accessModesOffset);
    fbBuilder.addOffset(2, capacityOffset);
    fbBuilder.addOffset(3, conditionsOffset);
    fbBuilder.addOffset(4, allocatedResourcesOffset);
    fbBuilder.addOffset(5, allocatedResourceStatusesOffset);
    fbBuilder.addOffset(6, currentVolumeAttributesClassNameOffset);
    fbBuilder.addOffset(7, modifyVolumeStatusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeClaimTemplate {
  PersistentVolumeClaimTemplate._(this._bc, this._bcOffset);
  factory PersistentVolumeClaimTemplate(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeClaimTemplate> reader = _PersistentVolumeClaimTemplateReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PersistentVolumeClaimSpec? get spec => PersistentVolumeClaimSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PersistentVolumeClaimTemplate{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _PersistentVolumeClaimTemplateReader extends fb.TableReader<PersistentVolumeClaimTemplate> {
  const _PersistentVolumeClaimTemplateReader();

  @override
  PersistentVolumeClaimTemplate createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeClaimTemplate._(bc, offset);
}

class PersistentVolumeClaimTemplateBuilder {
  PersistentVolumeClaimTemplateBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeClaimTemplateObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final PersistentVolumeClaimSpecObjectBuilder? _spec;

  PersistentVolumeClaimTemplateObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    PersistentVolumeClaimSpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeClaimVolumeSource {
  PersistentVolumeClaimVolumeSource._(this._bc, this._bcOffset);
  factory PersistentVolumeClaimVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeClaimVolumeSource> reader = _PersistentVolumeClaimVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get claimName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'PersistentVolumeClaimVolumeSource{claimName: ${claimName}, readOnly: ${readOnly}}';
  }
}

class _PersistentVolumeClaimVolumeSourceReader extends fb.TableReader<PersistentVolumeClaimVolumeSource> {
  const _PersistentVolumeClaimVolumeSourceReader();

  @override
  PersistentVolumeClaimVolumeSource createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeClaimVolumeSource._(bc, offset);
}

class PersistentVolumeClaimVolumeSourceBuilder {
  PersistentVolumeClaimVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addClaimNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(1, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeClaimVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _claimName;
  final bool? _readOnly;

  PersistentVolumeClaimVolumeSourceObjectBuilder({
    String? claimName,
    bool? readOnly,
  })
      : _claimName = claimName,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? claimNameOffset = _claimName == null ? null
        : fbBuilder.writeString(_claimName!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, claimNameOffset);
    fbBuilder.addBool(1, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeList {
  PersistentVolumeList._(this._bc, this._bcOffset);
  factory PersistentVolumeList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeList> reader = _PersistentVolumeListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<PersistentVolume>? get items => const fb.ListReader<PersistentVolume>(PersistentVolume.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PersistentVolumeList{metadata: ${metadata}, items: ${items}}';
  }
}

class _PersistentVolumeListReader extends fb.TableReader<PersistentVolumeList> {
  const _PersistentVolumeListReader();

  @override
  PersistentVolumeList createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeList._(bc, offset);
}

class PersistentVolumeListBuilder {
  PersistentVolumeListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<PersistentVolumeObjectBuilder>? _items;

  PersistentVolumeListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<PersistentVolumeObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeSource {
  PersistentVolumeSource._(this._bc, this._bcOffset);
  factory PersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeSource> reader = _PersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  GcepersistentDiskVolumeSource? get gcePersistentDisk => GcepersistentDiskVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 4);
  AwselasticBlockStoreVolumeSource? get awsElasticBlockStore => AwselasticBlockStoreVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 6);
  HostPathVolumeSource? get hostPath => HostPathVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 8);
  GlusterfsPersistentVolumeSource? get glusterfs => GlusterfsPersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 10);
  NfsvolumeSource? get nfs => NfsvolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 12);
  RbdpersistentVolumeSource? get rbd => RbdpersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 14);
  IscsipersistentVolumeSource? get iscsi => IscsipersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 16);
  CinderPersistentVolumeSource? get cinder => CinderPersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 18);
  CephFspersistentVolumeSource? get cephfs => CephFspersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 20);
  FcvolumeSource? get fc => FcvolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 22);
  FlockerVolumeSource? get flocker => FlockerVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 24);
  FlexPersistentVolumeSource? get flexVolume => FlexPersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 26);
  AzureFilePersistentVolumeSource? get azureFile => AzureFilePersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 28);
  VsphereVirtualDiskVolumeSource? get vsphereVolume => VsphereVirtualDiskVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 30);
  QuobyteVolumeSource? get quobyte => QuobyteVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 32);
  AzureDiskVolumeSource? get azureDisk => AzureDiskVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 34);
  PhotonPersistentDiskVolumeSource? get photonPersistentDisk => PhotonPersistentDiskVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 36);
  PortworxVolumeSource? get portworxVolume => PortworxVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 38);
  ScaleIopersistentVolumeSource? get scaleIo => ScaleIopersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 40);
  LocalVolumeSource? get local => LocalVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 42);
  StorageOspersistentVolumeSource? get storageos => StorageOspersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 44);
  CsipersistentVolumeSource? get csi => CsipersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 46);

  @override
  String toString() {
    return 'PersistentVolumeSource{gcePersistentDisk: ${gcePersistentDisk}, awsElasticBlockStore: ${awsElasticBlockStore}, hostPath: ${hostPath}, glusterfs: ${glusterfs}, nfs: ${nfs}, rbd: ${rbd}, iscsi: ${iscsi}, cinder: ${cinder}, cephfs: ${cephfs}, fc: ${fc}, flocker: ${flocker}, flexVolume: ${flexVolume}, azureFile: ${azureFile}, vsphereVolume: ${vsphereVolume}, quobyte: ${quobyte}, azureDisk: ${azureDisk}, photonPersistentDisk: ${photonPersistentDisk}, portworxVolume: ${portworxVolume}, scaleIo: ${scaleIo}, local: ${local}, storageos: ${storageos}, csi: ${csi}}';
  }
}

class _PersistentVolumeSourceReader extends fb.TableReader<PersistentVolumeSource> {
  const _PersistentVolumeSourceReader();

  @override
  PersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeSource._(bc, offset);
}

class PersistentVolumeSourceBuilder {
  PersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(22);
  }

  int addGcePersistentDiskOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAwsElasticBlockStoreOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addHostPathOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addGlusterfsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addNfsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addRbdOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addIscsiOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCinderOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCephfsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addFcOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addFlockerOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addFlexVolumeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addAzureFileOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addVsphereVolumeOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addQuobyteOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addAzureDiskOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addPhotonPersistentDiskOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addPortworxVolumeOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addScaleIoOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addLocalOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addStorageosOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addCsiOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final GcepersistentDiskVolumeSourceObjectBuilder? _gcePersistentDisk;
  final AwselasticBlockStoreVolumeSourceObjectBuilder? _awsElasticBlockStore;
  final HostPathVolumeSourceObjectBuilder? _hostPath;
  final GlusterfsPersistentVolumeSourceObjectBuilder? _glusterfs;
  final NfsvolumeSourceObjectBuilder? _nfs;
  final RbdpersistentVolumeSourceObjectBuilder? _rbd;
  final IscsipersistentVolumeSourceObjectBuilder? _iscsi;
  final CinderPersistentVolumeSourceObjectBuilder? _cinder;
  final CephFspersistentVolumeSourceObjectBuilder? _cephfs;
  final FcvolumeSourceObjectBuilder? _fc;
  final FlockerVolumeSourceObjectBuilder? _flocker;
  final FlexPersistentVolumeSourceObjectBuilder? _flexVolume;
  final AzureFilePersistentVolumeSourceObjectBuilder? _azureFile;
  final VsphereVirtualDiskVolumeSourceObjectBuilder? _vsphereVolume;
  final QuobyteVolumeSourceObjectBuilder? _quobyte;
  final AzureDiskVolumeSourceObjectBuilder? _azureDisk;
  final PhotonPersistentDiskVolumeSourceObjectBuilder? _photonPersistentDisk;
  final PortworxVolumeSourceObjectBuilder? _portworxVolume;
  final ScaleIopersistentVolumeSourceObjectBuilder? _scaleIo;
  final LocalVolumeSourceObjectBuilder? _local;
  final StorageOspersistentVolumeSourceObjectBuilder? _storageos;
  final CsipersistentVolumeSourceObjectBuilder? _csi;

  PersistentVolumeSourceObjectBuilder({
    GcepersistentDiskVolumeSourceObjectBuilder? gcePersistentDisk,
    AwselasticBlockStoreVolumeSourceObjectBuilder? awsElasticBlockStore,
    HostPathVolumeSourceObjectBuilder? hostPath,
    GlusterfsPersistentVolumeSourceObjectBuilder? glusterfs,
    NfsvolumeSourceObjectBuilder? nfs,
    RbdpersistentVolumeSourceObjectBuilder? rbd,
    IscsipersistentVolumeSourceObjectBuilder? iscsi,
    CinderPersistentVolumeSourceObjectBuilder? cinder,
    CephFspersistentVolumeSourceObjectBuilder? cephfs,
    FcvolumeSourceObjectBuilder? fc,
    FlockerVolumeSourceObjectBuilder? flocker,
    FlexPersistentVolumeSourceObjectBuilder? flexVolume,
    AzureFilePersistentVolumeSourceObjectBuilder? azureFile,
    VsphereVirtualDiskVolumeSourceObjectBuilder? vsphereVolume,
    QuobyteVolumeSourceObjectBuilder? quobyte,
    AzureDiskVolumeSourceObjectBuilder? azureDisk,
    PhotonPersistentDiskVolumeSourceObjectBuilder? photonPersistentDisk,
    PortworxVolumeSourceObjectBuilder? portworxVolume,
    ScaleIopersistentVolumeSourceObjectBuilder? scaleIo,
    LocalVolumeSourceObjectBuilder? local,
    StorageOspersistentVolumeSourceObjectBuilder? storageos,
    CsipersistentVolumeSourceObjectBuilder? csi,
  })
      : _gcePersistentDisk = gcePersistentDisk,
        _awsElasticBlockStore = awsElasticBlockStore,
        _hostPath = hostPath,
        _glusterfs = glusterfs,
        _nfs = nfs,
        _rbd = rbd,
        _iscsi = iscsi,
        _cinder = cinder,
        _cephfs = cephfs,
        _fc = fc,
        _flocker = flocker,
        _flexVolume = flexVolume,
        _azureFile = azureFile,
        _vsphereVolume = vsphereVolume,
        _quobyte = quobyte,
        _azureDisk = azureDisk,
        _photonPersistentDisk = photonPersistentDisk,
        _portworxVolume = portworxVolume,
        _scaleIo = scaleIo,
        _local = local,
        _storageos = storageos,
        _csi = csi;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? gcePersistentDiskOffset = _gcePersistentDisk?.getOrCreateOffset(fbBuilder);
    final int? awsElasticBlockStoreOffset = _awsElasticBlockStore?.getOrCreateOffset(fbBuilder);
    final int? hostPathOffset = _hostPath?.getOrCreateOffset(fbBuilder);
    final int? glusterfsOffset = _glusterfs?.getOrCreateOffset(fbBuilder);
    final int? nfsOffset = _nfs?.getOrCreateOffset(fbBuilder);
    final int? rbdOffset = _rbd?.getOrCreateOffset(fbBuilder);
    final int? iscsiOffset = _iscsi?.getOrCreateOffset(fbBuilder);
    final int? cinderOffset = _cinder?.getOrCreateOffset(fbBuilder);
    final int? cephfsOffset = _cephfs?.getOrCreateOffset(fbBuilder);
    final int? fcOffset = _fc?.getOrCreateOffset(fbBuilder);
    final int? flockerOffset = _flocker?.getOrCreateOffset(fbBuilder);
    final int? flexVolumeOffset = _flexVolume?.getOrCreateOffset(fbBuilder);
    final int? azureFileOffset = _azureFile?.getOrCreateOffset(fbBuilder);
    final int? vsphereVolumeOffset = _vsphereVolume?.getOrCreateOffset(fbBuilder);
    final int? quobyteOffset = _quobyte?.getOrCreateOffset(fbBuilder);
    final int? azureDiskOffset = _azureDisk?.getOrCreateOffset(fbBuilder);
    final int? photonPersistentDiskOffset = _photonPersistentDisk?.getOrCreateOffset(fbBuilder);
    final int? portworxVolumeOffset = _portworxVolume?.getOrCreateOffset(fbBuilder);
    final int? scaleIoOffset = _scaleIo?.getOrCreateOffset(fbBuilder);
    final int? localOffset = _local?.getOrCreateOffset(fbBuilder);
    final int? storageosOffset = _storageos?.getOrCreateOffset(fbBuilder);
    final int? csiOffset = _csi?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(22);
    fbBuilder.addOffset(0, gcePersistentDiskOffset);
    fbBuilder.addOffset(1, awsElasticBlockStoreOffset);
    fbBuilder.addOffset(2, hostPathOffset);
    fbBuilder.addOffset(3, glusterfsOffset);
    fbBuilder.addOffset(4, nfsOffset);
    fbBuilder.addOffset(5, rbdOffset);
    fbBuilder.addOffset(6, iscsiOffset);
    fbBuilder.addOffset(7, cinderOffset);
    fbBuilder.addOffset(8, cephfsOffset);
    fbBuilder.addOffset(9, fcOffset);
    fbBuilder.addOffset(10, flockerOffset);
    fbBuilder.addOffset(11, flexVolumeOffset);
    fbBuilder.addOffset(12, azureFileOffset);
    fbBuilder.addOffset(13, vsphereVolumeOffset);
    fbBuilder.addOffset(14, quobyteOffset);
    fbBuilder.addOffset(15, azureDiskOffset);
    fbBuilder.addOffset(16, photonPersistentDiskOffset);
    fbBuilder.addOffset(17, portworxVolumeOffset);
    fbBuilder.addOffset(18, scaleIoOffset);
    fbBuilder.addOffset(19, localOffset);
    fbBuilder.addOffset(20, storageosOffset);
    fbBuilder.addOffset(21, csiOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeSpec {
  PersistentVolumeSpec._(this._bc, this._bcOffset);
  factory PersistentVolumeSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeSpec> reader = _PersistentVolumeSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<api_core_v1_persistent_volume_spec_.CapacityEntry>? get capacity => const fb.ListReader<api_core_v1_persistent_volume_spec_.CapacityEntry>(api_core_v1_persistent_volume_spec_.CapacityEntry.reader).vTableGetNullable(_bc, _bcOffset, 4);
  PersistentVolumeSource? get persistentVolumeSource => PersistentVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get accessModes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  ObjectReference? get claimRef => ObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get persistentVolumeReclaimPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get storageClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  List<String>? get mountOptions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 16);
  String? get volumeMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  VolumeNodeAffinity? get nodeAffinity => VolumeNodeAffinity.reader.vTableGetNullable(_bc, _bcOffset, 20);
  String? get volumeAttributesClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'PersistentVolumeSpec{capacity: ${capacity}, persistentVolumeSource: ${persistentVolumeSource}, accessModes: ${accessModes}, claimRef: ${claimRef}, persistentVolumeReclaimPolicy: ${persistentVolumeReclaimPolicy}, storageClassName: ${storageClassName}, mountOptions: ${mountOptions}, volumeMode: ${volumeMode}, nodeAffinity: ${nodeAffinity}, volumeAttributesClassName: ${volumeAttributesClassName}}';
  }
}

class _PersistentVolumeSpecReader extends fb.TableReader<PersistentVolumeSpec> {
  const _PersistentVolumeSpecReader();

  @override
  PersistentVolumeSpec createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeSpec._(bc, offset);
}

class PersistentVolumeSpecBuilder {
  PersistentVolumeSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addCapacityOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPersistentVolumeSourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAccessModesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClaimRefOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPersistentVolumeReclaimPolicyOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStorageClassNameOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addMountOptionsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addVolumeModeOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addNodeAffinityOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addVolumeAttributesClassNameOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeSpecObjectBuilder extends fb.ObjectBuilder {
  final List<api_core_v1_persistent_volume_spec_.CapacityEntryObjectBuilder>? _capacity;
  final PersistentVolumeSourceObjectBuilder? _persistentVolumeSource;
  final List<String>? _accessModes;
  final ObjectReferenceObjectBuilder? _claimRef;
  final String? _persistentVolumeReclaimPolicy;
  final String? _storageClassName;
  final List<String>? _mountOptions;
  final String? _volumeMode;
  final VolumeNodeAffinityObjectBuilder? _nodeAffinity;
  final String? _volumeAttributesClassName;

  PersistentVolumeSpecObjectBuilder({
    List<api_core_v1_persistent_volume_spec_.CapacityEntryObjectBuilder>? capacity,
    PersistentVolumeSourceObjectBuilder? persistentVolumeSource,
    List<String>? accessModes,
    ObjectReferenceObjectBuilder? claimRef,
    String? persistentVolumeReclaimPolicy,
    String? storageClassName,
    List<String>? mountOptions,
    String? volumeMode,
    VolumeNodeAffinityObjectBuilder? nodeAffinity,
    String? volumeAttributesClassName,
  })
      : _capacity = capacity,
        _persistentVolumeSource = persistentVolumeSource,
        _accessModes = accessModes,
        _claimRef = claimRef,
        _persistentVolumeReclaimPolicy = persistentVolumeReclaimPolicy,
        _storageClassName = storageClassName,
        _mountOptions = mountOptions,
        _volumeMode = volumeMode,
        _nodeAffinity = nodeAffinity,
        _volumeAttributesClassName = volumeAttributesClassName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? capacityOffset = _capacity == null ? null
        : fbBuilder.writeList(_capacity!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? persistentVolumeSourceOffset = _persistentVolumeSource?.getOrCreateOffset(fbBuilder);
    final int? accessModesOffset = _accessModes == null ? null
        : fbBuilder.writeList(_accessModes!.map(fbBuilder.writeString).toList());
    final int? claimRefOffset = _claimRef?.getOrCreateOffset(fbBuilder);
    final int? persistentVolumeReclaimPolicyOffset = _persistentVolumeReclaimPolicy == null ? null
        : fbBuilder.writeString(_persistentVolumeReclaimPolicy!);
    final int? storageClassNameOffset = _storageClassName == null ? null
        : fbBuilder.writeString(_storageClassName!);
    final int? mountOptionsOffset = _mountOptions == null ? null
        : fbBuilder.writeList(_mountOptions!.map(fbBuilder.writeString).toList());
    final int? volumeModeOffset = _volumeMode == null ? null
        : fbBuilder.writeString(_volumeMode!);
    final int? nodeAffinityOffset = _nodeAffinity?.getOrCreateOffset(fbBuilder);
    final int? volumeAttributesClassNameOffset = _volumeAttributesClassName == null ? null
        : fbBuilder.writeString(_volumeAttributesClassName!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, capacityOffset);
    fbBuilder.addOffset(1, persistentVolumeSourceOffset);
    fbBuilder.addOffset(2, accessModesOffset);
    fbBuilder.addOffset(3, claimRefOffset);
    fbBuilder.addOffset(4, persistentVolumeReclaimPolicyOffset);
    fbBuilder.addOffset(5, storageClassNameOffset);
    fbBuilder.addOffset(6, mountOptionsOffset);
    fbBuilder.addOffset(7, volumeModeOffset);
    fbBuilder.addOffset(8, nodeAffinityOffset);
    fbBuilder.addOffset(9, volumeAttributesClassNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PersistentVolumeStatus {
  PersistentVolumeStatus._(this._bc, this._bcOffset);
  factory PersistentVolumeStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PersistentVolumeStatus> reader = _PersistentVolumeStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get phase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.Time? get lastPhaseTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'PersistentVolumeStatus{phase: ${phase}, message: ${message}, reason: ${reason}, lastPhaseTransitionTime: ${lastPhaseTransitionTime}}';
  }
}

class _PersistentVolumeStatusReader extends fb.TableReader<PersistentVolumeStatus> {
  const _PersistentVolumeStatusReader();

  @override
  PersistentVolumeStatus createObject(fb.BufferContext bc, int offset) => 
    PersistentVolumeStatus._(bc, offset);
}

class PersistentVolumeStatusBuilder {
  PersistentVolumeStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addPhaseOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastPhaseTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PersistentVolumeStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _phase;
  final String? _message;
  final String? _reason;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastPhaseTransitionTime;

  PersistentVolumeStatusObjectBuilder({
    String? phase,
    String? message,
    String? reason,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastPhaseTransitionTime,
  })
      : _phase = phase,
        _message = message,
        _reason = reason,
        _lastPhaseTransitionTime = lastPhaseTransitionTime;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? phaseOffset = _phase == null ? null
        : fbBuilder.writeString(_phase!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? lastPhaseTransitionTimeOffset = _lastPhaseTransitionTime?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, phaseOffset);
    fbBuilder.addOffset(1, messageOffset);
    fbBuilder.addOffset(2, reasonOffset);
    fbBuilder.addOffset(3, lastPhaseTransitionTimeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PhotonPersistentDiskVolumeSource {
  PhotonPersistentDiskVolumeSource._(this._bc, this._bcOffset);
  factory PhotonPersistentDiskVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PhotonPersistentDiskVolumeSource> reader = _PhotonPersistentDiskVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get pdId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PhotonPersistentDiskVolumeSource{pdId: ${pdId}, fsType: ${fsType}}';
  }
}

class _PhotonPersistentDiskVolumeSourceReader extends fb.TableReader<PhotonPersistentDiskVolumeSource> {
  const _PhotonPersistentDiskVolumeSourceReader();

  @override
  PhotonPersistentDiskVolumeSource createObject(fb.BufferContext bc, int offset) => 
    PhotonPersistentDiskVolumeSource._(bc, offset);
}

class PhotonPersistentDiskVolumeSourceBuilder {
  PhotonPersistentDiskVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPdIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PhotonPersistentDiskVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _pdId;
  final String? _fsType;

  PhotonPersistentDiskVolumeSourceObjectBuilder({
    String? pdId,
    String? fsType,
  })
      : _pdId = pdId,
        _fsType = fsType;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pdIdOffset = _pdId == null ? null
        : fbBuilder.writeString(_pdId!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pdIdOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Pod {
  Pod._(this._bc, this._bcOffset);
  factory Pod(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Pod> reader = _PodReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PodSpec? get spec => PodSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  PodStatus? get status => PodStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Pod{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _PodReader extends fb.TableReader<Pod> {
  const _PodReader();

  @override
  Pod createObject(fb.BufferContext bc, int offset) => 
    Pod._(bc, offset);
}

class PodBuilder {
  PodBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final PodSpecObjectBuilder? _spec;
  final PodStatusObjectBuilder? _status;

  PodObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    PodSpecObjectBuilder? spec,
    PodStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodAffinity {
  PodAffinity._(this._bc, this._bcOffset);
  factory PodAffinity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodAffinity> reader = _PodAffinityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<PodAffinityTerm>? get requiredDuringSchedulingIgnoredDuringExecution => const fb.ListReader<PodAffinityTerm>(PodAffinityTerm.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<WeightedPodAffinityTerm>? get preferredDuringSchedulingIgnoredDuringExecution => const fb.ListReader<WeightedPodAffinityTerm>(WeightedPodAffinityTerm.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodAffinity{requiredDuringSchedulingIgnoredDuringExecution: ${requiredDuringSchedulingIgnoredDuringExecution}, preferredDuringSchedulingIgnoredDuringExecution: ${preferredDuringSchedulingIgnoredDuringExecution}}';
  }
}

class _PodAffinityReader extends fb.TableReader<PodAffinity> {
  const _PodAffinityReader();

  @override
  PodAffinity createObject(fb.BufferContext bc, int offset) => 
    PodAffinity._(bc, offset);
}

class PodAffinityBuilder {
  PodAffinityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addRequiredDuringSchedulingIgnoredDuringExecutionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPreferredDuringSchedulingIgnoredDuringExecutionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodAffinityObjectBuilder extends fb.ObjectBuilder {
  final List<PodAffinityTermObjectBuilder>? _requiredDuringSchedulingIgnoredDuringExecution;
  final List<WeightedPodAffinityTermObjectBuilder>? _preferredDuringSchedulingIgnoredDuringExecution;

  PodAffinityObjectBuilder({
    List<PodAffinityTermObjectBuilder>? requiredDuringSchedulingIgnoredDuringExecution,
    List<WeightedPodAffinityTermObjectBuilder>? preferredDuringSchedulingIgnoredDuringExecution,
  })
      : _requiredDuringSchedulingIgnoredDuringExecution = requiredDuringSchedulingIgnoredDuringExecution,
        _preferredDuringSchedulingIgnoredDuringExecution = preferredDuringSchedulingIgnoredDuringExecution;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? requiredDuringSchedulingIgnoredDuringExecutionOffset = _requiredDuringSchedulingIgnoredDuringExecution == null ? null
        : fbBuilder.writeList(_requiredDuringSchedulingIgnoredDuringExecution!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? preferredDuringSchedulingIgnoredDuringExecutionOffset = _preferredDuringSchedulingIgnoredDuringExecution == null ? null
        : fbBuilder.writeList(_preferredDuringSchedulingIgnoredDuringExecution!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, requiredDuringSchedulingIgnoredDuringExecutionOffset);
    fbBuilder.addOffset(1, preferredDuringSchedulingIgnoredDuringExecutionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodAffinityTerm {
  PodAffinityTerm._(this._bc, this._bcOffset);
  factory PodAffinityTerm(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodAffinityTerm> reader = _PodAffinityTermReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.LabelSelector? get labelSelector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get namespaces => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  String? get topologyKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get namespaceSelector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 10);
  List<String>? get matchLabelKeys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);
  List<String>? get mismatchLabelKeys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'PodAffinityTerm{labelSelector: ${labelSelector}, namespaces: ${namespaces}, topologyKey: ${topologyKey}, namespaceSelector: ${namespaceSelector}, matchLabelKeys: ${matchLabelKeys}, mismatchLabelKeys: ${mismatchLabelKeys}}';
  }
}

class _PodAffinityTermReader extends fb.TableReader<PodAffinityTerm> {
  const _PodAffinityTermReader();

  @override
  PodAffinityTerm createObject(fb.BufferContext bc, int offset) => 
    PodAffinityTerm._(bc, offset);
}

class PodAffinityTermBuilder {
  PodAffinityTermBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addLabelSelectorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNamespacesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTopologyKeyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNamespaceSelectorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMatchLabelKeysOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMismatchLabelKeysOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodAffinityTermObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _labelSelector;
  final List<String>? _namespaces;
  final String? _topologyKey;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _namespaceSelector;
  final List<String>? _matchLabelKeys;
  final List<String>? _mismatchLabelKeys;

  PodAffinityTermObjectBuilder({
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? labelSelector,
    List<String>? namespaces,
    String? topologyKey,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? namespaceSelector,
    List<String>? matchLabelKeys,
    List<String>? mismatchLabelKeys,
  })
      : _labelSelector = labelSelector,
        _namespaces = namespaces,
        _topologyKey = topologyKey,
        _namespaceSelector = namespaceSelector,
        _matchLabelKeys = matchLabelKeys,
        _mismatchLabelKeys = mismatchLabelKeys;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? labelSelectorOffset = _labelSelector?.getOrCreateOffset(fbBuilder);
    final int? namespacesOffset = _namespaces == null ? null
        : fbBuilder.writeList(_namespaces!.map(fbBuilder.writeString).toList());
    final int? topologyKeyOffset = _topologyKey == null ? null
        : fbBuilder.writeString(_topologyKey!);
    final int? namespaceSelectorOffset = _namespaceSelector?.getOrCreateOffset(fbBuilder);
    final int? matchLabelKeysOffset = _matchLabelKeys == null ? null
        : fbBuilder.writeList(_matchLabelKeys!.map(fbBuilder.writeString).toList());
    final int? mismatchLabelKeysOffset = _mismatchLabelKeys == null ? null
        : fbBuilder.writeList(_mismatchLabelKeys!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, labelSelectorOffset);
    fbBuilder.addOffset(1, namespacesOffset);
    fbBuilder.addOffset(2, topologyKeyOffset);
    fbBuilder.addOffset(3, namespaceSelectorOffset);
    fbBuilder.addOffset(4, matchLabelKeysOffset);
    fbBuilder.addOffset(5, mismatchLabelKeysOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodAntiAffinity {
  PodAntiAffinity._(this._bc, this._bcOffset);
  factory PodAntiAffinity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodAntiAffinity> reader = _PodAntiAffinityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<PodAffinityTerm>? get requiredDuringSchedulingIgnoredDuringExecution => const fb.ListReader<PodAffinityTerm>(PodAffinityTerm.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<WeightedPodAffinityTerm>? get preferredDuringSchedulingIgnoredDuringExecution => const fb.ListReader<WeightedPodAffinityTerm>(WeightedPodAffinityTerm.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodAntiAffinity{requiredDuringSchedulingIgnoredDuringExecution: ${requiredDuringSchedulingIgnoredDuringExecution}, preferredDuringSchedulingIgnoredDuringExecution: ${preferredDuringSchedulingIgnoredDuringExecution}}';
  }
}

class _PodAntiAffinityReader extends fb.TableReader<PodAntiAffinity> {
  const _PodAntiAffinityReader();

  @override
  PodAntiAffinity createObject(fb.BufferContext bc, int offset) => 
    PodAntiAffinity._(bc, offset);
}

class PodAntiAffinityBuilder {
  PodAntiAffinityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addRequiredDuringSchedulingIgnoredDuringExecutionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPreferredDuringSchedulingIgnoredDuringExecutionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodAntiAffinityObjectBuilder extends fb.ObjectBuilder {
  final List<PodAffinityTermObjectBuilder>? _requiredDuringSchedulingIgnoredDuringExecution;
  final List<WeightedPodAffinityTermObjectBuilder>? _preferredDuringSchedulingIgnoredDuringExecution;

  PodAntiAffinityObjectBuilder({
    List<PodAffinityTermObjectBuilder>? requiredDuringSchedulingIgnoredDuringExecution,
    List<WeightedPodAffinityTermObjectBuilder>? preferredDuringSchedulingIgnoredDuringExecution,
  })
      : _requiredDuringSchedulingIgnoredDuringExecution = requiredDuringSchedulingIgnoredDuringExecution,
        _preferredDuringSchedulingIgnoredDuringExecution = preferredDuringSchedulingIgnoredDuringExecution;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? requiredDuringSchedulingIgnoredDuringExecutionOffset = _requiredDuringSchedulingIgnoredDuringExecution == null ? null
        : fbBuilder.writeList(_requiredDuringSchedulingIgnoredDuringExecution!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? preferredDuringSchedulingIgnoredDuringExecutionOffset = _preferredDuringSchedulingIgnoredDuringExecution == null ? null
        : fbBuilder.writeList(_preferredDuringSchedulingIgnoredDuringExecution!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, requiredDuringSchedulingIgnoredDuringExecutionOffset);
    fbBuilder.addOffset(1, preferredDuringSchedulingIgnoredDuringExecutionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodAttachOptions {
  PodAttachOptions._(this._bc, this._bcOffset);
  factory PodAttachOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodAttachOptions> reader = _PodAttachOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get stdin => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  bool get stdout => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  bool get stderr => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  bool get tty => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  String? get container => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'PodAttachOptions{stdin: ${stdin}, stdout: ${stdout}, stderr: ${stderr}, tty: ${tty}, container: ${container}}';
  }
}

class _PodAttachOptionsReader extends fb.TableReader<PodAttachOptions> {
  const _PodAttachOptionsReader();

  @override
  PodAttachOptions createObject(fb.BufferContext bc, int offset) => 
    PodAttachOptions._(bc, offset);
}

class PodAttachOptionsBuilder {
  PodAttachOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addStdin(bool? stdin) {
    fbBuilder.addBool(0, stdin);
    return fbBuilder.offset;
  }
  int addStdout(bool? stdout) {
    fbBuilder.addBool(1, stdout);
    return fbBuilder.offset;
  }
  int addStderr(bool? stderr) {
    fbBuilder.addBool(2, stderr);
    return fbBuilder.offset;
  }
  int addTty(bool? tty) {
    fbBuilder.addBool(3, tty);
    return fbBuilder.offset;
  }
  int addContainerOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodAttachOptionsObjectBuilder extends fb.ObjectBuilder {
  final bool? _stdin;
  final bool? _stdout;
  final bool? _stderr;
  final bool? _tty;
  final String? _container;

  PodAttachOptionsObjectBuilder({
    bool? stdin,
    bool? stdout,
    bool? stderr,
    bool? tty,
    String? container,
  })
      : _stdin = stdin,
        _stdout = stdout,
        _stderr = stderr,
        _tty = tty,
        _container = container;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? containerOffset = _container == null ? null
        : fbBuilder.writeString(_container!);
    fbBuilder.startTable(5);
    fbBuilder.addBool(0, _stdin);
    fbBuilder.addBool(1, _stdout);
    fbBuilder.addBool(2, _stderr);
    fbBuilder.addBool(3, _tty);
    fbBuilder.addOffset(4, containerOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodCondition {
  PodCondition._(this._bc, this._bcOffset);
  factory PodCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodCondition> reader = _PodConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastProbeTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'PodCondition{type: ${type}, status: ${status}, lastProbeTime: ${lastProbeTime}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _PodConditionReader extends fb.TableReader<PodCondition> {
  const _PodConditionReader();

  @override
  PodCondition createObject(fb.BufferContext bc, int offset) => 
    PodCondition._(bc, offset);
}

class PodConditionBuilder {
  PodConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastProbeTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastProbeTime;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  PodConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastProbeTime,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastProbeTime = lastProbeTime,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastProbeTimeOffset = _lastProbeTime?.getOrCreateOffset(fbBuilder);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastProbeTimeOffset);
    fbBuilder.addOffset(3, lastTransitionTimeOffset);
    fbBuilder.addOffset(4, reasonOffset);
    fbBuilder.addOffset(5, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodDnsconfig {
  PodDnsconfig._(this._bc, this._bcOffset);
  factory PodDnsconfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodDnsconfig> reader = _PodDnsconfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get nameservers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get searches => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  List<PodDnsconfigOption>? get options => const fb.ListReader<PodDnsconfigOption>(PodDnsconfigOption.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PodDnsconfig{nameservers: ${nameservers}, searches: ${searches}, options: ${options}}';
  }
}

class _PodDnsconfigReader extends fb.TableReader<PodDnsconfig> {
  const _PodDnsconfigReader();

  @override
  PodDnsconfig createObject(fb.BufferContext bc, int offset) => 
    PodDnsconfig._(bc, offset);
}

class PodDnsconfigBuilder {
  PodDnsconfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNameserversOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSearchesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOptionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodDnsconfigObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _nameservers;
  final List<String>? _searches;
  final List<PodDnsconfigOptionObjectBuilder>? _options;

  PodDnsconfigObjectBuilder({
    List<String>? nameservers,
    List<String>? searches,
    List<PodDnsconfigOptionObjectBuilder>? options,
  })
      : _nameservers = nameservers,
        _searches = searches,
        _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameserversOffset = _nameservers == null ? null
        : fbBuilder.writeList(_nameservers!.map(fbBuilder.writeString).toList());
    final int? searchesOffset = _searches == null ? null
        : fbBuilder.writeList(_searches!.map(fbBuilder.writeString).toList());
    final int? optionsOffset = _options == null ? null
        : fbBuilder.writeList(_options!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, nameserversOffset);
    fbBuilder.addOffset(1, searchesOffset);
    fbBuilder.addOffset(2, optionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodDnsconfigOption {
  PodDnsconfigOption._(this._bc, this._bcOffset);
  factory PodDnsconfigOption(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodDnsconfigOption> reader = _PodDnsconfigOptionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get value => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodDnsconfigOption{name: ${name}, value: ${value}}';
  }
}

class _PodDnsconfigOptionReader extends fb.TableReader<PodDnsconfigOption> {
  const _PodDnsconfigOptionReader();

  @override
  PodDnsconfigOption createObject(fb.BufferContext bc, int offset) => 
    PodDnsconfigOption._(bc, offset);
}

class PodDnsconfigOptionBuilder {
  PodDnsconfigOptionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodDnsconfigOptionObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _value;

  PodDnsconfigOptionObjectBuilder({
    String? name,
    String? value,
  })
      : _name = name,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? valueOffset = _value == null ? null
        : fbBuilder.writeString(_value!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, valueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodExecOptions {
  PodExecOptions._(this._bc, this._bcOffset);
  factory PodExecOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodExecOptions> reader = _PodExecOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get stdin => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  bool get stdout => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  bool get stderr => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  bool get tty => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  String? get container => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  List<String>? get command => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'PodExecOptions{stdin: ${stdin}, stdout: ${stdout}, stderr: ${stderr}, tty: ${tty}, container: ${container}, command: ${command}}';
  }
}

class _PodExecOptionsReader extends fb.TableReader<PodExecOptions> {
  const _PodExecOptionsReader();

  @override
  PodExecOptions createObject(fb.BufferContext bc, int offset) => 
    PodExecOptions._(bc, offset);
}

class PodExecOptionsBuilder {
  PodExecOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addStdin(bool? stdin) {
    fbBuilder.addBool(0, stdin);
    return fbBuilder.offset;
  }
  int addStdout(bool? stdout) {
    fbBuilder.addBool(1, stdout);
    return fbBuilder.offset;
  }
  int addStderr(bool? stderr) {
    fbBuilder.addBool(2, stderr);
    return fbBuilder.offset;
  }
  int addTty(bool? tty) {
    fbBuilder.addBool(3, tty);
    return fbBuilder.offset;
  }
  int addContainerOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCommandOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodExecOptionsObjectBuilder extends fb.ObjectBuilder {
  final bool? _stdin;
  final bool? _stdout;
  final bool? _stderr;
  final bool? _tty;
  final String? _container;
  final List<String>? _command;

  PodExecOptionsObjectBuilder({
    bool? stdin,
    bool? stdout,
    bool? stderr,
    bool? tty,
    String? container,
    List<String>? command,
  })
      : _stdin = stdin,
        _stdout = stdout,
        _stderr = stderr,
        _tty = tty,
        _container = container,
        _command = command;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? containerOffset = _container == null ? null
        : fbBuilder.writeString(_container!);
    final int? commandOffset = _command == null ? null
        : fbBuilder.writeList(_command!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(6);
    fbBuilder.addBool(0, _stdin);
    fbBuilder.addBool(1, _stdout);
    fbBuilder.addBool(2, _stderr);
    fbBuilder.addBool(3, _tty);
    fbBuilder.addOffset(4, containerOffset);
    fbBuilder.addOffset(5, commandOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodIp {
  PodIp._(this._bc, this._bcOffset);
  factory PodIp(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodIp> reader = _PodIpReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ip => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PodIp{ip: ${ip}}';
  }
}

class _PodIpReader extends fb.TableReader<PodIp> {
  const _PodIpReader();

  @override
  PodIp createObject(fb.BufferContext bc, int offset) => 
    PodIp._(bc, offset);
}

class PodIpBuilder {
  PodIpBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodIpObjectBuilder extends fb.ObjectBuilder {
  final String? _ip;

  PodIpObjectBuilder({
    String? ip,
  })
      : _ip = ip;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ipOffset = _ip == null ? null
        : fbBuilder.writeString(_ip!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, ipOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodList {
  PodList._(this._bc, this._bcOffset);
  factory PodList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodList> reader = _PodListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Pod>? get items => const fb.ListReader<Pod>(Pod.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodList{metadata: ${metadata}, items: ${items}}';
  }
}

class _PodListReader extends fb.TableReader<PodList> {
  const _PodListReader();

  @override
  PodList createObject(fb.BufferContext bc, int offset) => 
    PodList._(bc, offset);
}

class PodListBuilder {
  PodListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<PodObjectBuilder>? _items;

  PodListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<PodObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodLogOptions {
  PodLogOptions._(this._bc, this._bcOffset);
  factory PodLogOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodLogOptions> reader = _PodLogOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get container => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  bool get follow => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  bool get previous => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  int get sinceSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  apimachinery_pkg_apis_meta_v1.Time? get sinceTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 12);
  bool get timestamps => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  int get tailLines => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 16, 0);
  int get limitBytes => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 18, 0);
  bool get insecureSkipTlsverifyBackend => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);

  @override
  String toString() {
    return 'PodLogOptions{container: ${container}, follow: ${follow}, previous: ${previous}, sinceSeconds: ${sinceSeconds}, sinceTime: ${sinceTime}, timestamps: ${timestamps}, tailLines: ${tailLines}, limitBytes: ${limitBytes}, insecureSkipTlsverifyBackend: ${insecureSkipTlsverifyBackend}}';
  }
}

class _PodLogOptionsReader extends fb.TableReader<PodLogOptions> {
  const _PodLogOptionsReader();

  @override
  PodLogOptions createObject(fb.BufferContext bc, int offset) => 
    PodLogOptions._(bc, offset);
}

class PodLogOptionsBuilder {
  PodLogOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addContainerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFollow(bool? follow) {
    fbBuilder.addBool(1, follow);
    return fbBuilder.offset;
  }
  int addPrevious(bool? previous) {
    fbBuilder.addBool(2, previous);
    return fbBuilder.offset;
  }
  int addSinceSeconds(int? sinceSeconds) {
    fbBuilder.addInt64(3, sinceSeconds);
    return fbBuilder.offset;
  }
  int addSinceTimeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTimestamps(bool? timestamps) {
    fbBuilder.addBool(5, timestamps);
    return fbBuilder.offset;
  }
  int addTailLines(int? tailLines) {
    fbBuilder.addInt64(6, tailLines);
    return fbBuilder.offset;
  }
  int addLimitBytes(int? limitBytes) {
    fbBuilder.addInt64(7, limitBytes);
    return fbBuilder.offset;
  }
  int addInsecureSkipTlsverifyBackend(bool? insecureSkipTlsverifyBackend) {
    fbBuilder.addBool(8, insecureSkipTlsverifyBackend);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodLogOptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _container;
  final bool? _follow;
  final bool? _previous;
  final int? _sinceSeconds;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _sinceTime;
  final bool? _timestamps;
  final int? _tailLines;
  final int? _limitBytes;
  final bool? _insecureSkipTlsverifyBackend;

  PodLogOptionsObjectBuilder({
    String? container,
    bool? follow,
    bool? previous,
    int? sinceSeconds,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? sinceTime,
    bool? timestamps,
    int? tailLines,
    int? limitBytes,
    bool? insecureSkipTlsverifyBackend,
  })
      : _container = container,
        _follow = follow,
        _previous = previous,
        _sinceSeconds = sinceSeconds,
        _sinceTime = sinceTime,
        _timestamps = timestamps,
        _tailLines = tailLines,
        _limitBytes = limitBytes,
        _insecureSkipTlsverifyBackend = insecureSkipTlsverifyBackend;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? containerOffset = _container == null ? null
        : fbBuilder.writeString(_container!);
    final int? sinceTimeOffset = _sinceTime?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(9);
    fbBuilder.addOffset(0, containerOffset);
    fbBuilder.addBool(1, _follow);
    fbBuilder.addBool(2, _previous);
    fbBuilder.addInt64(3, _sinceSeconds);
    fbBuilder.addOffset(4, sinceTimeOffset);
    fbBuilder.addBool(5, _timestamps);
    fbBuilder.addInt64(6, _tailLines);
    fbBuilder.addInt64(7, _limitBytes);
    fbBuilder.addBool(8, _insecureSkipTlsverifyBackend);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodOs {
  PodOs._(this._bc, this._bcOffset);
  factory PodOs(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodOs> reader = _PodOsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PodOs{name: ${name}}';
  }
}

class _PodOsReader extends fb.TableReader<PodOs> {
  const _PodOsReader();

  @override
  PodOs createObject(fb.BufferContext bc, int offset) => 
    PodOs._(bc, offset);
}

class PodOsBuilder {
  PodOsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodOsObjectBuilder extends fb.ObjectBuilder {
  final String? _name;

  PodOsObjectBuilder({
    String? name,
  })
      : _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodPortForwardOptions {
  PodPortForwardOptions._(this._bc, this._bcOffset);
  factory PodPortForwardOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodPortForwardOptions> reader = _PodPortForwardOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get ports => const fb.ListReader<int>(fb.Int32Reader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PodPortForwardOptions{ports: ${ports}}';
  }
}

class _PodPortForwardOptionsReader extends fb.TableReader<PodPortForwardOptions> {
  const _PodPortForwardOptionsReader();

  @override
  PodPortForwardOptions createObject(fb.BufferContext bc, int offset) => 
    PodPortForwardOptions._(bc, offset);
}

class PodPortForwardOptionsBuilder {
  PodPortForwardOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPortsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodPortForwardOptionsObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _ports;

  PodPortForwardOptionsObjectBuilder({
    List<int>? ports,
  })
      : _ports = ports;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? portsOffset = _ports == null ? null
        : fbBuilder.writeListInt32(_ports!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, portsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodProxyOptions {
  PodProxyOptions._(this._bc, this._bcOffset);
  factory PodProxyOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodProxyOptions> reader = _PodProxyOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PodProxyOptions{path: ${path}}';
  }
}

class _PodProxyOptionsReader extends fb.TableReader<PodProxyOptions> {
  const _PodProxyOptionsReader();

  @override
  PodProxyOptions createObject(fb.BufferContext bc, int offset) => 
    PodProxyOptions._(bc, offset);
}

class PodProxyOptionsBuilder {
  PodProxyOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodProxyOptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _path;

  PodProxyOptionsObjectBuilder({
    String? path,
  })
      : _path = path;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, pathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodReadinessGate {
  PodReadinessGate._(this._bc, this._bcOffset);
  factory PodReadinessGate(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodReadinessGate> reader = _PodReadinessGateReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get conditionType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PodReadinessGate{conditionType: ${conditionType}}';
  }
}

class _PodReadinessGateReader extends fb.TableReader<PodReadinessGate> {
  const _PodReadinessGateReader();

  @override
  PodReadinessGate createObject(fb.BufferContext bc, int offset) => 
    PodReadinessGate._(bc, offset);
}

class PodReadinessGateBuilder {
  PodReadinessGateBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addConditionTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodReadinessGateObjectBuilder extends fb.ObjectBuilder {
  final String? _conditionType;

  PodReadinessGateObjectBuilder({
    String? conditionType,
  })
      : _conditionType = conditionType;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionTypeOffset = _conditionType == null ? null
        : fbBuilder.writeString(_conditionType!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, conditionTypeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodResourceClaim {
  PodResourceClaim._(this._bc, this._bcOffset);
  factory PodResourceClaim(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodResourceClaim> reader = _PodResourceClaimReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ClaimSource? get source => ClaimSource.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodResourceClaim{name: ${name}, source: ${source}}';
  }
}

class _PodResourceClaimReader extends fb.TableReader<PodResourceClaim> {
  const _PodResourceClaimReader();

  @override
  PodResourceClaim createObject(fb.BufferContext bc, int offset) => 
    PodResourceClaim._(bc, offset);
}

class PodResourceClaimBuilder {
  PodResourceClaimBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodResourceClaimObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final ClaimSourceObjectBuilder? _source;

  PodResourceClaimObjectBuilder({
    String? name,
    ClaimSourceObjectBuilder? source,
  })
      : _name = name,
        _source = source;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? sourceOffset = _source?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, sourceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodResourceClaimStatus {
  PodResourceClaimStatus._(this._bc, this._bcOffset);
  factory PodResourceClaimStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodResourceClaimStatus> reader = _PodResourceClaimStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get resourceClaimName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodResourceClaimStatus{name: ${name}, resourceClaimName: ${resourceClaimName}}';
  }
}

class _PodResourceClaimStatusReader extends fb.TableReader<PodResourceClaimStatus> {
  const _PodResourceClaimStatusReader();

  @override
  PodResourceClaimStatus createObject(fb.BufferContext bc, int offset) => 
    PodResourceClaimStatus._(bc, offset);
}

class PodResourceClaimStatusBuilder {
  PodResourceClaimStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceClaimNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodResourceClaimStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _resourceClaimName;

  PodResourceClaimStatusObjectBuilder({
    String? name,
    String? resourceClaimName,
  })
      : _name = name,
        _resourceClaimName = resourceClaimName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? resourceClaimNameOffset = _resourceClaimName == null ? null
        : fbBuilder.writeString(_resourceClaimName!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, resourceClaimNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodSchedulingGate {
  PodSchedulingGate._(this._bc, this._bcOffset);
  factory PodSchedulingGate(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodSchedulingGate> reader = _PodSchedulingGateReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PodSchedulingGate{name: ${name}}';
  }
}

class _PodSchedulingGateReader extends fb.TableReader<PodSchedulingGate> {
  const _PodSchedulingGateReader();

  @override
  PodSchedulingGate createObject(fb.BufferContext bc, int offset) => 
    PodSchedulingGate._(bc, offset);
}

class PodSchedulingGateBuilder {
  PodSchedulingGateBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodSchedulingGateObjectBuilder extends fb.ObjectBuilder {
  final String? _name;

  PodSchedulingGateObjectBuilder({
    String? name,
  })
      : _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodSecurityContext {
  PodSecurityContext._(this._bc, this._bcOffset);
  factory PodSecurityContext(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodSecurityContext> reader = _PodSecurityContextReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  SelinuxOptions? get seLinuxOptions => SelinuxOptions.reader.vTableGetNullable(_bc, _bcOffset, 4);
  WindowsSecurityContextOptions? get windowsOptions => WindowsSecurityContextOptions.reader.vTableGetNullable(_bc, _bcOffset, 6);
  int get runAsUser => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get runAsGroup => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  bool get runAsNonRoot => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  List<int>? get supplementalGroups => const fb.ListReader<int>(fb.Int64Reader()).vTableGetNullable(_bc, _bcOffset, 14);
  int get fsGroup => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 16, 0);
  List<Sysctl>? get sysctls => const fb.ListReader<Sysctl>(Sysctl.reader).vTableGetNullable(_bc, _bcOffset, 18);
  String? get fsGroupChangePolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  SeccompProfile? get seccompProfile => SeccompProfile.reader.vTableGetNullable(_bc, _bcOffset, 22);
  AppArmorProfile? get appArmorProfile => AppArmorProfile.reader.vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'PodSecurityContext{seLinuxOptions: ${seLinuxOptions}, windowsOptions: ${windowsOptions}, runAsUser: ${runAsUser}, runAsGroup: ${runAsGroup}, runAsNonRoot: ${runAsNonRoot}, supplementalGroups: ${supplementalGroups}, fsGroup: ${fsGroup}, sysctls: ${sysctls}, fsGroupChangePolicy: ${fsGroupChangePolicy}, seccompProfile: ${seccompProfile}, appArmorProfile: ${appArmorProfile}}';
  }
}

class _PodSecurityContextReader extends fb.TableReader<PodSecurityContext> {
  const _PodSecurityContextReader();

  @override
  PodSecurityContext createObject(fb.BufferContext bc, int offset) => 
    PodSecurityContext._(bc, offset);
}

class PodSecurityContextBuilder {
  PodSecurityContextBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addSeLinuxOptionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addWindowsOptionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRunAsUser(int? runAsUser) {
    fbBuilder.addInt64(2, runAsUser);
    return fbBuilder.offset;
  }
  int addRunAsGroup(int? runAsGroup) {
    fbBuilder.addInt64(3, runAsGroup);
    return fbBuilder.offset;
  }
  int addRunAsNonRoot(bool? runAsNonRoot) {
    fbBuilder.addBool(4, runAsNonRoot);
    return fbBuilder.offset;
  }
  int addSupplementalGroupsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addFsGroup(int? fsGroup) {
    fbBuilder.addInt64(6, fsGroup);
    return fbBuilder.offset;
  }
  int addSysctlsOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addFsGroupChangePolicyOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addSeccompProfileOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addAppArmorProfileOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodSecurityContextObjectBuilder extends fb.ObjectBuilder {
  final SelinuxOptionsObjectBuilder? _seLinuxOptions;
  final WindowsSecurityContextOptionsObjectBuilder? _windowsOptions;
  final int? _runAsUser;
  final int? _runAsGroup;
  final bool? _runAsNonRoot;
  final List<int>? _supplementalGroups;
  final int? _fsGroup;
  final List<SysctlObjectBuilder>? _sysctls;
  final String? _fsGroupChangePolicy;
  final SeccompProfileObjectBuilder? _seccompProfile;
  final AppArmorProfileObjectBuilder? _appArmorProfile;

  PodSecurityContextObjectBuilder({
    SelinuxOptionsObjectBuilder? seLinuxOptions,
    WindowsSecurityContextOptionsObjectBuilder? windowsOptions,
    int? runAsUser,
    int? runAsGroup,
    bool? runAsNonRoot,
    List<int>? supplementalGroups,
    int? fsGroup,
    List<SysctlObjectBuilder>? sysctls,
    String? fsGroupChangePolicy,
    SeccompProfileObjectBuilder? seccompProfile,
    AppArmorProfileObjectBuilder? appArmorProfile,
  })
      : _seLinuxOptions = seLinuxOptions,
        _windowsOptions = windowsOptions,
        _runAsUser = runAsUser,
        _runAsGroup = runAsGroup,
        _runAsNonRoot = runAsNonRoot,
        _supplementalGroups = supplementalGroups,
        _fsGroup = fsGroup,
        _sysctls = sysctls,
        _fsGroupChangePolicy = fsGroupChangePolicy,
        _seccompProfile = seccompProfile,
        _appArmorProfile = appArmorProfile;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? seLinuxOptionsOffset = _seLinuxOptions?.getOrCreateOffset(fbBuilder);
    final int? windowsOptionsOffset = _windowsOptions?.getOrCreateOffset(fbBuilder);
    final int? supplementalGroupsOffset = _supplementalGroups == null ? null
        : fbBuilder.writeListInt64(_supplementalGroups!);
    final int? sysctlsOffset = _sysctls == null ? null
        : fbBuilder.writeList(_sysctls!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? fsGroupChangePolicyOffset = _fsGroupChangePolicy == null ? null
        : fbBuilder.writeString(_fsGroupChangePolicy!);
    final int? seccompProfileOffset = _seccompProfile?.getOrCreateOffset(fbBuilder);
    final int? appArmorProfileOffset = _appArmorProfile?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, seLinuxOptionsOffset);
    fbBuilder.addOffset(1, windowsOptionsOffset);
    fbBuilder.addInt64(2, _runAsUser);
    fbBuilder.addInt64(3, _runAsGroup);
    fbBuilder.addBool(4, _runAsNonRoot);
    fbBuilder.addOffset(5, supplementalGroupsOffset);
    fbBuilder.addInt64(6, _fsGroup);
    fbBuilder.addOffset(7, sysctlsOffset);
    fbBuilder.addOffset(8, fsGroupChangePolicyOffset);
    fbBuilder.addOffset(9, seccompProfileOffset);
    fbBuilder.addOffset(10, appArmorProfileOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodSignature {
  PodSignature._(this._bc, this._bcOffset);
  factory PodSignature(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodSignature> reader = _PodSignatureReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.OwnerReference? get podController => apimachinery_pkg_apis_meta_v1.OwnerReference.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PodSignature{podController: ${podController}}';
  }
}

class _PodSignatureReader extends fb.TableReader<PodSignature> {
  const _PodSignatureReader();

  @override
  PodSignature createObject(fb.BufferContext bc, int offset) => 
    PodSignature._(bc, offset);
}

class PodSignatureBuilder {
  PodSignatureBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPodControllerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodSignatureObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.OwnerReferenceObjectBuilder? _podController;

  PodSignatureObjectBuilder({
    apimachinery_pkg_apis_meta_v1.OwnerReferenceObjectBuilder? podController,
  })
      : _podController = podController;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? podControllerOffset = _podController?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, podControllerOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodSpec {
  PodSpec._(this._bc, this._bcOffset);
  factory PodSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodSpec> reader = _PodSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Volume>? get volumes => const fb.ListReader<Volume>(Volume.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<Container>? get initContainers => const fb.ListReader<Container>(Container.reader).vTableGetNullable(_bc, _bcOffset, 6);
  List<Container>? get containers => const fb.ListReader<Container>(Container.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<EphemeralContainer>? get ephemeralContainers => const fb.ListReader<EphemeralContainer>(EphemeralContainer.reader).vTableGetNullable(_bc, _bcOffset, 10);
  String? get restartPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  int get terminationGracePeriodSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get activeDeadlineSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 16, 0);
  String? get dnsPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  List<api_core_v1_pod_spec_.NodeSelectorEntry>? get nodeSelector => const fb.ListReader<api_core_v1_pod_spec_.NodeSelectorEntry>(api_core_v1_pod_spec_.NodeSelectorEntry.reader).vTableGetNullable(_bc, _bcOffset, 20);
  String? get serviceAccountName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  String? get serviceAccount => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  bool get automountServiceAccountToken => const fb.BoolReader().vTableGet(_bc, _bcOffset, 26, false);
  String? get nodeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  bool get hostNetwork => const fb.BoolReader().vTableGet(_bc, _bcOffset, 30, false);
  bool get hostPid => const fb.BoolReader().vTableGet(_bc, _bcOffset, 32, false);
  bool get hostIpc => const fb.BoolReader().vTableGet(_bc, _bcOffset, 34, false);
  bool get shareProcessNamespace => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  PodSecurityContext? get securityContext => PodSecurityContext.reader.vTableGetNullable(_bc, _bcOffset, 38);
  List<LocalObjectReference>? get imagePullSecrets => const fb.ListReader<LocalObjectReference>(LocalObjectReference.reader).vTableGetNullable(_bc, _bcOffset, 40);
  String? get hostname => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  String? get subdomain => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 44);
  Affinity? get affinity => Affinity.reader.vTableGetNullable(_bc, _bcOffset, 46);
  String? get schedulerName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 48);
  List<Toleration>? get tolerations => const fb.ListReader<Toleration>(Toleration.reader).vTableGetNullable(_bc, _bcOffset, 50);
  List<HostAlias>? get hostAliases => const fb.ListReader<HostAlias>(HostAlias.reader).vTableGetNullable(_bc, _bcOffset, 52);
  String? get priorityClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 54);
  int get priority => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 56, 0);
  PodDnsconfig? get dnsConfig => PodDnsconfig.reader.vTableGetNullable(_bc, _bcOffset, 58);
  List<PodReadinessGate>? get readinessGates => const fb.ListReader<PodReadinessGate>(PodReadinessGate.reader).vTableGetNullable(_bc, _bcOffset, 60);
  String? get runtimeClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 62);
  bool get enableServiceLinks => const fb.BoolReader().vTableGet(_bc, _bcOffset, 64, false);
  String? get preemptionPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 66);
  List<api_core_v1_pod_spec_.OverheadEntry>? get overhead => const fb.ListReader<api_core_v1_pod_spec_.OverheadEntry>(api_core_v1_pod_spec_.OverheadEntry.reader).vTableGetNullable(_bc, _bcOffset, 68);
  List<TopologySpreadConstraint>? get topologySpreadConstraints => const fb.ListReader<TopologySpreadConstraint>(TopologySpreadConstraint.reader).vTableGetNullable(_bc, _bcOffset, 70);
  bool get setHostnameAsFqdn => const fb.BoolReader().vTableGet(_bc, _bcOffset, 72, false);
  PodOs? get os => PodOs.reader.vTableGetNullable(_bc, _bcOffset, 74);
  bool get hostUsers => const fb.BoolReader().vTableGet(_bc, _bcOffset, 76, false);
  List<PodSchedulingGate>? get schedulingGates => const fb.ListReader<PodSchedulingGate>(PodSchedulingGate.reader).vTableGetNullable(_bc, _bcOffset, 78);
  List<PodResourceClaim>? get resourceClaims => const fb.ListReader<PodResourceClaim>(PodResourceClaim.reader).vTableGetNullable(_bc, _bcOffset, 80);

  @override
  String toString() {
    return 'PodSpec{volumes: ${volumes}, initContainers: ${initContainers}, containers: ${containers}, ephemeralContainers: ${ephemeralContainers}, restartPolicy: ${restartPolicy}, terminationGracePeriodSeconds: ${terminationGracePeriodSeconds}, activeDeadlineSeconds: ${activeDeadlineSeconds}, dnsPolicy: ${dnsPolicy}, nodeSelector: ${nodeSelector}, serviceAccountName: ${serviceAccountName}, serviceAccount: ${serviceAccount}, automountServiceAccountToken: ${automountServiceAccountToken}, nodeName: ${nodeName}, hostNetwork: ${hostNetwork}, hostPid: ${hostPid}, hostIpc: ${hostIpc}, shareProcessNamespace: ${shareProcessNamespace}, securityContext: ${securityContext}, imagePullSecrets: ${imagePullSecrets}, hostname: ${hostname}, subdomain: ${subdomain}, affinity: ${affinity}, schedulerName: ${schedulerName}, tolerations: ${tolerations}, hostAliases: ${hostAliases}, priorityClassName: ${priorityClassName}, priority: ${priority}, dnsConfig: ${dnsConfig}, readinessGates: ${readinessGates}, runtimeClassName: ${runtimeClassName}, enableServiceLinks: ${enableServiceLinks}, preemptionPolicy: ${preemptionPolicy}, overhead: ${overhead}, topologySpreadConstraints: ${topologySpreadConstraints}, setHostnameAsFqdn: ${setHostnameAsFqdn}, os: ${os}, hostUsers: ${hostUsers}, schedulingGates: ${schedulingGates}, resourceClaims: ${resourceClaims}}';
  }
}

class _PodSpecReader extends fb.TableReader<PodSpec> {
  const _PodSpecReader();

  @override
  PodSpec createObject(fb.BufferContext bc, int offset) => 
    PodSpec._(bc, offset);
}

class PodSpecBuilder {
  PodSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(39);
  }

  int addVolumesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addInitContainersOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addContainersOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addEphemeralContainersOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addRestartPolicyOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTerminationGracePeriodSeconds(int? terminationGracePeriodSeconds) {
    fbBuilder.addInt64(5, terminationGracePeriodSeconds);
    return fbBuilder.offset;
  }
  int addActiveDeadlineSeconds(int? activeDeadlineSeconds) {
    fbBuilder.addInt64(6, activeDeadlineSeconds);
    return fbBuilder.offset;
  }
  int addDnsPolicyOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addNodeSelectorOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addServiceAccountNameOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addServiceAccountOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addAutomountServiceAccountToken(bool? automountServiceAccountToken) {
    fbBuilder.addBool(11, automountServiceAccountToken);
    return fbBuilder.offset;
  }
  int addNodeNameOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addHostNetwork(bool? hostNetwork) {
    fbBuilder.addBool(13, hostNetwork);
    return fbBuilder.offset;
  }
  int addHostPid(bool? hostPid) {
    fbBuilder.addBool(14, hostPid);
    return fbBuilder.offset;
  }
  int addHostIpc(bool? hostIpc) {
    fbBuilder.addBool(15, hostIpc);
    return fbBuilder.offset;
  }
  int addShareProcessNamespace(bool? shareProcessNamespace) {
    fbBuilder.addBool(16, shareProcessNamespace);
    return fbBuilder.offset;
  }
  int addSecurityContextOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addImagePullSecretsOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addHostnameOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addSubdomainOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addAffinityOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addSchedulerNameOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addTolerationsOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addHostAliasesOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addPriorityClassNameOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addPriority(int? priority) {
    fbBuilder.addInt32(26, priority);
    return fbBuilder.offset;
  }
  int addDnsConfigOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addReadinessGatesOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }
  int addRuntimeClassNameOffset(int? offset) {
    fbBuilder.addOffset(29, offset);
    return fbBuilder.offset;
  }
  int addEnableServiceLinks(bool? enableServiceLinks) {
    fbBuilder.addBool(30, enableServiceLinks);
    return fbBuilder.offset;
  }
  int addPreemptionPolicyOffset(int? offset) {
    fbBuilder.addOffset(31, offset);
    return fbBuilder.offset;
  }
  int addOverheadOffset(int? offset) {
    fbBuilder.addOffset(32, offset);
    return fbBuilder.offset;
  }
  int addTopologySpreadConstraintsOffset(int? offset) {
    fbBuilder.addOffset(33, offset);
    return fbBuilder.offset;
  }
  int addSetHostnameAsFqdn(bool? setHostnameAsFqdn) {
    fbBuilder.addBool(34, setHostnameAsFqdn);
    return fbBuilder.offset;
  }
  int addOsOffset(int? offset) {
    fbBuilder.addOffset(35, offset);
    return fbBuilder.offset;
  }
  int addHostUsers(bool? hostUsers) {
    fbBuilder.addBool(36, hostUsers);
    return fbBuilder.offset;
  }
  int addSchedulingGatesOffset(int? offset) {
    fbBuilder.addOffset(37, offset);
    return fbBuilder.offset;
  }
  int addResourceClaimsOffset(int? offset) {
    fbBuilder.addOffset(38, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodSpecObjectBuilder extends fb.ObjectBuilder {
  final List<VolumeObjectBuilder>? _volumes;
  final List<ContainerObjectBuilder>? _initContainers;
  final List<ContainerObjectBuilder>? _containers;
  final List<EphemeralContainerObjectBuilder>? _ephemeralContainers;
  final String? _restartPolicy;
  final int? _terminationGracePeriodSeconds;
  final int? _activeDeadlineSeconds;
  final String? _dnsPolicy;
  final List<api_core_v1_pod_spec_.NodeSelectorEntryObjectBuilder>? _nodeSelector;
  final String? _serviceAccountName;
  final String? _serviceAccount;
  final bool? _automountServiceAccountToken;
  final String? _nodeName;
  final bool? _hostNetwork;
  final bool? _hostPid;
  final bool? _hostIpc;
  final bool? _shareProcessNamespace;
  final PodSecurityContextObjectBuilder? _securityContext;
  final List<LocalObjectReferenceObjectBuilder>? _imagePullSecrets;
  final String? _hostname;
  final String? _subdomain;
  final AffinityObjectBuilder? _affinity;
  final String? _schedulerName;
  final List<TolerationObjectBuilder>? _tolerations;
  final List<HostAliasObjectBuilder>? _hostAliases;
  final String? _priorityClassName;
  final int? _priority;
  final PodDnsconfigObjectBuilder? _dnsConfig;
  final List<PodReadinessGateObjectBuilder>? _readinessGates;
  final String? _runtimeClassName;
  final bool? _enableServiceLinks;
  final String? _preemptionPolicy;
  final List<api_core_v1_pod_spec_.OverheadEntryObjectBuilder>? _overhead;
  final List<TopologySpreadConstraintObjectBuilder>? _topologySpreadConstraints;
  final bool? _setHostnameAsFqdn;
  final PodOsObjectBuilder? _os;
  final bool? _hostUsers;
  final List<PodSchedulingGateObjectBuilder>? _schedulingGates;
  final List<PodResourceClaimObjectBuilder>? _resourceClaims;

  PodSpecObjectBuilder({
    List<VolumeObjectBuilder>? volumes,
    List<ContainerObjectBuilder>? initContainers,
    List<ContainerObjectBuilder>? containers,
    List<EphemeralContainerObjectBuilder>? ephemeralContainers,
    String? restartPolicy,
    int? terminationGracePeriodSeconds,
    int? activeDeadlineSeconds,
    String? dnsPolicy,
    List<api_core_v1_pod_spec_.NodeSelectorEntryObjectBuilder>? nodeSelector,
    String? serviceAccountName,
    String? serviceAccount,
    bool? automountServiceAccountToken,
    String? nodeName,
    bool? hostNetwork,
    bool? hostPid,
    bool? hostIpc,
    bool? shareProcessNamespace,
    PodSecurityContextObjectBuilder? securityContext,
    List<LocalObjectReferenceObjectBuilder>? imagePullSecrets,
    String? hostname,
    String? subdomain,
    AffinityObjectBuilder? affinity,
    String? schedulerName,
    List<TolerationObjectBuilder>? tolerations,
    List<HostAliasObjectBuilder>? hostAliases,
    String? priorityClassName,
    int? priority,
    PodDnsconfigObjectBuilder? dnsConfig,
    List<PodReadinessGateObjectBuilder>? readinessGates,
    String? runtimeClassName,
    bool? enableServiceLinks,
    String? preemptionPolicy,
    List<api_core_v1_pod_spec_.OverheadEntryObjectBuilder>? overhead,
    List<TopologySpreadConstraintObjectBuilder>? topologySpreadConstraints,
    bool? setHostnameAsFqdn,
    PodOsObjectBuilder? os,
    bool? hostUsers,
    List<PodSchedulingGateObjectBuilder>? schedulingGates,
    List<PodResourceClaimObjectBuilder>? resourceClaims,
  })
      : _volumes = volumes,
        _initContainers = initContainers,
        _containers = containers,
        _ephemeralContainers = ephemeralContainers,
        _restartPolicy = restartPolicy,
        _terminationGracePeriodSeconds = terminationGracePeriodSeconds,
        _activeDeadlineSeconds = activeDeadlineSeconds,
        _dnsPolicy = dnsPolicy,
        _nodeSelector = nodeSelector,
        _serviceAccountName = serviceAccountName,
        _serviceAccount = serviceAccount,
        _automountServiceAccountToken = automountServiceAccountToken,
        _nodeName = nodeName,
        _hostNetwork = hostNetwork,
        _hostPid = hostPid,
        _hostIpc = hostIpc,
        _shareProcessNamespace = shareProcessNamespace,
        _securityContext = securityContext,
        _imagePullSecrets = imagePullSecrets,
        _hostname = hostname,
        _subdomain = subdomain,
        _affinity = affinity,
        _schedulerName = schedulerName,
        _tolerations = tolerations,
        _hostAliases = hostAliases,
        _priorityClassName = priorityClassName,
        _priority = priority,
        _dnsConfig = dnsConfig,
        _readinessGates = readinessGates,
        _runtimeClassName = runtimeClassName,
        _enableServiceLinks = enableServiceLinks,
        _preemptionPolicy = preemptionPolicy,
        _overhead = overhead,
        _topologySpreadConstraints = topologySpreadConstraints,
        _setHostnameAsFqdn = setHostnameAsFqdn,
        _os = os,
        _hostUsers = hostUsers,
        _schedulingGates = schedulingGates,
        _resourceClaims = resourceClaims;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumesOffset = _volumes == null ? null
        : fbBuilder.writeList(_volumes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? initContainersOffset = _initContainers == null ? null
        : fbBuilder.writeList(_initContainers!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? containersOffset = _containers == null ? null
        : fbBuilder.writeList(_containers!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? ephemeralContainersOffset = _ephemeralContainers == null ? null
        : fbBuilder.writeList(_ephemeralContainers!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? restartPolicyOffset = _restartPolicy == null ? null
        : fbBuilder.writeString(_restartPolicy!);
    final int? dnsPolicyOffset = _dnsPolicy == null ? null
        : fbBuilder.writeString(_dnsPolicy!);
    final int? nodeSelectorOffset = _nodeSelector == null ? null
        : fbBuilder.writeList(_nodeSelector!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? serviceAccountNameOffset = _serviceAccountName == null ? null
        : fbBuilder.writeString(_serviceAccountName!);
    final int? serviceAccountOffset = _serviceAccount == null ? null
        : fbBuilder.writeString(_serviceAccount!);
    final int? nodeNameOffset = _nodeName == null ? null
        : fbBuilder.writeString(_nodeName!);
    final int? securityContextOffset = _securityContext?.getOrCreateOffset(fbBuilder);
    final int? imagePullSecretsOffset = _imagePullSecrets == null ? null
        : fbBuilder.writeList(_imagePullSecrets!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? hostnameOffset = _hostname == null ? null
        : fbBuilder.writeString(_hostname!);
    final int? subdomainOffset = _subdomain == null ? null
        : fbBuilder.writeString(_subdomain!);
    final int? affinityOffset = _affinity?.getOrCreateOffset(fbBuilder);
    final int? schedulerNameOffset = _schedulerName == null ? null
        : fbBuilder.writeString(_schedulerName!);
    final int? tolerationsOffset = _tolerations == null ? null
        : fbBuilder.writeList(_tolerations!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? hostAliasesOffset = _hostAliases == null ? null
        : fbBuilder.writeList(_hostAliases!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? priorityClassNameOffset = _priorityClassName == null ? null
        : fbBuilder.writeString(_priorityClassName!);
    final int? dnsConfigOffset = _dnsConfig?.getOrCreateOffset(fbBuilder);
    final int? readinessGatesOffset = _readinessGates == null ? null
        : fbBuilder.writeList(_readinessGates!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? runtimeClassNameOffset = _runtimeClassName == null ? null
        : fbBuilder.writeString(_runtimeClassName!);
    final int? preemptionPolicyOffset = _preemptionPolicy == null ? null
        : fbBuilder.writeString(_preemptionPolicy!);
    final int? overheadOffset = _overhead == null ? null
        : fbBuilder.writeList(_overhead!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? topologySpreadConstraintsOffset = _topologySpreadConstraints == null ? null
        : fbBuilder.writeList(_topologySpreadConstraints!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? osOffset = _os?.getOrCreateOffset(fbBuilder);
    final int? schedulingGatesOffset = _schedulingGates == null ? null
        : fbBuilder.writeList(_schedulingGates!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? resourceClaimsOffset = _resourceClaims == null ? null
        : fbBuilder.writeList(_resourceClaims!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(39);
    fbBuilder.addOffset(0, volumesOffset);
    fbBuilder.addOffset(1, initContainersOffset);
    fbBuilder.addOffset(2, containersOffset);
    fbBuilder.addOffset(3, ephemeralContainersOffset);
    fbBuilder.addOffset(4, restartPolicyOffset);
    fbBuilder.addInt64(5, _terminationGracePeriodSeconds);
    fbBuilder.addInt64(6, _activeDeadlineSeconds);
    fbBuilder.addOffset(7, dnsPolicyOffset);
    fbBuilder.addOffset(8, nodeSelectorOffset);
    fbBuilder.addOffset(9, serviceAccountNameOffset);
    fbBuilder.addOffset(10, serviceAccountOffset);
    fbBuilder.addBool(11, _automountServiceAccountToken);
    fbBuilder.addOffset(12, nodeNameOffset);
    fbBuilder.addBool(13, _hostNetwork);
    fbBuilder.addBool(14, _hostPid);
    fbBuilder.addBool(15, _hostIpc);
    fbBuilder.addBool(16, _shareProcessNamespace);
    fbBuilder.addOffset(17, securityContextOffset);
    fbBuilder.addOffset(18, imagePullSecretsOffset);
    fbBuilder.addOffset(19, hostnameOffset);
    fbBuilder.addOffset(20, subdomainOffset);
    fbBuilder.addOffset(21, affinityOffset);
    fbBuilder.addOffset(22, schedulerNameOffset);
    fbBuilder.addOffset(23, tolerationsOffset);
    fbBuilder.addOffset(24, hostAliasesOffset);
    fbBuilder.addOffset(25, priorityClassNameOffset);
    fbBuilder.addInt32(26, _priority);
    fbBuilder.addOffset(27, dnsConfigOffset);
    fbBuilder.addOffset(28, readinessGatesOffset);
    fbBuilder.addOffset(29, runtimeClassNameOffset);
    fbBuilder.addBool(30, _enableServiceLinks);
    fbBuilder.addOffset(31, preemptionPolicyOffset);
    fbBuilder.addOffset(32, overheadOffset);
    fbBuilder.addOffset(33, topologySpreadConstraintsOffset);
    fbBuilder.addBool(34, _setHostnameAsFqdn);
    fbBuilder.addOffset(35, osOffset);
    fbBuilder.addBool(36, _hostUsers);
    fbBuilder.addOffset(37, schedulingGatesOffset);
    fbBuilder.addOffset(38, resourceClaimsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodStatus {
  PodStatus._(this._bc, this._bcOffset);
  factory PodStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodStatus> reader = _PodStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get phase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<PodCondition>? get conditions => const fb.ListReader<PodCondition>(PodCondition.reader).vTableGetNullable(_bc, _bcOffset, 6);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get nominatedNodeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get hostIp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  List<HostIp>? get hostIps => const fb.ListReader<HostIp>(HostIp.reader).vTableGetNullable(_bc, _bcOffset, 16);
  String? get podIp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  List<PodIp>? get podIps => const fb.ListReader<PodIp>(PodIp.reader).vTableGetNullable(_bc, _bcOffset, 20);
  apimachinery_pkg_apis_meta_v1.Time? get startTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 22);
  List<ContainerStatus>? get initContainerStatuses => const fb.ListReader<ContainerStatus>(ContainerStatus.reader).vTableGetNullable(_bc, _bcOffset, 24);
  List<ContainerStatus>? get containerStatuses => const fb.ListReader<ContainerStatus>(ContainerStatus.reader).vTableGetNullable(_bc, _bcOffset, 26);
  String? get qosClass => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  List<ContainerStatus>? get ephemeralContainerStatuses => const fb.ListReader<ContainerStatus>(ContainerStatus.reader).vTableGetNullable(_bc, _bcOffset, 30);
  String? get resize => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  List<PodResourceClaimStatus>? get resourceClaimStatuses => const fb.ListReader<PodResourceClaimStatus>(PodResourceClaimStatus.reader).vTableGetNullable(_bc, _bcOffset, 34);

  @override
  String toString() {
    return 'PodStatus{phase: ${phase}, conditions: ${conditions}, message: ${message}, reason: ${reason}, nominatedNodeName: ${nominatedNodeName}, hostIp: ${hostIp}, hostIps: ${hostIps}, podIp: ${podIp}, podIps: ${podIps}, startTime: ${startTime}, initContainerStatuses: ${initContainerStatuses}, containerStatuses: ${containerStatuses}, qosClass: ${qosClass}, ephemeralContainerStatuses: ${ephemeralContainerStatuses}, resize: ${resize}, resourceClaimStatuses: ${resourceClaimStatuses}}';
  }
}

class _PodStatusReader extends fb.TableReader<PodStatus> {
  const _PodStatusReader();

  @override
  PodStatus createObject(fb.BufferContext bc, int offset) => 
    PodStatus._(bc, offset);
}

class PodStatusBuilder {
  PodStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(16);
  }

  int addPhaseOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addNominatedNodeNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addHostIpOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addHostIpsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addPodIpOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addPodIpsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addInitContainerStatusesOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addContainerStatusesOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addQosClassOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addEphemeralContainerStatusesOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addResizeOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addResourceClaimStatusesOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _phase;
  final List<PodConditionObjectBuilder>? _conditions;
  final String? _message;
  final String? _reason;
  final String? _nominatedNodeName;
  final String? _hostIp;
  final List<HostIpObjectBuilder>? _hostIps;
  final String? _podIp;
  final List<PodIpObjectBuilder>? _podIps;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _startTime;
  final List<ContainerStatusObjectBuilder>? _initContainerStatuses;
  final List<ContainerStatusObjectBuilder>? _containerStatuses;
  final String? _qosClass;
  final List<ContainerStatusObjectBuilder>? _ephemeralContainerStatuses;
  final String? _resize;
  final List<PodResourceClaimStatusObjectBuilder>? _resourceClaimStatuses;

  PodStatusObjectBuilder({
    String? phase,
    List<PodConditionObjectBuilder>? conditions,
    String? message,
    String? reason,
    String? nominatedNodeName,
    String? hostIp,
    List<HostIpObjectBuilder>? hostIps,
    String? podIp,
    List<PodIpObjectBuilder>? podIps,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? startTime,
    List<ContainerStatusObjectBuilder>? initContainerStatuses,
    List<ContainerStatusObjectBuilder>? containerStatuses,
    String? qosClass,
    List<ContainerStatusObjectBuilder>? ephemeralContainerStatuses,
    String? resize,
    List<PodResourceClaimStatusObjectBuilder>? resourceClaimStatuses,
  })
      : _phase = phase,
        _conditions = conditions,
        _message = message,
        _reason = reason,
        _nominatedNodeName = nominatedNodeName,
        _hostIp = hostIp,
        _hostIps = hostIps,
        _podIp = podIp,
        _podIps = podIps,
        _startTime = startTime,
        _initContainerStatuses = initContainerStatuses,
        _containerStatuses = containerStatuses,
        _qosClass = qosClass,
        _ephemeralContainerStatuses = ephemeralContainerStatuses,
        _resize = resize,
        _resourceClaimStatuses = resourceClaimStatuses;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? phaseOffset = _phase == null ? null
        : fbBuilder.writeString(_phase!);
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? nominatedNodeNameOffset = _nominatedNodeName == null ? null
        : fbBuilder.writeString(_nominatedNodeName!);
    final int? hostIpOffset = _hostIp == null ? null
        : fbBuilder.writeString(_hostIp!);
    final int? hostIpsOffset = _hostIps == null ? null
        : fbBuilder.writeList(_hostIps!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? podIpOffset = _podIp == null ? null
        : fbBuilder.writeString(_podIp!);
    final int? podIpsOffset = _podIps == null ? null
        : fbBuilder.writeList(_podIps!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? startTimeOffset = _startTime?.getOrCreateOffset(fbBuilder);
    final int? initContainerStatusesOffset = _initContainerStatuses == null ? null
        : fbBuilder.writeList(_initContainerStatuses!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? containerStatusesOffset = _containerStatuses == null ? null
        : fbBuilder.writeList(_containerStatuses!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? qosClassOffset = _qosClass == null ? null
        : fbBuilder.writeString(_qosClass!);
    final int? ephemeralContainerStatusesOffset = _ephemeralContainerStatuses == null ? null
        : fbBuilder.writeList(_ephemeralContainerStatuses!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? resizeOffset = _resize == null ? null
        : fbBuilder.writeString(_resize!);
    final int? resourceClaimStatusesOffset = _resourceClaimStatuses == null ? null
        : fbBuilder.writeList(_resourceClaimStatuses!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(16);
    fbBuilder.addOffset(0, phaseOffset);
    fbBuilder.addOffset(1, conditionsOffset);
    fbBuilder.addOffset(2, messageOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, nominatedNodeNameOffset);
    fbBuilder.addOffset(5, hostIpOffset);
    fbBuilder.addOffset(6, hostIpsOffset);
    fbBuilder.addOffset(7, podIpOffset);
    fbBuilder.addOffset(8, podIpsOffset);
    fbBuilder.addOffset(9, startTimeOffset);
    fbBuilder.addOffset(10, initContainerStatusesOffset);
    fbBuilder.addOffset(11, containerStatusesOffset);
    fbBuilder.addOffset(12, qosClassOffset);
    fbBuilder.addOffset(13, ephemeralContainerStatusesOffset);
    fbBuilder.addOffset(14, resizeOffset);
    fbBuilder.addOffset(15, resourceClaimStatusesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodStatusResult {
  PodStatusResult._(this._bc, this._bcOffset);
  factory PodStatusResult(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodStatusResult> reader = _PodStatusResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PodStatus? get status => PodStatus.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodStatusResult{metadata: ${metadata}, status: ${status}}';
  }
}

class _PodStatusResultReader extends fb.TableReader<PodStatusResult> {
  const _PodStatusResultReader();

  @override
  PodStatusResult createObject(fb.BufferContext bc, int offset) => 
    PodStatusResult._(bc, offset);
}

class PodStatusResultBuilder {
  PodStatusResultBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodStatusResultObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final PodStatusObjectBuilder? _status;

  PodStatusResultObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    PodStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodTemplate {
  PodTemplate._(this._bc, this._bcOffset);
  factory PodTemplate(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodTemplate> reader = _PodTemplateReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PodTemplateSpec? get template => PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodTemplate{metadata: ${metadata}, template: ${template}}';
  }
}

class _PodTemplateReader extends fb.TableReader<PodTemplate> {
  const _PodTemplateReader();

  @override
  PodTemplate createObject(fb.BufferContext bc, int offset) => 
    PodTemplate._(bc, offset);
}

class PodTemplateBuilder {
  PodTemplateBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodTemplateObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final PodTemplateSpecObjectBuilder? _template;

  PodTemplateObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    PodTemplateSpecObjectBuilder? template,
  })
      : _metadata = metadata,
        _template = template;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, templateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodTemplateList {
  PodTemplateList._(this._bc, this._bcOffset);
  factory PodTemplateList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodTemplateList> reader = _PodTemplateListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<PodTemplate>? get items => const fb.ListReader<PodTemplate>(PodTemplate.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodTemplateList{metadata: ${metadata}, items: ${items}}';
  }
}

class _PodTemplateListReader extends fb.TableReader<PodTemplateList> {
  const _PodTemplateListReader();

  @override
  PodTemplateList createObject(fb.BufferContext bc, int offset) => 
    PodTemplateList._(bc, offset);
}

class PodTemplateListBuilder {
  PodTemplateListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodTemplateListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<PodTemplateObjectBuilder>? _items;

  PodTemplateListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<PodTemplateObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodTemplateSpec {
  PodTemplateSpec._(this._bc, this._bcOffset);
  factory PodTemplateSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodTemplateSpec> reader = _PodTemplateSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PodSpec? get spec => PodSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodTemplateSpec{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _PodTemplateSpecReader extends fb.TableReader<PodTemplateSpec> {
  const _PodTemplateSpecReader();

  @override
  PodTemplateSpec createObject(fb.BufferContext bc, int offset) => 
    PodTemplateSpec._(bc, offset);
}

class PodTemplateSpecBuilder {
  PodTemplateSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodTemplateSpecObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final PodSpecObjectBuilder? _spec;

  PodTemplateSpecObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    PodSpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PortStatus {
  PortStatus._(this._bc, this._bcOffset);
  factory PortStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PortStatus> reader = _PortStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get port => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get protocol => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PortStatus{port: ${port}, protocol: ${protocol}, error: ${error}}';
  }
}

class _PortStatusReader extends fb.TableReader<PortStatus> {
  const _PortStatusReader();

  @override
  PortStatus createObject(fb.BufferContext bc, int offset) => 
    PortStatus._(bc, offset);
}

class PortStatusBuilder {
  PortStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPort(int? port) {
    fbBuilder.addInt32(0, port);
    return fbBuilder.offset;
  }
  int addProtocolOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PortStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _port;
  final String? _protocol;
  final String? _error;

  PortStatusObjectBuilder({
    int? port,
    String? protocol,
    String? error,
  })
      : _port = port,
        _protocol = protocol,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? protocolOffset = _protocol == null ? null
        : fbBuilder.writeString(_protocol!);
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(3);
    fbBuilder.addInt32(0, _port);
    fbBuilder.addOffset(1, protocolOffset);
    fbBuilder.addOffset(2, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PortworxVolumeSource {
  PortworxVolumeSource._(this._bc, this._bcOffset);
  factory PortworxVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PortworxVolumeSource> reader = _PortworxVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get volumeId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'PortworxVolumeSource{volumeId: ${volumeId}, fsType: ${fsType}, readOnly: ${readOnly}}';
  }
}

class _PortworxVolumeSourceReader extends fb.TableReader<PortworxVolumeSource> {
  const _PortworxVolumeSourceReader();

  @override
  PortworxVolumeSource createObject(fb.BufferContext bc, int offset) => 
    PortworxVolumeSource._(bc, offset);
}

class PortworxVolumeSourceBuilder {
  PortworxVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addVolumeIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PortworxVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _volumeId;
  final String? _fsType;
  final bool? _readOnly;

  PortworxVolumeSourceObjectBuilder({
    String? volumeId,
    String? fsType,
    bool? readOnly,
  })
      : _volumeId = volumeId,
        _fsType = fsType,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumeIdOffset = _volumeId == null ? null
        : fbBuilder.writeString(_volumeId!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, volumeIdOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    fbBuilder.addBool(2, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Preconditions {
  Preconditions._(this._bc, this._bcOffset);
  factory Preconditions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Preconditions> reader = _PreconditionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get uid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'Preconditions{uid: ${uid}}';
  }
}

class _PreconditionsReader extends fb.TableReader<Preconditions> {
  const _PreconditionsReader();

  @override
  Preconditions createObject(fb.BufferContext bc, int offset) => 
    Preconditions._(bc, offset);
}

class PreconditionsBuilder {
  PreconditionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addUidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PreconditionsObjectBuilder extends fb.ObjectBuilder {
  final String? _uid;

  PreconditionsObjectBuilder({
    String? uid,
  })
      : _uid = uid;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? uidOffset = _uid == null ? null
        : fbBuilder.writeString(_uid!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, uidOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PreferAvoidPodsEntry {
  PreferAvoidPodsEntry._(this._bc, this._bcOffset);
  factory PreferAvoidPodsEntry(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PreferAvoidPodsEntry> reader = _PreferAvoidPodsEntryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PodSignature? get podSignature => PodSignature.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_apis_meta_v1.Time? get evictionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'PreferAvoidPodsEntry{podSignature: ${podSignature}, evictionTime: ${evictionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _PreferAvoidPodsEntryReader extends fb.TableReader<PreferAvoidPodsEntry> {
  const _PreferAvoidPodsEntryReader();

  @override
  PreferAvoidPodsEntry createObject(fb.BufferContext bc, int offset) => 
    PreferAvoidPodsEntry._(bc, offset);
}

class PreferAvoidPodsEntryBuilder {
  PreferAvoidPodsEntryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addPodSignatureOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addEvictionTimeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PreferAvoidPodsEntryObjectBuilder extends fb.ObjectBuilder {
  final PodSignatureObjectBuilder? _podSignature;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _evictionTime;
  final String? _reason;
  final String? _message;

  PreferAvoidPodsEntryObjectBuilder({
    PodSignatureObjectBuilder? podSignature,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? evictionTime,
    String? reason,
    String? message,
  })
      : _podSignature = podSignature,
        _evictionTime = evictionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? podSignatureOffset = _podSignature?.getOrCreateOffset(fbBuilder);
    final int? evictionTimeOffset = _evictionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, podSignatureOffset);
    fbBuilder.addOffset(1, evictionTimeOffset);
    fbBuilder.addOffset(2, reasonOffset);
    fbBuilder.addOffset(3, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PreferredSchedulingTerm {
  PreferredSchedulingTerm._(this._bc, this._bcOffset);
  factory PreferredSchedulingTerm(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PreferredSchedulingTerm> reader = _PreferredSchedulingTermReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get weight => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  NodeSelectorTerm? get preference => NodeSelectorTerm.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PreferredSchedulingTerm{weight: ${weight}, preference: ${preference}}';
  }
}

class _PreferredSchedulingTermReader extends fb.TableReader<PreferredSchedulingTerm> {
  const _PreferredSchedulingTermReader();

  @override
  PreferredSchedulingTerm createObject(fb.BufferContext bc, int offset) => 
    PreferredSchedulingTerm._(bc, offset);
}

class PreferredSchedulingTermBuilder {
  PreferredSchedulingTermBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addWeight(int? weight) {
    fbBuilder.addInt32(0, weight);
    return fbBuilder.offset;
  }
  int addPreferenceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PreferredSchedulingTermObjectBuilder extends fb.ObjectBuilder {
  final int? _weight;
  final NodeSelectorTermObjectBuilder? _preference;

  PreferredSchedulingTermObjectBuilder({
    int? weight,
    NodeSelectorTermObjectBuilder? preference,
  })
      : _weight = weight,
        _preference = preference;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? preferenceOffset = _preference?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addInt32(0, _weight);
    fbBuilder.addOffset(1, preferenceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Probe {
  Probe._(this._bc, this._bcOffset);
  factory Probe(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Probe> reader = _ProbeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ProbeHandler? get handler => ProbeHandler.reader.vTableGetNullable(_bc, _bcOffset, 4);
  int get initialDelaySeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get timeoutSeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get periodSeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get successThreshold => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get failureThreshold => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get terminationGracePeriodSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 16, 0);

  @override
  String toString() {
    return 'Probe{handler: ${handler}, initialDelaySeconds: ${initialDelaySeconds}, timeoutSeconds: ${timeoutSeconds}, periodSeconds: ${periodSeconds}, successThreshold: ${successThreshold}, failureThreshold: ${failureThreshold}, terminationGracePeriodSeconds: ${terminationGracePeriodSeconds}}';
  }
}

class _ProbeReader extends fb.TableReader<Probe> {
  const _ProbeReader();

  @override
  Probe createObject(fb.BufferContext bc, int offset) => 
    Probe._(bc, offset);
}

class ProbeBuilder {
  ProbeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addHandlerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addInitialDelaySeconds(int? initialDelaySeconds) {
    fbBuilder.addInt32(1, initialDelaySeconds);
    return fbBuilder.offset;
  }
  int addTimeoutSeconds(int? timeoutSeconds) {
    fbBuilder.addInt32(2, timeoutSeconds);
    return fbBuilder.offset;
  }
  int addPeriodSeconds(int? periodSeconds) {
    fbBuilder.addInt32(3, periodSeconds);
    return fbBuilder.offset;
  }
  int addSuccessThreshold(int? successThreshold) {
    fbBuilder.addInt32(4, successThreshold);
    return fbBuilder.offset;
  }
  int addFailureThreshold(int? failureThreshold) {
    fbBuilder.addInt32(5, failureThreshold);
    return fbBuilder.offset;
  }
  int addTerminationGracePeriodSeconds(int? terminationGracePeriodSeconds) {
    fbBuilder.addInt64(6, terminationGracePeriodSeconds);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ProbeObjectBuilder extends fb.ObjectBuilder {
  final ProbeHandlerObjectBuilder? _handler;
  final int? _initialDelaySeconds;
  final int? _timeoutSeconds;
  final int? _periodSeconds;
  final int? _successThreshold;
  final int? _failureThreshold;
  final int? _terminationGracePeriodSeconds;

  ProbeObjectBuilder({
    ProbeHandlerObjectBuilder? handler,
    int? initialDelaySeconds,
    int? timeoutSeconds,
    int? periodSeconds,
    int? successThreshold,
    int? failureThreshold,
    int? terminationGracePeriodSeconds,
  })
      : _handler = handler,
        _initialDelaySeconds = initialDelaySeconds,
        _timeoutSeconds = timeoutSeconds,
        _periodSeconds = periodSeconds,
        _successThreshold = successThreshold,
        _failureThreshold = failureThreshold,
        _terminationGracePeriodSeconds = terminationGracePeriodSeconds;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? handlerOffset = _handler?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, handlerOffset);
    fbBuilder.addInt32(1, _initialDelaySeconds);
    fbBuilder.addInt32(2, _timeoutSeconds);
    fbBuilder.addInt32(3, _periodSeconds);
    fbBuilder.addInt32(4, _successThreshold);
    fbBuilder.addInt32(5, _failureThreshold);
    fbBuilder.addInt64(6, _terminationGracePeriodSeconds);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ProbeHandler {
  ProbeHandler._(this._bc, this._bcOffset);
  factory ProbeHandler(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ProbeHandler> reader = _ProbeHandlerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ExecAction? get exec => ExecAction.reader.vTableGetNullable(_bc, _bcOffset, 4);
  HttpgetAction? get httpGet => HttpgetAction.reader.vTableGetNullable(_bc, _bcOffset, 6);
  TcpsocketAction? get tcpSocket => TcpsocketAction.reader.vTableGetNullable(_bc, _bcOffset, 8);
  Grpcaction? get grpc => Grpcaction.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ProbeHandler{exec: ${exec}, httpGet: ${httpGet}, tcpSocket: ${tcpSocket}, grpc: ${grpc}}';
  }
}

class _ProbeHandlerReader extends fb.TableReader<ProbeHandler> {
  const _ProbeHandlerReader();

  @override
  ProbeHandler createObject(fb.BufferContext bc, int offset) => 
    ProbeHandler._(bc, offset);
}

class ProbeHandlerBuilder {
  ProbeHandlerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addExecOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHttpGetOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTcpSocketOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addGrpcOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ProbeHandlerObjectBuilder extends fb.ObjectBuilder {
  final ExecActionObjectBuilder? _exec;
  final HttpgetActionObjectBuilder? _httpGet;
  final TcpsocketActionObjectBuilder? _tcpSocket;
  final GrpcactionObjectBuilder? _grpc;

  ProbeHandlerObjectBuilder({
    ExecActionObjectBuilder? exec,
    HttpgetActionObjectBuilder? httpGet,
    TcpsocketActionObjectBuilder? tcpSocket,
    GrpcactionObjectBuilder? grpc,
  })
      : _exec = exec,
        _httpGet = httpGet,
        _tcpSocket = tcpSocket,
        _grpc = grpc;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? execOffset = _exec?.getOrCreateOffset(fbBuilder);
    final int? httpGetOffset = _httpGet?.getOrCreateOffset(fbBuilder);
    final int? tcpSocketOffset = _tcpSocket?.getOrCreateOffset(fbBuilder);
    final int? grpcOffset = _grpc?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, execOffset);
    fbBuilder.addOffset(1, httpGetOffset);
    fbBuilder.addOffset(2, tcpSocketOffset);
    fbBuilder.addOffset(3, grpcOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ProjectedVolumeSource {
  ProjectedVolumeSource._(this._bc, this._bcOffset);
  factory ProjectedVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ProjectedVolumeSource> reader = _ProjectedVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<VolumeProjection>? get sources => const fb.ListReader<VolumeProjection>(VolumeProjection.reader).vTableGetNullable(_bc, _bcOffset, 4);
  int get defaultMode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'ProjectedVolumeSource{sources: ${sources}, defaultMode: ${defaultMode}}';
  }
}

class _ProjectedVolumeSourceReader extends fb.TableReader<ProjectedVolumeSource> {
  const _ProjectedVolumeSourceReader();

  @override
  ProjectedVolumeSource createObject(fb.BufferContext bc, int offset) => 
    ProjectedVolumeSource._(bc, offset);
}

class ProjectedVolumeSourceBuilder {
  ProjectedVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSourcesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDefaultMode(int? defaultMode) {
    fbBuilder.addInt32(1, defaultMode);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ProjectedVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final List<VolumeProjectionObjectBuilder>? _sources;
  final int? _defaultMode;

  ProjectedVolumeSourceObjectBuilder({
    List<VolumeProjectionObjectBuilder>? sources,
    int? defaultMode,
  })
      : _sources = sources,
        _defaultMode = defaultMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? sourcesOffset = _sources == null ? null
        : fbBuilder.writeList(_sources!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, sourcesOffset);
    fbBuilder.addInt32(1, _defaultMode);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class QuobyteVolumeSource {
  QuobyteVolumeSource._(this._bc, this._bcOffset);
  factory QuobyteVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<QuobyteVolumeSource> reader = _QuobyteVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get registry => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get volume => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  String? get user => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get tenant => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'QuobyteVolumeSource{registry: ${registry}, volume: ${volume}, readOnly: ${readOnly}, user: ${user}, group: ${group}, tenant: ${tenant}}';
  }
}

class _QuobyteVolumeSourceReader extends fb.TableReader<QuobyteVolumeSource> {
  const _QuobyteVolumeSourceReader();

  @override
  QuobyteVolumeSource createObject(fb.BufferContext bc, int offset) => 
    QuobyteVolumeSource._(bc, offset);
}

class QuobyteVolumeSourceBuilder {
  QuobyteVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addRegistryOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVolumeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }
  int addUserOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTenantOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QuobyteVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _registry;
  final String? _volume;
  final bool? _readOnly;
  final String? _user;
  final String? _group;
  final String? _tenant;

  QuobyteVolumeSourceObjectBuilder({
    String? registry,
    String? volume,
    bool? readOnly,
    String? user,
    String? group,
    String? tenant,
  })
      : _registry = registry,
        _volume = volume,
        _readOnly = readOnly,
        _user = user,
        _group = group,
        _tenant = tenant;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? registryOffset = _registry == null ? null
        : fbBuilder.writeString(_registry!);
    final int? volumeOffset = _volume == null ? null
        : fbBuilder.writeString(_volume!);
    final int? userOffset = _user == null ? null
        : fbBuilder.writeString(_user!);
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? tenantOffset = _tenant == null ? null
        : fbBuilder.writeString(_tenant!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, registryOffset);
    fbBuilder.addOffset(1, volumeOffset);
    fbBuilder.addBool(2, _readOnly);
    fbBuilder.addOffset(3, userOffset);
    fbBuilder.addOffset(4, groupOffset);
    fbBuilder.addOffset(5, tenantOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RbdpersistentVolumeSource {
  RbdpersistentVolumeSource._(this._bc, this._bcOffset);
  factory RbdpersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RbdpersistentVolumeSource> reader = _RbdpersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get monitors => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  String? get image => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get pool => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get user => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get keyring => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  SecretReference? get secretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 16);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);

  @override
  String toString() {
    return 'RbdpersistentVolumeSource{monitors: ${monitors}, image: ${image}, fsType: ${fsType}, pool: ${pool}, user: ${user}, keyring: ${keyring}, secretRef: ${secretRef}, readOnly: ${readOnly}}';
  }
}

class _RbdpersistentVolumeSourceReader extends fb.TableReader<RbdpersistentVolumeSource> {
  const _RbdpersistentVolumeSourceReader();

  @override
  RbdpersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    RbdpersistentVolumeSource._(bc, offset);
}

class RbdpersistentVolumeSourceBuilder {
  RbdpersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addMonitorsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addImageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPoolOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addUserOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addKeyringOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(7, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RbdpersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _monitors;
  final String? _image;
  final String? _fsType;
  final String? _pool;
  final String? _user;
  final String? _keyring;
  final SecretReferenceObjectBuilder? _secretRef;
  final bool? _readOnly;

  RbdpersistentVolumeSourceObjectBuilder({
    List<String>? monitors,
    String? image,
    String? fsType,
    String? pool,
    String? user,
    String? keyring,
    SecretReferenceObjectBuilder? secretRef,
    bool? readOnly,
  })
      : _monitors = monitors,
        _image = image,
        _fsType = fsType,
        _pool = pool,
        _user = user,
        _keyring = keyring,
        _secretRef = secretRef,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? monitorsOffset = _monitors == null ? null
        : fbBuilder.writeList(_monitors!.map(fbBuilder.writeString).toList());
    final int? imageOffset = _image == null ? null
        : fbBuilder.writeString(_image!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? poolOffset = _pool == null ? null
        : fbBuilder.writeString(_pool!);
    final int? userOffset = _user == null ? null
        : fbBuilder.writeString(_user!);
    final int? keyringOffset = _keyring == null ? null
        : fbBuilder.writeString(_keyring!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, monitorsOffset);
    fbBuilder.addOffset(1, imageOffset);
    fbBuilder.addOffset(2, fsTypeOffset);
    fbBuilder.addOffset(3, poolOffset);
    fbBuilder.addOffset(4, userOffset);
    fbBuilder.addOffset(5, keyringOffset);
    fbBuilder.addOffset(6, secretRefOffset);
    fbBuilder.addBool(7, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RbdvolumeSource {
  RbdvolumeSource._(this._bc, this._bcOffset);
  factory RbdvolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RbdvolumeSource> reader = _RbdvolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get monitors => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  String? get image => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get pool => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get user => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get keyring => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  LocalObjectReference? get secretRef => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 16);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);

  @override
  String toString() {
    return 'RbdvolumeSource{monitors: ${monitors}, image: ${image}, fsType: ${fsType}, pool: ${pool}, user: ${user}, keyring: ${keyring}, secretRef: ${secretRef}, readOnly: ${readOnly}}';
  }
}

class _RbdvolumeSourceReader extends fb.TableReader<RbdvolumeSource> {
  const _RbdvolumeSourceReader();

  @override
  RbdvolumeSource createObject(fb.BufferContext bc, int offset) => 
    RbdvolumeSource._(bc, offset);
}

class RbdvolumeSourceBuilder {
  RbdvolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addMonitorsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addImageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPoolOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addUserOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addKeyringOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(7, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RbdvolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _monitors;
  final String? _image;
  final String? _fsType;
  final String? _pool;
  final String? _user;
  final String? _keyring;
  final LocalObjectReferenceObjectBuilder? _secretRef;
  final bool? _readOnly;

  RbdvolumeSourceObjectBuilder({
    List<String>? monitors,
    String? image,
    String? fsType,
    String? pool,
    String? user,
    String? keyring,
    LocalObjectReferenceObjectBuilder? secretRef,
    bool? readOnly,
  })
      : _monitors = monitors,
        _image = image,
        _fsType = fsType,
        _pool = pool,
        _user = user,
        _keyring = keyring,
        _secretRef = secretRef,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? monitorsOffset = _monitors == null ? null
        : fbBuilder.writeList(_monitors!.map(fbBuilder.writeString).toList());
    final int? imageOffset = _image == null ? null
        : fbBuilder.writeString(_image!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? poolOffset = _pool == null ? null
        : fbBuilder.writeString(_pool!);
    final int? userOffset = _user == null ? null
        : fbBuilder.writeString(_user!);
    final int? keyringOffset = _keyring == null ? null
        : fbBuilder.writeString(_keyring!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, monitorsOffset);
    fbBuilder.addOffset(1, imageOffset);
    fbBuilder.addOffset(2, fsTypeOffset);
    fbBuilder.addOffset(3, poolOffset);
    fbBuilder.addOffset(4, userOffset);
    fbBuilder.addOffset(5, keyringOffset);
    fbBuilder.addOffset(6, secretRefOffset);
    fbBuilder.addBool(7, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RangeAllocation {
  RangeAllocation._(this._bc, this._bcOffset);
  factory RangeAllocation(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RangeAllocation> reader = _RangeAllocationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get range => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<int>? get data => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'RangeAllocation{metadata: ${metadata}, range: ${range}, data: ${data}}';
  }
}

class _RangeAllocationReader extends fb.TableReader<RangeAllocation> {
  const _RangeAllocationReader();

  @override
  RangeAllocation createObject(fb.BufferContext bc, int offset) => 
    RangeAllocation._(bc, offset);
}

class RangeAllocationBuilder {
  RangeAllocationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRangeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RangeAllocationObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final String? _range;
  final List<int>? _data;

  RangeAllocationObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    String? range,
    List<int>? data,
  })
      : _metadata = metadata,
        _range = range,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? rangeOffset = _range == null ? null
        : fbBuilder.writeString(_range!);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeListUint8(_data!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, rangeOffset);
    fbBuilder.addOffset(2, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicationController {
  ReplicationController._(this._bc, this._bcOffset);
  factory ReplicationController(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicationController> reader = _ReplicationControllerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ReplicationControllerSpec? get spec => ReplicationControllerSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ReplicationControllerStatus? get status => ReplicationControllerStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ReplicationController{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ReplicationControllerReader extends fb.TableReader<ReplicationController> {
  const _ReplicationControllerReader();

  @override
  ReplicationController createObject(fb.BufferContext bc, int offset) => 
    ReplicationController._(bc, offset);
}

class ReplicationControllerBuilder {
  ReplicationControllerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicationControllerObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ReplicationControllerSpecObjectBuilder? _spec;
  final ReplicationControllerStatusObjectBuilder? _status;

  ReplicationControllerObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ReplicationControllerSpecObjectBuilder? spec,
    ReplicationControllerStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicationControllerCondition {
  ReplicationControllerCondition._(this._bc, this._bcOffset);
  factory ReplicationControllerCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicationControllerCondition> reader = _ReplicationControllerConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'ReplicationControllerCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _ReplicationControllerConditionReader extends fb.TableReader<ReplicationControllerCondition> {
  const _ReplicationControllerConditionReader();

  @override
  ReplicationControllerCondition createObject(fb.BufferContext bc, int offset) => 
    ReplicationControllerCondition._(bc, offset);
}

class ReplicationControllerConditionBuilder {
  ReplicationControllerConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicationControllerConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  ReplicationControllerConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicationControllerList {
  ReplicationControllerList._(this._bc, this._bcOffset);
  factory ReplicationControllerList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicationControllerList> reader = _ReplicationControllerListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ReplicationController>? get items => const fb.ListReader<ReplicationController>(ReplicationController.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ReplicationControllerList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ReplicationControllerListReader extends fb.TableReader<ReplicationControllerList> {
  const _ReplicationControllerListReader();

  @override
  ReplicationControllerList createObject(fb.BufferContext bc, int offset) => 
    ReplicationControllerList._(bc, offset);
}

class ReplicationControllerListBuilder {
  ReplicationControllerListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicationControllerListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ReplicationControllerObjectBuilder>? _items;

  ReplicationControllerListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ReplicationControllerObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicationControllerSpec {
  ReplicationControllerSpec._(this._bc, this._bcOffset);
  factory ReplicationControllerSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicationControllerSpec> reader = _ReplicationControllerSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get minReadySeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  List<api_core_v1_replication_controller_spec_.SelectorEntry>? get selector => const fb.ListReader<api_core_v1_replication_controller_spec_.SelectorEntry>(api_core_v1_replication_controller_spec_.SelectorEntry.reader).vTableGetNullable(_bc, _bcOffset, 8);
  PodTemplateSpec? get template => PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ReplicationControllerSpec{replicas: ${replicas}, minReadySeconds: ${minReadySeconds}, selector: ${selector}, template: ${template}}';
  }
}

class _ReplicationControllerSpecReader extends fb.TableReader<ReplicationControllerSpec> {
  const _ReplicationControllerSpecReader();

  @override
  ReplicationControllerSpec createObject(fb.BufferContext bc, int offset) => 
    ReplicationControllerSpec._(bc, offset);
}

class ReplicationControllerSpecBuilder {
  ReplicationControllerSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addMinReadySeconds(int? minReadySeconds) {
    fbBuilder.addInt32(1, minReadySeconds);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicationControllerSpecObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final int? _minReadySeconds;
  final List<api_core_v1_replication_controller_spec_.SelectorEntryObjectBuilder>? _selector;
  final PodTemplateSpecObjectBuilder? _template;

  ReplicationControllerSpecObjectBuilder({
    int? replicas,
    int? minReadySeconds,
    List<api_core_v1_replication_controller_spec_.SelectorEntryObjectBuilder>? selector,
    PodTemplateSpecObjectBuilder? template,
  })
      : _replicas = replicas,
        _minReadySeconds = minReadySeconds,
        _selector = selector,
        _template = template;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector == null ? null
        : fbBuilder.writeList(_selector!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addInt32(1, _minReadySeconds);
    fbBuilder.addOffset(2, selectorOffset);
    fbBuilder.addOffset(3, templateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicationControllerStatus {
  ReplicationControllerStatus._(this._bc, this._bcOffset);
  factory ReplicationControllerStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicationControllerStatus> reader = _ReplicationControllerStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get fullyLabeledReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get readyReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get availableReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  List<ReplicationControllerCondition>? get conditions => const fb.ListReader<ReplicationControllerCondition>(ReplicationControllerCondition.reader).vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'ReplicationControllerStatus{replicas: ${replicas}, fullyLabeledReplicas: ${fullyLabeledReplicas}, readyReplicas: ${readyReplicas}, availableReplicas: ${availableReplicas}, observedGeneration: ${observedGeneration}, conditions: ${conditions}}';
  }
}

class _ReplicationControllerStatusReader extends fb.TableReader<ReplicationControllerStatus> {
  const _ReplicationControllerStatusReader();

  @override
  ReplicationControllerStatus createObject(fb.BufferContext bc, int offset) => 
    ReplicationControllerStatus._(bc, offset);
}

class ReplicationControllerStatusBuilder {
  ReplicationControllerStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addFullyLabeledReplicas(int? fullyLabeledReplicas) {
    fbBuilder.addInt32(1, fullyLabeledReplicas);
    return fbBuilder.offset;
  }
  int addReadyReplicas(int? readyReplicas) {
    fbBuilder.addInt32(2, readyReplicas);
    return fbBuilder.offset;
  }
  int addAvailableReplicas(int? availableReplicas) {
    fbBuilder.addInt32(3, availableReplicas);
    return fbBuilder.offset;
  }
  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(4, observedGeneration);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicationControllerStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final int? _fullyLabeledReplicas;
  final int? _readyReplicas;
  final int? _availableReplicas;
  final int? _observedGeneration;
  final List<ReplicationControllerConditionObjectBuilder>? _conditions;

  ReplicationControllerStatusObjectBuilder({
    int? replicas,
    int? fullyLabeledReplicas,
    int? readyReplicas,
    int? availableReplicas,
    int? observedGeneration,
    List<ReplicationControllerConditionObjectBuilder>? conditions,
  })
      : _replicas = replicas,
        _fullyLabeledReplicas = fullyLabeledReplicas,
        _readyReplicas = readyReplicas,
        _availableReplicas = availableReplicas,
        _observedGeneration = observedGeneration,
        _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(6);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addInt32(1, _fullyLabeledReplicas);
    fbBuilder.addInt32(2, _readyReplicas);
    fbBuilder.addInt32(3, _availableReplicas);
    fbBuilder.addInt64(4, _observedGeneration);
    fbBuilder.addOffset(5, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaim {
  ResourceClaim._(this._bc, this._bcOffset);
  factory ResourceClaim(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaim> reader = _ResourceClaimReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ResourceClaim{name: ${name}}';
  }
}

class _ResourceClaimReader extends fb.TableReader<ResourceClaim> {
  const _ResourceClaimReader();

  @override
  ResourceClaim createObject(fb.BufferContext bc, int offset) => 
    ResourceClaim._(bc, offset);
}

class ResourceClaimBuilder {
  ResourceClaimBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimObjectBuilder extends fb.ObjectBuilder {
  final String? _name;

  ResourceClaimObjectBuilder({
    String? name,
  })
      : _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceFieldSelector {
  ResourceFieldSelector._(this._bc, this._bcOffset);
  factory ResourceFieldSelector(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceFieldSelector> reader = _ResourceFieldSelectorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get containerName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get resource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_api_resource.Quantity? get divisor => apimachinery_pkg_api_resource.Quantity.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ResourceFieldSelector{containerName: ${containerName}, resource: ${resource}, divisor: ${divisor}}';
  }
}

class _ResourceFieldSelectorReader extends fb.TableReader<ResourceFieldSelector> {
  const _ResourceFieldSelectorReader();

  @override
  ResourceFieldSelector createObject(fb.BufferContext bc, int offset) => 
    ResourceFieldSelector._(bc, offset);
}

class ResourceFieldSelectorBuilder {
  ResourceFieldSelectorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addContainerNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDivisorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceFieldSelectorObjectBuilder extends fb.ObjectBuilder {
  final String? _containerName;
  final String? _resource;
  final apimachinery_pkg_api_resource.QuantityObjectBuilder? _divisor;

  ResourceFieldSelectorObjectBuilder({
    String? containerName,
    String? resource,
    apimachinery_pkg_api_resource.QuantityObjectBuilder? divisor,
  })
      : _containerName = containerName,
        _resource = resource,
        _divisor = divisor;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? containerNameOffset = _containerName == null ? null
        : fbBuilder.writeString(_containerName!);
    final int? resourceOffset = _resource == null ? null
        : fbBuilder.writeString(_resource!);
    final int? divisorOffset = _divisor?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, containerNameOffset);
    fbBuilder.addOffset(1, resourceOffset);
    fbBuilder.addOffset(2, divisorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceQuota {
  ResourceQuota._(this._bc, this._bcOffset);
  factory ResourceQuota(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceQuota> reader = _ResourceQuotaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ResourceQuotaSpec? get spec => ResourceQuotaSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ResourceQuotaStatus? get status => ResourceQuotaStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ResourceQuota{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ResourceQuotaReader extends fb.TableReader<ResourceQuota> {
  const _ResourceQuotaReader();

  @override
  ResourceQuota createObject(fb.BufferContext bc, int offset) => 
    ResourceQuota._(bc, offset);
}

class ResourceQuotaBuilder {
  ResourceQuotaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceQuotaObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ResourceQuotaSpecObjectBuilder? _spec;
  final ResourceQuotaStatusObjectBuilder? _status;

  ResourceQuotaObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ResourceQuotaSpecObjectBuilder? spec,
    ResourceQuotaStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceQuotaList {
  ResourceQuotaList._(this._bc, this._bcOffset);
  factory ResourceQuotaList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceQuotaList> reader = _ResourceQuotaListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ResourceQuota>? get items => const fb.ListReader<ResourceQuota>(ResourceQuota.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceQuotaList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ResourceQuotaListReader extends fb.TableReader<ResourceQuotaList> {
  const _ResourceQuotaListReader();

  @override
  ResourceQuotaList createObject(fb.BufferContext bc, int offset) => 
    ResourceQuotaList._(bc, offset);
}

class ResourceQuotaListBuilder {
  ResourceQuotaListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceQuotaListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ResourceQuotaObjectBuilder>? _items;

  ResourceQuotaListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ResourceQuotaObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceQuotaSpec {
  ResourceQuotaSpec._(this._bc, this._bcOffset);
  factory ResourceQuotaSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceQuotaSpec> reader = _ResourceQuotaSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<api_core_v1_resource_quota_spec_.HardEntry>? get hard => const fb.ListReader<api_core_v1_resource_quota_spec_.HardEntry>(api_core_v1_resource_quota_spec_.HardEntry.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get scopes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  ScopeSelector? get scopeSelector => ScopeSelector.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ResourceQuotaSpec{hard: ${hard}, scopes: ${scopes}, scopeSelector: ${scopeSelector}}';
  }
}

class _ResourceQuotaSpecReader extends fb.TableReader<ResourceQuotaSpec> {
  const _ResourceQuotaSpecReader();

  @override
  ResourceQuotaSpec createObject(fb.BufferContext bc, int offset) => 
    ResourceQuotaSpec._(bc, offset);
}

class ResourceQuotaSpecBuilder {
  ResourceQuotaSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addHardOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addScopesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addScopeSelectorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceQuotaSpecObjectBuilder extends fb.ObjectBuilder {
  final List<api_core_v1_resource_quota_spec_.HardEntryObjectBuilder>? _hard;
  final List<String>? _scopes;
  final ScopeSelectorObjectBuilder? _scopeSelector;

  ResourceQuotaSpecObjectBuilder({
    List<api_core_v1_resource_quota_spec_.HardEntryObjectBuilder>? hard,
    List<String>? scopes,
    ScopeSelectorObjectBuilder? scopeSelector,
  })
      : _hard = hard,
        _scopes = scopes,
        _scopeSelector = scopeSelector;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? hardOffset = _hard == null ? null
        : fbBuilder.writeList(_hard!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? scopesOffset = _scopes == null ? null
        : fbBuilder.writeList(_scopes!.map(fbBuilder.writeString).toList());
    final int? scopeSelectorOffset = _scopeSelector?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, hardOffset);
    fbBuilder.addOffset(1, scopesOffset);
    fbBuilder.addOffset(2, scopeSelectorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceQuotaStatus {
  ResourceQuotaStatus._(this._bc, this._bcOffset);
  factory ResourceQuotaStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceQuotaStatus> reader = _ResourceQuotaStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<api_core_v1_resource_quota_status_.HardEntry>? get hard => const fb.ListReader<api_core_v1_resource_quota_status_.HardEntry>(api_core_v1_resource_quota_status_.HardEntry.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<api_core_v1_resource_quota_status_.UsedEntry>? get used => const fb.ListReader<api_core_v1_resource_quota_status_.UsedEntry>(api_core_v1_resource_quota_status_.UsedEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceQuotaStatus{hard: ${hard}, used: ${used}}';
  }
}

class _ResourceQuotaStatusReader extends fb.TableReader<ResourceQuotaStatus> {
  const _ResourceQuotaStatusReader();

  @override
  ResourceQuotaStatus createObject(fb.BufferContext bc, int offset) => 
    ResourceQuotaStatus._(bc, offset);
}

class ResourceQuotaStatusBuilder {
  ResourceQuotaStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHardOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addUsedOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceQuotaStatusObjectBuilder extends fb.ObjectBuilder {
  final List<api_core_v1_resource_quota_status_.HardEntryObjectBuilder>? _hard;
  final List<api_core_v1_resource_quota_status_.UsedEntryObjectBuilder>? _used;

  ResourceQuotaStatusObjectBuilder({
    List<api_core_v1_resource_quota_status_.HardEntryObjectBuilder>? hard,
    List<api_core_v1_resource_quota_status_.UsedEntryObjectBuilder>? used,
  })
      : _hard = hard,
        _used = used;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? hardOffset = _hard == null ? null
        : fbBuilder.writeList(_hard!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? usedOffset = _used == null ? null
        : fbBuilder.writeList(_used!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, hardOffset);
    fbBuilder.addOffset(1, usedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceRequirements {
  ResourceRequirements._(this._bc, this._bcOffset);
  factory ResourceRequirements(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceRequirements> reader = _ResourceRequirementsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<api_core_v1_resource_requirements_.LimitsEntry>? get limits => const fb.ListReader<api_core_v1_resource_requirements_.LimitsEntry>(api_core_v1_resource_requirements_.LimitsEntry.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<api_core_v1_resource_requirements_.RequestsEntry>? get requests => const fb.ListReader<api_core_v1_resource_requirements_.RequestsEntry>(api_core_v1_resource_requirements_.RequestsEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  List<ResourceClaim>? get claims => const fb.ListReader<ResourceClaim>(ResourceClaim.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ResourceRequirements{limits: ${limits}, requests: ${requests}, claims: ${claims}}';
  }
}

class _ResourceRequirementsReader extends fb.TableReader<ResourceRequirements> {
  const _ResourceRequirementsReader();

  @override
  ResourceRequirements createObject(fb.BufferContext bc, int offset) => 
    ResourceRequirements._(bc, offset);
}

class ResourceRequirementsBuilder {
  ResourceRequirementsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addLimitsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRequestsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClaimsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceRequirementsObjectBuilder extends fb.ObjectBuilder {
  final List<api_core_v1_resource_requirements_.LimitsEntryObjectBuilder>? _limits;
  final List<api_core_v1_resource_requirements_.RequestsEntryObjectBuilder>? _requests;
  final List<ResourceClaimObjectBuilder>? _claims;

  ResourceRequirementsObjectBuilder({
    List<api_core_v1_resource_requirements_.LimitsEntryObjectBuilder>? limits,
    List<api_core_v1_resource_requirements_.RequestsEntryObjectBuilder>? requests,
    List<ResourceClaimObjectBuilder>? claims,
  })
      : _limits = limits,
        _requests = requests,
        _claims = claims;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? limitsOffset = _limits == null ? null
        : fbBuilder.writeList(_limits!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? requestsOffset = _requests == null ? null
        : fbBuilder.writeList(_requests!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? claimsOffset = _claims == null ? null
        : fbBuilder.writeList(_claims!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, limitsOffset);
    fbBuilder.addOffset(1, requestsOffset);
    fbBuilder.addOffset(2, claimsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SelinuxOptions {
  SelinuxOptions._(this._bc, this._bcOffset);
  factory SelinuxOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SelinuxOptions> reader = _SelinuxOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get user => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get role => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get level => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'SelinuxOptions{user: ${user}, role: ${role}, type: ${type}, level: ${level}}';
  }
}

class _SelinuxOptionsReader extends fb.TableReader<SelinuxOptions> {
  const _SelinuxOptionsReader();

  @override
  SelinuxOptions createObject(fb.BufferContext bc, int offset) => 
    SelinuxOptions._(bc, offset);
}

class SelinuxOptionsBuilder {
  SelinuxOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addUserOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRoleOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLevelOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SelinuxOptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _user;
  final String? _role;
  final String? _type;
  final String? _level;

  SelinuxOptionsObjectBuilder({
    String? user,
    String? role,
    String? type,
    String? level,
  })
      : _user = user,
        _role = role,
        _type = type,
        _level = level;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userOffset = _user == null ? null
        : fbBuilder.writeString(_user!);
    final int? roleOffset = _role == null ? null
        : fbBuilder.writeString(_role!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? levelOffset = _level == null ? null
        : fbBuilder.writeString(_level!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, userOffset);
    fbBuilder.addOffset(1, roleOffset);
    fbBuilder.addOffset(2, typeOffset);
    fbBuilder.addOffset(3, levelOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScaleIopersistentVolumeSource {
  ScaleIopersistentVolumeSource._(this._bc, this._bcOffset);
  factory ScaleIopersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScaleIopersistentVolumeSource> reader = _ScaleIopersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get gateway => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get system => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  SecretReference? get secretRef => SecretReference.reader.vTableGetNullable(_bc, _bcOffset, 8);
  bool get sslEnabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  String? get protectionDomain => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get storagePool => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get storageMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get volumeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);

  @override
  String toString() {
    return 'ScaleIopersistentVolumeSource{gateway: ${gateway}, system: ${system}, secretRef: ${secretRef}, sslEnabled: ${sslEnabled}, protectionDomain: ${protectionDomain}, storagePool: ${storagePool}, storageMode: ${storageMode}, volumeName: ${volumeName}, fsType: ${fsType}, readOnly: ${readOnly}}';
  }
}

class _ScaleIopersistentVolumeSourceReader extends fb.TableReader<ScaleIopersistentVolumeSource> {
  const _ScaleIopersistentVolumeSourceReader();

  @override
  ScaleIopersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    ScaleIopersistentVolumeSource._(bc, offset);
}

class ScaleIopersistentVolumeSourceBuilder {
  ScaleIopersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addGatewayOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSystemOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSslEnabled(bool? sslEnabled) {
    fbBuilder.addBool(3, sslEnabled);
    return fbBuilder.offset;
  }
  int addProtectionDomainOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStoragePoolOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addStorageModeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addVolumeNameOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(9, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScaleIopersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _gateway;
  final String? _system;
  final SecretReferenceObjectBuilder? _secretRef;
  final bool? _sslEnabled;
  final String? _protectionDomain;
  final String? _storagePool;
  final String? _storageMode;
  final String? _volumeName;
  final String? _fsType;
  final bool? _readOnly;

  ScaleIopersistentVolumeSourceObjectBuilder({
    String? gateway,
    String? system,
    SecretReferenceObjectBuilder? secretRef,
    bool? sslEnabled,
    String? protectionDomain,
    String? storagePool,
    String? storageMode,
    String? volumeName,
    String? fsType,
    bool? readOnly,
  })
      : _gateway = gateway,
        _system = system,
        _secretRef = secretRef,
        _sslEnabled = sslEnabled,
        _protectionDomain = protectionDomain,
        _storagePool = storagePool,
        _storageMode = storageMode,
        _volumeName = volumeName,
        _fsType = fsType,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? gatewayOffset = _gateway == null ? null
        : fbBuilder.writeString(_gateway!);
    final int? systemOffset = _system == null ? null
        : fbBuilder.writeString(_system!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    final int? protectionDomainOffset = _protectionDomain == null ? null
        : fbBuilder.writeString(_protectionDomain!);
    final int? storagePoolOffset = _storagePool == null ? null
        : fbBuilder.writeString(_storagePool!);
    final int? storageModeOffset = _storageMode == null ? null
        : fbBuilder.writeString(_storageMode!);
    final int? volumeNameOffset = _volumeName == null ? null
        : fbBuilder.writeString(_volumeName!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, gatewayOffset);
    fbBuilder.addOffset(1, systemOffset);
    fbBuilder.addOffset(2, secretRefOffset);
    fbBuilder.addBool(3, _sslEnabled);
    fbBuilder.addOffset(4, protectionDomainOffset);
    fbBuilder.addOffset(5, storagePoolOffset);
    fbBuilder.addOffset(6, storageModeOffset);
    fbBuilder.addOffset(7, volumeNameOffset);
    fbBuilder.addOffset(8, fsTypeOffset);
    fbBuilder.addBool(9, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScaleIovolumeSource {
  ScaleIovolumeSource._(this._bc, this._bcOffset);
  factory ScaleIovolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScaleIovolumeSource> reader = _ScaleIovolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get gateway => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get system => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  LocalObjectReference? get secretRef => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 8);
  bool get sslEnabled => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  String? get protectionDomain => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get storagePool => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get storageMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get volumeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);

  @override
  String toString() {
    return 'ScaleIovolumeSource{gateway: ${gateway}, system: ${system}, secretRef: ${secretRef}, sslEnabled: ${sslEnabled}, protectionDomain: ${protectionDomain}, storagePool: ${storagePool}, storageMode: ${storageMode}, volumeName: ${volumeName}, fsType: ${fsType}, readOnly: ${readOnly}}';
  }
}

class _ScaleIovolumeSourceReader extends fb.TableReader<ScaleIovolumeSource> {
  const _ScaleIovolumeSourceReader();

  @override
  ScaleIovolumeSource createObject(fb.BufferContext bc, int offset) => 
    ScaleIovolumeSource._(bc, offset);
}

class ScaleIovolumeSourceBuilder {
  ScaleIovolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addGatewayOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSystemOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSslEnabled(bool? sslEnabled) {
    fbBuilder.addBool(3, sslEnabled);
    return fbBuilder.offset;
  }
  int addProtectionDomainOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStoragePoolOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addStorageModeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addVolumeNameOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(9, readOnly);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScaleIovolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _gateway;
  final String? _system;
  final LocalObjectReferenceObjectBuilder? _secretRef;
  final bool? _sslEnabled;
  final String? _protectionDomain;
  final String? _storagePool;
  final String? _storageMode;
  final String? _volumeName;
  final String? _fsType;
  final bool? _readOnly;

  ScaleIovolumeSourceObjectBuilder({
    String? gateway,
    String? system,
    LocalObjectReferenceObjectBuilder? secretRef,
    bool? sslEnabled,
    String? protectionDomain,
    String? storagePool,
    String? storageMode,
    String? volumeName,
    String? fsType,
    bool? readOnly,
  })
      : _gateway = gateway,
        _system = system,
        _secretRef = secretRef,
        _sslEnabled = sslEnabled,
        _protectionDomain = protectionDomain,
        _storagePool = storagePool,
        _storageMode = storageMode,
        _volumeName = volumeName,
        _fsType = fsType,
        _readOnly = readOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? gatewayOffset = _gateway == null ? null
        : fbBuilder.writeString(_gateway!);
    final int? systemOffset = _system == null ? null
        : fbBuilder.writeString(_system!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    final int? protectionDomainOffset = _protectionDomain == null ? null
        : fbBuilder.writeString(_protectionDomain!);
    final int? storagePoolOffset = _storagePool == null ? null
        : fbBuilder.writeString(_storagePool!);
    final int? storageModeOffset = _storageMode == null ? null
        : fbBuilder.writeString(_storageMode!);
    final int? volumeNameOffset = _volumeName == null ? null
        : fbBuilder.writeString(_volumeName!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, gatewayOffset);
    fbBuilder.addOffset(1, systemOffset);
    fbBuilder.addOffset(2, secretRefOffset);
    fbBuilder.addBool(3, _sslEnabled);
    fbBuilder.addOffset(4, protectionDomainOffset);
    fbBuilder.addOffset(5, storagePoolOffset);
    fbBuilder.addOffset(6, storageModeOffset);
    fbBuilder.addOffset(7, volumeNameOffset);
    fbBuilder.addOffset(8, fsTypeOffset);
    fbBuilder.addBool(9, _readOnly);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScopeSelector {
  ScopeSelector._(this._bc, this._bcOffset);
  factory ScopeSelector(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScopeSelector> reader = _ScopeSelectorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ScopedResourceSelectorRequirement>? get matchExpressions => const fb.ListReader<ScopedResourceSelectorRequirement>(ScopedResourceSelectorRequirement.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ScopeSelector{matchExpressions: ${matchExpressions}}';
  }
}

class _ScopeSelectorReader extends fb.TableReader<ScopeSelector> {
  const _ScopeSelectorReader();

  @override
  ScopeSelector createObject(fb.BufferContext bc, int offset) => 
    ScopeSelector._(bc, offset);
}

class ScopeSelectorBuilder {
  ScopeSelectorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMatchExpressionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScopeSelectorObjectBuilder extends fb.ObjectBuilder {
  final List<ScopedResourceSelectorRequirementObjectBuilder>? _matchExpressions;

  ScopeSelectorObjectBuilder({
    List<ScopedResourceSelectorRequirementObjectBuilder>? matchExpressions,
  })
      : _matchExpressions = matchExpressions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? matchExpressionsOffset = _matchExpressions == null ? null
        : fbBuilder.writeList(_matchExpressions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, matchExpressionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScopedResourceSelectorRequirement {
  ScopedResourceSelectorRequirement._(this._bc, this._bcOffset);
  factory ScopedResourceSelectorRequirement(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScopedResourceSelectorRequirement> reader = _ScopedResourceSelectorRequirementReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get scopeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get $operator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get values => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ScopedResourceSelectorRequirement{scopeName: ${scopeName}, \$operator: ${$operator}, values: ${values}}';
  }
}

class _ScopedResourceSelectorRequirementReader extends fb.TableReader<ScopedResourceSelectorRequirement> {
  const _ScopedResourceSelectorRequirementReader();

  @override
  ScopedResourceSelectorRequirement createObject(fb.BufferContext bc, int offset) => 
    ScopedResourceSelectorRequirement._(bc, offset);
}

class ScopedResourceSelectorRequirementBuilder {
  ScopedResourceSelectorRequirementBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addScopeNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOperatorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScopedResourceSelectorRequirementObjectBuilder extends fb.ObjectBuilder {
  final String? _scopeName;
  final String? _$operator;
  final List<String>? _values;

  ScopedResourceSelectorRequirementObjectBuilder({
    String? scopeName,
    String? $operator,
    List<String>? values,
  })
      : _scopeName = scopeName,
        _$operator = $operator,
        _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? scopeNameOffset = _scopeName == null ? null
        : fbBuilder.writeString(_scopeName!);
    final int? $operatorOffset = _$operator == null ? null
        : fbBuilder.writeString(_$operator!);
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, scopeNameOffset);
    fbBuilder.addOffset(1, $operatorOffset);
    fbBuilder.addOffset(2, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SeccompProfile {
  SeccompProfile._(this._bc, this._bcOffset);
  factory SeccompProfile(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SeccompProfile> reader = _SeccompProfileReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get localhostProfile => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'SeccompProfile{type: ${type}, localhostProfile: ${localhostProfile}}';
  }
}

class _SeccompProfileReader extends fb.TableReader<SeccompProfile> {
  const _SeccompProfileReader();

  @override
  SeccompProfile createObject(fb.BufferContext bc, int offset) => 
    SeccompProfile._(bc, offset);
}

class SeccompProfileBuilder {
  SeccompProfileBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLocalhostProfileOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SeccompProfileObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _localhostProfile;

  SeccompProfileObjectBuilder({
    String? type,
    String? localhostProfile,
  })
      : _type = type,
        _localhostProfile = localhostProfile;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? localhostProfileOffset = _localhostProfile == null ? null
        : fbBuilder.writeString(_localhostProfile!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, localhostProfileOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Secret {
  Secret._(this._bc, this._bcOffset);
  factory Secret(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Secret> reader = _SecretReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  bool get immutable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  List<api_core_v1_secret_.DataEntry>? get data => const fb.ListReader<api_core_v1_secret_.DataEntry>(api_core_v1_secret_.DataEntry.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<api_core_v1_secret_.StringDataEntry>? get stringData => const fb.ListReader<api_core_v1_secret_.StringDataEntry>(api_core_v1_secret_.StringDataEntry.reader).vTableGetNullable(_bc, _bcOffset, 10);
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'Secret{metadata: ${metadata}, immutable: ${immutable}, data: ${data}, stringData: ${stringData}, type: ${type}}';
  }
}

class _SecretReader extends fb.TableReader<Secret> {
  const _SecretReader();

  @override
  Secret createObject(fb.BufferContext bc, int offset) => 
    Secret._(bc, offset);
}

class SecretBuilder {
  SecretBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addImmutable(bool? immutable) {
    fbBuilder.addBool(1, immutable);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStringDataOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SecretObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final bool? _immutable;
  final List<api_core_v1_secret_.DataEntryObjectBuilder>? _data;
  final List<api_core_v1_secret_.StringDataEntryObjectBuilder>? _stringData;
  final String? _type;

  SecretObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    bool? immutable,
    List<api_core_v1_secret_.DataEntryObjectBuilder>? data,
    List<api_core_v1_secret_.StringDataEntryObjectBuilder>? stringData,
    String? type,
  })
      : _metadata = metadata,
        _immutable = immutable,
        _data = data,
        _stringData = stringData,
        _type = type;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeList(_data!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? stringDataOffset = _stringData == null ? null
        : fbBuilder.writeList(_stringData!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addBool(1, _immutable);
    fbBuilder.addOffset(2, dataOffset);
    fbBuilder.addOffset(3, stringDataOffset);
    fbBuilder.addOffset(4, typeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SecretEnvSource {
  SecretEnvSource._(this._bc, this._bcOffset);
  factory SecretEnvSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SecretEnvSource> reader = _SecretEnvSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LocalObjectReference? get localObjectReference => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 4);
  bool get optional => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'SecretEnvSource{localObjectReference: ${localObjectReference}, optional: ${optional}}';
  }
}

class _SecretEnvSourceReader extends fb.TableReader<SecretEnvSource> {
  const _SecretEnvSourceReader();

  @override
  SecretEnvSource createObject(fb.BufferContext bc, int offset) => 
    SecretEnvSource._(bc, offset);
}

class SecretEnvSourceBuilder {
  SecretEnvSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addLocalObjectReferenceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOptional(bool? optional) {
    fbBuilder.addBool(1, optional);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SecretEnvSourceObjectBuilder extends fb.ObjectBuilder {
  final LocalObjectReferenceObjectBuilder? _localObjectReference;
  final bool? _optional;

  SecretEnvSourceObjectBuilder({
    LocalObjectReferenceObjectBuilder? localObjectReference,
    bool? optional,
  })
      : _localObjectReference = localObjectReference,
        _optional = optional;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? localObjectReferenceOffset = _localObjectReference?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, localObjectReferenceOffset);
    fbBuilder.addBool(1, _optional);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SecretKeySelector {
  SecretKeySelector._(this._bc, this._bcOffset);
  factory SecretKeySelector(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SecretKeySelector> reader = _SecretKeySelectorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LocalObjectReference? get localObjectReference => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get optional => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'SecretKeySelector{localObjectReference: ${localObjectReference}, key: ${key}, optional: ${optional}}';
  }
}

class _SecretKeySelectorReader extends fb.TableReader<SecretKeySelector> {
  const _SecretKeySelectorReader();

  @override
  SecretKeySelector createObject(fb.BufferContext bc, int offset) => 
    SecretKeySelector._(bc, offset);
}

class SecretKeySelectorBuilder {
  SecretKeySelectorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addLocalObjectReferenceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOptional(bool? optional) {
    fbBuilder.addBool(2, optional);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SecretKeySelectorObjectBuilder extends fb.ObjectBuilder {
  final LocalObjectReferenceObjectBuilder? _localObjectReference;
  final String? _key;
  final bool? _optional;

  SecretKeySelectorObjectBuilder({
    LocalObjectReferenceObjectBuilder? localObjectReference,
    String? key,
    bool? optional,
  })
      : _localObjectReference = localObjectReference,
        _key = key,
        _optional = optional;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? localObjectReferenceOffset = _localObjectReference?.getOrCreateOffset(fbBuilder);
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, localObjectReferenceOffset);
    fbBuilder.addOffset(1, keyOffset);
    fbBuilder.addBool(2, _optional);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SecretList {
  SecretList._(this._bc, this._bcOffset);
  factory SecretList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SecretList> reader = _SecretListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Secret>? get items => const fb.ListReader<Secret>(Secret.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'SecretList{metadata: ${metadata}, items: ${items}}';
  }
}

class _SecretListReader extends fb.TableReader<SecretList> {
  const _SecretListReader();

  @override
  SecretList createObject(fb.BufferContext bc, int offset) => 
    SecretList._(bc, offset);
}

class SecretListBuilder {
  SecretListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SecretListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<SecretObjectBuilder>? _items;

  SecretListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<SecretObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SecretProjection {
  SecretProjection._(this._bc, this._bcOffset);
  factory SecretProjection(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SecretProjection> reader = _SecretProjectionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LocalObjectReference? get localObjectReference => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<KeyToPath>? get items => const fb.ListReader<KeyToPath>(KeyToPath.reader).vTableGetNullable(_bc, _bcOffset, 6);
  bool get optional => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'SecretProjection{localObjectReference: ${localObjectReference}, items: ${items}, optional: ${optional}}';
  }
}

class _SecretProjectionReader extends fb.TableReader<SecretProjection> {
  const _SecretProjectionReader();

  @override
  SecretProjection createObject(fb.BufferContext bc, int offset) => 
    SecretProjection._(bc, offset);
}

class SecretProjectionBuilder {
  SecretProjectionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addLocalObjectReferenceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOptional(bool? optional) {
    fbBuilder.addBool(2, optional);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SecretProjectionObjectBuilder extends fb.ObjectBuilder {
  final LocalObjectReferenceObjectBuilder? _localObjectReference;
  final List<KeyToPathObjectBuilder>? _items;
  final bool? _optional;

  SecretProjectionObjectBuilder({
    LocalObjectReferenceObjectBuilder? localObjectReference,
    List<KeyToPathObjectBuilder>? items,
    bool? optional,
  })
      : _localObjectReference = localObjectReference,
        _items = items,
        _optional = optional;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? localObjectReferenceOffset = _localObjectReference?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, localObjectReferenceOffset);
    fbBuilder.addOffset(1, itemsOffset);
    fbBuilder.addBool(2, _optional);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SecretReference {
  SecretReference._(this._bc, this._bcOffset);
  factory SecretReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SecretReference> reader = _SecretReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'SecretReference{name: ${name}, namespace: ${namespace}}';
  }
}

class _SecretReferenceReader extends fb.TableReader<SecretReference> {
  const _SecretReferenceReader();

  @override
  SecretReference createObject(fb.BufferContext bc, int offset) => 
    SecretReference._(bc, offset);
}

class SecretReferenceBuilder {
  SecretReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SecretReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _namespace;

  SecretReferenceObjectBuilder({
    String? name,
    String? namespace,
  })
      : _name = name,
        _namespace = namespace;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, namespaceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SecretVolumeSource {
  SecretVolumeSource._(this._bc, this._bcOffset);
  factory SecretVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SecretVolumeSource> reader = _SecretVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get secretName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<KeyToPath>? get items => const fb.ListReader<KeyToPath>(KeyToPath.reader).vTableGetNullable(_bc, _bcOffset, 6);
  int get defaultMode => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  bool get optional => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  @override
  String toString() {
    return 'SecretVolumeSource{secretName: ${secretName}, items: ${items}, defaultMode: ${defaultMode}, optional: ${optional}}';
  }
}

class _SecretVolumeSourceReader extends fb.TableReader<SecretVolumeSource> {
  const _SecretVolumeSourceReader();

  @override
  SecretVolumeSource createObject(fb.BufferContext bc, int offset) => 
    SecretVolumeSource._(bc, offset);
}

class SecretVolumeSourceBuilder {
  SecretVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addSecretNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDefaultMode(int? defaultMode) {
    fbBuilder.addInt32(2, defaultMode);
    return fbBuilder.offset;
  }
  int addOptional(bool? optional) {
    fbBuilder.addBool(3, optional);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SecretVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _secretName;
  final List<KeyToPathObjectBuilder>? _items;
  final int? _defaultMode;
  final bool? _optional;

  SecretVolumeSourceObjectBuilder({
    String? secretName,
    List<KeyToPathObjectBuilder>? items,
    int? defaultMode,
    bool? optional,
  })
      : _secretName = secretName,
        _items = items,
        _defaultMode = defaultMode,
        _optional = optional;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? secretNameOffset = _secretName == null ? null
        : fbBuilder.writeString(_secretName!);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, secretNameOffset);
    fbBuilder.addOffset(1, itemsOffset);
    fbBuilder.addInt32(2, _defaultMode);
    fbBuilder.addBool(3, _optional);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SecurityContext {
  SecurityContext._(this._bc, this._bcOffset);
  factory SecurityContext(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SecurityContext> reader = _SecurityContextReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Capabilities? get capabilities => Capabilities.reader.vTableGetNullable(_bc, _bcOffset, 4);
  bool get privileged => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  SelinuxOptions? get seLinuxOptions => SelinuxOptions.reader.vTableGetNullable(_bc, _bcOffset, 8);
  WindowsSecurityContextOptions? get windowsOptions => WindowsSecurityContextOptions.reader.vTableGetNullable(_bc, _bcOffset, 10);
  int get runAsUser => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get runAsGroup => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  bool get runAsNonRoot => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  bool get readOnlyRootFilesystem => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  bool get allowPrivilegeEscalation => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  String? get procMount => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  SeccompProfile? get seccompProfile => SeccompProfile.reader.vTableGetNullable(_bc, _bcOffset, 24);
  AppArmorProfile? get appArmorProfile => AppArmorProfile.reader.vTableGetNullable(_bc, _bcOffset, 26);

  @override
  String toString() {
    return 'SecurityContext{capabilities: ${capabilities}, privileged: ${privileged}, seLinuxOptions: ${seLinuxOptions}, windowsOptions: ${windowsOptions}, runAsUser: ${runAsUser}, runAsGroup: ${runAsGroup}, runAsNonRoot: ${runAsNonRoot}, readOnlyRootFilesystem: ${readOnlyRootFilesystem}, allowPrivilegeEscalation: ${allowPrivilegeEscalation}, procMount: ${procMount}, seccompProfile: ${seccompProfile}, appArmorProfile: ${appArmorProfile}}';
  }
}

class _SecurityContextReader extends fb.TableReader<SecurityContext> {
  const _SecurityContextReader();

  @override
  SecurityContext createObject(fb.BufferContext bc, int offset) => 
    SecurityContext._(bc, offset);
}

class SecurityContextBuilder {
  SecurityContextBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(12);
  }

  int addCapabilitiesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPrivileged(bool? privileged) {
    fbBuilder.addBool(1, privileged);
    return fbBuilder.offset;
  }
  int addSeLinuxOptionsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addWindowsOptionsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addRunAsUser(int? runAsUser) {
    fbBuilder.addInt64(4, runAsUser);
    return fbBuilder.offset;
  }
  int addRunAsGroup(int? runAsGroup) {
    fbBuilder.addInt64(5, runAsGroup);
    return fbBuilder.offset;
  }
  int addRunAsNonRoot(bool? runAsNonRoot) {
    fbBuilder.addBool(6, runAsNonRoot);
    return fbBuilder.offset;
  }
  int addReadOnlyRootFilesystem(bool? readOnlyRootFilesystem) {
    fbBuilder.addBool(7, readOnlyRootFilesystem);
    return fbBuilder.offset;
  }
  int addAllowPrivilegeEscalation(bool? allowPrivilegeEscalation) {
    fbBuilder.addBool(8, allowPrivilegeEscalation);
    return fbBuilder.offset;
  }
  int addProcMountOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addSeccompProfileOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addAppArmorProfileOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SecurityContextObjectBuilder extends fb.ObjectBuilder {
  final CapabilitiesObjectBuilder? _capabilities;
  final bool? _privileged;
  final SelinuxOptionsObjectBuilder? _seLinuxOptions;
  final WindowsSecurityContextOptionsObjectBuilder? _windowsOptions;
  final int? _runAsUser;
  final int? _runAsGroup;
  final bool? _runAsNonRoot;
  final bool? _readOnlyRootFilesystem;
  final bool? _allowPrivilegeEscalation;
  final String? _procMount;
  final SeccompProfileObjectBuilder? _seccompProfile;
  final AppArmorProfileObjectBuilder? _appArmorProfile;

  SecurityContextObjectBuilder({
    CapabilitiesObjectBuilder? capabilities,
    bool? privileged,
    SelinuxOptionsObjectBuilder? seLinuxOptions,
    WindowsSecurityContextOptionsObjectBuilder? windowsOptions,
    int? runAsUser,
    int? runAsGroup,
    bool? runAsNonRoot,
    bool? readOnlyRootFilesystem,
    bool? allowPrivilegeEscalation,
    String? procMount,
    SeccompProfileObjectBuilder? seccompProfile,
    AppArmorProfileObjectBuilder? appArmorProfile,
  })
      : _capabilities = capabilities,
        _privileged = privileged,
        _seLinuxOptions = seLinuxOptions,
        _windowsOptions = windowsOptions,
        _runAsUser = runAsUser,
        _runAsGroup = runAsGroup,
        _runAsNonRoot = runAsNonRoot,
        _readOnlyRootFilesystem = readOnlyRootFilesystem,
        _allowPrivilegeEscalation = allowPrivilegeEscalation,
        _procMount = procMount,
        _seccompProfile = seccompProfile,
        _appArmorProfile = appArmorProfile;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? capabilitiesOffset = _capabilities?.getOrCreateOffset(fbBuilder);
    final int? seLinuxOptionsOffset = _seLinuxOptions?.getOrCreateOffset(fbBuilder);
    final int? windowsOptionsOffset = _windowsOptions?.getOrCreateOffset(fbBuilder);
    final int? procMountOffset = _procMount == null ? null
        : fbBuilder.writeString(_procMount!);
    final int? seccompProfileOffset = _seccompProfile?.getOrCreateOffset(fbBuilder);
    final int? appArmorProfileOffset = _appArmorProfile?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(12);
    fbBuilder.addOffset(0, capabilitiesOffset);
    fbBuilder.addBool(1, _privileged);
    fbBuilder.addOffset(2, seLinuxOptionsOffset);
    fbBuilder.addOffset(3, windowsOptionsOffset);
    fbBuilder.addInt64(4, _runAsUser);
    fbBuilder.addInt64(5, _runAsGroup);
    fbBuilder.addBool(6, _runAsNonRoot);
    fbBuilder.addBool(7, _readOnlyRootFilesystem);
    fbBuilder.addBool(8, _allowPrivilegeEscalation);
    fbBuilder.addOffset(9, procMountOffset);
    fbBuilder.addOffset(10, seccompProfileOffset);
    fbBuilder.addOffset(11, appArmorProfileOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SerializedReference {
  SerializedReference._(this._bc, this._bcOffset);
  factory SerializedReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SerializedReference> reader = _SerializedReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ObjectReference? get reference => ObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SerializedReference{reference: ${reference}}';
  }
}

class _SerializedReferenceReader extends fb.TableReader<SerializedReference> {
  const _SerializedReferenceReader();

  @override
  SerializedReference createObject(fb.BufferContext bc, int offset) => 
    SerializedReference._(bc, offset);
}

class SerializedReferenceBuilder {
  SerializedReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addReferenceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SerializedReferenceObjectBuilder extends fb.ObjectBuilder {
  final ObjectReferenceObjectBuilder? _reference;

  SerializedReferenceObjectBuilder({
    ObjectReferenceObjectBuilder? reference,
  })
      : _reference = reference;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? referenceOffset = _reference?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, referenceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Service {
  Service._(this._bc, this._bcOffset);
  factory Service(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Service> reader = _ServiceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ServiceSpec? get spec => ServiceSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ServiceStatus? get status => ServiceStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Service{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ServiceReader extends fb.TableReader<Service> {
  const _ServiceReader();

  @override
  Service createObject(fb.BufferContext bc, int offset) => 
    Service._(bc, offset);
}

class ServiceBuilder {
  ServiceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ServiceSpecObjectBuilder? _spec;
  final ServiceStatusObjectBuilder? _status;

  ServiceObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ServiceSpecObjectBuilder? spec,
    ServiceStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceAccount {
  ServiceAccount._(this._bc, this._bcOffset);
  factory ServiceAccount(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceAccount> reader = _ServiceAccountReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ObjectReference>? get secrets => const fb.ListReader<ObjectReference>(ObjectReference.reader).vTableGetNullable(_bc, _bcOffset, 6);
  List<LocalObjectReference>? get imagePullSecrets => const fb.ListReader<LocalObjectReference>(LocalObjectReference.reader).vTableGetNullable(_bc, _bcOffset, 8);
  bool get automountServiceAccountToken => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  @override
  String toString() {
    return 'ServiceAccount{metadata: ${metadata}, secrets: ${secrets}, imagePullSecrets: ${imagePullSecrets}, automountServiceAccountToken: ${automountServiceAccountToken}}';
  }
}

class _ServiceAccountReader extends fb.TableReader<ServiceAccount> {
  const _ServiceAccountReader();

  @override
  ServiceAccount createObject(fb.BufferContext bc, int offset) => 
    ServiceAccount._(bc, offset);
}

class ServiceAccountBuilder {
  ServiceAccountBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSecretsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addImagePullSecretsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAutomountServiceAccountToken(bool? automountServiceAccountToken) {
    fbBuilder.addBool(3, automountServiceAccountToken);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceAccountObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final List<ObjectReferenceObjectBuilder>? _secrets;
  final List<LocalObjectReferenceObjectBuilder>? _imagePullSecrets;
  final bool? _automountServiceAccountToken;

  ServiceAccountObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    List<ObjectReferenceObjectBuilder>? secrets,
    List<LocalObjectReferenceObjectBuilder>? imagePullSecrets,
    bool? automountServiceAccountToken,
  })
      : _metadata = metadata,
        _secrets = secrets,
        _imagePullSecrets = imagePullSecrets,
        _automountServiceAccountToken = automountServiceAccountToken;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? secretsOffset = _secrets == null ? null
        : fbBuilder.writeList(_secrets!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? imagePullSecretsOffset = _imagePullSecrets == null ? null
        : fbBuilder.writeList(_imagePullSecrets!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, secretsOffset);
    fbBuilder.addOffset(2, imagePullSecretsOffset);
    fbBuilder.addBool(3, _automountServiceAccountToken);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceAccountList {
  ServiceAccountList._(this._bc, this._bcOffset);
  factory ServiceAccountList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceAccountList> reader = _ServiceAccountListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ServiceAccount>? get items => const fb.ListReader<ServiceAccount>(ServiceAccount.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ServiceAccountList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ServiceAccountListReader extends fb.TableReader<ServiceAccountList> {
  const _ServiceAccountListReader();

  @override
  ServiceAccountList createObject(fb.BufferContext bc, int offset) => 
    ServiceAccountList._(bc, offset);
}

class ServiceAccountListBuilder {
  ServiceAccountListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceAccountListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ServiceAccountObjectBuilder>? _items;

  ServiceAccountListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ServiceAccountObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceAccountTokenProjection {
  ServiceAccountTokenProjection._(this._bc, this._bcOffset);
  factory ServiceAccountTokenProjection(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceAccountTokenProjection> reader = _ServiceAccountTokenProjectionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get audience => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get expirationSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ServiceAccountTokenProjection{audience: ${audience}, expirationSeconds: ${expirationSeconds}, path: ${path}}';
  }
}

class _ServiceAccountTokenProjectionReader extends fb.TableReader<ServiceAccountTokenProjection> {
  const _ServiceAccountTokenProjectionReader();

  @override
  ServiceAccountTokenProjection createObject(fb.BufferContext bc, int offset) => 
    ServiceAccountTokenProjection._(bc, offset);
}

class ServiceAccountTokenProjectionBuilder {
  ServiceAccountTokenProjectionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addAudienceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addExpirationSeconds(int? expirationSeconds) {
    fbBuilder.addInt64(1, expirationSeconds);
    return fbBuilder.offset;
  }
  int addPathOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceAccountTokenProjectionObjectBuilder extends fb.ObjectBuilder {
  final String? _audience;
  final int? _expirationSeconds;
  final String? _path;

  ServiceAccountTokenProjectionObjectBuilder({
    String? audience,
    int? expirationSeconds,
    String? path,
  })
      : _audience = audience,
        _expirationSeconds = expirationSeconds,
        _path = path;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? audienceOffset = _audience == null ? null
        : fbBuilder.writeString(_audience!);
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, audienceOffset);
    fbBuilder.addInt64(1, _expirationSeconds);
    fbBuilder.addOffset(2, pathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceList {
  ServiceList._(this._bc, this._bcOffset);
  factory ServiceList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceList> reader = _ServiceListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Service>? get items => const fb.ListReader<Service>(Service.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ServiceList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ServiceListReader extends fb.TableReader<ServiceList> {
  const _ServiceListReader();

  @override
  ServiceList createObject(fb.BufferContext bc, int offset) => 
    ServiceList._(bc, offset);
}

class ServiceListBuilder {
  ServiceListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ServiceObjectBuilder>? _items;

  ServiceListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ServiceObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServicePort {
  ServicePort._(this._bc, this._bcOffset);
  factory ServicePort(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServicePort> reader = _ServicePortReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get protocol => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get appProtocol => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get port => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  apimachinery_pkg_util_intstr.IntOrString? get targetPort => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 12);
  int get nodePort => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  @override
  String toString() {
    return 'ServicePort{name: ${name}, protocol: ${protocol}, appProtocol: ${appProtocol}, port: ${port}, targetPort: ${targetPort}, nodePort: ${nodePort}}';
  }
}

class _ServicePortReader extends fb.TableReader<ServicePort> {
  const _ServicePortReader();

  @override
  ServicePort createObject(fb.BufferContext bc, int offset) => 
    ServicePort._(bc, offset);
}

class ServicePortBuilder {
  ServicePortBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addProtocolOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAppProtocolOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPort(int? port) {
    fbBuilder.addInt32(3, port);
    return fbBuilder.offset;
  }
  int addTargetPortOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addNodePort(int? nodePort) {
    fbBuilder.addInt32(5, nodePort);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServicePortObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _protocol;
  final String? _appProtocol;
  final int? _port;
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _targetPort;
  final int? _nodePort;

  ServicePortObjectBuilder({
    String? name,
    String? protocol,
    String? appProtocol,
    int? port,
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? targetPort,
    int? nodePort,
  })
      : _name = name,
        _protocol = protocol,
        _appProtocol = appProtocol,
        _port = port,
        _targetPort = targetPort,
        _nodePort = nodePort;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? protocolOffset = _protocol == null ? null
        : fbBuilder.writeString(_protocol!);
    final int? appProtocolOffset = _appProtocol == null ? null
        : fbBuilder.writeString(_appProtocol!);
    final int? targetPortOffset = _targetPort?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, protocolOffset);
    fbBuilder.addOffset(2, appProtocolOffset);
    fbBuilder.addInt32(3, _port);
    fbBuilder.addOffset(4, targetPortOffset);
    fbBuilder.addInt32(5, _nodePort);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceProxyOptions {
  ServiceProxyOptions._(this._bc, this._bcOffset);
  factory ServiceProxyOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceProxyOptions> reader = _ServiceProxyOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ServiceProxyOptions{path: ${path}}';
  }
}

class _ServiceProxyOptionsReader extends fb.TableReader<ServiceProxyOptions> {
  const _ServiceProxyOptionsReader();

  @override
  ServiceProxyOptions createObject(fb.BufferContext bc, int offset) => 
    ServiceProxyOptions._(bc, offset);
}

class ServiceProxyOptionsBuilder {
  ServiceProxyOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceProxyOptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _path;

  ServiceProxyOptionsObjectBuilder({
    String? path,
  })
      : _path = path;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, pathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceSpec {
  ServiceSpec._(this._bc, this._bcOffset);
  factory ServiceSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceSpec> reader = _ServiceSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ServicePort>? get ports => const fb.ListReader<ServicePort>(ServicePort.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<api_core_v1_service_spec_.SelectorEntry>? get selector => const fb.ListReader<api_core_v1_service_spec_.SelectorEntry>(api_core_v1_service_spec_.SelectorEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  String? get clusterIp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<String>? get clusterIps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  List<String>? get externalIps => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 14);
  String? get sessionAffinity => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  String? get loadBalancerIp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 18);
  List<String>? get loadBalancerSourceRanges => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  String? get externalName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  String? get externalTrafficPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  int get healthCheckNodePort => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 26, 0);
  bool get publishNotReadyAddresses => const fb.BoolReader().vTableGet(_bc, _bcOffset, 28, false);
  SessionAffinityConfig? get sessionAffinityConfig => SessionAffinityConfig.reader.vTableGetNullable(_bc, _bcOffset, 30);
  List<String>? get ipFamilies => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  String? get ipFamilyPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  bool get allocateLoadBalancerNodePorts => const fb.BoolReader().vTableGet(_bc, _bcOffset, 36, false);
  String? get loadBalancerClass => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 38);
  String? get internalTrafficPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  String? get trafficDistribution => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);

  @override
  String toString() {
    return 'ServiceSpec{ports: ${ports}, selector: ${selector}, clusterIp: ${clusterIp}, clusterIps: ${clusterIps}, type: ${type}, externalIps: ${externalIps}, sessionAffinity: ${sessionAffinity}, loadBalancerIp: ${loadBalancerIp}, loadBalancerSourceRanges: ${loadBalancerSourceRanges}, externalName: ${externalName}, externalTrafficPolicy: ${externalTrafficPolicy}, healthCheckNodePort: ${healthCheckNodePort}, publishNotReadyAddresses: ${publishNotReadyAddresses}, sessionAffinityConfig: ${sessionAffinityConfig}, ipFamilies: ${ipFamilies}, ipFamilyPolicy: ${ipFamilyPolicy}, allocateLoadBalancerNodePorts: ${allocateLoadBalancerNodePorts}, loadBalancerClass: ${loadBalancerClass}, internalTrafficPolicy: ${internalTrafficPolicy}, trafficDistribution: ${trafficDistribution}}';
  }
}

class _ServiceSpecReader extends fb.TableReader<ServiceSpec> {
  const _ServiceSpecReader();

  @override
  ServiceSpec createObject(fb.BufferContext bc, int offset) => 
    ServiceSpec._(bc, offset);
}

class ServiceSpecBuilder {
  ServiceSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(20);
  }

  int addPortsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addClusterIpOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClusterIpsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addExternalIpsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSessionAffinityOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addLoadBalancerIpOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addLoadBalancerSourceRangesOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addExternalNameOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addExternalTrafficPolicyOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addHealthCheckNodePort(int? healthCheckNodePort) {
    fbBuilder.addInt32(11, healthCheckNodePort);
    return fbBuilder.offset;
  }
  int addPublishNotReadyAddresses(bool? publishNotReadyAddresses) {
    fbBuilder.addBool(12, publishNotReadyAddresses);
    return fbBuilder.offset;
  }
  int addSessionAffinityConfigOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addIpFamiliesOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addIpFamilyPolicyOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addAllocateLoadBalancerNodePorts(bool? allocateLoadBalancerNodePorts) {
    fbBuilder.addBool(16, allocateLoadBalancerNodePorts);
    return fbBuilder.offset;
  }
  int addLoadBalancerClassOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addInternalTrafficPolicyOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addTrafficDistributionOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceSpecObjectBuilder extends fb.ObjectBuilder {
  final List<ServicePortObjectBuilder>? _ports;
  final List<api_core_v1_service_spec_.SelectorEntryObjectBuilder>? _selector;
  final String? _clusterIp;
  final List<String>? _clusterIps;
  final String? _type;
  final List<String>? _externalIps;
  final String? _sessionAffinity;
  final String? _loadBalancerIp;
  final List<String>? _loadBalancerSourceRanges;
  final String? _externalName;
  final String? _externalTrafficPolicy;
  final int? _healthCheckNodePort;
  final bool? _publishNotReadyAddresses;
  final SessionAffinityConfigObjectBuilder? _sessionAffinityConfig;
  final List<String>? _ipFamilies;
  final String? _ipFamilyPolicy;
  final bool? _allocateLoadBalancerNodePorts;
  final String? _loadBalancerClass;
  final String? _internalTrafficPolicy;
  final String? _trafficDistribution;

  ServiceSpecObjectBuilder({
    List<ServicePortObjectBuilder>? ports,
    List<api_core_v1_service_spec_.SelectorEntryObjectBuilder>? selector,
    String? clusterIp,
    List<String>? clusterIps,
    String? type,
    List<String>? externalIps,
    String? sessionAffinity,
    String? loadBalancerIp,
    List<String>? loadBalancerSourceRanges,
    String? externalName,
    String? externalTrafficPolicy,
    int? healthCheckNodePort,
    bool? publishNotReadyAddresses,
    SessionAffinityConfigObjectBuilder? sessionAffinityConfig,
    List<String>? ipFamilies,
    String? ipFamilyPolicy,
    bool? allocateLoadBalancerNodePorts,
    String? loadBalancerClass,
    String? internalTrafficPolicy,
    String? trafficDistribution,
  })
      : _ports = ports,
        _selector = selector,
        _clusterIp = clusterIp,
        _clusterIps = clusterIps,
        _type = type,
        _externalIps = externalIps,
        _sessionAffinity = sessionAffinity,
        _loadBalancerIp = loadBalancerIp,
        _loadBalancerSourceRanges = loadBalancerSourceRanges,
        _externalName = externalName,
        _externalTrafficPolicy = externalTrafficPolicy,
        _healthCheckNodePort = healthCheckNodePort,
        _publishNotReadyAddresses = publishNotReadyAddresses,
        _sessionAffinityConfig = sessionAffinityConfig,
        _ipFamilies = ipFamilies,
        _ipFamilyPolicy = ipFamilyPolicy,
        _allocateLoadBalancerNodePorts = allocateLoadBalancerNodePorts,
        _loadBalancerClass = loadBalancerClass,
        _internalTrafficPolicy = internalTrafficPolicy,
        _trafficDistribution = trafficDistribution;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? portsOffset = _ports == null ? null
        : fbBuilder.writeList(_ports!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? selectorOffset = _selector == null ? null
        : fbBuilder.writeList(_selector!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? clusterIpOffset = _clusterIp == null ? null
        : fbBuilder.writeString(_clusterIp!);
    final int? clusterIpsOffset = _clusterIps == null ? null
        : fbBuilder.writeList(_clusterIps!.map(fbBuilder.writeString).toList());
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? externalIpsOffset = _externalIps == null ? null
        : fbBuilder.writeList(_externalIps!.map(fbBuilder.writeString).toList());
    final int? sessionAffinityOffset = _sessionAffinity == null ? null
        : fbBuilder.writeString(_sessionAffinity!);
    final int? loadBalancerIpOffset = _loadBalancerIp == null ? null
        : fbBuilder.writeString(_loadBalancerIp!);
    final int? loadBalancerSourceRangesOffset = _loadBalancerSourceRanges == null ? null
        : fbBuilder.writeList(_loadBalancerSourceRanges!.map(fbBuilder.writeString).toList());
    final int? externalNameOffset = _externalName == null ? null
        : fbBuilder.writeString(_externalName!);
    final int? externalTrafficPolicyOffset = _externalTrafficPolicy == null ? null
        : fbBuilder.writeString(_externalTrafficPolicy!);
    final int? sessionAffinityConfigOffset = _sessionAffinityConfig?.getOrCreateOffset(fbBuilder);
    final int? ipFamiliesOffset = _ipFamilies == null ? null
        : fbBuilder.writeList(_ipFamilies!.map(fbBuilder.writeString).toList());
    final int? ipFamilyPolicyOffset = _ipFamilyPolicy == null ? null
        : fbBuilder.writeString(_ipFamilyPolicy!);
    final int? loadBalancerClassOffset = _loadBalancerClass == null ? null
        : fbBuilder.writeString(_loadBalancerClass!);
    final int? internalTrafficPolicyOffset = _internalTrafficPolicy == null ? null
        : fbBuilder.writeString(_internalTrafficPolicy!);
    final int? trafficDistributionOffset = _trafficDistribution == null ? null
        : fbBuilder.writeString(_trafficDistribution!);
    fbBuilder.startTable(20);
    fbBuilder.addOffset(0, portsOffset);
    fbBuilder.addOffset(1, selectorOffset);
    fbBuilder.addOffset(2, clusterIpOffset);
    fbBuilder.addOffset(3, clusterIpsOffset);
    fbBuilder.addOffset(4, typeOffset);
    fbBuilder.addOffset(5, externalIpsOffset);
    fbBuilder.addOffset(6, sessionAffinityOffset);
    fbBuilder.addOffset(7, loadBalancerIpOffset);
    fbBuilder.addOffset(8, loadBalancerSourceRangesOffset);
    fbBuilder.addOffset(9, externalNameOffset);
    fbBuilder.addOffset(10, externalTrafficPolicyOffset);
    fbBuilder.addInt32(11, _healthCheckNodePort);
    fbBuilder.addBool(12, _publishNotReadyAddresses);
    fbBuilder.addOffset(13, sessionAffinityConfigOffset);
    fbBuilder.addOffset(14, ipFamiliesOffset);
    fbBuilder.addOffset(15, ipFamilyPolicyOffset);
    fbBuilder.addBool(16, _allocateLoadBalancerNodePorts);
    fbBuilder.addOffset(17, loadBalancerClassOffset);
    fbBuilder.addOffset(18, internalTrafficPolicyOffset);
    fbBuilder.addOffset(19, trafficDistributionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceStatus {
  ServiceStatus._(this._bc, this._bcOffset);
  factory ServiceStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceStatus> reader = _ServiceStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  LoadBalancerStatus? get loadBalancer => LoadBalancerStatus.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<apimachinery_pkg_apis_meta_v1.Condition>? get conditions => const fb.ListReader<apimachinery_pkg_apis_meta_v1.Condition>(apimachinery_pkg_apis_meta_v1.Condition.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ServiceStatus{loadBalancer: ${loadBalancer}, conditions: ${conditions}}';
  }
}

class _ServiceStatusReader extends fb.TableReader<ServiceStatus> {
  const _ServiceStatusReader();

  @override
  ServiceStatus createObject(fb.BufferContext bc, int offset) => 
    ServiceStatus._(bc, offset);
}

class ServiceStatusBuilder {
  ServiceStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addLoadBalancerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceStatusObjectBuilder extends fb.ObjectBuilder {
  final LoadBalancerStatusObjectBuilder? _loadBalancer;
  final List<apimachinery_pkg_apis_meta_v1.ConditionObjectBuilder>? _conditions;

  ServiceStatusObjectBuilder({
    LoadBalancerStatusObjectBuilder? loadBalancer,
    List<apimachinery_pkg_apis_meta_v1.ConditionObjectBuilder>? conditions,
  })
      : _loadBalancer = loadBalancer,
        _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? loadBalancerOffset = _loadBalancer?.getOrCreateOffset(fbBuilder);
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, loadBalancerOffset);
    fbBuilder.addOffset(1, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SessionAffinityConfig {
  SessionAffinityConfig._(this._bc, this._bcOffset);
  factory SessionAffinityConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SessionAffinityConfig> reader = _SessionAffinityConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ClientIpconfig? get clientIp => ClientIpconfig.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'SessionAffinityConfig{clientIp: ${clientIp}}';
  }
}

class _SessionAffinityConfigReader extends fb.TableReader<SessionAffinityConfig> {
  const _SessionAffinityConfigReader();

  @override
  SessionAffinityConfig createObject(fb.BufferContext bc, int offset) => 
    SessionAffinityConfig._(bc, offset);
}

class SessionAffinityConfigBuilder {
  SessionAffinityConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addClientIpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SessionAffinityConfigObjectBuilder extends fb.ObjectBuilder {
  final ClientIpconfigObjectBuilder? _clientIp;

  SessionAffinityConfigObjectBuilder({
    ClientIpconfigObjectBuilder? clientIp,
  })
      : _clientIp = clientIp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? clientIpOffset = _clientIp?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, clientIpOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SleepAction {
  SleepAction._(this._bc, this._bcOffset);
  factory SleepAction(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SleepAction> reader = _SleepActionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get seconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'SleepAction{seconds: ${seconds}}';
  }
}

class _SleepActionReader extends fb.TableReader<SleepAction> {
  const _SleepActionReader();

  @override
  SleepAction createObject(fb.BufferContext bc, int offset) => 
    SleepAction._(bc, offset);
}

class SleepActionBuilder {
  SleepActionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addSeconds(int? seconds) {
    fbBuilder.addInt64(0, seconds);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SleepActionObjectBuilder extends fb.ObjectBuilder {
  final int? _seconds;

  SleepActionObjectBuilder({
    int? seconds,
  })
      : _seconds = seconds;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt64(0, _seconds);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StorageOspersistentVolumeSource {
  StorageOspersistentVolumeSource._(this._bc, this._bcOffset);
  factory StorageOspersistentVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StorageOspersistentVolumeSource> reader = _StorageOspersistentVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get volumeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get volumeNamespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  ObjectReference? get secretRef => ObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'StorageOspersistentVolumeSource{volumeName: ${volumeName}, volumeNamespace: ${volumeNamespace}, fsType: ${fsType}, readOnly: ${readOnly}, secretRef: ${secretRef}}';
  }
}

class _StorageOspersistentVolumeSourceReader extends fb.TableReader<StorageOspersistentVolumeSource> {
  const _StorageOspersistentVolumeSourceReader();

  @override
  StorageOspersistentVolumeSource createObject(fb.BufferContext bc, int offset) => 
    StorageOspersistentVolumeSource._(bc, offset);
}

class StorageOspersistentVolumeSourceBuilder {
  StorageOspersistentVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addVolumeNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVolumeNamespaceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(3, readOnly);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StorageOspersistentVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _volumeName;
  final String? _volumeNamespace;
  final String? _fsType;
  final bool? _readOnly;
  final ObjectReferenceObjectBuilder? _secretRef;

  StorageOspersistentVolumeSourceObjectBuilder({
    String? volumeName,
    String? volumeNamespace,
    String? fsType,
    bool? readOnly,
    ObjectReferenceObjectBuilder? secretRef,
  })
      : _volumeName = volumeName,
        _volumeNamespace = volumeNamespace,
        _fsType = fsType,
        _readOnly = readOnly,
        _secretRef = secretRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumeNameOffset = _volumeName == null ? null
        : fbBuilder.writeString(_volumeName!);
    final int? volumeNamespaceOffset = _volumeNamespace == null ? null
        : fbBuilder.writeString(_volumeNamespace!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, volumeNameOffset);
    fbBuilder.addOffset(1, volumeNamespaceOffset);
    fbBuilder.addOffset(2, fsTypeOffset);
    fbBuilder.addBool(3, _readOnly);
    fbBuilder.addOffset(4, secretRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StorageOsvolumeSource {
  StorageOsvolumeSource._(this._bc, this._bcOffset);
  factory StorageOsvolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StorageOsvolumeSource> reader = _StorageOsvolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get volumeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get volumeNamespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  LocalObjectReference? get secretRef => LocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'StorageOsvolumeSource{volumeName: ${volumeName}, volumeNamespace: ${volumeNamespace}, fsType: ${fsType}, readOnly: ${readOnly}, secretRef: ${secretRef}}';
  }
}

class _StorageOsvolumeSourceReader extends fb.TableReader<StorageOsvolumeSource> {
  const _StorageOsvolumeSourceReader();

  @override
  StorageOsvolumeSource createObject(fb.BufferContext bc, int offset) => 
    StorageOsvolumeSource._(bc, offset);
}

class StorageOsvolumeSourceBuilder {
  StorageOsvolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addVolumeNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVolumeNamespaceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(3, readOnly);
    return fbBuilder.offset;
  }
  int addSecretRefOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StorageOsvolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _volumeName;
  final String? _volumeNamespace;
  final String? _fsType;
  final bool? _readOnly;
  final LocalObjectReferenceObjectBuilder? _secretRef;

  StorageOsvolumeSourceObjectBuilder({
    String? volumeName,
    String? volumeNamespace,
    String? fsType,
    bool? readOnly,
    LocalObjectReferenceObjectBuilder? secretRef,
  })
      : _volumeName = volumeName,
        _volumeNamespace = volumeNamespace,
        _fsType = fsType,
        _readOnly = readOnly,
        _secretRef = secretRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumeNameOffset = _volumeName == null ? null
        : fbBuilder.writeString(_volumeName!);
    final int? volumeNamespaceOffset = _volumeNamespace == null ? null
        : fbBuilder.writeString(_volumeNamespace!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? secretRefOffset = _secretRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, volumeNameOffset);
    fbBuilder.addOffset(1, volumeNamespaceOffset);
    fbBuilder.addOffset(2, fsTypeOffset);
    fbBuilder.addBool(3, _readOnly);
    fbBuilder.addOffset(4, secretRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Sysctl {
  Sysctl._(this._bc, this._bcOffset);
  factory Sysctl(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Sysctl> reader = _SysctlReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get value => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Sysctl{name: ${name}, value: ${value}}';
  }
}

class _SysctlReader extends fb.TableReader<Sysctl> {
  const _SysctlReader();

  @override
  Sysctl createObject(fb.BufferContext bc, int offset) => 
    Sysctl._(bc, offset);
}

class SysctlBuilder {
  SysctlBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SysctlObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _value;

  SysctlObjectBuilder({
    String? name,
    String? value,
  })
      : _name = name,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? valueOffset = _value == null ? null
        : fbBuilder.writeString(_value!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, valueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TcpsocketAction {
  TcpsocketAction._(this._bc, this._bcOffset);
  factory TcpsocketAction(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TcpsocketAction> reader = _TcpsocketActionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_util_intstr.IntOrString? get port => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get host => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'TcpsocketAction{port: ${port}, host: ${host}}';
  }
}

class _TcpsocketActionReader extends fb.TableReader<TcpsocketAction> {
  const _TcpsocketActionReader();

  @override
  TcpsocketAction createObject(fb.BufferContext bc, int offset) => 
    TcpsocketAction._(bc, offset);
}

class TcpsocketActionBuilder {
  TcpsocketActionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPortOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHostOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TcpsocketActionObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _port;
  final String? _host;

  TcpsocketActionObjectBuilder({
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? port,
    String? host,
  })
      : _port = port,
        _host = host;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? portOffset = _port?.getOrCreateOffset(fbBuilder);
    final int? hostOffset = _host == null ? null
        : fbBuilder.writeString(_host!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, portOffset);
    fbBuilder.addOffset(1, hostOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Taint {
  Taint._(this._bc, this._bcOffset);
  factory Taint(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Taint> reader = _TaintReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get value => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get effect => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.Time? get timeAdded => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Taint{key: ${key}, value: ${value}, effect: ${effect}, timeAdded: ${timeAdded}}';
  }
}

class _TaintReader extends fb.TableReader<Taint> {
  const _TaintReader();

  @override
  Taint createObject(fb.BufferContext bc, int offset) => 
    Taint._(bc, offset);
}

class TaintBuilder {
  TaintBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEffectOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTimeAddedOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TaintObjectBuilder extends fb.ObjectBuilder {
  final String? _key;
  final String? _value;
  final String? _effect;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _timeAdded;

  TaintObjectBuilder({
    String? key,
    String? value,
    String? effect,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? timeAdded,
  })
      : _key = key,
        _value = value,
        _effect = effect,
        _timeAdded = timeAdded;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    final int? valueOffset = _value == null ? null
        : fbBuilder.writeString(_value!);
    final int? effectOffset = _effect == null ? null
        : fbBuilder.writeString(_effect!);
    final int? timeAddedOffset = _timeAdded?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, keyOffset);
    fbBuilder.addOffset(1, valueOffset);
    fbBuilder.addOffset(2, effectOffset);
    fbBuilder.addOffset(3, timeAddedOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Toleration {
  Toleration._(this._bc, this._bcOffset);
  factory Toleration(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Toleration> reader = _TolerationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get $operator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get value => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get effect => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  int get tolerationSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);

  @override
  String toString() {
    return 'Toleration{key: ${key}, \$operator: ${$operator}, value: ${value}, effect: ${effect}, tolerationSeconds: ${tolerationSeconds}}';
  }
}

class _TolerationReader extends fb.TableReader<Toleration> {
  const _TolerationReader();

  @override
  Toleration createObject(fb.BufferContext bc, int offset) => 
    Toleration._(bc, offset);
}

class TolerationBuilder {
  TolerationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOperatorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addValueOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addEffectOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTolerationSeconds(int? tolerationSeconds) {
    fbBuilder.addInt64(4, tolerationSeconds);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TolerationObjectBuilder extends fb.ObjectBuilder {
  final String? _key;
  final String? _$operator;
  final String? _value;
  final String? _effect;
  final int? _tolerationSeconds;

  TolerationObjectBuilder({
    String? key,
    String? $operator,
    String? value,
    String? effect,
    int? tolerationSeconds,
  })
      : _key = key,
        _$operator = $operator,
        _value = value,
        _effect = effect,
        _tolerationSeconds = tolerationSeconds;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    final int? $operatorOffset = _$operator == null ? null
        : fbBuilder.writeString(_$operator!);
    final int? valueOffset = _value == null ? null
        : fbBuilder.writeString(_value!);
    final int? effectOffset = _effect == null ? null
        : fbBuilder.writeString(_effect!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, keyOffset);
    fbBuilder.addOffset(1, $operatorOffset);
    fbBuilder.addOffset(2, valueOffset);
    fbBuilder.addOffset(3, effectOffset);
    fbBuilder.addInt64(4, _tolerationSeconds);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TopologySelectorLabelRequirement {
  TopologySelectorLabelRequirement._(this._bc, this._bcOffset);
  factory TopologySelectorLabelRequirement(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TopologySelectorLabelRequirement> reader = _TopologySelectorLabelRequirementReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get values => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'TopologySelectorLabelRequirement{key: ${key}, values: ${values}}';
  }
}

class _TopologySelectorLabelRequirementReader extends fb.TableReader<TopologySelectorLabelRequirement> {
  const _TopologySelectorLabelRequirementReader();

  @override
  TopologySelectorLabelRequirement createObject(fb.BufferContext bc, int offset) => 
    TopologySelectorLabelRequirement._(bc, offset);
}

class TopologySelectorLabelRequirementBuilder {
  TopologySelectorLabelRequirementBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TopologySelectorLabelRequirementObjectBuilder extends fb.ObjectBuilder {
  final String? _key;
  final List<String>? _values;

  TopologySelectorLabelRequirementObjectBuilder({
    String? key,
    List<String>? values,
  })
      : _key = key,
        _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, keyOffset);
    fbBuilder.addOffset(1, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TopologySelectorTerm {
  TopologySelectorTerm._(this._bc, this._bcOffset);
  factory TopologySelectorTerm(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TopologySelectorTerm> reader = _TopologySelectorTermReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<TopologySelectorLabelRequirement>? get matchLabelExpressions => const fb.ListReader<TopologySelectorLabelRequirement>(TopologySelectorLabelRequirement.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'TopologySelectorTerm{matchLabelExpressions: ${matchLabelExpressions}}';
  }
}

class _TopologySelectorTermReader extends fb.TableReader<TopologySelectorTerm> {
  const _TopologySelectorTermReader();

  @override
  TopologySelectorTerm createObject(fb.BufferContext bc, int offset) => 
    TopologySelectorTerm._(bc, offset);
}

class TopologySelectorTermBuilder {
  TopologySelectorTermBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMatchLabelExpressionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TopologySelectorTermObjectBuilder extends fb.ObjectBuilder {
  final List<TopologySelectorLabelRequirementObjectBuilder>? _matchLabelExpressions;

  TopologySelectorTermObjectBuilder({
    List<TopologySelectorLabelRequirementObjectBuilder>? matchLabelExpressions,
  })
      : _matchLabelExpressions = matchLabelExpressions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? matchLabelExpressionsOffset = _matchLabelExpressions == null ? null
        : fbBuilder.writeList(_matchLabelExpressions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, matchLabelExpressionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TopologySpreadConstraint {
  TopologySpreadConstraint._(this._bc, this._bcOffset);
  factory TopologySpreadConstraint(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TopologySpreadConstraint> reader = _TopologySpreadConstraintReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get maxSkew => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get topologyKey => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get whenUnsatisfiable => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get labelSelector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 10);
  int get minDomains => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  String? get nodeAffinityPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get nodeTaintsPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  List<String>? get matchLabelKeys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'TopologySpreadConstraint{maxSkew: ${maxSkew}, topologyKey: ${topologyKey}, whenUnsatisfiable: ${whenUnsatisfiable}, labelSelector: ${labelSelector}, minDomains: ${minDomains}, nodeAffinityPolicy: ${nodeAffinityPolicy}, nodeTaintsPolicy: ${nodeTaintsPolicy}, matchLabelKeys: ${matchLabelKeys}}';
  }
}

class _TopologySpreadConstraintReader extends fb.TableReader<TopologySpreadConstraint> {
  const _TopologySpreadConstraintReader();

  @override
  TopologySpreadConstraint createObject(fb.BufferContext bc, int offset) => 
    TopologySpreadConstraint._(bc, offset);
}

class TopologySpreadConstraintBuilder {
  TopologySpreadConstraintBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addMaxSkew(int? maxSkew) {
    fbBuilder.addInt32(0, maxSkew);
    return fbBuilder.offset;
  }
  int addTopologyKeyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addWhenUnsatisfiableOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLabelSelectorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMinDomains(int? minDomains) {
    fbBuilder.addInt32(4, minDomains);
    return fbBuilder.offset;
  }
  int addNodeAffinityPolicyOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNodeTaintsPolicyOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMatchLabelKeysOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TopologySpreadConstraintObjectBuilder extends fb.ObjectBuilder {
  final int? _maxSkew;
  final String? _topologyKey;
  final String? _whenUnsatisfiable;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _labelSelector;
  final int? _minDomains;
  final String? _nodeAffinityPolicy;
  final String? _nodeTaintsPolicy;
  final List<String>? _matchLabelKeys;

  TopologySpreadConstraintObjectBuilder({
    int? maxSkew,
    String? topologyKey,
    String? whenUnsatisfiable,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? labelSelector,
    int? minDomains,
    String? nodeAffinityPolicy,
    String? nodeTaintsPolicy,
    List<String>? matchLabelKeys,
  })
      : _maxSkew = maxSkew,
        _topologyKey = topologyKey,
        _whenUnsatisfiable = whenUnsatisfiable,
        _labelSelector = labelSelector,
        _minDomains = minDomains,
        _nodeAffinityPolicy = nodeAffinityPolicy,
        _nodeTaintsPolicy = nodeTaintsPolicy,
        _matchLabelKeys = matchLabelKeys;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? topologyKeyOffset = _topologyKey == null ? null
        : fbBuilder.writeString(_topologyKey!);
    final int? whenUnsatisfiableOffset = _whenUnsatisfiable == null ? null
        : fbBuilder.writeString(_whenUnsatisfiable!);
    final int? labelSelectorOffset = _labelSelector?.getOrCreateOffset(fbBuilder);
    final int? nodeAffinityPolicyOffset = _nodeAffinityPolicy == null ? null
        : fbBuilder.writeString(_nodeAffinityPolicy!);
    final int? nodeTaintsPolicyOffset = _nodeTaintsPolicy == null ? null
        : fbBuilder.writeString(_nodeTaintsPolicy!);
    final int? matchLabelKeysOffset = _matchLabelKeys == null ? null
        : fbBuilder.writeList(_matchLabelKeys!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(8);
    fbBuilder.addInt32(0, _maxSkew);
    fbBuilder.addOffset(1, topologyKeyOffset);
    fbBuilder.addOffset(2, whenUnsatisfiableOffset);
    fbBuilder.addOffset(3, labelSelectorOffset);
    fbBuilder.addInt32(4, _minDomains);
    fbBuilder.addOffset(5, nodeAffinityPolicyOffset);
    fbBuilder.addOffset(6, nodeTaintsPolicyOffset);
    fbBuilder.addOffset(7, matchLabelKeysOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TypedLocalObjectReference {
  TypedLocalObjectReference._(this._bc, this._bcOffset);
  factory TypedLocalObjectReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TypedLocalObjectReference> reader = _TypedLocalObjectReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get apiGroup => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'TypedLocalObjectReference{apiGroup: ${apiGroup}, kind: ${kind}, name: ${name}}';
  }
}

class _TypedLocalObjectReferenceReader extends fb.TableReader<TypedLocalObjectReference> {
  const _TypedLocalObjectReferenceReader();

  @override
  TypedLocalObjectReference createObject(fb.BufferContext bc, int offset) => 
    TypedLocalObjectReference._(bc, offset);
}

class TypedLocalObjectReferenceBuilder {
  TypedLocalObjectReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addApiGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TypedLocalObjectReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _apiGroup;
  final String? _kind;
  final String? _name;

  TypedLocalObjectReferenceObjectBuilder({
    String? apiGroup,
    String? kind,
    String? name,
  })
      : _apiGroup = apiGroup,
        _kind = kind,
        _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiGroupOffset = _apiGroup == null ? null
        : fbBuilder.writeString(_apiGroup!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, apiGroupOffset);
    fbBuilder.addOffset(1, kindOffset);
    fbBuilder.addOffset(2, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TypedObjectReference {
  TypedObjectReference._(this._bc, this._bcOffset);
  factory TypedObjectReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TypedObjectReference> reader = _TypedObjectReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get apiGroup => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'TypedObjectReference{apiGroup: ${apiGroup}, kind: ${kind}, name: ${name}, namespace: ${namespace}}';
  }
}

class _TypedObjectReferenceReader extends fb.TableReader<TypedObjectReference> {
  const _TypedObjectReferenceReader();

  @override
  TypedObjectReference createObject(fb.BufferContext bc, int offset) => 
    TypedObjectReference._(bc, offset);
}

class TypedObjectReferenceBuilder {
  TypedObjectReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addApiGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TypedObjectReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _apiGroup;
  final String? _kind;
  final String? _name;
  final String? _namespace;

  TypedObjectReferenceObjectBuilder({
    String? apiGroup,
    String? kind,
    String? name,
    String? namespace,
  })
      : _apiGroup = apiGroup,
        _kind = kind,
        _name = name,
        _namespace = namespace;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiGroupOffset = _apiGroup == null ? null
        : fbBuilder.writeString(_apiGroup!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, apiGroupOffset);
    fbBuilder.addOffset(1, kindOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, namespaceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Volume {
  Volume._(this._bc, this._bcOffset);
  factory Volume(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Volume> reader = _VolumeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  VolumeSource? get volumeSource => VolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Volume{name: ${name}, volumeSource: ${volumeSource}}';
  }
}

class _VolumeReader extends fb.TableReader<Volume> {
  const _VolumeReader();

  @override
  Volume createObject(fb.BufferContext bc, int offset) => 
    Volume._(bc, offset);
}

class VolumeBuilder {
  VolumeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVolumeSourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final VolumeSourceObjectBuilder? _volumeSource;

  VolumeObjectBuilder({
    String? name,
    VolumeSourceObjectBuilder? volumeSource,
  })
      : _name = name,
        _volumeSource = volumeSource;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? volumeSourceOffset = _volumeSource?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, volumeSourceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeDevice {
  VolumeDevice._(this._bc, this._bcOffset);
  factory VolumeDevice(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeDevice> reader = _VolumeDeviceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get devicePath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VolumeDevice{name: ${name}, devicePath: ${devicePath}}';
  }
}

class _VolumeDeviceReader extends fb.TableReader<VolumeDevice> {
  const _VolumeDeviceReader();

  @override
  VolumeDevice createObject(fb.BufferContext bc, int offset) => 
    VolumeDevice._(bc, offset);
}

class VolumeDeviceBuilder {
  VolumeDeviceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDevicePathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeDeviceObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _devicePath;

  VolumeDeviceObjectBuilder({
    String? name,
    String? devicePath,
  })
      : _name = name,
        _devicePath = devicePath;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? devicePathOffset = _devicePath == null ? null
        : fbBuilder.writeString(_devicePath!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, devicePathOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeMount {
  VolumeMount._(this._bc, this._bcOffset);
  factory VolumeMount(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeMount> reader = _VolumeMountReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  String? get recursiveReadOnly => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get mountPath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get subPath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get mountPropagation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get subPathExpr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'VolumeMount{name: ${name}, readOnly: ${readOnly}, recursiveReadOnly: ${recursiveReadOnly}, mountPath: ${mountPath}, subPath: ${subPath}, mountPropagation: ${mountPropagation}, subPathExpr: ${subPathExpr}}';
  }
}

class _VolumeMountReader extends fb.TableReader<VolumeMount> {
  const _VolumeMountReader();

  @override
  VolumeMount createObject(fb.BufferContext bc, int offset) => 
    VolumeMount._(bc, offset);
}

class VolumeMountBuilder {
  VolumeMountBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(1, readOnly);
    return fbBuilder.offset;
  }
  int addRecursiveReadOnlyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMountPathOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSubPathOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMountPropagationOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSubPathExprOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeMountObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final bool? _readOnly;
  final String? _recursiveReadOnly;
  final String? _mountPath;
  final String? _subPath;
  final String? _mountPropagation;
  final String? _subPathExpr;

  VolumeMountObjectBuilder({
    String? name,
    bool? readOnly,
    String? recursiveReadOnly,
    String? mountPath,
    String? subPath,
    String? mountPropagation,
    String? subPathExpr,
  })
      : _name = name,
        _readOnly = readOnly,
        _recursiveReadOnly = recursiveReadOnly,
        _mountPath = mountPath,
        _subPath = subPath,
        _mountPropagation = mountPropagation,
        _subPathExpr = subPathExpr;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? recursiveReadOnlyOffset = _recursiveReadOnly == null ? null
        : fbBuilder.writeString(_recursiveReadOnly!);
    final int? mountPathOffset = _mountPath == null ? null
        : fbBuilder.writeString(_mountPath!);
    final int? subPathOffset = _subPath == null ? null
        : fbBuilder.writeString(_subPath!);
    final int? mountPropagationOffset = _mountPropagation == null ? null
        : fbBuilder.writeString(_mountPropagation!);
    final int? subPathExprOffset = _subPathExpr == null ? null
        : fbBuilder.writeString(_subPathExpr!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addBool(1, _readOnly);
    fbBuilder.addOffset(2, recursiveReadOnlyOffset);
    fbBuilder.addOffset(3, mountPathOffset);
    fbBuilder.addOffset(4, subPathOffset);
    fbBuilder.addOffset(5, mountPropagationOffset);
    fbBuilder.addOffset(6, subPathExprOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeMountStatus {
  VolumeMountStatus._(this._bc, this._bcOffset);
  factory VolumeMountStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeMountStatus> reader = _VolumeMountStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get mountPath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get readOnly => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  String? get recursiveReadOnly => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'VolumeMountStatus{name: ${name}, mountPath: ${mountPath}, readOnly: ${readOnly}, recursiveReadOnly: ${recursiveReadOnly}}';
  }
}

class _VolumeMountStatusReader extends fb.TableReader<VolumeMountStatus> {
  const _VolumeMountStatusReader();

  @override
  VolumeMountStatus createObject(fb.BufferContext bc, int offset) => 
    VolumeMountStatus._(bc, offset);
}

class VolumeMountStatusBuilder {
  VolumeMountStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMountPathOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReadOnly(bool? readOnly) {
    fbBuilder.addBool(2, readOnly);
    return fbBuilder.offset;
  }
  int addRecursiveReadOnlyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeMountStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _mountPath;
  final bool? _readOnly;
  final String? _recursiveReadOnly;

  VolumeMountStatusObjectBuilder({
    String? name,
    String? mountPath,
    bool? readOnly,
    String? recursiveReadOnly,
  })
      : _name = name,
        _mountPath = mountPath,
        _readOnly = readOnly,
        _recursiveReadOnly = recursiveReadOnly;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? mountPathOffset = _mountPath == null ? null
        : fbBuilder.writeString(_mountPath!);
    final int? recursiveReadOnlyOffset = _recursiveReadOnly == null ? null
        : fbBuilder.writeString(_recursiveReadOnly!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, mountPathOffset);
    fbBuilder.addBool(2, _readOnly);
    fbBuilder.addOffset(3, recursiveReadOnlyOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeNodeAffinity {
  VolumeNodeAffinity._(this._bc, this._bcOffset);
  factory VolumeNodeAffinity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeNodeAffinity> reader = _VolumeNodeAffinityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  NodeSelector? get $required => NodeSelector.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'VolumeNodeAffinity{\$required: ${$required}}';
  }
}

class _VolumeNodeAffinityReader extends fb.TableReader<VolumeNodeAffinity> {
  const _VolumeNodeAffinityReader();

  @override
  VolumeNodeAffinity createObject(fb.BufferContext bc, int offset) => 
    VolumeNodeAffinity._(bc, offset);
}

class VolumeNodeAffinityBuilder {
  VolumeNodeAffinityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRequiredOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeNodeAffinityObjectBuilder extends fb.ObjectBuilder {
  final NodeSelectorObjectBuilder? _$required;

  VolumeNodeAffinityObjectBuilder({
    NodeSelectorObjectBuilder? $required,
  })
      : _$required = $required;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? $requiredOffset = _$required?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, $requiredOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeProjection {
  VolumeProjection._(this._bc, this._bcOffset);
  factory VolumeProjection(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeProjection> reader = _VolumeProjectionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  SecretProjection? get secret => SecretProjection.reader.vTableGetNullable(_bc, _bcOffset, 4);
  DownwardApiprojection? get downwardApi => DownwardApiprojection.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ConfigMapProjection? get configMap => ConfigMapProjection.reader.vTableGetNullable(_bc, _bcOffset, 8);
  ServiceAccountTokenProjection? get serviceAccountToken => ServiceAccountTokenProjection.reader.vTableGetNullable(_bc, _bcOffset, 10);
  ClusterTrustBundleProjection? get clusterTrustBundle => ClusterTrustBundleProjection.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'VolumeProjection{secret: ${secret}, downwardApi: ${downwardApi}, configMap: ${configMap}, serviceAccountToken: ${serviceAccountToken}, clusterTrustBundle: ${clusterTrustBundle}}';
  }
}

class _VolumeProjectionReader extends fb.TableReader<VolumeProjection> {
  const _VolumeProjectionReader();

  @override
  VolumeProjection createObject(fb.BufferContext bc, int offset) => 
    VolumeProjection._(bc, offset);
}

class VolumeProjectionBuilder {
  VolumeProjectionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addSecretOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDownwardApiOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addConfigMapOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addServiceAccountTokenOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addClusterTrustBundleOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeProjectionObjectBuilder extends fb.ObjectBuilder {
  final SecretProjectionObjectBuilder? _secret;
  final DownwardApiprojectionObjectBuilder? _downwardApi;
  final ConfigMapProjectionObjectBuilder? _configMap;
  final ServiceAccountTokenProjectionObjectBuilder? _serviceAccountToken;
  final ClusterTrustBundleProjectionObjectBuilder? _clusterTrustBundle;

  VolumeProjectionObjectBuilder({
    SecretProjectionObjectBuilder? secret,
    DownwardApiprojectionObjectBuilder? downwardApi,
    ConfigMapProjectionObjectBuilder? configMap,
    ServiceAccountTokenProjectionObjectBuilder? serviceAccountToken,
    ClusterTrustBundleProjectionObjectBuilder? clusterTrustBundle,
  })
      : _secret = secret,
        _downwardApi = downwardApi,
        _configMap = configMap,
        _serviceAccountToken = serviceAccountToken,
        _clusterTrustBundle = clusterTrustBundle;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? secretOffset = _secret?.getOrCreateOffset(fbBuilder);
    final int? downwardApiOffset = _downwardApi?.getOrCreateOffset(fbBuilder);
    final int? configMapOffset = _configMap?.getOrCreateOffset(fbBuilder);
    final int? serviceAccountTokenOffset = _serviceAccountToken?.getOrCreateOffset(fbBuilder);
    final int? clusterTrustBundleOffset = _clusterTrustBundle?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, secretOffset);
    fbBuilder.addOffset(1, downwardApiOffset);
    fbBuilder.addOffset(2, configMapOffset);
    fbBuilder.addOffset(3, serviceAccountTokenOffset);
    fbBuilder.addOffset(4, clusterTrustBundleOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeResourceRequirements {
  VolumeResourceRequirements._(this._bc, this._bcOffset);
  factory VolumeResourceRequirements(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeResourceRequirements> reader = _VolumeResourceRequirementsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<api_core_v1_volume_resource_requirements_.LimitsEntry>? get limits => const fb.ListReader<api_core_v1_volume_resource_requirements_.LimitsEntry>(api_core_v1_volume_resource_requirements_.LimitsEntry.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<api_core_v1_volume_resource_requirements_.RequestsEntry>? get requests => const fb.ListReader<api_core_v1_volume_resource_requirements_.RequestsEntry>(api_core_v1_volume_resource_requirements_.RequestsEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VolumeResourceRequirements{limits: ${limits}, requests: ${requests}}';
  }
}

class _VolumeResourceRequirementsReader extends fb.TableReader<VolumeResourceRequirements> {
  const _VolumeResourceRequirementsReader();

  @override
  VolumeResourceRequirements createObject(fb.BufferContext bc, int offset) => 
    VolumeResourceRequirements._(bc, offset);
}

class VolumeResourceRequirementsBuilder {
  VolumeResourceRequirementsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addLimitsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRequestsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeResourceRequirementsObjectBuilder extends fb.ObjectBuilder {
  final List<api_core_v1_volume_resource_requirements_.LimitsEntryObjectBuilder>? _limits;
  final List<api_core_v1_volume_resource_requirements_.RequestsEntryObjectBuilder>? _requests;

  VolumeResourceRequirementsObjectBuilder({
    List<api_core_v1_volume_resource_requirements_.LimitsEntryObjectBuilder>? limits,
    List<api_core_v1_volume_resource_requirements_.RequestsEntryObjectBuilder>? requests,
  })
      : _limits = limits,
        _requests = requests;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? limitsOffset = _limits == null ? null
        : fbBuilder.writeList(_limits!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? requestsOffset = _requests == null ? null
        : fbBuilder.writeList(_requests!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, limitsOffset);
    fbBuilder.addOffset(1, requestsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeSource {
  VolumeSource._(this._bc, this._bcOffset);
  factory VolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeSource> reader = _VolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  HostPathVolumeSource? get hostPath => HostPathVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 4);
  EmptyDirVolumeSource? get emptyDir => EmptyDirVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 6);
  GcepersistentDiskVolumeSource? get gcePersistentDisk => GcepersistentDiskVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 8);
  AwselasticBlockStoreVolumeSource? get awsElasticBlockStore => AwselasticBlockStoreVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 10);
  GitRepoVolumeSource? get gitRepo => GitRepoVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 12);
  SecretVolumeSource? get secret => SecretVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 14);
  NfsvolumeSource? get nfs => NfsvolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 16);
  IscsivolumeSource? get iscsi => IscsivolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 18);
  GlusterfsVolumeSource? get glusterfs => GlusterfsVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 20);
  PersistentVolumeClaimVolumeSource? get persistentVolumeClaim => PersistentVolumeClaimVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 22);
  RbdvolumeSource? get rbd => RbdvolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 24);
  FlexVolumeSource? get flexVolume => FlexVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 26);
  CinderVolumeSource? get cinder => CinderVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 28);
  CephFsvolumeSource? get cephfs => CephFsvolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 30);
  FlockerVolumeSource? get flocker => FlockerVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 32);
  DownwardApivolumeSource? get downwardApi => DownwardApivolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 34);
  FcvolumeSource? get fc => FcvolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 36);
  AzureFileVolumeSource? get azureFile => AzureFileVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 38);
  ConfigMapVolumeSource? get configMap => ConfigMapVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 40);
  VsphereVirtualDiskVolumeSource? get vsphereVolume => VsphereVirtualDiskVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 42);
  QuobyteVolumeSource? get quobyte => QuobyteVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 44);
  AzureDiskVolumeSource? get azureDisk => AzureDiskVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 46);
  PhotonPersistentDiskVolumeSource? get photonPersistentDisk => PhotonPersistentDiskVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 48);
  ProjectedVolumeSource? get projected => ProjectedVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 50);
  PortworxVolumeSource? get portworxVolume => PortworxVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 52);
  ScaleIovolumeSource? get scaleIo => ScaleIovolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 54);
  StorageOsvolumeSource? get storageos => StorageOsvolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 56);
  CsivolumeSource? get csi => CsivolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 58);
  EphemeralVolumeSource? get ephemeral => EphemeralVolumeSource.reader.vTableGetNullable(_bc, _bcOffset, 60);

  @override
  String toString() {
    return 'VolumeSource{hostPath: ${hostPath}, emptyDir: ${emptyDir}, gcePersistentDisk: ${gcePersistentDisk}, awsElasticBlockStore: ${awsElasticBlockStore}, gitRepo: ${gitRepo}, secret: ${secret}, nfs: ${nfs}, iscsi: ${iscsi}, glusterfs: ${glusterfs}, persistentVolumeClaim: ${persistentVolumeClaim}, rbd: ${rbd}, flexVolume: ${flexVolume}, cinder: ${cinder}, cephfs: ${cephfs}, flocker: ${flocker}, downwardApi: ${downwardApi}, fc: ${fc}, azureFile: ${azureFile}, configMap: ${configMap}, vsphereVolume: ${vsphereVolume}, quobyte: ${quobyte}, azureDisk: ${azureDisk}, photonPersistentDisk: ${photonPersistentDisk}, projected: ${projected}, portworxVolume: ${portworxVolume}, scaleIo: ${scaleIo}, storageos: ${storageos}, csi: ${csi}, ephemeral: ${ephemeral}}';
  }
}

class _VolumeSourceReader extends fb.TableReader<VolumeSource> {
  const _VolumeSourceReader();

  @override
  VolumeSource createObject(fb.BufferContext bc, int offset) => 
    VolumeSource._(bc, offset);
}

class VolumeSourceBuilder {
  VolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(29);
  }

  int addHostPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addEmptyDirOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addGcePersistentDiskOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAwsElasticBlockStoreOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addGitRepoOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addSecretOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNfsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addIscsiOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addGlusterfsOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPersistentVolumeClaimOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addRbdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addFlexVolumeOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addCinderOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addCephfsOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addFlockerOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addDownwardApiOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addFcOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addAzureFileOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addConfigMapOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addVsphereVolumeOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addQuobyteOffset(int? offset) {
    fbBuilder.addOffset(20, offset);
    return fbBuilder.offset;
  }
  int addAzureDiskOffset(int? offset) {
    fbBuilder.addOffset(21, offset);
    return fbBuilder.offset;
  }
  int addPhotonPersistentDiskOffset(int? offset) {
    fbBuilder.addOffset(22, offset);
    return fbBuilder.offset;
  }
  int addProjectedOffset(int? offset) {
    fbBuilder.addOffset(23, offset);
    return fbBuilder.offset;
  }
  int addPortworxVolumeOffset(int? offset) {
    fbBuilder.addOffset(24, offset);
    return fbBuilder.offset;
  }
  int addScaleIoOffset(int? offset) {
    fbBuilder.addOffset(25, offset);
    return fbBuilder.offset;
  }
  int addStorageosOffset(int? offset) {
    fbBuilder.addOffset(26, offset);
    return fbBuilder.offset;
  }
  int addCsiOffset(int? offset) {
    fbBuilder.addOffset(27, offset);
    return fbBuilder.offset;
  }
  int addEphemeralOffset(int? offset) {
    fbBuilder.addOffset(28, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final HostPathVolumeSourceObjectBuilder? _hostPath;
  final EmptyDirVolumeSourceObjectBuilder? _emptyDir;
  final GcepersistentDiskVolumeSourceObjectBuilder? _gcePersistentDisk;
  final AwselasticBlockStoreVolumeSourceObjectBuilder? _awsElasticBlockStore;
  final GitRepoVolumeSourceObjectBuilder? _gitRepo;
  final SecretVolumeSourceObjectBuilder? _secret;
  final NfsvolumeSourceObjectBuilder? _nfs;
  final IscsivolumeSourceObjectBuilder? _iscsi;
  final GlusterfsVolumeSourceObjectBuilder? _glusterfs;
  final PersistentVolumeClaimVolumeSourceObjectBuilder? _persistentVolumeClaim;
  final RbdvolumeSourceObjectBuilder? _rbd;
  final FlexVolumeSourceObjectBuilder? _flexVolume;
  final CinderVolumeSourceObjectBuilder? _cinder;
  final CephFsvolumeSourceObjectBuilder? _cephfs;
  final FlockerVolumeSourceObjectBuilder? _flocker;
  final DownwardApivolumeSourceObjectBuilder? _downwardApi;
  final FcvolumeSourceObjectBuilder? _fc;
  final AzureFileVolumeSourceObjectBuilder? _azureFile;
  final ConfigMapVolumeSourceObjectBuilder? _configMap;
  final VsphereVirtualDiskVolumeSourceObjectBuilder? _vsphereVolume;
  final QuobyteVolumeSourceObjectBuilder? _quobyte;
  final AzureDiskVolumeSourceObjectBuilder? _azureDisk;
  final PhotonPersistentDiskVolumeSourceObjectBuilder? _photonPersistentDisk;
  final ProjectedVolumeSourceObjectBuilder? _projected;
  final PortworxVolumeSourceObjectBuilder? _portworxVolume;
  final ScaleIovolumeSourceObjectBuilder? _scaleIo;
  final StorageOsvolumeSourceObjectBuilder? _storageos;
  final CsivolumeSourceObjectBuilder? _csi;
  final EphemeralVolumeSourceObjectBuilder? _ephemeral;

  VolumeSourceObjectBuilder({
    HostPathVolumeSourceObjectBuilder? hostPath,
    EmptyDirVolumeSourceObjectBuilder? emptyDir,
    GcepersistentDiskVolumeSourceObjectBuilder? gcePersistentDisk,
    AwselasticBlockStoreVolumeSourceObjectBuilder? awsElasticBlockStore,
    GitRepoVolumeSourceObjectBuilder? gitRepo,
    SecretVolumeSourceObjectBuilder? secret,
    NfsvolumeSourceObjectBuilder? nfs,
    IscsivolumeSourceObjectBuilder? iscsi,
    GlusterfsVolumeSourceObjectBuilder? glusterfs,
    PersistentVolumeClaimVolumeSourceObjectBuilder? persistentVolumeClaim,
    RbdvolumeSourceObjectBuilder? rbd,
    FlexVolumeSourceObjectBuilder? flexVolume,
    CinderVolumeSourceObjectBuilder? cinder,
    CephFsvolumeSourceObjectBuilder? cephfs,
    FlockerVolumeSourceObjectBuilder? flocker,
    DownwardApivolumeSourceObjectBuilder? downwardApi,
    FcvolumeSourceObjectBuilder? fc,
    AzureFileVolumeSourceObjectBuilder? azureFile,
    ConfigMapVolumeSourceObjectBuilder? configMap,
    VsphereVirtualDiskVolumeSourceObjectBuilder? vsphereVolume,
    QuobyteVolumeSourceObjectBuilder? quobyte,
    AzureDiskVolumeSourceObjectBuilder? azureDisk,
    PhotonPersistentDiskVolumeSourceObjectBuilder? photonPersistentDisk,
    ProjectedVolumeSourceObjectBuilder? projected,
    PortworxVolumeSourceObjectBuilder? portworxVolume,
    ScaleIovolumeSourceObjectBuilder? scaleIo,
    StorageOsvolumeSourceObjectBuilder? storageos,
    CsivolumeSourceObjectBuilder? csi,
    EphemeralVolumeSourceObjectBuilder? ephemeral,
  })
      : _hostPath = hostPath,
        _emptyDir = emptyDir,
        _gcePersistentDisk = gcePersistentDisk,
        _awsElasticBlockStore = awsElasticBlockStore,
        _gitRepo = gitRepo,
        _secret = secret,
        _nfs = nfs,
        _iscsi = iscsi,
        _glusterfs = glusterfs,
        _persistentVolumeClaim = persistentVolumeClaim,
        _rbd = rbd,
        _flexVolume = flexVolume,
        _cinder = cinder,
        _cephfs = cephfs,
        _flocker = flocker,
        _downwardApi = downwardApi,
        _fc = fc,
        _azureFile = azureFile,
        _configMap = configMap,
        _vsphereVolume = vsphereVolume,
        _quobyte = quobyte,
        _azureDisk = azureDisk,
        _photonPersistentDisk = photonPersistentDisk,
        _projected = projected,
        _portworxVolume = portworxVolume,
        _scaleIo = scaleIo,
        _storageos = storageos,
        _csi = csi,
        _ephemeral = ephemeral;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? hostPathOffset = _hostPath?.getOrCreateOffset(fbBuilder);
    final int? emptyDirOffset = _emptyDir?.getOrCreateOffset(fbBuilder);
    final int? gcePersistentDiskOffset = _gcePersistentDisk?.getOrCreateOffset(fbBuilder);
    final int? awsElasticBlockStoreOffset = _awsElasticBlockStore?.getOrCreateOffset(fbBuilder);
    final int? gitRepoOffset = _gitRepo?.getOrCreateOffset(fbBuilder);
    final int? secretOffset = _secret?.getOrCreateOffset(fbBuilder);
    final int? nfsOffset = _nfs?.getOrCreateOffset(fbBuilder);
    final int? iscsiOffset = _iscsi?.getOrCreateOffset(fbBuilder);
    final int? glusterfsOffset = _glusterfs?.getOrCreateOffset(fbBuilder);
    final int? persistentVolumeClaimOffset = _persistentVolumeClaim?.getOrCreateOffset(fbBuilder);
    final int? rbdOffset = _rbd?.getOrCreateOffset(fbBuilder);
    final int? flexVolumeOffset = _flexVolume?.getOrCreateOffset(fbBuilder);
    final int? cinderOffset = _cinder?.getOrCreateOffset(fbBuilder);
    final int? cephfsOffset = _cephfs?.getOrCreateOffset(fbBuilder);
    final int? flockerOffset = _flocker?.getOrCreateOffset(fbBuilder);
    final int? downwardApiOffset = _downwardApi?.getOrCreateOffset(fbBuilder);
    final int? fcOffset = _fc?.getOrCreateOffset(fbBuilder);
    final int? azureFileOffset = _azureFile?.getOrCreateOffset(fbBuilder);
    final int? configMapOffset = _configMap?.getOrCreateOffset(fbBuilder);
    final int? vsphereVolumeOffset = _vsphereVolume?.getOrCreateOffset(fbBuilder);
    final int? quobyteOffset = _quobyte?.getOrCreateOffset(fbBuilder);
    final int? azureDiskOffset = _azureDisk?.getOrCreateOffset(fbBuilder);
    final int? photonPersistentDiskOffset = _photonPersistentDisk?.getOrCreateOffset(fbBuilder);
    final int? projectedOffset = _projected?.getOrCreateOffset(fbBuilder);
    final int? portworxVolumeOffset = _portworxVolume?.getOrCreateOffset(fbBuilder);
    final int? scaleIoOffset = _scaleIo?.getOrCreateOffset(fbBuilder);
    final int? storageosOffset = _storageos?.getOrCreateOffset(fbBuilder);
    final int? csiOffset = _csi?.getOrCreateOffset(fbBuilder);
    final int? ephemeralOffset = _ephemeral?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(29);
    fbBuilder.addOffset(0, hostPathOffset);
    fbBuilder.addOffset(1, emptyDirOffset);
    fbBuilder.addOffset(2, gcePersistentDiskOffset);
    fbBuilder.addOffset(3, awsElasticBlockStoreOffset);
    fbBuilder.addOffset(4, gitRepoOffset);
    fbBuilder.addOffset(5, secretOffset);
    fbBuilder.addOffset(6, nfsOffset);
    fbBuilder.addOffset(7, iscsiOffset);
    fbBuilder.addOffset(8, glusterfsOffset);
    fbBuilder.addOffset(9, persistentVolumeClaimOffset);
    fbBuilder.addOffset(10, rbdOffset);
    fbBuilder.addOffset(11, flexVolumeOffset);
    fbBuilder.addOffset(12, cinderOffset);
    fbBuilder.addOffset(13, cephfsOffset);
    fbBuilder.addOffset(14, flockerOffset);
    fbBuilder.addOffset(15, downwardApiOffset);
    fbBuilder.addOffset(16, fcOffset);
    fbBuilder.addOffset(17, azureFileOffset);
    fbBuilder.addOffset(18, configMapOffset);
    fbBuilder.addOffset(19, vsphereVolumeOffset);
    fbBuilder.addOffset(20, quobyteOffset);
    fbBuilder.addOffset(21, azureDiskOffset);
    fbBuilder.addOffset(22, photonPersistentDiskOffset);
    fbBuilder.addOffset(23, projectedOffset);
    fbBuilder.addOffset(24, portworxVolumeOffset);
    fbBuilder.addOffset(25, scaleIoOffset);
    fbBuilder.addOffset(26, storageosOffset);
    fbBuilder.addOffset(27, csiOffset);
    fbBuilder.addOffset(28, ephemeralOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VsphereVirtualDiskVolumeSource {
  VsphereVirtualDiskVolumeSource._(this._bc, this._bcOffset);
  factory VsphereVirtualDiskVolumeSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VsphereVirtualDiskVolumeSource> reader = _VsphereVirtualDiskVolumeSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get volumePath => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get storagePolicyName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get storagePolicyId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'VsphereVirtualDiskVolumeSource{volumePath: ${volumePath}, fsType: ${fsType}, storagePolicyName: ${storagePolicyName}, storagePolicyId: ${storagePolicyId}}';
  }
}

class _VsphereVirtualDiskVolumeSourceReader extends fb.TableReader<VsphereVirtualDiskVolumeSource> {
  const _VsphereVirtualDiskVolumeSourceReader();

  @override
  VsphereVirtualDiskVolumeSource createObject(fb.BufferContext bc, int offset) => 
    VsphereVirtualDiskVolumeSource._(bc, offset);
}

class VsphereVirtualDiskVolumeSourceBuilder {
  VsphereVirtualDiskVolumeSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addVolumePathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFsTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStoragePolicyNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStoragePolicyIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VsphereVirtualDiskVolumeSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _volumePath;
  final String? _fsType;
  final String? _storagePolicyName;
  final String? _storagePolicyId;

  VsphereVirtualDiskVolumeSourceObjectBuilder({
    String? volumePath,
    String? fsType,
    String? storagePolicyName,
    String? storagePolicyId,
  })
      : _volumePath = volumePath,
        _fsType = fsType,
        _storagePolicyName = storagePolicyName,
        _storagePolicyId = storagePolicyId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumePathOffset = _volumePath == null ? null
        : fbBuilder.writeString(_volumePath!);
    final int? fsTypeOffset = _fsType == null ? null
        : fbBuilder.writeString(_fsType!);
    final int? storagePolicyNameOffset = _storagePolicyName == null ? null
        : fbBuilder.writeString(_storagePolicyName!);
    final int? storagePolicyIdOffset = _storagePolicyId == null ? null
        : fbBuilder.writeString(_storagePolicyId!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, volumePathOffset);
    fbBuilder.addOffset(1, fsTypeOffset);
    fbBuilder.addOffset(2, storagePolicyNameOffset);
    fbBuilder.addOffset(3, storagePolicyIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WeightedPodAffinityTerm {
  WeightedPodAffinityTerm._(this._bc, this._bcOffset);
  factory WeightedPodAffinityTerm(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WeightedPodAffinityTerm> reader = _WeightedPodAffinityTermReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get weight => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  PodAffinityTerm? get podAffinityTerm => PodAffinityTerm.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'WeightedPodAffinityTerm{weight: ${weight}, podAffinityTerm: ${podAffinityTerm}}';
  }
}

class _WeightedPodAffinityTermReader extends fb.TableReader<WeightedPodAffinityTerm> {
  const _WeightedPodAffinityTermReader();

  @override
  WeightedPodAffinityTerm createObject(fb.BufferContext bc, int offset) => 
    WeightedPodAffinityTerm._(bc, offset);
}

class WeightedPodAffinityTermBuilder {
  WeightedPodAffinityTermBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addWeight(int? weight) {
    fbBuilder.addInt32(0, weight);
    return fbBuilder.offset;
  }
  int addPodAffinityTermOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WeightedPodAffinityTermObjectBuilder extends fb.ObjectBuilder {
  final int? _weight;
  final PodAffinityTermObjectBuilder? _podAffinityTerm;

  WeightedPodAffinityTermObjectBuilder({
    int? weight,
    PodAffinityTermObjectBuilder? podAffinityTerm,
  })
      : _weight = weight,
        _podAffinityTerm = podAffinityTerm;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? podAffinityTermOffset = _podAffinityTerm?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addInt32(0, _weight);
    fbBuilder.addOffset(1, podAffinityTermOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WindowsSecurityContextOptions {
  WindowsSecurityContextOptions._(this._bc, this._bcOffset);
  factory WindowsSecurityContextOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WindowsSecurityContextOptions> reader = _WindowsSecurityContextOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get gmsaCredentialSpecName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get gmsaCredentialSpec => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get runAsUserName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  bool get hostProcess => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  @override
  String toString() {
    return 'WindowsSecurityContextOptions{gmsaCredentialSpecName: ${gmsaCredentialSpecName}, gmsaCredentialSpec: ${gmsaCredentialSpec}, runAsUserName: ${runAsUserName}, hostProcess: ${hostProcess}}';
  }
}

class _WindowsSecurityContextOptionsReader extends fb.TableReader<WindowsSecurityContextOptions> {
  const _WindowsSecurityContextOptionsReader();

  @override
  WindowsSecurityContextOptions createObject(fb.BufferContext bc, int offset) => 
    WindowsSecurityContextOptions._(bc, offset);
}

class WindowsSecurityContextOptionsBuilder {
  WindowsSecurityContextOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addGmsaCredentialSpecNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addGmsaCredentialSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRunAsUserNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addHostProcess(bool? hostProcess) {
    fbBuilder.addBool(3, hostProcess);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WindowsSecurityContextOptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _gmsaCredentialSpecName;
  final String? _gmsaCredentialSpec;
  final String? _runAsUserName;
  final bool? _hostProcess;

  WindowsSecurityContextOptionsObjectBuilder({
    String? gmsaCredentialSpecName,
    String? gmsaCredentialSpec,
    String? runAsUserName,
    bool? hostProcess,
  })
      : _gmsaCredentialSpecName = gmsaCredentialSpecName,
        _gmsaCredentialSpec = gmsaCredentialSpec,
        _runAsUserName = runAsUserName,
        _hostProcess = hostProcess;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? gmsaCredentialSpecNameOffset = _gmsaCredentialSpecName == null ? null
        : fbBuilder.writeString(_gmsaCredentialSpecName!);
    final int? gmsaCredentialSpecOffset = _gmsaCredentialSpec == null ? null
        : fbBuilder.writeString(_gmsaCredentialSpec!);
    final int? runAsUserNameOffset = _runAsUserName == null ? null
        : fbBuilder.writeString(_runAsUserName!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, gmsaCredentialSpecNameOffset);
    fbBuilder.addOffset(1, gmsaCredentialSpecOffset);
    fbBuilder.addOffset(2, runAsUserNameOffset);
    fbBuilder.addBool(3, _hostProcess);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
