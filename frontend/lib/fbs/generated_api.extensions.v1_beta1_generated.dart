// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.extensions.v1_beta1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.extensions.v1_beta1.deployment_rollback__generated.dart' as api_extensions_v1_beta1_deployment_rollback_;
import './generated_api.extensions.v1_beta1.scale_status__generated.dart' as api_extensions_v1_beta1_scale_status_;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

class DaemonSet {
  DaemonSet._(this._bc, this._bcOffset);
  factory DaemonSet(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSet> reader = _DaemonSetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  DaemonSetSpec? get spec => DaemonSetSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  DaemonSetStatus? get status => DaemonSetStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'DaemonSet{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _DaemonSetReader extends fb.TableReader<DaemonSet> {
  const _DaemonSetReader();

  @override
  DaemonSet createObject(fb.BufferContext bc, int offset) => 
    DaemonSet._(bc, offset);
}

class DaemonSetBuilder {
  DaemonSetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final DaemonSetSpecObjectBuilder? _spec;
  final DaemonSetStatusObjectBuilder? _status;

  DaemonSetObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    DaemonSetSpecObjectBuilder? spec,
    DaemonSetStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetCondition {
  DaemonSetCondition._(this._bc, this._bcOffset);
  factory DaemonSetCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetCondition> reader = _DaemonSetConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'DaemonSetCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _DaemonSetConditionReader extends fb.TableReader<DaemonSetCondition> {
  const _DaemonSetConditionReader();

  @override
  DaemonSetCondition createObject(fb.BufferContext bc, int offset) => 
    DaemonSetCondition._(bc, offset);
}

class DaemonSetConditionBuilder {
  DaemonSetConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  DaemonSetConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetList {
  DaemonSetList._(this._bc, this._bcOffset);
  factory DaemonSetList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetList> reader = _DaemonSetListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<DaemonSet>? get items => const fb.ListReader<DaemonSet>(DaemonSet.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DaemonSetList{metadata: ${metadata}, items: ${items}}';
  }
}

class _DaemonSetListReader extends fb.TableReader<DaemonSetList> {
  const _DaemonSetListReader();

  @override
  DaemonSetList createObject(fb.BufferContext bc, int offset) => 
    DaemonSetList._(bc, offset);
}

class DaemonSetListBuilder {
  DaemonSetListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<DaemonSetObjectBuilder>? _items;

  DaemonSetListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<DaemonSetObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetSpec {
  DaemonSetSpec._(this._bc, this._bcOffset);
  factory DaemonSetSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetSpec> reader = _DaemonSetSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.LabelSelector? get selector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 4);
  api_core_v1.PodTemplateSpec? get template => api_core_v1.PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  DaemonSetUpdateStrategy? get updateStrategy => DaemonSetUpdateStrategy.reader.vTableGetNullable(_bc, _bcOffset, 8);
  int get minReadySeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get templateGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get revisionHistoryLimit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  @override
  String toString() {
    return 'DaemonSetSpec{selector: ${selector}, template: ${template}, updateStrategy: ${updateStrategy}, minReadySeconds: ${minReadySeconds}, templateGeneration: ${templateGeneration}, revisionHistoryLimit: ${revisionHistoryLimit}}';
  }
}

class _DaemonSetSpecReader extends fb.TableReader<DaemonSetSpec> {
  const _DaemonSetSpecReader();

  @override
  DaemonSetSpec createObject(fb.BufferContext bc, int offset) => 
    DaemonSetSpec._(bc, offset);
}

class DaemonSetSpecBuilder {
  DaemonSetSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUpdateStrategyOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMinReadySeconds(int? minReadySeconds) {
    fbBuilder.addInt32(3, minReadySeconds);
    return fbBuilder.offset;
  }
  int addTemplateGeneration(int? templateGeneration) {
    fbBuilder.addInt64(4, templateGeneration);
    return fbBuilder.offset;
  }
  int addRevisionHistoryLimit(int? revisionHistoryLimit) {
    fbBuilder.addInt32(5, revisionHistoryLimit);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetSpecObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _selector;
  final api_core_v1.PodTemplateSpecObjectBuilder? _template;
  final DaemonSetUpdateStrategyObjectBuilder? _updateStrategy;
  final int? _minReadySeconds;
  final int? _templateGeneration;
  final int? _revisionHistoryLimit;

  DaemonSetSpecObjectBuilder({
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? selector,
    api_core_v1.PodTemplateSpecObjectBuilder? template,
    DaemonSetUpdateStrategyObjectBuilder? updateStrategy,
    int? minReadySeconds,
    int? templateGeneration,
    int? revisionHistoryLimit,
  })
      : _selector = selector,
        _template = template,
        _updateStrategy = updateStrategy,
        _minReadySeconds = minReadySeconds,
        _templateGeneration = templateGeneration,
        _revisionHistoryLimit = revisionHistoryLimit;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector?.getOrCreateOffset(fbBuilder);
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    final int? updateStrategyOffset = _updateStrategy?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, selectorOffset);
    fbBuilder.addOffset(1, templateOffset);
    fbBuilder.addOffset(2, updateStrategyOffset);
    fbBuilder.addInt32(3, _minReadySeconds);
    fbBuilder.addInt64(4, _templateGeneration);
    fbBuilder.addInt32(5, _revisionHistoryLimit);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetStatus {
  DaemonSetStatus._(this._bc, this._bcOffset);
  factory DaemonSetStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetStatus> reader = _DaemonSetStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get currentNumberScheduled => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get numberMisscheduled => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get desiredNumberScheduled => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get numberReady => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get updatedNumberScheduled => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get numberAvailable => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);
  int get numberUnavailable => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  int get collisionCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);
  List<DaemonSetCondition>? get conditions => const fb.ListReader<DaemonSetCondition>(DaemonSetCondition.reader).vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'DaemonSetStatus{currentNumberScheduled: ${currentNumberScheduled}, numberMisscheduled: ${numberMisscheduled}, desiredNumberScheduled: ${desiredNumberScheduled}, numberReady: ${numberReady}, observedGeneration: ${observedGeneration}, updatedNumberScheduled: ${updatedNumberScheduled}, numberAvailable: ${numberAvailable}, numberUnavailable: ${numberUnavailable}, collisionCount: ${collisionCount}, conditions: ${conditions}}';
  }
}

class _DaemonSetStatusReader extends fb.TableReader<DaemonSetStatus> {
  const _DaemonSetStatusReader();

  @override
  DaemonSetStatus createObject(fb.BufferContext bc, int offset) => 
    DaemonSetStatus._(bc, offset);
}

class DaemonSetStatusBuilder {
  DaemonSetStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addCurrentNumberScheduled(int? currentNumberScheduled) {
    fbBuilder.addInt32(0, currentNumberScheduled);
    return fbBuilder.offset;
  }
  int addNumberMisscheduled(int? numberMisscheduled) {
    fbBuilder.addInt32(1, numberMisscheduled);
    return fbBuilder.offset;
  }
  int addDesiredNumberScheduled(int? desiredNumberScheduled) {
    fbBuilder.addInt32(2, desiredNumberScheduled);
    return fbBuilder.offset;
  }
  int addNumberReady(int? numberReady) {
    fbBuilder.addInt32(3, numberReady);
    return fbBuilder.offset;
  }
  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(4, observedGeneration);
    return fbBuilder.offset;
  }
  int addUpdatedNumberScheduled(int? updatedNumberScheduled) {
    fbBuilder.addInt32(5, updatedNumberScheduled);
    return fbBuilder.offset;
  }
  int addNumberAvailable(int? numberAvailable) {
    fbBuilder.addInt32(6, numberAvailable);
    return fbBuilder.offset;
  }
  int addNumberUnavailable(int? numberUnavailable) {
    fbBuilder.addInt32(7, numberUnavailable);
    return fbBuilder.offset;
  }
  int addCollisionCount(int? collisionCount) {
    fbBuilder.addInt32(8, collisionCount);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _currentNumberScheduled;
  final int? _numberMisscheduled;
  final int? _desiredNumberScheduled;
  final int? _numberReady;
  final int? _observedGeneration;
  final int? _updatedNumberScheduled;
  final int? _numberAvailable;
  final int? _numberUnavailable;
  final int? _collisionCount;
  final List<DaemonSetConditionObjectBuilder>? _conditions;

  DaemonSetStatusObjectBuilder({
    int? currentNumberScheduled,
    int? numberMisscheduled,
    int? desiredNumberScheduled,
    int? numberReady,
    int? observedGeneration,
    int? updatedNumberScheduled,
    int? numberAvailable,
    int? numberUnavailable,
    int? collisionCount,
    List<DaemonSetConditionObjectBuilder>? conditions,
  })
      : _currentNumberScheduled = currentNumberScheduled,
        _numberMisscheduled = numberMisscheduled,
        _desiredNumberScheduled = desiredNumberScheduled,
        _numberReady = numberReady,
        _observedGeneration = observedGeneration,
        _updatedNumberScheduled = updatedNumberScheduled,
        _numberAvailable = numberAvailable,
        _numberUnavailable = numberUnavailable,
        _collisionCount = collisionCount,
        _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(10);
    fbBuilder.addInt32(0, _currentNumberScheduled);
    fbBuilder.addInt32(1, _numberMisscheduled);
    fbBuilder.addInt32(2, _desiredNumberScheduled);
    fbBuilder.addInt32(3, _numberReady);
    fbBuilder.addInt64(4, _observedGeneration);
    fbBuilder.addInt32(5, _updatedNumberScheduled);
    fbBuilder.addInt32(6, _numberAvailable);
    fbBuilder.addInt32(7, _numberUnavailable);
    fbBuilder.addInt32(8, _collisionCount);
    fbBuilder.addOffset(9, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DaemonSetUpdateStrategy {
  DaemonSetUpdateStrategy._(this._bc, this._bcOffset);
  factory DaemonSetUpdateStrategy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DaemonSetUpdateStrategy> reader = _DaemonSetUpdateStrategyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  RollingUpdateDaemonSet? get rollingUpdate => RollingUpdateDaemonSet.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DaemonSetUpdateStrategy{type: ${type}, rollingUpdate: ${rollingUpdate}}';
  }
}

class _DaemonSetUpdateStrategyReader extends fb.TableReader<DaemonSetUpdateStrategy> {
  const _DaemonSetUpdateStrategyReader();

  @override
  DaemonSetUpdateStrategy createObject(fb.BufferContext bc, int offset) => 
    DaemonSetUpdateStrategy._(bc, offset);
}

class DaemonSetUpdateStrategyBuilder {
  DaemonSetUpdateStrategyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRollingUpdateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DaemonSetUpdateStrategyObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final RollingUpdateDaemonSetObjectBuilder? _rollingUpdate;

  DaemonSetUpdateStrategyObjectBuilder({
    String? type,
    RollingUpdateDaemonSetObjectBuilder? rollingUpdate,
  })
      : _type = type,
        _rollingUpdate = rollingUpdate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? rollingUpdateOffset = _rollingUpdate?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, rollingUpdateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Deployment {
  Deployment._(this._bc, this._bcOffset);
  factory Deployment(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Deployment> reader = _DeploymentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  DeploymentSpec? get spec => DeploymentSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  DeploymentStatus? get status => DeploymentStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Deployment{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _DeploymentReader extends fb.TableReader<Deployment> {
  const _DeploymentReader();

  @override
  Deployment createObject(fb.BufferContext bc, int offset) => 
    Deployment._(bc, offset);
}

class DeploymentBuilder {
  DeploymentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final DeploymentSpecObjectBuilder? _spec;
  final DeploymentStatusObjectBuilder? _status;

  DeploymentObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    DeploymentSpecObjectBuilder? spec,
    DeploymentStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentCondition {
  DeploymentCondition._(this._bc, this._bcOffset);
  factory DeploymentCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentCondition> reader = _DeploymentConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastUpdateTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'DeploymentCondition{type: ${type}, status: ${status}, lastUpdateTime: ${lastUpdateTime}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _DeploymentConditionReader extends fb.TableReader<DeploymentCondition> {
  const _DeploymentConditionReader();

  @override
  DeploymentCondition createObject(fb.BufferContext bc, int offset) => 
    DeploymentCondition._(bc, offset);
}

class DeploymentConditionBuilder {
  DeploymentConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastUpdateTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastUpdateTime;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  DeploymentConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastUpdateTime,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastUpdateTime = lastUpdateTime,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastUpdateTimeOffset = _lastUpdateTime?.getOrCreateOffset(fbBuilder);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastUpdateTimeOffset);
    fbBuilder.addOffset(3, lastTransitionTimeOffset);
    fbBuilder.addOffset(4, reasonOffset);
    fbBuilder.addOffset(5, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentList {
  DeploymentList._(this._bc, this._bcOffset);
  factory DeploymentList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentList> reader = _DeploymentListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Deployment>? get items => const fb.ListReader<Deployment>(Deployment.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DeploymentList{metadata: ${metadata}, items: ${items}}';
  }
}

class _DeploymentListReader extends fb.TableReader<DeploymentList> {
  const _DeploymentListReader();

  @override
  DeploymentList createObject(fb.BufferContext bc, int offset) => 
    DeploymentList._(bc, offset);
}

class DeploymentListBuilder {
  DeploymentListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<DeploymentObjectBuilder>? _items;

  DeploymentListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<DeploymentObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentRollback {
  DeploymentRollback._(this._bc, this._bcOffset);
  factory DeploymentRollback(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentRollback> reader = _DeploymentRollbackReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<api_extensions_v1_beta1_deployment_rollback_.UpdatedAnnotationsEntry>? get updatedAnnotations => const fb.ListReader<api_extensions_v1_beta1_deployment_rollback_.UpdatedAnnotationsEntry>(api_extensions_v1_beta1_deployment_rollback_.UpdatedAnnotationsEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  RollbackConfig? get rollbackTo => RollbackConfig.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'DeploymentRollback{name: ${name}, updatedAnnotations: ${updatedAnnotations}, rollbackTo: ${rollbackTo}}';
  }
}

class _DeploymentRollbackReader extends fb.TableReader<DeploymentRollback> {
  const _DeploymentRollbackReader();

  @override
  DeploymentRollback createObject(fb.BufferContext bc, int offset) => 
    DeploymentRollback._(bc, offset);
}

class DeploymentRollbackBuilder {
  DeploymentRollbackBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAnnotationsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRollbackToOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentRollbackObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final List<api_extensions_v1_beta1_deployment_rollback_.UpdatedAnnotationsEntryObjectBuilder>? _updatedAnnotations;
  final RollbackConfigObjectBuilder? _rollbackTo;

  DeploymentRollbackObjectBuilder({
    String? name,
    List<api_extensions_v1_beta1_deployment_rollback_.UpdatedAnnotationsEntryObjectBuilder>? updatedAnnotations,
    RollbackConfigObjectBuilder? rollbackTo,
  })
      : _name = name,
        _updatedAnnotations = updatedAnnotations,
        _rollbackTo = rollbackTo;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? updatedAnnotationsOffset = _updatedAnnotations == null ? null
        : fbBuilder.writeList(_updatedAnnotations!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? rollbackToOffset = _rollbackTo?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, updatedAnnotationsOffset);
    fbBuilder.addOffset(2, rollbackToOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentSpec {
  DeploymentSpec._(this._bc, this._bcOffset);
  factory DeploymentSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentSpec> reader = _DeploymentSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get selector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  api_core_v1.PodTemplateSpec? get template => api_core_v1.PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 8);
  DeploymentStrategy? get strategy => DeploymentStrategy.reader.vTableGetNullable(_bc, _bcOffset, 10);
  int get minReadySeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get revisionHistoryLimit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  bool get paused => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  RollbackConfig? get rollbackTo => RollbackConfig.reader.vTableGetNullable(_bc, _bcOffset, 18);
  int get progressDeadlineSeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 20, 0);

  @override
  String toString() {
    return 'DeploymentSpec{replicas: ${replicas}, selector: ${selector}, template: ${template}, strategy: ${strategy}, minReadySeconds: ${minReadySeconds}, revisionHistoryLimit: ${revisionHistoryLimit}, paused: ${paused}, rollbackTo: ${rollbackTo}, progressDeadlineSeconds: ${progressDeadlineSeconds}}';
  }
}

class _DeploymentSpecReader extends fb.TableReader<DeploymentSpec> {
  const _DeploymentSpecReader();

  @override
  DeploymentSpec createObject(fb.BufferContext bc, int offset) => 
    DeploymentSpec._(bc, offset);
}

class DeploymentSpecBuilder {
  DeploymentSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStrategyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMinReadySeconds(int? minReadySeconds) {
    fbBuilder.addInt32(4, minReadySeconds);
    return fbBuilder.offset;
  }
  int addRevisionHistoryLimit(int? revisionHistoryLimit) {
    fbBuilder.addInt32(5, revisionHistoryLimit);
    return fbBuilder.offset;
  }
  int addPaused(bool? paused) {
    fbBuilder.addBool(6, paused);
    return fbBuilder.offset;
  }
  int addRollbackToOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addProgressDeadlineSeconds(int? progressDeadlineSeconds) {
    fbBuilder.addInt32(8, progressDeadlineSeconds);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentSpecObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _selector;
  final api_core_v1.PodTemplateSpecObjectBuilder? _template;
  final DeploymentStrategyObjectBuilder? _strategy;
  final int? _minReadySeconds;
  final int? _revisionHistoryLimit;
  final bool? _paused;
  final RollbackConfigObjectBuilder? _rollbackTo;
  final int? _progressDeadlineSeconds;

  DeploymentSpecObjectBuilder({
    int? replicas,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? selector,
    api_core_v1.PodTemplateSpecObjectBuilder? template,
    DeploymentStrategyObjectBuilder? strategy,
    int? minReadySeconds,
    int? revisionHistoryLimit,
    bool? paused,
    RollbackConfigObjectBuilder? rollbackTo,
    int? progressDeadlineSeconds,
  })
      : _replicas = replicas,
        _selector = selector,
        _template = template,
        _strategy = strategy,
        _minReadySeconds = minReadySeconds,
        _revisionHistoryLimit = revisionHistoryLimit,
        _paused = paused,
        _rollbackTo = rollbackTo,
        _progressDeadlineSeconds = progressDeadlineSeconds;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector?.getOrCreateOffset(fbBuilder);
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    final int? strategyOffset = _strategy?.getOrCreateOffset(fbBuilder);
    final int? rollbackToOffset = _rollbackTo?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(9);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addOffset(1, selectorOffset);
    fbBuilder.addOffset(2, templateOffset);
    fbBuilder.addOffset(3, strategyOffset);
    fbBuilder.addInt32(4, _minReadySeconds);
    fbBuilder.addInt32(5, _revisionHistoryLimit);
    fbBuilder.addBool(6, _paused);
    fbBuilder.addOffset(7, rollbackToOffset);
    fbBuilder.addInt32(8, _progressDeadlineSeconds);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentStatus {
  DeploymentStatus._(this._bc, this._bcOffset);
  factory DeploymentStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentStatus> reader = _DeploymentStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get updatedReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get readyReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get availableReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get unavailableReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  List<DeploymentCondition>? get conditions => const fb.ListReader<DeploymentCondition>(DeploymentCondition.reader).vTableGetNullable(_bc, _bcOffset, 16);
  int get collisionCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 18, 0);

  @override
  String toString() {
    return 'DeploymentStatus{observedGeneration: ${observedGeneration}, replicas: ${replicas}, updatedReplicas: ${updatedReplicas}, readyReplicas: ${readyReplicas}, availableReplicas: ${availableReplicas}, unavailableReplicas: ${unavailableReplicas}, conditions: ${conditions}, collisionCount: ${collisionCount}}';
  }
}

class _DeploymentStatusReader extends fb.TableReader<DeploymentStatus> {
  const _DeploymentStatusReader();

  @override
  DeploymentStatus createObject(fb.BufferContext bc, int offset) => 
    DeploymentStatus._(bc, offset);
}

class DeploymentStatusBuilder {
  DeploymentStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(0, observedGeneration);
    return fbBuilder.offset;
  }
  int addReplicas(int? replicas) {
    fbBuilder.addInt32(1, replicas);
    return fbBuilder.offset;
  }
  int addUpdatedReplicas(int? updatedReplicas) {
    fbBuilder.addInt32(2, updatedReplicas);
    return fbBuilder.offset;
  }
  int addReadyReplicas(int? readyReplicas) {
    fbBuilder.addInt32(3, readyReplicas);
    return fbBuilder.offset;
  }
  int addAvailableReplicas(int? availableReplicas) {
    fbBuilder.addInt32(4, availableReplicas);
    return fbBuilder.offset;
  }
  int addUnavailableReplicas(int? unavailableReplicas) {
    fbBuilder.addInt32(5, unavailableReplicas);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addCollisionCount(int? collisionCount) {
    fbBuilder.addInt32(7, collisionCount);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _observedGeneration;
  final int? _replicas;
  final int? _updatedReplicas;
  final int? _readyReplicas;
  final int? _availableReplicas;
  final int? _unavailableReplicas;
  final List<DeploymentConditionObjectBuilder>? _conditions;
  final int? _collisionCount;

  DeploymentStatusObjectBuilder({
    int? observedGeneration,
    int? replicas,
    int? updatedReplicas,
    int? readyReplicas,
    int? availableReplicas,
    int? unavailableReplicas,
    List<DeploymentConditionObjectBuilder>? conditions,
    int? collisionCount,
  })
      : _observedGeneration = observedGeneration,
        _replicas = replicas,
        _updatedReplicas = updatedReplicas,
        _readyReplicas = readyReplicas,
        _availableReplicas = availableReplicas,
        _unavailableReplicas = unavailableReplicas,
        _conditions = conditions,
        _collisionCount = collisionCount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addInt64(0, _observedGeneration);
    fbBuilder.addInt32(1, _replicas);
    fbBuilder.addInt32(2, _updatedReplicas);
    fbBuilder.addInt32(3, _readyReplicas);
    fbBuilder.addInt32(4, _availableReplicas);
    fbBuilder.addInt32(5, _unavailableReplicas);
    fbBuilder.addOffset(6, conditionsOffset);
    fbBuilder.addInt32(7, _collisionCount);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeploymentStrategy {
  DeploymentStrategy._(this._bc, this._bcOffset);
  factory DeploymentStrategy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeploymentStrategy> reader = _DeploymentStrategyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  RollingUpdateDeployment? get rollingUpdate => RollingUpdateDeployment.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DeploymentStrategy{type: ${type}, rollingUpdate: ${rollingUpdate}}';
  }
}

class _DeploymentStrategyReader extends fb.TableReader<DeploymentStrategy> {
  const _DeploymentStrategyReader();

  @override
  DeploymentStrategy createObject(fb.BufferContext bc, int offset) => 
    DeploymentStrategy._(bc, offset);
}

class DeploymentStrategyBuilder {
  DeploymentStrategyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRollingUpdateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeploymentStrategyObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final RollingUpdateDeploymentObjectBuilder? _rollingUpdate;

  DeploymentStrategyObjectBuilder({
    String? type,
    RollingUpdateDeploymentObjectBuilder? rollingUpdate,
  })
      : _type = type,
        _rollingUpdate = rollingUpdate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? rollingUpdateOffset = _rollingUpdate?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, rollingUpdateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class HttpingressPath {
  HttpingressPath._(this._bc, this._bcOffset);
  factory HttpingressPath(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HttpingressPath> reader = _HttpingressPathReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get path => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get pathType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  IngressBackend? get backend => IngressBackend.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'HttpingressPath{path: ${path}, pathType: ${pathType}, backend: ${backend}}';
  }
}

class _HttpingressPathReader extends fb.TableReader<HttpingressPath> {
  const _HttpingressPathReader();

  @override
  HttpingressPath createObject(fb.BufferContext bc, int offset) => 
    HttpingressPath._(bc, offset);
}

class HttpingressPathBuilder {
  HttpingressPathBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPathOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPathTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addBackendOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HttpingressPathObjectBuilder extends fb.ObjectBuilder {
  final String? _path;
  final String? _pathType;
  final IngressBackendObjectBuilder? _backend;

  HttpingressPathObjectBuilder({
    String? path,
    String? pathType,
    IngressBackendObjectBuilder? backend,
  })
      : _path = path,
        _pathType = pathType,
        _backend = backend;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathOffset = _path == null ? null
        : fbBuilder.writeString(_path!);
    final int? pathTypeOffset = _pathType == null ? null
        : fbBuilder.writeString(_pathType!);
    final int? backendOffset = _backend?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, pathOffset);
    fbBuilder.addOffset(1, pathTypeOffset);
    fbBuilder.addOffset(2, backendOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class HttpingressRuleValue {
  HttpingressRuleValue._(this._bc, this._bcOffset);
  factory HttpingressRuleValue(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HttpingressRuleValue> reader = _HttpingressRuleValueReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<HttpingressPath>? get paths => const fb.ListReader<HttpingressPath>(HttpingressPath.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'HttpingressRuleValue{paths: ${paths}}';
  }
}

class _HttpingressRuleValueReader extends fb.TableReader<HttpingressRuleValue> {
  const _HttpingressRuleValueReader();

  @override
  HttpingressRuleValue createObject(fb.BufferContext bc, int offset) => 
    HttpingressRuleValue._(bc, offset);
}

class HttpingressRuleValueBuilder {
  HttpingressRuleValueBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPathsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HttpingressRuleValueObjectBuilder extends fb.ObjectBuilder {
  final List<HttpingressPathObjectBuilder>? _paths;

  HttpingressRuleValueObjectBuilder({
    List<HttpingressPathObjectBuilder>? paths,
  })
      : _paths = paths;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathsOffset = _paths == null ? null
        : fbBuilder.writeList(_paths!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, pathsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Ipblock {
  Ipblock._(this._bc, this._bcOffset);
  factory Ipblock(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Ipblock> reader = _IpblockReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get cidr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get except => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Ipblock{cidr: ${cidr}, except: ${except}}';
  }
}

class _IpblockReader extends fb.TableReader<Ipblock> {
  const _IpblockReader();

  @override
  Ipblock createObject(fb.BufferContext bc, int offset) => 
    Ipblock._(bc, offset);
}

class IpblockBuilder {
  IpblockBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addCidrOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addExceptOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IpblockObjectBuilder extends fb.ObjectBuilder {
  final String? _cidr;
  final List<String>? _except;

  IpblockObjectBuilder({
    String? cidr,
    List<String>? except,
  })
      : _cidr = cidr,
        _except = except;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? cidrOffset = _cidr == null ? null
        : fbBuilder.writeString(_cidr!);
    final int? exceptOffset = _except == null ? null
        : fbBuilder.writeList(_except!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, cidrOffset);
    fbBuilder.addOffset(1, exceptOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Ingress {
  Ingress._(this._bc, this._bcOffset);
  factory Ingress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Ingress> reader = _IngressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  IngressSpec? get spec => IngressSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  IngressStatus? get status => IngressStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Ingress{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _IngressReader extends fb.TableReader<Ingress> {
  const _IngressReader();

  @override
  Ingress createObject(fb.BufferContext bc, int offset) => 
    Ingress._(bc, offset);
}

class IngressBuilder {
  IngressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final IngressSpecObjectBuilder? _spec;
  final IngressStatusObjectBuilder? _status;

  IngressObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    IngressSpecObjectBuilder? spec,
    IngressStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressBackend {
  IngressBackend._(this._bc, this._bcOffset);
  factory IngressBackend(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressBackend> reader = _IngressBackendReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get serviceName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_util_intstr.IntOrString? get servicePort => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 6);
  api_core_v1.TypedLocalObjectReference? get resource => api_core_v1.TypedLocalObjectReference.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'IngressBackend{serviceName: ${serviceName}, servicePort: ${servicePort}, resource: ${resource}}';
  }
}

class _IngressBackendReader extends fb.TableReader<IngressBackend> {
  const _IngressBackendReader();

  @override
  IngressBackend createObject(fb.BufferContext bc, int offset) => 
    IngressBackend._(bc, offset);
}

class IngressBackendBuilder {
  IngressBackendBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addServiceNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addServicePortOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addResourceOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressBackendObjectBuilder extends fb.ObjectBuilder {
  final String? _serviceName;
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _servicePort;
  final api_core_v1.TypedLocalObjectReferenceObjectBuilder? _resource;

  IngressBackendObjectBuilder({
    String? serviceName,
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? servicePort,
    api_core_v1.TypedLocalObjectReferenceObjectBuilder? resource,
  })
      : _serviceName = serviceName,
        _servicePort = servicePort,
        _resource = resource;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? serviceNameOffset = _serviceName == null ? null
        : fbBuilder.writeString(_serviceName!);
    final int? servicePortOffset = _servicePort?.getOrCreateOffset(fbBuilder);
    final int? resourceOffset = _resource?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, serviceNameOffset);
    fbBuilder.addOffset(1, servicePortOffset);
    fbBuilder.addOffset(2, resourceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressList {
  IngressList._(this._bc, this._bcOffset);
  factory IngressList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressList> reader = _IngressListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Ingress>? get items => const fb.ListReader<Ingress>(Ingress.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'IngressList{metadata: ${metadata}, items: ${items}}';
  }
}

class _IngressListReader extends fb.TableReader<IngressList> {
  const _IngressListReader();

  @override
  IngressList createObject(fb.BufferContext bc, int offset) => 
    IngressList._(bc, offset);
}

class IngressListBuilder {
  IngressListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<IngressObjectBuilder>? _items;

  IngressListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<IngressObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressLoadBalancerIngress {
  IngressLoadBalancerIngress._(this._bc, this._bcOffset);
  factory IngressLoadBalancerIngress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressLoadBalancerIngress> reader = _IngressLoadBalancerIngressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ip => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get hostname => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<IngressPortStatus>? get ports => const fb.ListReader<IngressPortStatus>(IngressPortStatus.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'IngressLoadBalancerIngress{ip: ${ip}, hostname: ${hostname}, ports: ${ports}}';
  }
}

class _IngressLoadBalancerIngressReader extends fb.TableReader<IngressLoadBalancerIngress> {
  const _IngressLoadBalancerIngressReader();

  @override
  IngressLoadBalancerIngress createObject(fb.BufferContext bc, int offset) => 
    IngressLoadBalancerIngress._(bc, offset);
}

class IngressLoadBalancerIngressBuilder {
  IngressLoadBalancerIngressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addIpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHostnameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPortsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressLoadBalancerIngressObjectBuilder extends fb.ObjectBuilder {
  final String? _ip;
  final String? _hostname;
  final List<IngressPortStatusObjectBuilder>? _ports;

  IngressLoadBalancerIngressObjectBuilder({
    String? ip,
    String? hostname,
    List<IngressPortStatusObjectBuilder>? ports,
  })
      : _ip = ip,
        _hostname = hostname,
        _ports = ports;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ipOffset = _ip == null ? null
        : fbBuilder.writeString(_ip!);
    final int? hostnameOffset = _hostname == null ? null
        : fbBuilder.writeString(_hostname!);
    final int? portsOffset = _ports == null ? null
        : fbBuilder.writeList(_ports!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, ipOffset);
    fbBuilder.addOffset(1, hostnameOffset);
    fbBuilder.addOffset(2, portsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressLoadBalancerStatus {
  IngressLoadBalancerStatus._(this._bc, this._bcOffset);
  factory IngressLoadBalancerStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressLoadBalancerStatus> reader = _IngressLoadBalancerStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<IngressLoadBalancerIngress>? get ingress => const fb.ListReader<IngressLoadBalancerIngress>(IngressLoadBalancerIngress.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'IngressLoadBalancerStatus{ingress: ${ingress}}';
  }
}

class _IngressLoadBalancerStatusReader extends fb.TableReader<IngressLoadBalancerStatus> {
  const _IngressLoadBalancerStatusReader();

  @override
  IngressLoadBalancerStatus createObject(fb.BufferContext bc, int offset) => 
    IngressLoadBalancerStatus._(bc, offset);
}

class IngressLoadBalancerStatusBuilder {
  IngressLoadBalancerStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addIngressOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressLoadBalancerStatusObjectBuilder extends fb.ObjectBuilder {
  final List<IngressLoadBalancerIngressObjectBuilder>? _ingress;

  IngressLoadBalancerStatusObjectBuilder({
    List<IngressLoadBalancerIngressObjectBuilder>? ingress,
  })
      : _ingress = ingress;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ingressOffset = _ingress == null ? null
        : fbBuilder.writeList(_ingress!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, ingressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressPortStatus {
  IngressPortStatus._(this._bc, this._bcOffset);
  factory IngressPortStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressPortStatus> reader = _IngressPortStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get port => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  String? get protocol => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get error => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'IngressPortStatus{port: ${port}, protocol: ${protocol}, error: ${error}}';
  }
}

class _IngressPortStatusReader extends fb.TableReader<IngressPortStatus> {
  const _IngressPortStatusReader();

  @override
  IngressPortStatus createObject(fb.BufferContext bc, int offset) => 
    IngressPortStatus._(bc, offset);
}

class IngressPortStatusBuilder {
  IngressPortStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPort(int? port) {
    fbBuilder.addInt32(0, port);
    return fbBuilder.offset;
  }
  int addProtocolOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addErrorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressPortStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _port;
  final String? _protocol;
  final String? _error;

  IngressPortStatusObjectBuilder({
    int? port,
    String? protocol,
    String? error,
  })
      : _port = port,
        _protocol = protocol,
        _error = error;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? protocolOffset = _protocol == null ? null
        : fbBuilder.writeString(_protocol!);
    final int? errorOffset = _error == null ? null
        : fbBuilder.writeString(_error!);
    fbBuilder.startTable(3);
    fbBuilder.addInt32(0, _port);
    fbBuilder.addOffset(1, protocolOffset);
    fbBuilder.addOffset(2, errorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressRule {
  IngressRule._(this._bc, this._bcOffset);
  factory IngressRule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressRule> reader = _IngressRuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get host => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  IngressRuleValue? get ingressRuleValue => IngressRuleValue.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'IngressRule{host: ${host}, ingressRuleValue: ${ingressRuleValue}}';
  }
}

class _IngressRuleReader extends fb.TableReader<IngressRule> {
  const _IngressRuleReader();

  @override
  IngressRule createObject(fb.BufferContext bc, int offset) => 
    IngressRule._(bc, offset);
}

class IngressRuleBuilder {
  IngressRuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHostOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIngressRuleValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressRuleObjectBuilder extends fb.ObjectBuilder {
  final String? _host;
  final IngressRuleValueObjectBuilder? _ingressRuleValue;

  IngressRuleObjectBuilder({
    String? host,
    IngressRuleValueObjectBuilder? ingressRuleValue,
  })
      : _host = host,
        _ingressRuleValue = ingressRuleValue;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? hostOffset = _host == null ? null
        : fbBuilder.writeString(_host!);
    final int? ingressRuleValueOffset = _ingressRuleValue?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, hostOffset);
    fbBuilder.addOffset(1, ingressRuleValueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressRuleValue {
  IngressRuleValue._(this._bc, this._bcOffset);
  factory IngressRuleValue(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressRuleValue> reader = _IngressRuleValueReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  HttpingressRuleValue? get http => HttpingressRuleValue.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'IngressRuleValue{http: ${http}}';
  }
}

class _IngressRuleValueReader extends fb.TableReader<IngressRuleValue> {
  const _IngressRuleValueReader();

  @override
  IngressRuleValue createObject(fb.BufferContext bc, int offset) => 
    IngressRuleValue._(bc, offset);
}

class IngressRuleValueBuilder {
  IngressRuleValueBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addHttpOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressRuleValueObjectBuilder extends fb.ObjectBuilder {
  final HttpingressRuleValueObjectBuilder? _http;

  IngressRuleValueObjectBuilder({
    HttpingressRuleValueObjectBuilder? http,
  })
      : _http = http;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? httpOffset = _http?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, httpOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressSpec {
  IngressSpec._(this._bc, this._bcOffset);
  factory IngressSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressSpec> reader = _IngressSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get ingressClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  IngressBackend? get backend => IngressBackend.reader.vTableGetNullable(_bc, _bcOffset, 6);
  List<IngressTls>? get tls => const fb.ListReader<IngressTls>(IngressTls.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<IngressRule>? get rules => const fb.ListReader<IngressRule>(IngressRule.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'IngressSpec{ingressClassName: ${ingressClassName}, backend: ${backend}, tls: ${tls}, rules: ${rules}}';
  }
}

class _IngressSpecReader extends fb.TableReader<IngressSpec> {
  const _IngressSpecReader();

  @override
  IngressSpec createObject(fb.BufferContext bc, int offset) => 
    IngressSpec._(bc, offset);
}

class IngressSpecBuilder {
  IngressSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addIngressClassNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBackendOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTlsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addRulesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _ingressClassName;
  final IngressBackendObjectBuilder? _backend;
  final List<IngressTlsObjectBuilder>? _tls;
  final List<IngressRuleObjectBuilder>? _rules;

  IngressSpecObjectBuilder({
    String? ingressClassName,
    IngressBackendObjectBuilder? backend,
    List<IngressTlsObjectBuilder>? tls,
    List<IngressRuleObjectBuilder>? rules,
  })
      : _ingressClassName = ingressClassName,
        _backend = backend,
        _tls = tls,
        _rules = rules;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? ingressClassNameOffset = _ingressClassName == null ? null
        : fbBuilder.writeString(_ingressClassName!);
    final int? backendOffset = _backend?.getOrCreateOffset(fbBuilder);
    final int? tlsOffset = _tls == null ? null
        : fbBuilder.writeList(_tls!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? rulesOffset = _rules == null ? null
        : fbBuilder.writeList(_rules!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, ingressClassNameOffset);
    fbBuilder.addOffset(1, backendOffset);
    fbBuilder.addOffset(2, tlsOffset);
    fbBuilder.addOffset(3, rulesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressStatus {
  IngressStatus._(this._bc, this._bcOffset);
  factory IngressStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressStatus> reader = _IngressStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  IngressLoadBalancerStatus? get loadBalancer => IngressLoadBalancerStatus.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'IngressStatus{loadBalancer: ${loadBalancer}}';
  }
}

class _IngressStatusReader extends fb.TableReader<IngressStatus> {
  const _IngressStatusReader();

  @override
  IngressStatus createObject(fb.BufferContext bc, int offset) => 
    IngressStatus._(bc, offset);
}

class IngressStatusBuilder {
  IngressStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addLoadBalancerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressStatusObjectBuilder extends fb.ObjectBuilder {
  final IngressLoadBalancerStatusObjectBuilder? _loadBalancer;

  IngressStatusObjectBuilder({
    IngressLoadBalancerStatusObjectBuilder? loadBalancer,
  })
      : _loadBalancer = loadBalancer;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? loadBalancerOffset = _loadBalancer?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, loadBalancerOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IngressTls {
  IngressTls._(this._bc, this._bcOffset);
  factory IngressTls(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IngressTls> reader = _IngressTlsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get hosts => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  String? get secretName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'IngressTls{hosts: ${hosts}, secretName: ${secretName}}';
  }
}

class _IngressTlsReader extends fb.TableReader<IngressTls> {
  const _IngressTlsReader();

  @override
  IngressTls createObject(fb.BufferContext bc, int offset) => 
    IngressTls._(bc, offset);
}

class IngressTlsBuilder {
  IngressTlsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addHostsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSecretNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IngressTlsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _hosts;
  final String? _secretName;

  IngressTlsObjectBuilder({
    List<String>? hosts,
    String? secretName,
  })
      : _hosts = hosts,
        _secretName = secretName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? hostsOffset = _hosts == null ? null
        : fbBuilder.writeList(_hosts!.map(fbBuilder.writeString).toList());
    final int? secretNameOffset = _secretName == null ? null
        : fbBuilder.writeString(_secretName!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, hostsOffset);
    fbBuilder.addOffset(1, secretNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NetworkPolicy {
  NetworkPolicy._(this._bc, this._bcOffset);
  factory NetworkPolicy(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NetworkPolicy> reader = _NetworkPolicyReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  NetworkPolicySpec? get spec => NetworkPolicySpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NetworkPolicy{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _NetworkPolicyReader extends fb.TableReader<NetworkPolicy> {
  const _NetworkPolicyReader();

  @override
  NetworkPolicy createObject(fb.BufferContext bc, int offset) => 
    NetworkPolicy._(bc, offset);
}

class NetworkPolicyBuilder {
  NetworkPolicyBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NetworkPolicyObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final NetworkPolicySpecObjectBuilder? _spec;

  NetworkPolicyObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    NetworkPolicySpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NetworkPolicyEgressRule {
  NetworkPolicyEgressRule._(this._bc, this._bcOffset);
  factory NetworkPolicyEgressRule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NetworkPolicyEgressRule> reader = _NetworkPolicyEgressRuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<NetworkPolicyPort>? get ports => const fb.ListReader<NetworkPolicyPort>(NetworkPolicyPort.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<NetworkPolicyPeer>? get to => const fb.ListReader<NetworkPolicyPeer>(NetworkPolicyPeer.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NetworkPolicyEgressRule{ports: ${ports}, to: ${to}}';
  }
}

class _NetworkPolicyEgressRuleReader extends fb.TableReader<NetworkPolicyEgressRule> {
  const _NetworkPolicyEgressRuleReader();

  @override
  NetworkPolicyEgressRule createObject(fb.BufferContext bc, int offset) => 
    NetworkPolicyEgressRule._(bc, offset);
}

class NetworkPolicyEgressRuleBuilder {
  NetworkPolicyEgressRuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPortsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addToOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NetworkPolicyEgressRuleObjectBuilder extends fb.ObjectBuilder {
  final List<NetworkPolicyPortObjectBuilder>? _ports;
  final List<NetworkPolicyPeerObjectBuilder>? _to;

  NetworkPolicyEgressRuleObjectBuilder({
    List<NetworkPolicyPortObjectBuilder>? ports,
    List<NetworkPolicyPeerObjectBuilder>? to,
  })
      : _ports = ports,
        _to = to;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? portsOffset = _ports == null ? null
        : fbBuilder.writeList(_ports!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? toOffset = _to == null ? null
        : fbBuilder.writeList(_to!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, portsOffset);
    fbBuilder.addOffset(1, toOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NetworkPolicyIngressRule {
  NetworkPolicyIngressRule._(this._bc, this._bcOffset);
  factory NetworkPolicyIngressRule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NetworkPolicyIngressRule> reader = _NetworkPolicyIngressRuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<NetworkPolicyPort>? get ports => const fb.ListReader<NetworkPolicyPort>(NetworkPolicyPort.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<NetworkPolicyPeer>? get from => const fb.ListReader<NetworkPolicyPeer>(NetworkPolicyPeer.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NetworkPolicyIngressRule{ports: ${ports}, from: ${from}}';
  }
}

class _NetworkPolicyIngressRuleReader extends fb.TableReader<NetworkPolicyIngressRule> {
  const _NetworkPolicyIngressRuleReader();

  @override
  NetworkPolicyIngressRule createObject(fb.BufferContext bc, int offset) => 
    NetworkPolicyIngressRule._(bc, offset);
}

class NetworkPolicyIngressRuleBuilder {
  NetworkPolicyIngressRuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPortsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFromOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NetworkPolicyIngressRuleObjectBuilder extends fb.ObjectBuilder {
  final List<NetworkPolicyPortObjectBuilder>? _ports;
  final List<NetworkPolicyPeerObjectBuilder>? _from;

  NetworkPolicyIngressRuleObjectBuilder({
    List<NetworkPolicyPortObjectBuilder>? ports,
    List<NetworkPolicyPeerObjectBuilder>? from,
  })
      : _ports = ports,
        _from = from;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? portsOffset = _ports == null ? null
        : fbBuilder.writeList(_ports!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? fromOffset = _from == null ? null
        : fbBuilder.writeList(_from!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, portsOffset);
    fbBuilder.addOffset(1, fromOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NetworkPolicyList {
  NetworkPolicyList._(this._bc, this._bcOffset);
  factory NetworkPolicyList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NetworkPolicyList> reader = _NetworkPolicyListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<NetworkPolicy>? get items => const fb.ListReader<NetworkPolicy>(NetworkPolicy.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NetworkPolicyList{metadata: ${metadata}, items: ${items}}';
  }
}

class _NetworkPolicyListReader extends fb.TableReader<NetworkPolicyList> {
  const _NetworkPolicyListReader();

  @override
  NetworkPolicyList createObject(fb.BufferContext bc, int offset) => 
    NetworkPolicyList._(bc, offset);
}

class NetworkPolicyListBuilder {
  NetworkPolicyListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NetworkPolicyListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<NetworkPolicyObjectBuilder>? _items;

  NetworkPolicyListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<NetworkPolicyObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NetworkPolicyPeer {
  NetworkPolicyPeer._(this._bc, this._bcOffset);
  factory NetworkPolicyPeer(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NetworkPolicyPeer> reader = _NetworkPolicyPeerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.LabelSelector? get podSelector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get namespaceSelector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  Ipblock? get ipBlock => Ipblock.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'NetworkPolicyPeer{podSelector: ${podSelector}, namespaceSelector: ${namespaceSelector}, ipBlock: ${ipBlock}}';
  }
}

class _NetworkPolicyPeerReader extends fb.TableReader<NetworkPolicyPeer> {
  const _NetworkPolicyPeerReader();

  @override
  NetworkPolicyPeer createObject(fb.BufferContext bc, int offset) => 
    NetworkPolicyPeer._(bc, offset);
}

class NetworkPolicyPeerBuilder {
  NetworkPolicyPeerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPodSelectorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNamespaceSelectorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addIpBlockOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NetworkPolicyPeerObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _podSelector;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _namespaceSelector;
  final IpblockObjectBuilder? _ipBlock;

  NetworkPolicyPeerObjectBuilder({
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? podSelector,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? namespaceSelector,
    IpblockObjectBuilder? ipBlock,
  })
      : _podSelector = podSelector,
        _namespaceSelector = namespaceSelector,
        _ipBlock = ipBlock;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? podSelectorOffset = _podSelector?.getOrCreateOffset(fbBuilder);
    final int? namespaceSelectorOffset = _namespaceSelector?.getOrCreateOffset(fbBuilder);
    final int? ipBlockOffset = _ipBlock?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, podSelectorOffset);
    fbBuilder.addOffset(1, namespaceSelectorOffset);
    fbBuilder.addOffset(2, ipBlockOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NetworkPolicyPort {
  NetworkPolicyPort._(this._bc, this._bcOffset);
  factory NetworkPolicyPort(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NetworkPolicyPort> reader = _NetworkPolicyPortReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get protocol => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_util_intstr.IntOrString? get port => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 6);
  int get endPort => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'NetworkPolicyPort{protocol: ${protocol}, port: ${port}, endPort: ${endPort}}';
  }
}

class _NetworkPolicyPortReader extends fb.TableReader<NetworkPolicyPort> {
  const _NetworkPolicyPortReader();

  @override
  NetworkPolicyPort createObject(fb.BufferContext bc, int offset) => 
    NetworkPolicyPort._(bc, offset);
}

class NetworkPolicyPortBuilder {
  NetworkPolicyPortBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addProtocolOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPortOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEndPort(int? endPort) {
    fbBuilder.addInt32(2, endPort);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NetworkPolicyPortObjectBuilder extends fb.ObjectBuilder {
  final String? _protocol;
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _port;
  final int? _endPort;

  NetworkPolicyPortObjectBuilder({
    String? protocol,
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? port,
    int? endPort,
  })
      : _protocol = protocol,
        _port = port,
        _endPort = endPort;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? protocolOffset = _protocol == null ? null
        : fbBuilder.writeString(_protocol!);
    final int? portOffset = _port?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, protocolOffset);
    fbBuilder.addOffset(1, portOffset);
    fbBuilder.addInt32(2, _endPort);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NetworkPolicySpec {
  NetworkPolicySpec._(this._bc, this._bcOffset);
  factory NetworkPolicySpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NetworkPolicySpec> reader = _NetworkPolicySpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.LabelSelector? get podSelector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<NetworkPolicyIngressRule>? get ingress => const fb.ListReader<NetworkPolicyIngressRule>(NetworkPolicyIngressRule.reader).vTableGetNullable(_bc, _bcOffset, 6);
  List<NetworkPolicyEgressRule>? get egress => const fb.ListReader<NetworkPolicyEgressRule>(NetworkPolicyEgressRule.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<String>? get policyTypes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'NetworkPolicySpec{podSelector: ${podSelector}, ingress: ${ingress}, egress: ${egress}, policyTypes: ${policyTypes}}';
  }
}

class _NetworkPolicySpecReader extends fb.TableReader<NetworkPolicySpec> {
  const _NetworkPolicySpecReader();

  @override
  NetworkPolicySpec createObject(fb.BufferContext bc, int offset) => 
    NetworkPolicySpec._(bc, offset);
}

class NetworkPolicySpecBuilder {
  NetworkPolicySpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addPodSelectorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addIngressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEgressOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPolicyTypesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NetworkPolicySpecObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _podSelector;
  final List<NetworkPolicyIngressRuleObjectBuilder>? _ingress;
  final List<NetworkPolicyEgressRuleObjectBuilder>? _egress;
  final List<String>? _policyTypes;

  NetworkPolicySpecObjectBuilder({
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? podSelector,
    List<NetworkPolicyIngressRuleObjectBuilder>? ingress,
    List<NetworkPolicyEgressRuleObjectBuilder>? egress,
    List<String>? policyTypes,
  })
      : _podSelector = podSelector,
        _ingress = ingress,
        _egress = egress,
        _policyTypes = policyTypes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? podSelectorOffset = _podSelector?.getOrCreateOffset(fbBuilder);
    final int? ingressOffset = _ingress == null ? null
        : fbBuilder.writeList(_ingress!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? egressOffset = _egress == null ? null
        : fbBuilder.writeList(_egress!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? policyTypesOffset = _policyTypes == null ? null
        : fbBuilder.writeList(_policyTypes!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, podSelectorOffset);
    fbBuilder.addOffset(1, ingressOffset);
    fbBuilder.addOffset(2, egressOffset);
    fbBuilder.addOffset(3, policyTypesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSet {
  ReplicaSet._(this._bc, this._bcOffset);
  factory ReplicaSet(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSet> reader = _ReplicaSetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ReplicaSetSpec? get spec => ReplicaSetSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ReplicaSetStatus? get status => ReplicaSetStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ReplicaSet{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ReplicaSetReader extends fb.TableReader<ReplicaSet> {
  const _ReplicaSetReader();

  @override
  ReplicaSet createObject(fb.BufferContext bc, int offset) => 
    ReplicaSet._(bc, offset);
}

class ReplicaSetBuilder {
  ReplicaSetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ReplicaSetSpecObjectBuilder? _spec;
  final ReplicaSetStatusObjectBuilder? _status;

  ReplicaSetObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ReplicaSetSpecObjectBuilder? spec,
    ReplicaSetStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSetCondition {
  ReplicaSetCondition._(this._bc, this._bcOffset);
  factory ReplicaSetCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSetCondition> reader = _ReplicaSetConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'ReplicaSetCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _ReplicaSetConditionReader extends fb.TableReader<ReplicaSetCondition> {
  const _ReplicaSetConditionReader();

  @override
  ReplicaSetCondition createObject(fb.BufferContext bc, int offset) => 
    ReplicaSetCondition._(bc, offset);
}

class ReplicaSetConditionBuilder {
  ReplicaSetConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  ReplicaSetConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSetList {
  ReplicaSetList._(this._bc, this._bcOffset);
  factory ReplicaSetList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSetList> reader = _ReplicaSetListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ReplicaSet>? get items => const fb.ListReader<ReplicaSet>(ReplicaSet.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ReplicaSetList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ReplicaSetListReader extends fb.TableReader<ReplicaSetList> {
  const _ReplicaSetListReader();

  @override
  ReplicaSetList createObject(fb.BufferContext bc, int offset) => 
    ReplicaSetList._(bc, offset);
}

class ReplicaSetListBuilder {
  ReplicaSetListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ReplicaSetObjectBuilder>? _items;

  ReplicaSetListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ReplicaSetObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSetSpec {
  ReplicaSetSpec._(this._bc, this._bcOffset);
  factory ReplicaSetSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSetSpec> reader = _ReplicaSetSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get minReadySeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get selector => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 8);
  api_core_v1.PodTemplateSpec? get template => api_core_v1.PodTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ReplicaSetSpec{replicas: ${replicas}, minReadySeconds: ${minReadySeconds}, selector: ${selector}, template: ${template}}';
  }
}

class _ReplicaSetSpecReader extends fb.TableReader<ReplicaSetSpec> {
  const _ReplicaSetSpecReader();

  @override
  ReplicaSetSpec createObject(fb.BufferContext bc, int offset) => 
    ReplicaSetSpec._(bc, offset);
}

class ReplicaSetSpecBuilder {
  ReplicaSetSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addMinReadySeconds(int? minReadySeconds) {
    fbBuilder.addInt32(1, minReadySeconds);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTemplateOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetSpecObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final int? _minReadySeconds;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _selector;
  final api_core_v1.PodTemplateSpecObjectBuilder? _template;

  ReplicaSetSpecObjectBuilder({
    int? replicas,
    int? minReadySeconds,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? selector,
    api_core_v1.PodTemplateSpecObjectBuilder? template,
  })
      : _replicas = replicas,
        _minReadySeconds = minReadySeconds,
        _selector = selector,
        _template = template;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector?.getOrCreateOffset(fbBuilder);
    final int? templateOffset = _template?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addInt32(1, _minReadySeconds);
    fbBuilder.addOffset(2, selectorOffset);
    fbBuilder.addOffset(3, templateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ReplicaSetStatus {
  ReplicaSetStatus._(this._bc, this._bcOffset);
  factory ReplicaSetStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ReplicaSetStatus> reader = _ReplicaSetStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get fullyLabeledReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get readyReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get availableReplicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 12, 0);
  List<ReplicaSetCondition>? get conditions => const fb.ListReader<ReplicaSetCondition>(ReplicaSetCondition.reader).vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'ReplicaSetStatus{replicas: ${replicas}, fullyLabeledReplicas: ${fullyLabeledReplicas}, readyReplicas: ${readyReplicas}, availableReplicas: ${availableReplicas}, observedGeneration: ${observedGeneration}, conditions: ${conditions}}';
  }
}

class _ReplicaSetStatusReader extends fb.TableReader<ReplicaSetStatus> {
  const _ReplicaSetStatusReader();

  @override
  ReplicaSetStatus createObject(fb.BufferContext bc, int offset) => 
    ReplicaSetStatus._(bc, offset);
}

class ReplicaSetStatusBuilder {
  ReplicaSetStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addFullyLabeledReplicas(int? fullyLabeledReplicas) {
    fbBuilder.addInt32(1, fullyLabeledReplicas);
    return fbBuilder.offset;
  }
  int addReadyReplicas(int? readyReplicas) {
    fbBuilder.addInt32(2, readyReplicas);
    return fbBuilder.offset;
  }
  int addAvailableReplicas(int? availableReplicas) {
    fbBuilder.addInt32(3, availableReplicas);
    return fbBuilder.offset;
  }
  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(4, observedGeneration);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ReplicaSetStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final int? _fullyLabeledReplicas;
  final int? _readyReplicas;
  final int? _availableReplicas;
  final int? _observedGeneration;
  final List<ReplicaSetConditionObjectBuilder>? _conditions;

  ReplicaSetStatusObjectBuilder({
    int? replicas,
    int? fullyLabeledReplicas,
    int? readyReplicas,
    int? availableReplicas,
    int? observedGeneration,
    List<ReplicaSetConditionObjectBuilder>? conditions,
  })
      : _replicas = replicas,
        _fullyLabeledReplicas = fullyLabeledReplicas,
        _readyReplicas = readyReplicas,
        _availableReplicas = availableReplicas,
        _observedGeneration = observedGeneration,
        _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(6);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addInt32(1, _fullyLabeledReplicas);
    fbBuilder.addInt32(2, _readyReplicas);
    fbBuilder.addInt32(3, _availableReplicas);
    fbBuilder.addInt64(4, _observedGeneration);
    fbBuilder.addOffset(5, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RollbackConfig {
  RollbackConfig._(this._bc, this._bcOffset);
  factory RollbackConfig(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RollbackConfig> reader = _RollbackConfigReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get revision => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'RollbackConfig{revision: ${revision}}';
  }
}

class _RollbackConfigReader extends fb.TableReader<RollbackConfig> {
  const _RollbackConfigReader();

  @override
  RollbackConfig createObject(fb.BufferContext bc, int offset) => 
    RollbackConfig._(bc, offset);
}

class RollbackConfigBuilder {
  RollbackConfigBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRevision(int? revision) {
    fbBuilder.addInt64(0, revision);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RollbackConfigObjectBuilder extends fb.ObjectBuilder {
  final int? _revision;

  RollbackConfigObjectBuilder({
    int? revision,
  })
      : _revision = revision;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt64(0, _revision);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RollingUpdateDaemonSet {
  RollingUpdateDaemonSet._(this._bc, this._bcOffset);
  factory RollingUpdateDaemonSet(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RollingUpdateDaemonSet> reader = _RollingUpdateDaemonSetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_util_intstr.IntOrString? get maxUnavailable => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_util_intstr.IntOrString? get maxSurge => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'RollingUpdateDaemonSet{maxUnavailable: ${maxUnavailable}, maxSurge: ${maxSurge}}';
  }
}

class _RollingUpdateDaemonSetReader extends fb.TableReader<RollingUpdateDaemonSet> {
  const _RollingUpdateDaemonSetReader();

  @override
  RollingUpdateDaemonSet createObject(fb.BufferContext bc, int offset) => 
    RollingUpdateDaemonSet._(bc, offset);
}

class RollingUpdateDaemonSetBuilder {
  RollingUpdateDaemonSetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMaxUnavailableOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMaxSurgeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RollingUpdateDaemonSetObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _maxUnavailable;
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _maxSurge;

  RollingUpdateDaemonSetObjectBuilder({
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? maxUnavailable,
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? maxSurge,
  })
      : _maxUnavailable = maxUnavailable,
        _maxSurge = maxSurge;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? maxUnavailableOffset = _maxUnavailable?.getOrCreateOffset(fbBuilder);
    final int? maxSurgeOffset = _maxSurge?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, maxUnavailableOffset);
    fbBuilder.addOffset(1, maxSurgeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RollingUpdateDeployment {
  RollingUpdateDeployment._(this._bc, this._bcOffset);
  factory RollingUpdateDeployment(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RollingUpdateDeployment> reader = _RollingUpdateDeploymentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_util_intstr.IntOrString? get maxUnavailable => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_util_intstr.IntOrString? get maxSurge => apimachinery_pkg_util_intstr.IntOrString.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'RollingUpdateDeployment{maxUnavailable: ${maxUnavailable}, maxSurge: ${maxSurge}}';
  }
}

class _RollingUpdateDeploymentReader extends fb.TableReader<RollingUpdateDeployment> {
  const _RollingUpdateDeploymentReader();

  @override
  RollingUpdateDeployment createObject(fb.BufferContext bc, int offset) => 
    RollingUpdateDeployment._(bc, offset);
}

class RollingUpdateDeploymentBuilder {
  RollingUpdateDeploymentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMaxUnavailableOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMaxSurgeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RollingUpdateDeploymentObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _maxUnavailable;
  final apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? _maxSurge;

  RollingUpdateDeploymentObjectBuilder({
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? maxUnavailable,
    apimachinery_pkg_util_intstr.IntOrStringObjectBuilder? maxSurge,
  })
      : _maxUnavailable = maxUnavailable,
        _maxSurge = maxSurge;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? maxUnavailableOffset = _maxUnavailable?.getOrCreateOffset(fbBuilder);
    final int? maxSurgeOffset = _maxSurge?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, maxUnavailableOffset);
    fbBuilder.addOffset(1, maxSurgeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Scale {
  Scale._(this._bc, this._bcOffset);
  factory Scale(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Scale> reader = _ScaleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ScaleSpec? get spec => ScaleSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ScaleStatus? get status => ScaleStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Scale{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ScaleReader extends fb.TableReader<Scale> {
  const _ScaleReader();

  @override
  Scale createObject(fb.BufferContext bc, int offset) => 
    Scale._(bc, offset);
}

class ScaleBuilder {
  ScaleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScaleObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ScaleSpecObjectBuilder? _spec;
  final ScaleStatusObjectBuilder? _status;

  ScaleObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ScaleSpecObjectBuilder? spec,
    ScaleStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScaleSpec {
  ScaleSpec._(this._bc, this._bcOffset);
  factory ScaleSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScaleSpec> reader = _ScaleSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'ScaleSpec{replicas: ${replicas}}';
  }
}

class _ScaleSpecReader extends fb.TableReader<ScaleSpec> {
  const _ScaleSpecReader();

  @override
  ScaleSpec createObject(fb.BufferContext bc, int offset) => 
    ScaleSpec._(bc, offset);
}

class ScaleSpecBuilder {
  ScaleSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScaleSpecObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;

  ScaleSpecObjectBuilder({
    int? replicas,
  })
      : _replicas = replicas;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt32(0, _replicas);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScaleStatus {
  ScaleStatus._(this._bc, this._bcOffset);
  factory ScaleStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScaleStatus> reader = _ScaleStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get replicas => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<api_extensions_v1_beta1_scale_status_.SelectorEntry>? get selector => const fb.ListReader<api_extensions_v1_beta1_scale_status_.SelectorEntry>(api_extensions_v1_beta1_scale_status_.SelectorEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  String? get targetSelector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ScaleStatus{replicas: ${replicas}, selector: ${selector}, targetSelector: ${targetSelector}}';
  }
}

class _ScaleStatusReader extends fb.TableReader<ScaleStatus> {
  const _ScaleStatusReader();

  @override
  ScaleStatus createObject(fb.BufferContext bc, int offset) => 
    ScaleStatus._(bc, offset);
}

class ScaleStatusBuilder {
  ScaleStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addReplicas(int? replicas) {
    fbBuilder.addInt32(0, replicas);
    return fbBuilder.offset;
  }
  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTargetSelectorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScaleStatusObjectBuilder extends fb.ObjectBuilder {
  final int? _replicas;
  final List<api_extensions_v1_beta1_scale_status_.SelectorEntryObjectBuilder>? _selector;
  final String? _targetSelector;

  ScaleStatusObjectBuilder({
    int? replicas,
    List<api_extensions_v1_beta1_scale_status_.SelectorEntryObjectBuilder>? selector,
    String? targetSelector,
  })
      : _replicas = replicas,
        _selector = selector,
        _targetSelector = targetSelector;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector == null ? null
        : fbBuilder.writeList(_selector!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? targetSelectorOffset = _targetSelector == null ? null
        : fbBuilder.writeString(_targetSelector!);
    fbBuilder.startTable(3);
    fbBuilder.addInt32(0, _replicas);
    fbBuilder.addOffset(1, selectorOffset);
    fbBuilder.addOffset(2, targetSelectorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
