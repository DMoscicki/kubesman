// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.flowcontrol.v1_beta3;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class ExemptPriorityLevelConfiguration {
  ExemptPriorityLevelConfiguration._(this._bc, this._bcOffset);
  factory ExemptPriorityLevelConfiguration(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ExemptPriorityLevelConfiguration> reader = _ExemptPriorityLevelConfigurationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get nominalConcurrencyShares => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get lendablePercent => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'ExemptPriorityLevelConfiguration{nominalConcurrencyShares: ${nominalConcurrencyShares}, lendablePercent: ${lendablePercent}}';
  }
}

class _ExemptPriorityLevelConfigurationReader extends fb.TableReader<ExemptPriorityLevelConfiguration> {
  const _ExemptPriorityLevelConfigurationReader();

  @override
  ExemptPriorityLevelConfiguration createObject(fb.BufferContext bc, int offset) => 
    ExemptPriorityLevelConfiguration._(bc, offset);
}

class ExemptPriorityLevelConfigurationBuilder {
  ExemptPriorityLevelConfigurationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNominalConcurrencyShares(int? nominalConcurrencyShares) {
    fbBuilder.addInt32(0, nominalConcurrencyShares);
    return fbBuilder.offset;
  }
  int addLendablePercent(int? lendablePercent) {
    fbBuilder.addInt32(1, lendablePercent);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ExemptPriorityLevelConfigurationObjectBuilder extends fb.ObjectBuilder {
  final int? _nominalConcurrencyShares;
  final int? _lendablePercent;

  ExemptPriorityLevelConfigurationObjectBuilder({
    int? nominalConcurrencyShares,
    int? lendablePercent,
  })
      : _nominalConcurrencyShares = nominalConcurrencyShares,
        _lendablePercent = lendablePercent;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addInt32(0, _nominalConcurrencyShares);
    fbBuilder.addInt32(1, _lendablePercent);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlowDistinguisherMethod {
  FlowDistinguisherMethod._(this._bc, this._bcOffset);
  factory FlowDistinguisherMethod(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlowDistinguisherMethod> reader = _FlowDistinguisherMethodReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'FlowDistinguisherMethod{type: ${type}}';
  }
}

class _FlowDistinguisherMethodReader extends fb.TableReader<FlowDistinguisherMethod> {
  const _FlowDistinguisherMethodReader();

  @override
  FlowDistinguisherMethod createObject(fb.BufferContext bc, int offset) => 
    FlowDistinguisherMethod._(bc, offset);
}

class FlowDistinguisherMethodBuilder {
  FlowDistinguisherMethodBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlowDistinguisherMethodObjectBuilder extends fb.ObjectBuilder {
  final String? _type;

  FlowDistinguisherMethodObjectBuilder({
    String? type,
  })
      : _type = type;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, typeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlowSchema {
  FlowSchema._(this._bc, this._bcOffset);
  factory FlowSchema(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlowSchema> reader = _FlowSchemaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  FlowSchemaSpec? get spec => FlowSchemaSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  FlowSchemaStatus? get status => FlowSchemaStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'FlowSchema{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _FlowSchemaReader extends fb.TableReader<FlowSchema> {
  const _FlowSchemaReader();

  @override
  FlowSchema createObject(fb.BufferContext bc, int offset) => 
    FlowSchema._(bc, offset);
}

class FlowSchemaBuilder {
  FlowSchemaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlowSchemaObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final FlowSchemaSpecObjectBuilder? _spec;
  final FlowSchemaStatusObjectBuilder? _status;

  FlowSchemaObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    FlowSchemaSpecObjectBuilder? spec,
    FlowSchemaStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlowSchemaCondition {
  FlowSchemaCondition._(this._bc, this._bcOffset);
  factory FlowSchemaCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlowSchemaCondition> reader = _FlowSchemaConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'FlowSchemaCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _FlowSchemaConditionReader extends fb.TableReader<FlowSchemaCondition> {
  const _FlowSchemaConditionReader();

  @override
  FlowSchemaCondition createObject(fb.BufferContext bc, int offset) => 
    FlowSchemaCondition._(bc, offset);
}

class FlowSchemaConditionBuilder {
  FlowSchemaConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlowSchemaConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  FlowSchemaConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlowSchemaList {
  FlowSchemaList._(this._bc, this._bcOffset);
  factory FlowSchemaList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlowSchemaList> reader = _FlowSchemaListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<FlowSchema>? get items => const fb.ListReader<FlowSchema>(FlowSchema.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'FlowSchemaList{metadata: ${metadata}, items: ${items}}';
  }
}

class _FlowSchemaListReader extends fb.TableReader<FlowSchemaList> {
  const _FlowSchemaListReader();

  @override
  FlowSchemaList createObject(fb.BufferContext bc, int offset) => 
    FlowSchemaList._(bc, offset);
}

class FlowSchemaListBuilder {
  FlowSchemaListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlowSchemaListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<FlowSchemaObjectBuilder>? _items;

  FlowSchemaListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<FlowSchemaObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlowSchemaSpec {
  FlowSchemaSpec._(this._bc, this._bcOffset);
  factory FlowSchemaSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlowSchemaSpec> reader = _FlowSchemaSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PriorityLevelConfigurationReference? get priorityLevelConfiguration => PriorityLevelConfigurationReference.reader.vTableGetNullable(_bc, _bcOffset, 4);
  int get matchingPrecedence => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  FlowDistinguisherMethod? get distinguisherMethod => FlowDistinguisherMethod.reader.vTableGetNullable(_bc, _bcOffset, 8);
  List<PolicyRulesWithSubjects>? get rules => const fb.ListReader<PolicyRulesWithSubjects>(PolicyRulesWithSubjects.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'FlowSchemaSpec{priorityLevelConfiguration: ${priorityLevelConfiguration}, matchingPrecedence: ${matchingPrecedence}, distinguisherMethod: ${distinguisherMethod}, rules: ${rules}}';
  }
}

class _FlowSchemaSpecReader extends fb.TableReader<FlowSchemaSpec> {
  const _FlowSchemaSpecReader();

  @override
  FlowSchemaSpec createObject(fb.BufferContext bc, int offset) => 
    FlowSchemaSpec._(bc, offset);
}

class FlowSchemaSpecBuilder {
  FlowSchemaSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addPriorityLevelConfigurationOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMatchingPrecedence(int? matchingPrecedence) {
    fbBuilder.addInt32(1, matchingPrecedence);
    return fbBuilder.offset;
  }
  int addDistinguisherMethodOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addRulesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlowSchemaSpecObjectBuilder extends fb.ObjectBuilder {
  final PriorityLevelConfigurationReferenceObjectBuilder? _priorityLevelConfiguration;
  final int? _matchingPrecedence;
  final FlowDistinguisherMethodObjectBuilder? _distinguisherMethod;
  final List<PolicyRulesWithSubjectsObjectBuilder>? _rules;

  FlowSchemaSpecObjectBuilder({
    PriorityLevelConfigurationReferenceObjectBuilder? priorityLevelConfiguration,
    int? matchingPrecedence,
    FlowDistinguisherMethodObjectBuilder? distinguisherMethod,
    List<PolicyRulesWithSubjectsObjectBuilder>? rules,
  })
      : _priorityLevelConfiguration = priorityLevelConfiguration,
        _matchingPrecedence = matchingPrecedence,
        _distinguisherMethod = distinguisherMethod,
        _rules = rules;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? priorityLevelConfigurationOffset = _priorityLevelConfiguration?.getOrCreateOffset(fbBuilder);
    final int? distinguisherMethodOffset = _distinguisherMethod?.getOrCreateOffset(fbBuilder);
    final int? rulesOffset = _rules == null ? null
        : fbBuilder.writeList(_rules!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, priorityLevelConfigurationOffset);
    fbBuilder.addInt32(1, _matchingPrecedence);
    fbBuilder.addOffset(2, distinguisherMethodOffset);
    fbBuilder.addOffset(3, rulesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FlowSchemaStatus {
  FlowSchemaStatus._(this._bc, this._bcOffset);
  factory FlowSchemaStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FlowSchemaStatus> reader = _FlowSchemaStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<FlowSchemaCondition>? get conditions => const fb.ListReader<FlowSchemaCondition>(FlowSchemaCondition.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'FlowSchemaStatus{conditions: ${conditions}}';
  }
}

class _FlowSchemaStatusReader extends fb.TableReader<FlowSchemaStatus> {
  const _FlowSchemaStatusReader();

  @override
  FlowSchemaStatus createObject(fb.BufferContext bc, int offset) => 
    FlowSchemaStatus._(bc, offset);
}

class FlowSchemaStatusBuilder {
  FlowSchemaStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FlowSchemaStatusObjectBuilder extends fb.ObjectBuilder {
  final List<FlowSchemaConditionObjectBuilder>? _conditions;

  FlowSchemaStatusObjectBuilder({
    List<FlowSchemaConditionObjectBuilder>? conditions,
  })
      : _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GroupSubject {
  GroupSubject._(this._bc, this._bcOffset);
  factory GroupSubject(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GroupSubject> reader = _GroupSubjectReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'GroupSubject{name: ${name}}';
  }
}

class _GroupSubjectReader extends fb.TableReader<GroupSubject> {
  const _GroupSubjectReader();

  @override
  GroupSubject createObject(fb.BufferContext bc, int offset) => 
    GroupSubject._(bc, offset);
}

class GroupSubjectBuilder {
  GroupSubjectBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GroupSubjectObjectBuilder extends fb.ObjectBuilder {
  final String? _name;

  GroupSubjectObjectBuilder({
    String? name,
  })
      : _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LimitResponse {
  LimitResponse._(this._bc, this._bcOffset);
  factory LimitResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LimitResponse> reader = _LimitResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  QueuingConfiguration? get queuing => QueuingConfiguration.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'LimitResponse{type: ${type}, queuing: ${queuing}}';
  }
}

class _LimitResponseReader extends fb.TableReader<LimitResponse> {
  const _LimitResponseReader();

  @override
  LimitResponse createObject(fb.BufferContext bc, int offset) => 
    LimitResponse._(bc, offset);
}

class LimitResponseBuilder {
  LimitResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addQueuingOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LimitResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final QueuingConfigurationObjectBuilder? _queuing;

  LimitResponseObjectBuilder({
    String? type,
    QueuingConfigurationObjectBuilder? queuing,
  })
      : _type = type,
        _queuing = queuing;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? queuingOffset = _queuing?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, queuingOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LimitedPriorityLevelConfiguration {
  LimitedPriorityLevelConfiguration._(this._bc, this._bcOffset);
  factory LimitedPriorityLevelConfiguration(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LimitedPriorityLevelConfiguration> reader = _LimitedPriorityLevelConfigurationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get nominalConcurrencyShares => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  LimitResponse? get limitResponse => LimitResponse.reader.vTableGetNullable(_bc, _bcOffset, 6);
  int get lendablePercent => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  int get borrowingLimitPercent => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'LimitedPriorityLevelConfiguration{nominalConcurrencyShares: ${nominalConcurrencyShares}, limitResponse: ${limitResponse}, lendablePercent: ${lendablePercent}, borrowingLimitPercent: ${borrowingLimitPercent}}';
  }
}

class _LimitedPriorityLevelConfigurationReader extends fb.TableReader<LimitedPriorityLevelConfiguration> {
  const _LimitedPriorityLevelConfigurationReader();

  @override
  LimitedPriorityLevelConfiguration createObject(fb.BufferContext bc, int offset) => 
    LimitedPriorityLevelConfiguration._(bc, offset);
}

class LimitedPriorityLevelConfigurationBuilder {
  LimitedPriorityLevelConfigurationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addNominalConcurrencyShares(int? nominalConcurrencyShares) {
    fbBuilder.addInt32(0, nominalConcurrencyShares);
    return fbBuilder.offset;
  }
  int addLimitResponseOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLendablePercent(int? lendablePercent) {
    fbBuilder.addInt32(2, lendablePercent);
    return fbBuilder.offset;
  }
  int addBorrowingLimitPercent(int? borrowingLimitPercent) {
    fbBuilder.addInt32(3, borrowingLimitPercent);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LimitedPriorityLevelConfigurationObjectBuilder extends fb.ObjectBuilder {
  final int? _nominalConcurrencyShares;
  final LimitResponseObjectBuilder? _limitResponse;
  final int? _lendablePercent;
  final int? _borrowingLimitPercent;

  LimitedPriorityLevelConfigurationObjectBuilder({
    int? nominalConcurrencyShares,
    LimitResponseObjectBuilder? limitResponse,
    int? lendablePercent,
    int? borrowingLimitPercent,
  })
      : _nominalConcurrencyShares = nominalConcurrencyShares,
        _limitResponse = limitResponse,
        _lendablePercent = lendablePercent,
        _borrowingLimitPercent = borrowingLimitPercent;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? limitResponseOffset = _limitResponse?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addInt32(0, _nominalConcurrencyShares);
    fbBuilder.addOffset(1, limitResponseOffset);
    fbBuilder.addInt32(2, _lendablePercent);
    fbBuilder.addInt32(3, _borrowingLimitPercent);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NonResourcePolicyRule {
  NonResourcePolicyRule._(this._bc, this._bcOffset);
  factory NonResourcePolicyRule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NonResourcePolicyRule> reader = _NonResourcePolicyRuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get verbs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get nonResourceUrls => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NonResourcePolicyRule{verbs: ${verbs}, nonResourceUrls: ${nonResourceUrls}}';
  }
}

class _NonResourcePolicyRuleReader extends fb.TableReader<NonResourcePolicyRule> {
  const _NonResourcePolicyRuleReader();

  @override
  NonResourcePolicyRule createObject(fb.BufferContext bc, int offset) => 
    NonResourcePolicyRule._(bc, offset);
}

class NonResourcePolicyRuleBuilder {
  NonResourcePolicyRuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addVerbsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNonResourceUrlsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NonResourcePolicyRuleObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _verbs;
  final List<String>? _nonResourceUrls;

  NonResourcePolicyRuleObjectBuilder({
    List<String>? verbs,
    List<String>? nonResourceUrls,
  })
      : _verbs = verbs,
        _nonResourceUrls = nonResourceUrls;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? verbsOffset = _verbs == null ? null
        : fbBuilder.writeList(_verbs!.map(fbBuilder.writeString).toList());
    final int? nonResourceUrlsOffset = _nonResourceUrls == null ? null
        : fbBuilder.writeList(_nonResourceUrls!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, verbsOffset);
    fbBuilder.addOffset(1, nonResourceUrlsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PolicyRulesWithSubjects {
  PolicyRulesWithSubjects._(this._bc, this._bcOffset);
  factory PolicyRulesWithSubjects(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PolicyRulesWithSubjects> reader = _PolicyRulesWithSubjectsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Subject>? get subjects => const fb.ListReader<Subject>(Subject.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<ResourcePolicyRule>? get resourceRules => const fb.ListReader<ResourcePolicyRule>(ResourcePolicyRule.reader).vTableGetNullable(_bc, _bcOffset, 6);
  List<NonResourcePolicyRule>? get nonResourceRules => const fb.ListReader<NonResourcePolicyRule>(NonResourcePolicyRule.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PolicyRulesWithSubjects{subjects: ${subjects}, resourceRules: ${resourceRules}, nonResourceRules: ${nonResourceRules}}';
  }
}

class _PolicyRulesWithSubjectsReader extends fb.TableReader<PolicyRulesWithSubjects> {
  const _PolicyRulesWithSubjectsReader();

  @override
  PolicyRulesWithSubjects createObject(fb.BufferContext bc, int offset) => 
    PolicyRulesWithSubjects._(bc, offset);
}

class PolicyRulesWithSubjectsBuilder {
  PolicyRulesWithSubjectsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addSubjectsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceRulesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNonResourceRulesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PolicyRulesWithSubjectsObjectBuilder extends fb.ObjectBuilder {
  final List<SubjectObjectBuilder>? _subjects;
  final List<ResourcePolicyRuleObjectBuilder>? _resourceRules;
  final List<NonResourcePolicyRuleObjectBuilder>? _nonResourceRules;

  PolicyRulesWithSubjectsObjectBuilder({
    List<SubjectObjectBuilder>? subjects,
    List<ResourcePolicyRuleObjectBuilder>? resourceRules,
    List<NonResourcePolicyRuleObjectBuilder>? nonResourceRules,
  })
      : _subjects = subjects,
        _resourceRules = resourceRules,
        _nonResourceRules = nonResourceRules;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? subjectsOffset = _subjects == null ? null
        : fbBuilder.writeList(_subjects!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? resourceRulesOffset = _resourceRules == null ? null
        : fbBuilder.writeList(_resourceRules!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? nonResourceRulesOffset = _nonResourceRules == null ? null
        : fbBuilder.writeList(_nonResourceRules!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, subjectsOffset);
    fbBuilder.addOffset(1, resourceRulesOffset);
    fbBuilder.addOffset(2, nonResourceRulesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PriorityLevelConfiguration {
  PriorityLevelConfiguration._(this._bc, this._bcOffset);
  factory PriorityLevelConfiguration(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PriorityLevelConfiguration> reader = _PriorityLevelConfigurationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PriorityLevelConfigurationSpec? get spec => PriorityLevelConfigurationSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  PriorityLevelConfigurationStatus? get status => PriorityLevelConfigurationStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PriorityLevelConfiguration{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _PriorityLevelConfigurationReader extends fb.TableReader<PriorityLevelConfiguration> {
  const _PriorityLevelConfigurationReader();

  @override
  PriorityLevelConfiguration createObject(fb.BufferContext bc, int offset) => 
    PriorityLevelConfiguration._(bc, offset);
}

class PriorityLevelConfigurationBuilder {
  PriorityLevelConfigurationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PriorityLevelConfigurationObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final PriorityLevelConfigurationSpecObjectBuilder? _spec;
  final PriorityLevelConfigurationStatusObjectBuilder? _status;

  PriorityLevelConfigurationObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    PriorityLevelConfigurationSpecObjectBuilder? spec,
    PriorityLevelConfigurationStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PriorityLevelConfigurationCondition {
  PriorityLevelConfigurationCondition._(this._bc, this._bcOffset);
  factory PriorityLevelConfigurationCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PriorityLevelConfigurationCondition> reader = _PriorityLevelConfigurationConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'PriorityLevelConfigurationCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _PriorityLevelConfigurationConditionReader extends fb.TableReader<PriorityLevelConfigurationCondition> {
  const _PriorityLevelConfigurationConditionReader();

  @override
  PriorityLevelConfigurationCondition createObject(fb.BufferContext bc, int offset) => 
    PriorityLevelConfigurationCondition._(bc, offset);
}

class PriorityLevelConfigurationConditionBuilder {
  PriorityLevelConfigurationConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PriorityLevelConfigurationConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  PriorityLevelConfigurationConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PriorityLevelConfigurationList {
  PriorityLevelConfigurationList._(this._bc, this._bcOffset);
  factory PriorityLevelConfigurationList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PriorityLevelConfigurationList> reader = _PriorityLevelConfigurationListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<PriorityLevelConfiguration>? get items => const fb.ListReader<PriorityLevelConfiguration>(PriorityLevelConfiguration.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PriorityLevelConfigurationList{metadata: ${metadata}, items: ${items}}';
  }
}

class _PriorityLevelConfigurationListReader extends fb.TableReader<PriorityLevelConfigurationList> {
  const _PriorityLevelConfigurationListReader();

  @override
  PriorityLevelConfigurationList createObject(fb.BufferContext bc, int offset) => 
    PriorityLevelConfigurationList._(bc, offset);
}

class PriorityLevelConfigurationListBuilder {
  PriorityLevelConfigurationListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PriorityLevelConfigurationListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<PriorityLevelConfigurationObjectBuilder>? _items;

  PriorityLevelConfigurationListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<PriorityLevelConfigurationObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PriorityLevelConfigurationReference {
  PriorityLevelConfigurationReference._(this._bc, this._bcOffset);
  factory PriorityLevelConfigurationReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PriorityLevelConfigurationReference> reader = _PriorityLevelConfigurationReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PriorityLevelConfigurationReference{name: ${name}}';
  }
}

class _PriorityLevelConfigurationReferenceReader extends fb.TableReader<PriorityLevelConfigurationReference> {
  const _PriorityLevelConfigurationReferenceReader();

  @override
  PriorityLevelConfigurationReference createObject(fb.BufferContext bc, int offset) => 
    PriorityLevelConfigurationReference._(bc, offset);
}

class PriorityLevelConfigurationReferenceBuilder {
  PriorityLevelConfigurationReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PriorityLevelConfigurationReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _name;

  PriorityLevelConfigurationReferenceObjectBuilder({
    String? name,
  })
      : _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PriorityLevelConfigurationSpec {
  PriorityLevelConfigurationSpec._(this._bc, this._bcOffset);
  factory PriorityLevelConfigurationSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PriorityLevelConfigurationSpec> reader = _PriorityLevelConfigurationSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  LimitedPriorityLevelConfiguration? get limited => LimitedPriorityLevelConfiguration.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ExemptPriorityLevelConfiguration? get exempt => ExemptPriorityLevelConfiguration.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PriorityLevelConfigurationSpec{type: ${type}, limited: ${limited}, exempt: ${exempt}}';
  }
}

class _PriorityLevelConfigurationSpecReader extends fb.TableReader<PriorityLevelConfigurationSpec> {
  const _PriorityLevelConfigurationSpecReader();

  @override
  PriorityLevelConfigurationSpec createObject(fb.BufferContext bc, int offset) => 
    PriorityLevelConfigurationSpec._(bc, offset);
}

class PriorityLevelConfigurationSpecBuilder {
  PriorityLevelConfigurationSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLimitedOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addExemptOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PriorityLevelConfigurationSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final LimitedPriorityLevelConfigurationObjectBuilder? _limited;
  final ExemptPriorityLevelConfigurationObjectBuilder? _exempt;

  PriorityLevelConfigurationSpecObjectBuilder({
    String? type,
    LimitedPriorityLevelConfigurationObjectBuilder? limited,
    ExemptPriorityLevelConfigurationObjectBuilder? exempt,
  })
      : _type = type,
        _limited = limited,
        _exempt = exempt;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? limitedOffset = _limited?.getOrCreateOffset(fbBuilder);
    final int? exemptOffset = _exempt?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, limitedOffset);
    fbBuilder.addOffset(2, exemptOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PriorityLevelConfigurationStatus {
  PriorityLevelConfigurationStatus._(this._bc, this._bcOffset);
  factory PriorityLevelConfigurationStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PriorityLevelConfigurationStatus> reader = _PriorityLevelConfigurationStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<PriorityLevelConfigurationCondition>? get conditions => const fb.ListReader<PriorityLevelConfigurationCondition>(PriorityLevelConfigurationCondition.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PriorityLevelConfigurationStatus{conditions: ${conditions}}';
  }
}

class _PriorityLevelConfigurationStatusReader extends fb.TableReader<PriorityLevelConfigurationStatus> {
  const _PriorityLevelConfigurationStatusReader();

  @override
  PriorityLevelConfigurationStatus createObject(fb.BufferContext bc, int offset) => 
    PriorityLevelConfigurationStatus._(bc, offset);
}

class PriorityLevelConfigurationStatusBuilder {
  PriorityLevelConfigurationStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PriorityLevelConfigurationStatusObjectBuilder extends fb.ObjectBuilder {
  final List<PriorityLevelConfigurationConditionObjectBuilder>? _conditions;

  PriorityLevelConfigurationStatusObjectBuilder({
    List<PriorityLevelConfigurationConditionObjectBuilder>? conditions,
  })
      : _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class QueuingConfiguration {
  QueuingConfiguration._(this._bc, this._bcOffset);
  factory QueuingConfiguration(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<QueuingConfiguration> reader = _QueuingConfigurationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get queues => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get handSize => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get queueLengthLimit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'QueuingConfiguration{queues: ${queues}, handSize: ${handSize}, queueLengthLimit: ${queueLengthLimit}}';
  }
}

class _QueuingConfigurationReader extends fb.TableReader<QueuingConfiguration> {
  const _QueuingConfigurationReader();

  @override
  QueuingConfiguration createObject(fb.BufferContext bc, int offset) => 
    QueuingConfiguration._(bc, offset);
}

class QueuingConfigurationBuilder {
  QueuingConfigurationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addQueues(int? queues) {
    fbBuilder.addInt32(0, queues);
    return fbBuilder.offset;
  }
  int addHandSize(int? handSize) {
    fbBuilder.addInt32(1, handSize);
    return fbBuilder.offset;
  }
  int addQueueLengthLimit(int? queueLengthLimit) {
    fbBuilder.addInt32(2, queueLengthLimit);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class QueuingConfigurationObjectBuilder extends fb.ObjectBuilder {
  final int? _queues;
  final int? _handSize;
  final int? _queueLengthLimit;

  QueuingConfigurationObjectBuilder({
    int? queues,
    int? handSize,
    int? queueLengthLimit,
  })
      : _queues = queues,
        _handSize = handSize,
        _queueLengthLimit = queueLengthLimit;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(3);
    fbBuilder.addInt32(0, _queues);
    fbBuilder.addInt32(1, _handSize);
    fbBuilder.addInt32(2, _queueLengthLimit);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourcePolicyRule {
  ResourcePolicyRule._(this._bc, this._bcOffset);
  factory ResourcePolicyRule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourcePolicyRule> reader = _ResourcePolicyRuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get verbs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get apiGroups => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get resources => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  bool get clusterScope => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  List<String>? get namespaces => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'ResourcePolicyRule{verbs: ${verbs}, apiGroups: ${apiGroups}, resources: ${resources}, clusterScope: ${clusterScope}, namespaces: ${namespaces}}';
  }
}

class _ResourcePolicyRuleReader extends fb.TableReader<ResourcePolicyRule> {
  const _ResourcePolicyRuleReader();

  @override
  ResourcePolicyRule createObject(fb.BufferContext bc, int offset) => 
    ResourcePolicyRule._(bc, offset);
}

class ResourcePolicyRuleBuilder {
  ResourcePolicyRuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addVerbsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addApiGroupsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addResourcesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addClusterScope(bool? clusterScope) {
    fbBuilder.addBool(3, clusterScope);
    return fbBuilder.offset;
  }
  int addNamespacesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourcePolicyRuleObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _verbs;
  final List<String>? _apiGroups;
  final List<String>? _resources;
  final bool? _clusterScope;
  final List<String>? _namespaces;

  ResourcePolicyRuleObjectBuilder({
    List<String>? verbs,
    List<String>? apiGroups,
    List<String>? resources,
    bool? clusterScope,
    List<String>? namespaces,
  })
      : _verbs = verbs,
        _apiGroups = apiGroups,
        _resources = resources,
        _clusterScope = clusterScope,
        _namespaces = namespaces;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? verbsOffset = _verbs == null ? null
        : fbBuilder.writeList(_verbs!.map(fbBuilder.writeString).toList());
    final int? apiGroupsOffset = _apiGroups == null ? null
        : fbBuilder.writeList(_apiGroups!.map(fbBuilder.writeString).toList());
    final int? resourcesOffset = _resources == null ? null
        : fbBuilder.writeList(_resources!.map(fbBuilder.writeString).toList());
    final int? namespacesOffset = _namespaces == null ? null
        : fbBuilder.writeList(_namespaces!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, verbsOffset);
    fbBuilder.addOffset(1, apiGroupsOffset);
    fbBuilder.addOffset(2, resourcesOffset);
    fbBuilder.addBool(3, _clusterScope);
    fbBuilder.addOffset(4, namespacesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceAccountSubject {
  ServiceAccountSubject._(this._bc, this._bcOffset);
  factory ServiceAccountSubject(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceAccountSubject> reader = _ServiceAccountSubjectReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ServiceAccountSubject{namespace: ${namespace}, name: ${name}}';
  }
}

class _ServiceAccountSubjectReader extends fb.TableReader<ServiceAccountSubject> {
  const _ServiceAccountSubjectReader();

  @override
  ServiceAccountSubject createObject(fb.BufferContext bc, int offset) => 
    ServiceAccountSubject._(bc, offset);
}

class ServiceAccountSubjectBuilder {
  ServiceAccountSubjectBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceAccountSubjectObjectBuilder extends fb.ObjectBuilder {
  final String? _namespace;
  final String? _name;

  ServiceAccountSubjectObjectBuilder({
    String? namespace,
    String? name,
  })
      : _namespace = namespace,
        _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, namespaceOffset);
    fbBuilder.addOffset(1, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Subject {
  Subject._(this._bc, this._bcOffset);
  factory Subject(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Subject> reader = _SubjectReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  UserSubject? get user => UserSubject.reader.vTableGetNullable(_bc, _bcOffset, 6);
  GroupSubject? get group => GroupSubject.reader.vTableGetNullable(_bc, _bcOffset, 8);
  ServiceAccountSubject? get serviceAccount => ServiceAccountSubject.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Subject{kind: ${kind}, user: ${user}, group: ${group}, serviceAccount: ${serviceAccount}}';
  }
}

class _SubjectReader extends fb.TableReader<Subject> {
  const _SubjectReader();

  @override
  Subject createObject(fb.BufferContext bc, int offset) => 
    Subject._(bc, offset);
}

class SubjectBuilder {
  SubjectBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addKindOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addUserOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addServiceAccountOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SubjectObjectBuilder extends fb.ObjectBuilder {
  final String? _kind;
  final UserSubjectObjectBuilder? _user;
  final GroupSubjectObjectBuilder? _group;
  final ServiceAccountSubjectObjectBuilder? _serviceAccount;

  SubjectObjectBuilder({
    String? kind,
    UserSubjectObjectBuilder? user,
    GroupSubjectObjectBuilder? group,
    ServiceAccountSubjectObjectBuilder? serviceAccount,
  })
      : _kind = kind,
        _user = user,
        _group = group,
        _serviceAccount = serviceAccount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? userOffset = _user?.getOrCreateOffset(fbBuilder);
    final int? groupOffset = _group?.getOrCreateOffset(fbBuilder);
    final int? serviceAccountOffset = _serviceAccount?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, kindOffset);
    fbBuilder.addOffset(1, userOffset);
    fbBuilder.addOffset(2, groupOffset);
    fbBuilder.addOffset(3, serviceAccountOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UserSubject {
  UserSubject._(this._bc, this._bcOffset);
  factory UserSubject(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UserSubject> reader = _UserSubjectReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'UserSubject{name: ${name}}';
  }
}

class _UserSubjectReader extends fb.TableReader<UserSubject> {
  const _UserSubjectReader();

  @override
  UserSubject createObject(fb.BufferContext bc, int offset) => 
    UserSubject._(bc, offset);
}

class UserSubjectBuilder {
  UserSubjectBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UserSubjectObjectBuilder extends fb.ObjectBuilder {
  final String? _name;

  UserSubjectObjectBuilder({
    String? name,
  })
      : _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
