// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.imagepolicy.v1_alpha1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.imagepolicy.v1_alpha1.image_review_spec__generated.dart' as api_imagepolicy_v1_alpha1_image_review_spec_;
import './generated_api.imagepolicy.v1_alpha1.image_review_status__generated.dart' as api_imagepolicy_v1_alpha1_image_review_status_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class ImageReview {
  ImageReview._(this._bc, this._bcOffset);
  factory ImageReview(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ImageReview> reader = _ImageReviewReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ImageReviewSpec? get spec => ImageReviewSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ImageReviewStatus? get status => ImageReviewStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ImageReview{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ImageReviewReader extends fb.TableReader<ImageReview> {
  const _ImageReviewReader();

  @override
  ImageReview createObject(fb.BufferContext bc, int offset) => 
    ImageReview._(bc, offset);
}

class ImageReviewBuilder {
  ImageReviewBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ImageReviewObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ImageReviewSpecObjectBuilder? _spec;
  final ImageReviewStatusObjectBuilder? _status;

  ImageReviewObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ImageReviewSpecObjectBuilder? spec,
    ImageReviewStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ImageReviewContainerSpec {
  ImageReviewContainerSpec._(this._bc, this._bcOffset);
  factory ImageReviewContainerSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ImageReviewContainerSpec> reader = _ImageReviewContainerSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get image => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ImageReviewContainerSpec{image: ${image}}';
  }
}

class _ImageReviewContainerSpecReader extends fb.TableReader<ImageReviewContainerSpec> {
  const _ImageReviewContainerSpecReader();

  @override
  ImageReviewContainerSpec createObject(fb.BufferContext bc, int offset) => 
    ImageReviewContainerSpec._(bc, offset);
}

class ImageReviewContainerSpecBuilder {
  ImageReviewContainerSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addImageOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ImageReviewContainerSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _image;

  ImageReviewContainerSpecObjectBuilder({
    String? image,
  })
      : _image = image;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? imageOffset = _image == null ? null
        : fbBuilder.writeString(_image!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, imageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ImageReviewSpec {
  ImageReviewSpec._(this._bc, this._bcOffset);
  factory ImageReviewSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ImageReviewSpec> reader = _ImageReviewSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ImageReviewContainerSpec>? get containers => const fb.ListReader<ImageReviewContainerSpec>(ImageReviewContainerSpec.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<api_imagepolicy_v1_alpha1_image_review_spec_.AnnotationsEntry>? get annotations => const fb.ListReader<api_imagepolicy_v1_alpha1_image_review_spec_.AnnotationsEntry>(api_imagepolicy_v1_alpha1_image_review_spec_.AnnotationsEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ImageReviewSpec{containers: ${containers}, annotations: ${annotations}, namespace: ${namespace}}';
  }
}

class _ImageReviewSpecReader extends fb.TableReader<ImageReviewSpec> {
  const _ImageReviewSpecReader();

  @override
  ImageReviewSpec createObject(fb.BufferContext bc, int offset) => 
    ImageReviewSpec._(bc, offset);
}

class ImageReviewSpecBuilder {
  ImageReviewSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addContainersOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAnnotationsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ImageReviewSpecObjectBuilder extends fb.ObjectBuilder {
  final List<ImageReviewContainerSpecObjectBuilder>? _containers;
  final List<api_imagepolicy_v1_alpha1_image_review_spec_.AnnotationsEntryObjectBuilder>? _annotations;
  final String? _namespace;

  ImageReviewSpecObjectBuilder({
    List<ImageReviewContainerSpecObjectBuilder>? containers,
    List<api_imagepolicy_v1_alpha1_image_review_spec_.AnnotationsEntryObjectBuilder>? annotations,
    String? namespace,
  })
      : _containers = containers,
        _annotations = annotations,
        _namespace = namespace;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? containersOffset = _containers == null ? null
        : fbBuilder.writeList(_containers!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? annotationsOffset = _annotations == null ? null
        : fbBuilder.writeList(_annotations!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, containersOffset);
    fbBuilder.addOffset(1, annotationsOffset);
    fbBuilder.addOffset(2, namespaceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ImageReviewStatus {
  ImageReviewStatus._(this._bc, this._bcOffset);
  factory ImageReviewStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ImageReviewStatus> reader = _ImageReviewStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get allowed => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<api_imagepolicy_v1_alpha1_image_review_status_.AuditAnnotationsEntry>? get auditAnnotations => const fb.ListReader<api_imagepolicy_v1_alpha1_image_review_status_.AuditAnnotationsEntry>(api_imagepolicy_v1_alpha1_image_review_status_.AuditAnnotationsEntry.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ImageReviewStatus{allowed: ${allowed}, reason: ${reason}, auditAnnotations: ${auditAnnotations}}';
  }
}

class _ImageReviewStatusReader extends fb.TableReader<ImageReviewStatus> {
  const _ImageReviewStatusReader();

  @override
  ImageReviewStatus createObject(fb.BufferContext bc, int offset) => 
    ImageReviewStatus._(bc, offset);
}

class ImageReviewStatusBuilder {
  ImageReviewStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addAllowed(bool? allowed) {
    fbBuilder.addBool(0, allowed);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAuditAnnotationsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ImageReviewStatusObjectBuilder extends fb.ObjectBuilder {
  final bool? _allowed;
  final String? _reason;
  final List<api_imagepolicy_v1_alpha1_image_review_status_.AuditAnnotationsEntryObjectBuilder>? _auditAnnotations;

  ImageReviewStatusObjectBuilder({
    bool? allowed,
    String? reason,
    List<api_imagepolicy_v1_alpha1_image_review_status_.AuditAnnotationsEntryObjectBuilder>? auditAnnotations,
  })
      : _allowed = allowed,
        _reason = reason,
        _auditAnnotations = auditAnnotations;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? auditAnnotationsOffset = _auditAnnotations == null ? null
        : fbBuilder.writeList(_auditAnnotations!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addBool(0, _allowed);
    fbBuilder.addOffset(1, reasonOffset);
    fbBuilder.addOffset(2, auditAnnotationsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
