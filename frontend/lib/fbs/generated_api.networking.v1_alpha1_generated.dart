// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.networking.v1_alpha1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class Ipaddress {
  Ipaddress._(this._bc, this._bcOffset);
  factory Ipaddress(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Ipaddress> reader = _IpaddressReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  IpaddressSpec? get spec => IpaddressSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Ipaddress{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _IpaddressReader extends fb.TableReader<Ipaddress> {
  const _IpaddressReader();

  @override
  Ipaddress createObject(fb.BufferContext bc, int offset) => 
    Ipaddress._(bc, offset);
}

class IpaddressBuilder {
  IpaddressBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IpaddressObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final IpaddressSpecObjectBuilder? _spec;

  IpaddressObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    IpaddressSpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IpaddressList {
  IpaddressList._(this._bc, this._bcOffset);
  factory IpaddressList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IpaddressList> reader = _IpaddressListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Ipaddress>? get items => const fb.ListReader<Ipaddress>(Ipaddress.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'IpaddressList{metadata: ${metadata}, items: ${items}}';
  }
}

class _IpaddressListReader extends fb.TableReader<IpaddressList> {
  const _IpaddressListReader();

  @override
  IpaddressList createObject(fb.BufferContext bc, int offset) => 
    IpaddressList._(bc, offset);
}

class IpaddressListBuilder {
  IpaddressListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IpaddressListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<IpaddressObjectBuilder>? _items;

  IpaddressListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<IpaddressObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class IpaddressSpec {
  IpaddressSpec._(this._bc, this._bcOffset);
  factory IpaddressSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<IpaddressSpec> reader = _IpaddressSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ParentReference? get parentRef => ParentReference.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'IpaddressSpec{parentRef: ${parentRef}}';
  }
}

class _IpaddressSpecReader extends fb.TableReader<IpaddressSpec> {
  const _IpaddressSpecReader();

  @override
  IpaddressSpec createObject(fb.BufferContext bc, int offset) => 
    IpaddressSpec._(bc, offset);
}

class IpaddressSpecBuilder {
  IpaddressSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addParentRefOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class IpaddressSpecObjectBuilder extends fb.ObjectBuilder {
  final ParentReferenceObjectBuilder? _parentRef;

  IpaddressSpecObjectBuilder({
    ParentReferenceObjectBuilder? parentRef,
  })
      : _parentRef = parentRef;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? parentRefOffset = _parentRef?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, parentRefOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ParentReference {
  ParentReference._(this._bc, this._bcOffset);
  factory ParentReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ParentReference> reader = _ParentReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get resource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ParentReference{group: ${group}, resource: ${resource}, namespace: ${namespace}, name: ${name}}';
  }
}

class _ParentReferenceReader extends fb.TableReader<ParentReference> {
  const _ParentReferenceReader();

  @override
  ParentReference createObject(fb.BufferContext bc, int offset) => 
    ParentReference._(bc, offset);
}

class ParentReferenceBuilder {
  ParentReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ParentReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _group;
  final String? _resource;
  final String? _namespace;
  final String? _name;

  ParentReferenceObjectBuilder({
    String? group,
    String? resource,
    String? namespace,
    String? name,
  })
      : _group = group,
        _resource = resource,
        _namespace = namespace,
        _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? resourceOffset = _resource == null ? null
        : fbBuilder.writeString(_resource!);
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, groupOffset);
    fbBuilder.addOffset(1, resourceOffset);
    fbBuilder.addOffset(2, namespaceOffset);
    fbBuilder.addOffset(3, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceCidr {
  ServiceCidr._(this._bc, this._bcOffset);
  factory ServiceCidr(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceCidr> reader = _ServiceCidrReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ServiceCidrspec? get spec => ServiceCidrspec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ServiceCidrstatus? get status => ServiceCidrstatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ServiceCidr{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ServiceCidrReader extends fb.TableReader<ServiceCidr> {
  const _ServiceCidrReader();

  @override
  ServiceCidr createObject(fb.BufferContext bc, int offset) => 
    ServiceCidr._(bc, offset);
}

class ServiceCidrBuilder {
  ServiceCidrBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceCidrObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ServiceCidrspecObjectBuilder? _spec;
  final ServiceCidrstatusObjectBuilder? _status;

  ServiceCidrObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ServiceCidrspecObjectBuilder? spec,
    ServiceCidrstatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceCidrlist {
  ServiceCidrlist._(this._bc, this._bcOffset);
  factory ServiceCidrlist(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceCidrlist> reader = _ServiceCidrlistReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ServiceCidr>? get items => const fb.ListReader<ServiceCidr>(ServiceCidr.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ServiceCidrlist{metadata: ${metadata}, items: ${items}}';
  }
}

class _ServiceCidrlistReader extends fb.TableReader<ServiceCidrlist> {
  const _ServiceCidrlistReader();

  @override
  ServiceCidrlist createObject(fb.BufferContext bc, int offset) => 
    ServiceCidrlist._(bc, offset);
}

class ServiceCidrlistBuilder {
  ServiceCidrlistBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceCidrlistObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ServiceCidrObjectBuilder>? _items;

  ServiceCidrlistObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ServiceCidrObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceCidrspec {
  ServiceCidrspec._(this._bc, this._bcOffset);
  factory ServiceCidrspec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceCidrspec> reader = _ServiceCidrspecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get cidrs => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ServiceCidrspec{cidrs: ${cidrs}}';
  }
}

class _ServiceCidrspecReader extends fb.TableReader<ServiceCidrspec> {
  const _ServiceCidrspecReader();

  @override
  ServiceCidrspec createObject(fb.BufferContext bc, int offset) => 
    ServiceCidrspec._(bc, offset);
}

class ServiceCidrspecBuilder {
  ServiceCidrspecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addCidrsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceCidrspecObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _cidrs;

  ServiceCidrspecObjectBuilder({
    List<String>? cidrs,
  })
      : _cidrs = cidrs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? cidrsOffset = _cidrs == null ? null
        : fbBuilder.writeList(_cidrs!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, cidrsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceCidrstatus {
  ServiceCidrstatus._(this._bc, this._bcOffset);
  factory ServiceCidrstatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceCidrstatus> reader = _ServiceCidrstatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<apimachinery_pkg_apis_meta_v1.Condition>? get conditions => const fb.ListReader<apimachinery_pkg_apis_meta_v1.Condition>(apimachinery_pkg_apis_meta_v1.Condition.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ServiceCidrstatus{conditions: ${conditions}}';
  }
}

class _ServiceCidrstatusReader extends fb.TableReader<ServiceCidrstatus> {
  const _ServiceCidrstatusReader();

  @override
  ServiceCidrstatus createObject(fb.BufferContext bc, int offset) => 
    ServiceCidrstatus._(bc, offset);
}

class ServiceCidrstatusBuilder {
  ServiceCidrstatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceCidrstatusObjectBuilder extends fb.ObjectBuilder {
  final List<apimachinery_pkg_apis_meta_v1.ConditionObjectBuilder>? _conditions;

  ServiceCidrstatusObjectBuilder({
    List<apimachinery_pkg_apis_meta_v1.ConditionObjectBuilder>? conditions,
  })
      : _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
