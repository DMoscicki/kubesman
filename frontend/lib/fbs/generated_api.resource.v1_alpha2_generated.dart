// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.resource.v1_alpha2;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class AllocationResult {
  AllocationResult._(this._bc, this._bcOffset);
  factory AllocationResult(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AllocationResult> reader = _AllocationResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ResourceHandle>? get resourceHandles => const fb.ListReader<ResourceHandle>(ResourceHandle.reader).vTableGetNullable(_bc, _bcOffset, 4);
  api_core_v1.NodeSelector? get availableOnNodes => api_core_v1.NodeSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  bool get shareable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);

  @override
  String toString() {
    return 'AllocationResult{resourceHandles: ${resourceHandles}, availableOnNodes: ${availableOnNodes}, shareable: ${shareable}}';
  }
}

class _AllocationResultReader extends fb.TableReader<AllocationResult> {
  const _AllocationResultReader();

  @override
  AllocationResult createObject(fb.BufferContext bc, int offset) => 
    AllocationResult._(bc, offset);
}

class AllocationResultBuilder {
  AllocationResultBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addResourceHandlesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAvailableOnNodesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addShareable(bool? shareable) {
    fbBuilder.addBool(2, shareable);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AllocationResultObjectBuilder extends fb.ObjectBuilder {
  final List<ResourceHandleObjectBuilder>? _resourceHandles;
  final api_core_v1.NodeSelectorObjectBuilder? _availableOnNodes;
  final bool? _shareable;

  AllocationResultObjectBuilder({
    List<ResourceHandleObjectBuilder>? resourceHandles,
    api_core_v1.NodeSelectorObjectBuilder? availableOnNodes,
    bool? shareable,
  })
      : _resourceHandles = resourceHandles,
        _availableOnNodes = availableOnNodes,
        _shareable = shareable;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? resourceHandlesOffset = _resourceHandles == null ? null
        : fbBuilder.writeList(_resourceHandles!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? availableOnNodesOffset = _availableOnNodes?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, resourceHandlesOffset);
    fbBuilder.addOffset(1, availableOnNodesOffset);
    fbBuilder.addBool(2, _shareable);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class AllocationResultModel {
  AllocationResultModel._(this._bc, this._bcOffset);
  factory AllocationResultModel(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<AllocationResultModel> reader = _AllocationResultModelReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  NamedResourcesAllocationResult? get namedResources => NamedResourcesAllocationResult.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'AllocationResultModel{namedResources: ${namedResources}}';
  }
}

class _AllocationResultModelReader extends fb.TableReader<AllocationResultModel> {
  const _AllocationResultModelReader();

  @override
  AllocationResultModel createObject(fb.BufferContext bc, int offset) => 
    AllocationResultModel._(bc, offset);
}

class AllocationResultModelBuilder {
  AllocationResultModelBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNamedResourcesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AllocationResultModelObjectBuilder extends fb.ObjectBuilder {
  final NamedResourcesAllocationResultObjectBuilder? _namedResources;

  AllocationResultModelObjectBuilder({
    NamedResourcesAllocationResultObjectBuilder? namedResources,
  })
      : _namedResources = namedResources;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namedResourcesOffset = _namedResources?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, namedResourcesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DriverAllocationResult {
  DriverAllocationResult._(this._bc, this._bcOffset);
  factory DriverAllocationResult(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DriverAllocationResult> reader = _DriverAllocationResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_runtime.RawExtension? get vendorRequestParameters => apimachinery_pkg_runtime.RawExtension.reader.vTableGetNullable(_bc, _bcOffset, 4);
  AllocationResultModel? get allocationResultModel => AllocationResultModel.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DriverAllocationResult{vendorRequestParameters: ${vendorRequestParameters}, allocationResultModel: ${allocationResultModel}}';
  }
}

class _DriverAllocationResultReader extends fb.TableReader<DriverAllocationResult> {
  const _DriverAllocationResultReader();

  @override
  DriverAllocationResult createObject(fb.BufferContext bc, int offset) => 
    DriverAllocationResult._(bc, offset);
}

class DriverAllocationResultBuilder {
  DriverAllocationResultBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addVendorRequestParametersOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAllocationResultModelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DriverAllocationResultObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_runtime.RawExtensionObjectBuilder? _vendorRequestParameters;
  final AllocationResultModelObjectBuilder? _allocationResultModel;

  DriverAllocationResultObjectBuilder({
    apimachinery_pkg_runtime.RawExtensionObjectBuilder? vendorRequestParameters,
    AllocationResultModelObjectBuilder? allocationResultModel,
  })
      : _vendorRequestParameters = vendorRequestParameters,
        _allocationResultModel = allocationResultModel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? vendorRequestParametersOffset = _vendorRequestParameters?.getOrCreateOffset(fbBuilder);
    final int? allocationResultModelOffset = _allocationResultModel?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, vendorRequestParametersOffset);
    fbBuilder.addOffset(1, allocationResultModelOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DriverRequests {
  DriverRequests._(this._bc, this._bcOffset);
  factory DriverRequests(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DriverRequests> reader = _DriverRequestsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get driverName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_runtime.RawExtension? get vendorParameters => apimachinery_pkg_runtime.RawExtension.reader.vTableGetNullable(_bc, _bcOffset, 6);
  List<ResourceRequest>? get requests => const fb.ListReader<ResourceRequest>(ResourceRequest.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'DriverRequests{driverName: ${driverName}, vendorParameters: ${vendorParameters}, requests: ${requests}}';
  }
}

class _DriverRequestsReader extends fb.TableReader<DriverRequests> {
  const _DriverRequestsReader();

  @override
  DriverRequests createObject(fb.BufferContext bc, int offset) => 
    DriverRequests._(bc, offset);
}

class DriverRequestsBuilder {
  DriverRequestsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addDriverNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVendorParametersOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addRequestsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DriverRequestsObjectBuilder extends fb.ObjectBuilder {
  final String? _driverName;
  final apimachinery_pkg_runtime.RawExtensionObjectBuilder? _vendorParameters;
  final List<ResourceRequestObjectBuilder>? _requests;

  DriverRequestsObjectBuilder({
    String? driverName,
    apimachinery_pkg_runtime.RawExtensionObjectBuilder? vendorParameters,
    List<ResourceRequestObjectBuilder>? requests,
  })
      : _driverName = driverName,
        _vendorParameters = vendorParameters,
        _requests = requests;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driverNameOffset = _driverName == null ? null
        : fbBuilder.writeString(_driverName!);
    final int? vendorParametersOffset = _vendorParameters?.getOrCreateOffset(fbBuilder);
    final int? requestsOffset = _requests == null ? null
        : fbBuilder.writeList(_requests!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, driverNameOffset);
    fbBuilder.addOffset(1, vendorParametersOffset);
    fbBuilder.addOffset(2, requestsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamedResourcesAllocationResult {
  NamedResourcesAllocationResult._(this._bc, this._bcOffset);
  factory NamedResourcesAllocationResult(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamedResourcesAllocationResult> reader = _NamedResourcesAllocationResultReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NamedResourcesAllocationResult{name: ${name}}';
  }
}

class _NamedResourcesAllocationResultReader extends fb.TableReader<NamedResourcesAllocationResult> {
  const _NamedResourcesAllocationResultReader();

  @override
  NamedResourcesAllocationResult createObject(fb.BufferContext bc, int offset) => 
    NamedResourcesAllocationResult._(bc, offset);
}

class NamedResourcesAllocationResultBuilder {
  NamedResourcesAllocationResultBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamedResourcesAllocationResultObjectBuilder extends fb.ObjectBuilder {
  final String? _name;

  NamedResourcesAllocationResultObjectBuilder({
    String? name,
  })
      : _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamedResourcesAttribute {
  NamedResourcesAttribute._(this._bc, this._bcOffset);
  factory NamedResourcesAttribute(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamedResourcesAttribute> reader = _NamedResourcesAttributeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  NamedResourcesAttributeValue? get attributeValue => NamedResourcesAttributeValue.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NamedResourcesAttribute{name: ${name}, attributeValue: ${attributeValue}}';
  }
}

class _NamedResourcesAttributeReader extends fb.TableReader<NamedResourcesAttribute> {
  const _NamedResourcesAttributeReader();

  @override
  NamedResourcesAttribute createObject(fb.BufferContext bc, int offset) => 
    NamedResourcesAttribute._(bc, offset);
}

class NamedResourcesAttributeBuilder {
  NamedResourcesAttributeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAttributeValueOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamedResourcesAttributeObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final NamedResourcesAttributeValueObjectBuilder? _attributeValue;

  NamedResourcesAttributeObjectBuilder({
    String? name,
    NamedResourcesAttributeValueObjectBuilder? attributeValue,
  })
      : _name = name,
        _attributeValue = attributeValue;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? attributeValueOffset = _attributeValue?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, attributeValueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamedResourcesAttributeValue {
  NamedResourcesAttributeValue._(this._bc, this._bcOffset);
  factory NamedResourcesAttributeValue(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamedResourcesAttributeValue> reader = _NamedResourcesAttributeValueReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_api_resource.Quantity? get quantity => apimachinery_pkg_api_resource.Quantity.reader.vTableGetNullable(_bc, _bcOffset, 4);
  bool get bool => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  int get int => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  NamedResourcesIntSlice? get intSlice => NamedResourcesIntSlice.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get string => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  NamedResourcesStringSlice? get stringSlice => NamedResourcesStringSlice.reader.vTableGetNullable(_bc, _bcOffset, 14);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'NamedResourcesAttributeValue{quantity: ${quantity}, bool: ${bool}, int: ${int}, intSlice: ${intSlice}, string: ${string}, stringSlice: ${stringSlice}, version: ${version}}';
  }
}

class _NamedResourcesAttributeValueReader extends fb.TableReader<NamedResourcesAttributeValue> {
  const _NamedResourcesAttributeValueReader();

  @override
  NamedResourcesAttributeValue createObject(fb.BufferContext bc, int offset) => 
    NamedResourcesAttributeValue._(bc, offset);
}

class NamedResourcesAttributeValueBuilder {
  NamedResourcesAttributeValueBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addQuantityOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBool(bool? bool) {
    fbBuilder.addBool(1, bool);
    return fbBuilder.offset;
  }
  int addInt(int? int) {
    fbBuilder.addInt64(2, int);
    return fbBuilder.offset;
  }
  int addIntSliceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStringOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStringSliceOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamedResourcesAttributeValueObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_api_resource.QuantityObjectBuilder? _quantity;
  final bool? _bool;
  final int? _int;
  final NamedResourcesIntSliceObjectBuilder? _intSlice;
  final String? _string;
  final NamedResourcesStringSliceObjectBuilder? _stringSlice;
  final String? _version;

  NamedResourcesAttributeValueObjectBuilder({
    apimachinery_pkg_api_resource.QuantityObjectBuilder? quantity,
    bool? bool,
    int? int,
    NamedResourcesIntSliceObjectBuilder? intSlice,
    String? string,
    NamedResourcesStringSliceObjectBuilder? stringSlice,
    String? version,
  })
      : _quantity = quantity,
        _bool = bool,
        _int = int,
        _intSlice = intSlice,
        _string = string,
        _stringSlice = stringSlice,
        _version = version;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? quantityOffset = _quantity?.getOrCreateOffset(fbBuilder);
    final int? intSliceOffset = _intSlice?.getOrCreateOffset(fbBuilder);
    final int? stringOffset = _string == null ? null
        : fbBuilder.writeString(_string!);
    final int? stringSliceOffset = _stringSlice?.getOrCreateOffset(fbBuilder);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, quantityOffset);
    fbBuilder.addBool(1, _bool);
    fbBuilder.addInt64(2, _int);
    fbBuilder.addOffset(3, intSliceOffset);
    fbBuilder.addOffset(4, stringOffset);
    fbBuilder.addOffset(5, stringSliceOffset);
    fbBuilder.addOffset(6, versionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamedResourcesFilter {
  NamedResourcesFilter._(this._bc, this._bcOffset);
  factory NamedResourcesFilter(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamedResourcesFilter> reader = _NamedResourcesFilterReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get selector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NamedResourcesFilter{selector: ${selector}}';
  }
}

class _NamedResourcesFilterReader extends fb.TableReader<NamedResourcesFilter> {
  const _NamedResourcesFilterReader();

  @override
  NamedResourcesFilter createObject(fb.BufferContext bc, int offset) => 
    NamedResourcesFilter._(bc, offset);
}

class NamedResourcesFilterBuilder {
  NamedResourcesFilterBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamedResourcesFilterObjectBuilder extends fb.ObjectBuilder {
  final String? _selector;

  NamedResourcesFilterObjectBuilder({
    String? selector,
  })
      : _selector = selector;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector == null ? null
        : fbBuilder.writeString(_selector!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, selectorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamedResourcesInstance {
  NamedResourcesInstance._(this._bc, this._bcOffset);
  factory NamedResourcesInstance(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamedResourcesInstance> reader = _NamedResourcesInstanceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<NamedResourcesAttribute>? get attributes => const fb.ListReader<NamedResourcesAttribute>(NamedResourcesAttribute.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'NamedResourcesInstance{name: ${name}, attributes: ${attributes}}';
  }
}

class _NamedResourcesInstanceReader extends fb.TableReader<NamedResourcesInstance> {
  const _NamedResourcesInstanceReader();

  @override
  NamedResourcesInstance createObject(fb.BufferContext bc, int offset) => 
    NamedResourcesInstance._(bc, offset);
}

class NamedResourcesInstanceBuilder {
  NamedResourcesInstanceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAttributesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamedResourcesInstanceObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final List<NamedResourcesAttributeObjectBuilder>? _attributes;

  NamedResourcesInstanceObjectBuilder({
    String? name,
    List<NamedResourcesAttributeObjectBuilder>? attributes,
  })
      : _name = name,
        _attributes = attributes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? attributesOffset = _attributes == null ? null
        : fbBuilder.writeList(_attributes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, attributesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamedResourcesIntSlice {
  NamedResourcesIntSlice._(this._bc, this._bcOffset);
  factory NamedResourcesIntSlice(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamedResourcesIntSlice> reader = _NamedResourcesIntSliceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get ints => const fb.ListReader<int>(fb.Int64Reader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NamedResourcesIntSlice{ints: ${ints}}';
  }
}

class _NamedResourcesIntSliceReader extends fb.TableReader<NamedResourcesIntSlice> {
  const _NamedResourcesIntSliceReader();

  @override
  NamedResourcesIntSlice createObject(fb.BufferContext bc, int offset) => 
    NamedResourcesIntSlice._(bc, offset);
}

class NamedResourcesIntSliceBuilder {
  NamedResourcesIntSliceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addIntsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamedResourcesIntSliceObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _ints;

  NamedResourcesIntSliceObjectBuilder({
    List<int>? ints,
  })
      : _ints = ints;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? intsOffset = _ints == null ? null
        : fbBuilder.writeListInt64(_ints!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, intsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamedResourcesRequest {
  NamedResourcesRequest._(this._bc, this._bcOffset);
  factory NamedResourcesRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamedResourcesRequest> reader = _NamedResourcesRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get selector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NamedResourcesRequest{selector: ${selector}}';
  }
}

class _NamedResourcesRequestReader extends fb.TableReader<NamedResourcesRequest> {
  const _NamedResourcesRequestReader();

  @override
  NamedResourcesRequest createObject(fb.BufferContext bc, int offset) => 
    NamedResourcesRequest._(bc, offset);
}

class NamedResourcesRequestBuilder {
  NamedResourcesRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addSelectorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamedResourcesRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _selector;

  NamedResourcesRequestObjectBuilder({
    String? selector,
  })
      : _selector = selector;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectorOffset = _selector == null ? null
        : fbBuilder.writeString(_selector!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, selectorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamedResourcesResources {
  NamedResourcesResources._(this._bc, this._bcOffset);
  factory NamedResourcesResources(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamedResourcesResources> reader = _NamedResourcesResourcesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<NamedResourcesInstance>? get instances => const fb.ListReader<NamedResourcesInstance>(NamedResourcesInstance.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NamedResourcesResources{instances: ${instances}}';
  }
}

class _NamedResourcesResourcesReader extends fb.TableReader<NamedResourcesResources> {
  const _NamedResourcesResourcesReader();

  @override
  NamedResourcesResources createObject(fb.BufferContext bc, int offset) => 
    NamedResourcesResources._(bc, offset);
}

class NamedResourcesResourcesBuilder {
  NamedResourcesResourcesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addInstancesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamedResourcesResourcesObjectBuilder extends fb.ObjectBuilder {
  final List<NamedResourcesInstanceObjectBuilder>? _instances;

  NamedResourcesResourcesObjectBuilder({
    List<NamedResourcesInstanceObjectBuilder>? instances,
  })
      : _instances = instances;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? instancesOffset = _instances == null ? null
        : fbBuilder.writeList(_instances!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, instancesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NamedResourcesStringSlice {
  NamedResourcesStringSlice._(this._bc, this._bcOffset);
  factory NamedResourcesStringSlice(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NamedResourcesStringSlice> reader = _NamedResourcesStringSliceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get strings => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NamedResourcesStringSlice{strings: ${strings}}';
  }
}

class _NamedResourcesStringSliceReader extends fb.TableReader<NamedResourcesStringSlice> {
  const _NamedResourcesStringSliceReader();

  @override
  NamedResourcesStringSlice createObject(fb.BufferContext bc, int offset) => 
    NamedResourcesStringSlice._(bc, offset);
}

class NamedResourcesStringSliceBuilder {
  NamedResourcesStringSliceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addStringsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NamedResourcesStringSliceObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _strings;

  NamedResourcesStringSliceObjectBuilder({
    List<String>? strings,
  })
      : _strings = strings;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? stringsOffset = _strings == null ? null
        : fbBuilder.writeList(_strings!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, stringsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodSchedulingContext {
  PodSchedulingContext._(this._bc, this._bcOffset);
  factory PodSchedulingContext(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodSchedulingContext> reader = _PodSchedulingContextReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  PodSchedulingContextSpec? get spec => PodSchedulingContextSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  PodSchedulingContextStatus? get status => PodSchedulingContextStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'PodSchedulingContext{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _PodSchedulingContextReader extends fb.TableReader<PodSchedulingContext> {
  const _PodSchedulingContextReader();

  @override
  PodSchedulingContext createObject(fb.BufferContext bc, int offset) => 
    PodSchedulingContext._(bc, offset);
}

class PodSchedulingContextBuilder {
  PodSchedulingContextBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodSchedulingContextObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final PodSchedulingContextSpecObjectBuilder? _spec;
  final PodSchedulingContextStatusObjectBuilder? _status;

  PodSchedulingContextObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    PodSchedulingContextSpecObjectBuilder? spec,
    PodSchedulingContextStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodSchedulingContextList {
  PodSchedulingContextList._(this._bc, this._bcOffset);
  factory PodSchedulingContextList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodSchedulingContextList> reader = _PodSchedulingContextListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<PodSchedulingContext>? get items => const fb.ListReader<PodSchedulingContext>(PodSchedulingContext.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodSchedulingContextList{metadata: ${metadata}, items: ${items}}';
  }
}

class _PodSchedulingContextListReader extends fb.TableReader<PodSchedulingContextList> {
  const _PodSchedulingContextListReader();

  @override
  PodSchedulingContextList createObject(fb.BufferContext bc, int offset) => 
    PodSchedulingContextList._(bc, offset);
}

class PodSchedulingContextListBuilder {
  PodSchedulingContextListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodSchedulingContextListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<PodSchedulingContextObjectBuilder>? _items;

  PodSchedulingContextListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<PodSchedulingContextObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodSchedulingContextSpec {
  PodSchedulingContextSpec._(this._bc, this._bcOffset);
  factory PodSchedulingContextSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodSchedulingContextSpec> reader = _PodSchedulingContextSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get selectedNode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get potentialNodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PodSchedulingContextSpec{selectedNode: ${selectedNode}, potentialNodes: ${potentialNodes}}';
  }
}

class _PodSchedulingContextSpecReader extends fb.TableReader<PodSchedulingContextSpec> {
  const _PodSchedulingContextSpecReader();

  @override
  PodSchedulingContextSpec createObject(fb.BufferContext bc, int offset) => 
    PodSchedulingContextSpec._(bc, offset);
}

class PodSchedulingContextSpecBuilder {
  PodSchedulingContextSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSelectedNodeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPotentialNodesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodSchedulingContextSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _selectedNode;
  final List<String>? _potentialNodes;

  PodSchedulingContextSpecObjectBuilder({
    String? selectedNode,
    List<String>? potentialNodes,
  })
      : _selectedNode = selectedNode,
        _potentialNodes = potentialNodes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selectedNodeOffset = _selectedNode == null ? null
        : fbBuilder.writeString(_selectedNode!);
    final int? potentialNodesOffset = _potentialNodes == null ? null
        : fbBuilder.writeList(_potentialNodes!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, selectedNodeOffset);
    fbBuilder.addOffset(1, potentialNodesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PodSchedulingContextStatus {
  PodSchedulingContextStatus._(this._bc, this._bcOffset);
  factory PodSchedulingContextStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PodSchedulingContextStatus> reader = _PodSchedulingContextStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ResourceClaimSchedulingStatus>? get resourceClaims => const fb.ListReader<ResourceClaimSchedulingStatus>(ResourceClaimSchedulingStatus.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PodSchedulingContextStatus{resourceClaims: ${resourceClaims}}';
  }
}

class _PodSchedulingContextStatusReader extends fb.TableReader<PodSchedulingContextStatus> {
  const _PodSchedulingContextStatusReader();

  @override
  PodSchedulingContextStatus createObject(fb.BufferContext bc, int offset) => 
    PodSchedulingContextStatus._(bc, offset);
}

class PodSchedulingContextStatusBuilder {
  PodSchedulingContextStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addResourceClaimsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PodSchedulingContextStatusObjectBuilder extends fb.ObjectBuilder {
  final List<ResourceClaimSchedulingStatusObjectBuilder>? _resourceClaims;

  PodSchedulingContextStatusObjectBuilder({
    List<ResourceClaimSchedulingStatusObjectBuilder>? resourceClaims,
  })
      : _resourceClaims = resourceClaims;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? resourceClaimsOffset = _resourceClaims == null ? null
        : fbBuilder.writeList(_resourceClaims!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, resourceClaimsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaim {
  ResourceClaim._(this._bc, this._bcOffset);
  factory ResourceClaim(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaim> reader = _ResourceClaimReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ResourceClaimSpec? get spec => ResourceClaimSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ResourceClaimStatus? get status => ResourceClaimStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ResourceClaim{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ResourceClaimReader extends fb.TableReader<ResourceClaim> {
  const _ResourceClaimReader();

  @override
  ResourceClaim createObject(fb.BufferContext bc, int offset) => 
    ResourceClaim._(bc, offset);
}

class ResourceClaimBuilder {
  ResourceClaimBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ResourceClaimSpecObjectBuilder? _spec;
  final ResourceClaimStatusObjectBuilder? _status;

  ResourceClaimObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ResourceClaimSpecObjectBuilder? spec,
    ResourceClaimStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimConsumerReference {
  ResourceClaimConsumerReference._(this._bc, this._bcOffset);
  factory ResourceClaimConsumerReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimConsumerReference> reader = _ResourceClaimConsumerReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get apiGroup => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get resource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get uid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ResourceClaimConsumerReference{apiGroup: ${apiGroup}, resource: ${resource}, name: ${name}, uid: ${uid}}';
  }
}

class _ResourceClaimConsumerReferenceReader extends fb.TableReader<ResourceClaimConsumerReference> {
  const _ResourceClaimConsumerReferenceReader();

  @override
  ResourceClaimConsumerReference createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimConsumerReference._(bc, offset);
}

class ResourceClaimConsumerReferenceBuilder {
  ResourceClaimConsumerReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addApiGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addUidOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimConsumerReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _apiGroup;
  final String? _resource;
  final String? _name;
  final String? _uid;

  ResourceClaimConsumerReferenceObjectBuilder({
    String? apiGroup,
    String? resource,
    String? name,
    String? uid,
  })
      : _apiGroup = apiGroup,
        _resource = resource,
        _name = name,
        _uid = uid;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiGroupOffset = _apiGroup == null ? null
        : fbBuilder.writeString(_apiGroup!);
    final int? resourceOffset = _resource == null ? null
        : fbBuilder.writeString(_resource!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? uidOffset = _uid == null ? null
        : fbBuilder.writeString(_uid!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, apiGroupOffset);
    fbBuilder.addOffset(1, resourceOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, uidOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimList {
  ResourceClaimList._(this._bc, this._bcOffset);
  factory ResourceClaimList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimList> reader = _ResourceClaimListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ResourceClaim>? get items => const fb.ListReader<ResourceClaim>(ResourceClaim.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceClaimList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ResourceClaimListReader extends fb.TableReader<ResourceClaimList> {
  const _ResourceClaimListReader();

  @override
  ResourceClaimList createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimList._(bc, offset);
}

class ResourceClaimListBuilder {
  ResourceClaimListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ResourceClaimObjectBuilder>? _items;

  ResourceClaimListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ResourceClaimObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimParameters {
  ResourceClaimParameters._(this._bc, this._bcOffset);
  factory ResourceClaimParameters(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimParameters> reader = _ResourceClaimParametersReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ResourceClaimParametersReference? get generatedFrom => ResourceClaimParametersReference.reader.vTableGetNullable(_bc, _bcOffset, 6);
  bool get shareable => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  List<DriverRequests>? get driverRequests => const fb.ListReader<DriverRequests>(DriverRequests.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ResourceClaimParameters{metadata: ${metadata}, generatedFrom: ${generatedFrom}, shareable: ${shareable}, driverRequests: ${driverRequests}}';
  }
}

class _ResourceClaimParametersReader extends fb.TableReader<ResourceClaimParameters> {
  const _ResourceClaimParametersReader();

  @override
  ResourceClaimParameters createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimParameters._(bc, offset);
}

class ResourceClaimParametersBuilder {
  ResourceClaimParametersBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addGeneratedFromOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addShareable(bool? shareable) {
    fbBuilder.addBool(2, shareable);
    return fbBuilder.offset;
  }
  int addDriverRequestsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimParametersObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ResourceClaimParametersReferenceObjectBuilder? _generatedFrom;
  final bool? _shareable;
  final List<DriverRequestsObjectBuilder>? _driverRequests;

  ResourceClaimParametersObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ResourceClaimParametersReferenceObjectBuilder? generatedFrom,
    bool? shareable,
    List<DriverRequestsObjectBuilder>? driverRequests,
  })
      : _metadata = metadata,
        _generatedFrom = generatedFrom,
        _shareable = shareable,
        _driverRequests = driverRequests;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? generatedFromOffset = _generatedFrom?.getOrCreateOffset(fbBuilder);
    final int? driverRequestsOffset = _driverRequests == null ? null
        : fbBuilder.writeList(_driverRequests!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, generatedFromOffset);
    fbBuilder.addBool(2, _shareable);
    fbBuilder.addOffset(3, driverRequestsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimParametersList {
  ResourceClaimParametersList._(this._bc, this._bcOffset);
  factory ResourceClaimParametersList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimParametersList> reader = _ResourceClaimParametersListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ResourceClaimParameters>? get items => const fb.ListReader<ResourceClaimParameters>(ResourceClaimParameters.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceClaimParametersList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ResourceClaimParametersListReader extends fb.TableReader<ResourceClaimParametersList> {
  const _ResourceClaimParametersListReader();

  @override
  ResourceClaimParametersList createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimParametersList._(bc, offset);
}

class ResourceClaimParametersListBuilder {
  ResourceClaimParametersListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimParametersListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ResourceClaimParametersObjectBuilder>? _items;

  ResourceClaimParametersListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ResourceClaimParametersObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimParametersReference {
  ResourceClaimParametersReference._(this._bc, this._bcOffset);
  factory ResourceClaimParametersReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimParametersReference> reader = _ResourceClaimParametersReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get apiGroup => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ResourceClaimParametersReference{apiGroup: ${apiGroup}, kind: ${kind}, name: ${name}}';
  }
}

class _ResourceClaimParametersReferenceReader extends fb.TableReader<ResourceClaimParametersReference> {
  const _ResourceClaimParametersReferenceReader();

  @override
  ResourceClaimParametersReference createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimParametersReference._(bc, offset);
}

class ResourceClaimParametersReferenceBuilder {
  ResourceClaimParametersReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addApiGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimParametersReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _apiGroup;
  final String? _kind;
  final String? _name;

  ResourceClaimParametersReferenceObjectBuilder({
    String? apiGroup,
    String? kind,
    String? name,
  })
      : _apiGroup = apiGroup,
        _kind = kind,
        _name = name;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiGroupOffset = _apiGroup == null ? null
        : fbBuilder.writeString(_apiGroup!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, apiGroupOffset);
    fbBuilder.addOffset(1, kindOffset);
    fbBuilder.addOffset(2, nameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimSchedulingStatus {
  ResourceClaimSchedulingStatus._(this._bc, this._bcOffset);
  factory ResourceClaimSchedulingStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimSchedulingStatus> reader = _ResourceClaimSchedulingStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<String>? get unsuitableNodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceClaimSchedulingStatus{name: ${name}, unsuitableNodes: ${unsuitableNodes}}';
  }
}

class _ResourceClaimSchedulingStatusReader extends fb.TableReader<ResourceClaimSchedulingStatus> {
  const _ResourceClaimSchedulingStatusReader();

  @override
  ResourceClaimSchedulingStatus createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimSchedulingStatus._(bc, offset);
}

class ResourceClaimSchedulingStatusBuilder {
  ResourceClaimSchedulingStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addUnsuitableNodesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimSchedulingStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final List<String>? _unsuitableNodes;

  ResourceClaimSchedulingStatusObjectBuilder({
    String? name,
    List<String>? unsuitableNodes,
  })
      : _name = name,
        _unsuitableNodes = unsuitableNodes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? unsuitableNodesOffset = _unsuitableNodes == null ? null
        : fbBuilder.writeList(_unsuitableNodes!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, unsuitableNodesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimSpec {
  ResourceClaimSpec._(this._bc, this._bcOffset);
  factory ResourceClaimSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimSpec> reader = _ResourceClaimSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get resourceClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ResourceClaimParametersReference? get parametersRef => ResourceClaimParametersReference.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get allocationMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ResourceClaimSpec{resourceClassName: ${resourceClassName}, parametersRef: ${parametersRef}, allocationMode: ${allocationMode}}';
  }
}

class _ResourceClaimSpecReader extends fb.TableReader<ResourceClaimSpec> {
  const _ResourceClaimSpecReader();

  @override
  ResourceClaimSpec createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimSpec._(bc, offset);
}

class ResourceClaimSpecBuilder {
  ResourceClaimSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addResourceClassNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addParametersRefOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAllocationModeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _resourceClassName;
  final ResourceClaimParametersReferenceObjectBuilder? _parametersRef;
  final String? _allocationMode;

  ResourceClaimSpecObjectBuilder({
    String? resourceClassName,
    ResourceClaimParametersReferenceObjectBuilder? parametersRef,
    String? allocationMode,
  })
      : _resourceClassName = resourceClassName,
        _parametersRef = parametersRef,
        _allocationMode = allocationMode;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? resourceClassNameOffset = _resourceClassName == null ? null
        : fbBuilder.writeString(_resourceClassName!);
    final int? parametersRefOffset = _parametersRef?.getOrCreateOffset(fbBuilder);
    final int? allocationModeOffset = _allocationMode == null ? null
        : fbBuilder.writeString(_allocationMode!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, resourceClassNameOffset);
    fbBuilder.addOffset(1, parametersRefOffset);
    fbBuilder.addOffset(2, allocationModeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimStatus {
  ResourceClaimStatus._(this._bc, this._bcOffset);
  factory ResourceClaimStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimStatus> reader = _ResourceClaimStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get driverName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  AllocationResult? get allocation => AllocationResult.reader.vTableGetNullable(_bc, _bcOffset, 6);
  List<ResourceClaimConsumerReference>? get reservedFor => const fb.ListReader<ResourceClaimConsumerReference>(ResourceClaimConsumerReference.reader).vTableGetNullable(_bc, _bcOffset, 8);
  bool get deallocationRequested => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);

  @override
  String toString() {
    return 'ResourceClaimStatus{driverName: ${driverName}, allocation: ${allocation}, reservedFor: ${reservedFor}, deallocationRequested: ${deallocationRequested}}';
  }
}

class _ResourceClaimStatusReader extends fb.TableReader<ResourceClaimStatus> {
  const _ResourceClaimStatusReader();

  @override
  ResourceClaimStatus createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimStatus._(bc, offset);
}

class ResourceClaimStatusBuilder {
  ResourceClaimStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addDriverNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addAllocationOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addReservedForOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDeallocationRequested(bool? deallocationRequested) {
    fbBuilder.addBool(3, deallocationRequested);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _driverName;
  final AllocationResultObjectBuilder? _allocation;
  final List<ResourceClaimConsumerReferenceObjectBuilder>? _reservedFor;
  final bool? _deallocationRequested;

  ResourceClaimStatusObjectBuilder({
    String? driverName,
    AllocationResultObjectBuilder? allocation,
    List<ResourceClaimConsumerReferenceObjectBuilder>? reservedFor,
    bool? deallocationRequested,
  })
      : _driverName = driverName,
        _allocation = allocation,
        _reservedFor = reservedFor,
        _deallocationRequested = deallocationRequested;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driverNameOffset = _driverName == null ? null
        : fbBuilder.writeString(_driverName!);
    final int? allocationOffset = _allocation?.getOrCreateOffset(fbBuilder);
    final int? reservedForOffset = _reservedFor == null ? null
        : fbBuilder.writeList(_reservedFor!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, driverNameOffset);
    fbBuilder.addOffset(1, allocationOffset);
    fbBuilder.addOffset(2, reservedForOffset);
    fbBuilder.addBool(3, _deallocationRequested);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimTemplate {
  ResourceClaimTemplate._(this._bc, this._bcOffset);
  factory ResourceClaimTemplate(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimTemplate> reader = _ResourceClaimTemplateReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ResourceClaimTemplateSpec? get spec => ResourceClaimTemplateSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceClaimTemplate{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _ResourceClaimTemplateReader extends fb.TableReader<ResourceClaimTemplate> {
  const _ResourceClaimTemplateReader();

  @override
  ResourceClaimTemplate createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimTemplate._(bc, offset);
}

class ResourceClaimTemplateBuilder {
  ResourceClaimTemplateBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimTemplateObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ResourceClaimTemplateSpecObjectBuilder? _spec;

  ResourceClaimTemplateObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ResourceClaimTemplateSpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimTemplateList {
  ResourceClaimTemplateList._(this._bc, this._bcOffset);
  factory ResourceClaimTemplateList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimTemplateList> reader = _ResourceClaimTemplateListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ResourceClaimTemplate>? get items => const fb.ListReader<ResourceClaimTemplate>(ResourceClaimTemplate.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceClaimTemplateList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ResourceClaimTemplateListReader extends fb.TableReader<ResourceClaimTemplateList> {
  const _ResourceClaimTemplateListReader();

  @override
  ResourceClaimTemplateList createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimTemplateList._(bc, offset);
}

class ResourceClaimTemplateListBuilder {
  ResourceClaimTemplateListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimTemplateListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ResourceClaimTemplateObjectBuilder>? _items;

  ResourceClaimTemplateListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ResourceClaimTemplateObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClaimTemplateSpec {
  ResourceClaimTemplateSpec._(this._bc, this._bcOffset);
  factory ResourceClaimTemplateSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClaimTemplateSpec> reader = _ResourceClaimTemplateSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ResourceClaimSpec? get spec => ResourceClaimSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceClaimTemplateSpec{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _ResourceClaimTemplateSpecReader extends fb.TableReader<ResourceClaimTemplateSpec> {
  const _ResourceClaimTemplateSpecReader();

  @override
  ResourceClaimTemplateSpec createObject(fb.BufferContext bc, int offset) => 
    ResourceClaimTemplateSpec._(bc, offset);
}

class ResourceClaimTemplateSpecBuilder {
  ResourceClaimTemplateSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClaimTemplateSpecObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ResourceClaimSpecObjectBuilder? _spec;

  ResourceClaimTemplateSpecObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ResourceClaimSpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClass {
  ResourceClass._(this._bc, this._bcOffset);
  factory ResourceClass(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClass> reader = _ResourceClassReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get driverName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  ResourceClassParametersReference? get parametersRef => ResourceClassParametersReference.reader.vTableGetNullable(_bc, _bcOffset, 8);
  api_core_v1.NodeSelector? get suitableNodes => api_core_v1.NodeSelector.reader.vTableGetNullable(_bc, _bcOffset, 10);
  bool get structuredParameters => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);

  @override
  String toString() {
    return 'ResourceClass{metadata: ${metadata}, driverName: ${driverName}, parametersRef: ${parametersRef}, suitableNodes: ${suitableNodes}, structuredParameters: ${structuredParameters}}';
  }
}

class _ResourceClassReader extends fb.TableReader<ResourceClass> {
  const _ResourceClassReader();

  @override
  ResourceClass createObject(fb.BufferContext bc, int offset) => 
    ResourceClass._(bc, offset);
}

class ResourceClassBuilder {
  ResourceClassBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDriverNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addParametersRefOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSuitableNodesOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addStructuredParameters(bool? structuredParameters) {
    fbBuilder.addBool(4, structuredParameters);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClassObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final String? _driverName;
  final ResourceClassParametersReferenceObjectBuilder? _parametersRef;
  final api_core_v1.NodeSelectorObjectBuilder? _suitableNodes;
  final bool? _structuredParameters;

  ResourceClassObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    String? driverName,
    ResourceClassParametersReferenceObjectBuilder? parametersRef,
    api_core_v1.NodeSelectorObjectBuilder? suitableNodes,
    bool? structuredParameters,
  })
      : _metadata = metadata,
        _driverName = driverName,
        _parametersRef = parametersRef,
        _suitableNodes = suitableNodes,
        _structuredParameters = structuredParameters;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? driverNameOffset = _driverName == null ? null
        : fbBuilder.writeString(_driverName!);
    final int? parametersRefOffset = _parametersRef?.getOrCreateOffset(fbBuilder);
    final int? suitableNodesOffset = _suitableNodes?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, driverNameOffset);
    fbBuilder.addOffset(2, parametersRefOffset);
    fbBuilder.addOffset(3, suitableNodesOffset);
    fbBuilder.addBool(4, _structuredParameters);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClassList {
  ResourceClassList._(this._bc, this._bcOffset);
  factory ResourceClassList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClassList> reader = _ResourceClassListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ResourceClass>? get items => const fb.ListReader<ResourceClass>(ResourceClass.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceClassList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ResourceClassListReader extends fb.TableReader<ResourceClassList> {
  const _ResourceClassListReader();

  @override
  ResourceClassList createObject(fb.BufferContext bc, int offset) => 
    ResourceClassList._(bc, offset);
}

class ResourceClassListBuilder {
  ResourceClassListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClassListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ResourceClassObjectBuilder>? _items;

  ResourceClassListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ResourceClassObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClassParameters {
  ResourceClassParameters._(this._bc, this._bcOffset);
  factory ResourceClassParameters(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClassParameters> reader = _ResourceClassParametersReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ResourceClassParametersReference? get generatedFrom => ResourceClassParametersReference.reader.vTableGetNullable(_bc, _bcOffset, 6);
  List<VendorParameters>? get vendorParameters => const fb.ListReader<VendorParameters>(VendorParameters.reader).vTableGetNullable(_bc, _bcOffset, 8);
  List<ResourceFilter>? get filters => const fb.ListReader<ResourceFilter>(ResourceFilter.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ResourceClassParameters{metadata: ${metadata}, generatedFrom: ${generatedFrom}, vendorParameters: ${vendorParameters}, filters: ${filters}}';
  }
}

class _ResourceClassParametersReader extends fb.TableReader<ResourceClassParameters> {
  const _ResourceClassParametersReader();

  @override
  ResourceClassParameters createObject(fb.BufferContext bc, int offset) => 
    ResourceClassParameters._(bc, offset);
}

class ResourceClassParametersBuilder {
  ResourceClassParametersBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addGeneratedFromOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addVendorParametersOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addFiltersOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClassParametersObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ResourceClassParametersReferenceObjectBuilder? _generatedFrom;
  final List<VendorParametersObjectBuilder>? _vendorParameters;
  final List<ResourceFilterObjectBuilder>? _filters;

  ResourceClassParametersObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ResourceClassParametersReferenceObjectBuilder? generatedFrom,
    List<VendorParametersObjectBuilder>? vendorParameters,
    List<ResourceFilterObjectBuilder>? filters,
  })
      : _metadata = metadata,
        _generatedFrom = generatedFrom,
        _vendorParameters = vendorParameters,
        _filters = filters;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? generatedFromOffset = _generatedFrom?.getOrCreateOffset(fbBuilder);
    final int? vendorParametersOffset = _vendorParameters == null ? null
        : fbBuilder.writeList(_vendorParameters!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? filtersOffset = _filters == null ? null
        : fbBuilder.writeList(_filters!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, generatedFromOffset);
    fbBuilder.addOffset(2, vendorParametersOffset);
    fbBuilder.addOffset(3, filtersOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClassParametersList {
  ResourceClassParametersList._(this._bc, this._bcOffset);
  factory ResourceClassParametersList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClassParametersList> reader = _ResourceClassParametersListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ResourceClassParameters>? get items => const fb.ListReader<ResourceClassParameters>(ResourceClassParameters.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceClassParametersList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ResourceClassParametersListReader extends fb.TableReader<ResourceClassParametersList> {
  const _ResourceClassParametersListReader();

  @override
  ResourceClassParametersList createObject(fb.BufferContext bc, int offset) => 
    ResourceClassParametersList._(bc, offset);
}

class ResourceClassParametersListBuilder {
  ResourceClassParametersListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClassParametersListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ResourceClassParametersObjectBuilder>? _items;

  ResourceClassParametersListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ResourceClassParametersObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceClassParametersReference {
  ResourceClassParametersReference._(this._bc, this._bcOffset);
  factory ResourceClassParametersReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceClassParametersReference> reader = _ResourceClassParametersReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get apiGroup => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ResourceClassParametersReference{apiGroup: ${apiGroup}, kind: ${kind}, name: ${name}, namespace: ${namespace}}';
  }
}

class _ResourceClassParametersReferenceReader extends fb.TableReader<ResourceClassParametersReference> {
  const _ResourceClassParametersReferenceReader();

  @override
  ResourceClassParametersReference createObject(fb.BufferContext bc, int offset) => 
    ResourceClassParametersReference._(bc, offset);
}

class ResourceClassParametersReferenceBuilder {
  ResourceClassParametersReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addApiGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceClassParametersReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _apiGroup;
  final String? _kind;
  final String? _name;
  final String? _namespace;

  ResourceClassParametersReferenceObjectBuilder({
    String? apiGroup,
    String? kind,
    String? name,
    String? namespace,
  })
      : _apiGroup = apiGroup,
        _kind = kind,
        _name = name,
        _namespace = namespace;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiGroupOffset = _apiGroup == null ? null
        : fbBuilder.writeString(_apiGroup!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, apiGroupOffset);
    fbBuilder.addOffset(1, kindOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, namespaceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceFilter {
  ResourceFilter._(this._bc, this._bcOffset);
  factory ResourceFilter(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceFilter> reader = _ResourceFilterReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get driverName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  ResourceFilterModel? get resourceFilterModel => ResourceFilterModel.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceFilter{driverName: ${driverName}, resourceFilterModel: ${resourceFilterModel}}';
  }
}

class _ResourceFilterReader extends fb.TableReader<ResourceFilter> {
  const _ResourceFilterReader();

  @override
  ResourceFilter createObject(fb.BufferContext bc, int offset) => 
    ResourceFilter._(bc, offset);
}

class ResourceFilterBuilder {
  ResourceFilterBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addDriverNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceFilterModelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceFilterObjectBuilder extends fb.ObjectBuilder {
  final String? _driverName;
  final ResourceFilterModelObjectBuilder? _resourceFilterModel;

  ResourceFilterObjectBuilder({
    String? driverName,
    ResourceFilterModelObjectBuilder? resourceFilterModel,
  })
      : _driverName = driverName,
        _resourceFilterModel = resourceFilterModel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driverNameOffset = _driverName == null ? null
        : fbBuilder.writeString(_driverName!);
    final int? resourceFilterModelOffset = _resourceFilterModel?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, driverNameOffset);
    fbBuilder.addOffset(1, resourceFilterModelOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceFilterModel {
  ResourceFilterModel._(this._bc, this._bcOffset);
  factory ResourceFilterModel(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceFilterModel> reader = _ResourceFilterModelReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  NamedResourcesFilter? get namedResources => NamedResourcesFilter.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ResourceFilterModel{namedResources: ${namedResources}}';
  }
}

class _ResourceFilterModelReader extends fb.TableReader<ResourceFilterModel> {
  const _ResourceFilterModelReader();

  @override
  ResourceFilterModel createObject(fb.BufferContext bc, int offset) => 
    ResourceFilterModel._(bc, offset);
}

class ResourceFilterModelBuilder {
  ResourceFilterModelBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNamedResourcesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceFilterModelObjectBuilder extends fb.ObjectBuilder {
  final NamedResourcesFilterObjectBuilder? _namedResources;

  ResourceFilterModelObjectBuilder({
    NamedResourcesFilterObjectBuilder? namedResources,
  })
      : _namedResources = namedResources;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namedResourcesOffset = _namedResources?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, namedResourcesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceHandle {
  ResourceHandle._(this._bc, this._bcOffset);
  factory ResourceHandle(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceHandle> reader = _ResourceHandleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get driverName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get data => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  StructuredResourceHandle? get structuredData => StructuredResourceHandle.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ResourceHandle{driverName: ${driverName}, data: ${data}, structuredData: ${structuredData}}';
  }
}

class _ResourceHandleReader extends fb.TableReader<ResourceHandle> {
  const _ResourceHandleReader();

  @override
  ResourceHandle createObject(fb.BufferContext bc, int offset) => 
    ResourceHandle._(bc, offset);
}

class ResourceHandleBuilder {
  ResourceHandleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addDriverNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStructuredDataOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceHandleObjectBuilder extends fb.ObjectBuilder {
  final String? _driverName;
  final String? _data;
  final StructuredResourceHandleObjectBuilder? _structuredData;

  ResourceHandleObjectBuilder({
    String? driverName,
    String? data,
    StructuredResourceHandleObjectBuilder? structuredData,
  })
      : _driverName = driverName,
        _data = data,
        _structuredData = structuredData;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driverNameOffset = _driverName == null ? null
        : fbBuilder.writeString(_driverName!);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeString(_data!);
    final int? structuredDataOffset = _structuredData?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, driverNameOffset);
    fbBuilder.addOffset(1, dataOffset);
    fbBuilder.addOffset(2, structuredDataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceModel {
  ResourceModel._(this._bc, this._bcOffset);
  factory ResourceModel(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceModel> reader = _ResourceModelReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  NamedResourcesResources? get namedResources => NamedResourcesResources.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ResourceModel{namedResources: ${namedResources}}';
  }
}

class _ResourceModelReader extends fb.TableReader<ResourceModel> {
  const _ResourceModelReader();

  @override
  ResourceModel createObject(fb.BufferContext bc, int offset) => 
    ResourceModel._(bc, offset);
}

class ResourceModelBuilder {
  ResourceModelBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNamedResourcesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceModelObjectBuilder extends fb.ObjectBuilder {
  final NamedResourcesResourcesObjectBuilder? _namedResources;

  ResourceModelObjectBuilder({
    NamedResourcesResourcesObjectBuilder? namedResources,
  })
      : _namedResources = namedResources;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namedResourcesOffset = _namedResources?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, namedResourcesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceRequest {
  ResourceRequest._(this._bc, this._bcOffset);
  factory ResourceRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceRequest> reader = _ResourceRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_runtime.RawExtension? get vendorParameters => apimachinery_pkg_runtime.RawExtension.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ResourceRequestModel? get resourceRequestModel => ResourceRequestModel.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceRequest{vendorParameters: ${vendorParameters}, resourceRequestModel: ${resourceRequestModel}}';
  }
}

class _ResourceRequestReader extends fb.TableReader<ResourceRequest> {
  const _ResourceRequestReader();

  @override
  ResourceRequest createObject(fb.BufferContext bc, int offset) => 
    ResourceRequest._(bc, offset);
}

class ResourceRequestBuilder {
  ResourceRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addVendorParametersOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceRequestModelOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceRequestObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_runtime.RawExtensionObjectBuilder? _vendorParameters;
  final ResourceRequestModelObjectBuilder? _resourceRequestModel;

  ResourceRequestObjectBuilder({
    apimachinery_pkg_runtime.RawExtensionObjectBuilder? vendorParameters,
    ResourceRequestModelObjectBuilder? resourceRequestModel,
  })
      : _vendorParameters = vendorParameters,
        _resourceRequestModel = resourceRequestModel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? vendorParametersOffset = _vendorParameters?.getOrCreateOffset(fbBuilder);
    final int? resourceRequestModelOffset = _resourceRequestModel?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, vendorParametersOffset);
    fbBuilder.addOffset(1, resourceRequestModelOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceRequestModel {
  ResourceRequestModel._(this._bc, this._bcOffset);
  factory ResourceRequestModel(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceRequestModel> reader = _ResourceRequestModelReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  NamedResourcesRequest? get namedResources => NamedResourcesRequest.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ResourceRequestModel{namedResources: ${namedResources}}';
  }
}

class _ResourceRequestModelReader extends fb.TableReader<ResourceRequestModel> {
  const _ResourceRequestModelReader();

  @override
  ResourceRequestModel createObject(fb.BufferContext bc, int offset) => 
    ResourceRequestModel._(bc, offset);
}

class ResourceRequestModelBuilder {
  ResourceRequestModelBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNamedResourcesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceRequestModelObjectBuilder extends fb.ObjectBuilder {
  final NamedResourcesRequestObjectBuilder? _namedResources;

  ResourceRequestModelObjectBuilder({
    NamedResourcesRequestObjectBuilder? namedResources,
  })
      : _namedResources = namedResources;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namedResourcesOffset = _namedResources?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, namedResourcesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceSlice {
  ResourceSlice._(this._bc, this._bcOffset);
  factory ResourceSlice(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceSlice> reader = _ResourceSliceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get nodeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get driverName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  ResourceModel? get resourceModel => ResourceModel.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'ResourceSlice{metadata: ${metadata}, nodeName: ${nodeName}, driverName: ${driverName}, resourceModel: ${resourceModel}}';
  }
}

class _ResourceSliceReader extends fb.TableReader<ResourceSlice> {
  const _ResourceSliceReader();

  @override
  ResourceSlice createObject(fb.BufferContext bc, int offset) => 
    ResourceSlice._(bc, offset);
}

class ResourceSliceBuilder {
  ResourceSliceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNodeNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDriverNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addResourceModelOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceSliceObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final String? _nodeName;
  final String? _driverName;
  final ResourceModelObjectBuilder? _resourceModel;

  ResourceSliceObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    String? nodeName,
    String? driverName,
    ResourceModelObjectBuilder? resourceModel,
  })
      : _metadata = metadata,
        _nodeName = nodeName,
        _driverName = driverName,
        _resourceModel = resourceModel;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? nodeNameOffset = _nodeName == null ? null
        : fbBuilder.writeString(_nodeName!);
    final int? driverNameOffset = _driverName == null ? null
        : fbBuilder.writeString(_driverName!);
    final int? resourceModelOffset = _resourceModel?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, nodeNameOffset);
    fbBuilder.addOffset(2, driverNameOffset);
    fbBuilder.addOffset(3, resourceModelOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ResourceSliceList {
  ResourceSliceList._(this._bc, this._bcOffset);
  factory ResourceSliceList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ResourceSliceList> reader = _ResourceSliceListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<ResourceSlice>? get items => const fb.ListReader<ResourceSlice>(ResourceSlice.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ResourceSliceList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ResourceSliceListReader extends fb.TableReader<ResourceSliceList> {
  const _ResourceSliceListReader();

  @override
  ResourceSliceList createObject(fb.BufferContext bc, int offset) => 
    ResourceSliceList._(bc, offset);
}

class ResourceSliceListBuilder {
  ResourceSliceListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ResourceSliceListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ResourceSliceObjectBuilder>? _items;

  ResourceSliceListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ResourceSliceObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StructuredResourceHandle {
  StructuredResourceHandle._(this._bc, this._bcOffset);
  factory StructuredResourceHandle(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StructuredResourceHandle> reader = _StructuredResourceHandleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_runtime.RawExtension? get vendorClassParameters => apimachinery_pkg_runtime.RawExtension.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_runtime.RawExtension? get vendorClaimParameters => apimachinery_pkg_runtime.RawExtension.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get nodeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<DriverAllocationResult>? get results => const fb.ListReader<DriverAllocationResult>(DriverAllocationResult.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'StructuredResourceHandle{vendorClassParameters: ${vendorClassParameters}, vendorClaimParameters: ${vendorClaimParameters}, nodeName: ${nodeName}, results: ${results}}';
  }
}

class _StructuredResourceHandleReader extends fb.TableReader<StructuredResourceHandle> {
  const _StructuredResourceHandleReader();

  @override
  StructuredResourceHandle createObject(fb.BufferContext bc, int offset) => 
    StructuredResourceHandle._(bc, offset);
}

class StructuredResourceHandleBuilder {
  StructuredResourceHandleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addVendorClassParametersOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVendorClaimParametersOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNodeNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addResultsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StructuredResourceHandleObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_runtime.RawExtensionObjectBuilder? _vendorClassParameters;
  final apimachinery_pkg_runtime.RawExtensionObjectBuilder? _vendorClaimParameters;
  final String? _nodeName;
  final List<DriverAllocationResultObjectBuilder>? _results;

  StructuredResourceHandleObjectBuilder({
    apimachinery_pkg_runtime.RawExtensionObjectBuilder? vendorClassParameters,
    apimachinery_pkg_runtime.RawExtensionObjectBuilder? vendorClaimParameters,
    String? nodeName,
    List<DriverAllocationResultObjectBuilder>? results,
  })
      : _vendorClassParameters = vendorClassParameters,
        _vendorClaimParameters = vendorClaimParameters,
        _nodeName = nodeName,
        _results = results;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? vendorClassParametersOffset = _vendorClassParameters?.getOrCreateOffset(fbBuilder);
    final int? vendorClaimParametersOffset = _vendorClaimParameters?.getOrCreateOffset(fbBuilder);
    final int? nodeNameOffset = _nodeName == null ? null
        : fbBuilder.writeString(_nodeName!);
    final int? resultsOffset = _results == null ? null
        : fbBuilder.writeList(_results!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, vendorClassParametersOffset);
    fbBuilder.addOffset(1, vendorClaimParametersOffset);
    fbBuilder.addOffset(2, nodeNameOffset);
    fbBuilder.addOffset(3, resultsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VendorParameters {
  VendorParameters._(this._bc, this._bcOffset);
  factory VendorParameters(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VendorParameters> reader = _VendorParametersReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get driverName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_runtime.RawExtension? get parameters => apimachinery_pkg_runtime.RawExtension.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VendorParameters{driverName: ${driverName}, parameters: ${parameters}}';
  }
}

class _VendorParametersReader extends fb.TableReader<VendorParameters> {
  const _VendorParametersReader();

  @override
  VendorParameters createObject(fb.BufferContext bc, int offset) => 
    VendorParameters._(bc, offset);
}

class VendorParametersBuilder {
  VendorParametersBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addDriverNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addParametersOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VendorParametersObjectBuilder extends fb.ObjectBuilder {
  final String? _driverName;
  final apimachinery_pkg_runtime.RawExtensionObjectBuilder? _parameters;

  VendorParametersObjectBuilder({
    String? driverName,
    apimachinery_pkg_runtime.RawExtensionObjectBuilder? parameters,
  })
      : _driverName = driverName,
        _parameters = parameters;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driverNameOffset = _driverName == null ? null
        : fbBuilder.writeString(_driverName!);
    final int? parametersOffset = _parameters?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, driverNameOffset);
    fbBuilder.addOffset(1, parametersOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
