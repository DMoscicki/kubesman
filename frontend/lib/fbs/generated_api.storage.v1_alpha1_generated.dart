// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.storage.v1_alpha1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.storage.v1_alpha1.volume_attachment_status__generated.dart' as api_storage_v1_alpha1_volume_attachment_status_;
import './generated_api.storage.v1_alpha1.volume_attributes_class__generated.dart' as api_storage_v1_alpha1_volume_attributes_class_;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class CsistorageCapacity {
  CsistorageCapacity._(this._bc, this._bcOffset);
  factory CsistorageCapacity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsistorageCapacity> reader = _CsistorageCapacityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get nodeTopology => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get storageClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_api_resource.Quantity? get capacity => apimachinery_pkg_api_resource.Quantity.reader.vTableGetNullable(_bc, _bcOffset, 10);
  apimachinery_pkg_api_resource.Quantity? get maximumVolumeSize => apimachinery_pkg_api_resource.Quantity.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'CsistorageCapacity{metadata: ${metadata}, nodeTopology: ${nodeTopology}, storageClassName: ${storageClassName}, capacity: ${capacity}, maximumVolumeSize: ${maximumVolumeSize}}';
  }
}

class _CsistorageCapacityReader extends fb.TableReader<CsistorageCapacity> {
  const _CsistorageCapacityReader();

  @override
  CsistorageCapacity createObject(fb.BufferContext bc, int offset) => 
    CsistorageCapacity._(bc, offset);
}

class CsistorageCapacityBuilder {
  CsistorageCapacityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNodeTopologyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStorageClassNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCapacityOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMaximumVolumeSizeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsistorageCapacityObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _nodeTopology;
  final String? _storageClassName;
  final apimachinery_pkg_api_resource.QuantityObjectBuilder? _capacity;
  final apimachinery_pkg_api_resource.QuantityObjectBuilder? _maximumVolumeSize;

  CsistorageCapacityObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? nodeTopology,
    String? storageClassName,
    apimachinery_pkg_api_resource.QuantityObjectBuilder? capacity,
    apimachinery_pkg_api_resource.QuantityObjectBuilder? maximumVolumeSize,
  })
      : _metadata = metadata,
        _nodeTopology = nodeTopology,
        _storageClassName = storageClassName,
        _capacity = capacity,
        _maximumVolumeSize = maximumVolumeSize;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? nodeTopologyOffset = _nodeTopology?.getOrCreateOffset(fbBuilder);
    final int? storageClassNameOffset = _storageClassName == null ? null
        : fbBuilder.writeString(_storageClassName!);
    final int? capacityOffset = _capacity?.getOrCreateOffset(fbBuilder);
    final int? maximumVolumeSizeOffset = _maximumVolumeSize?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, nodeTopologyOffset);
    fbBuilder.addOffset(2, storageClassNameOffset);
    fbBuilder.addOffset(3, capacityOffset);
    fbBuilder.addOffset(4, maximumVolumeSizeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsistorageCapacityList {
  CsistorageCapacityList._(this._bc, this._bcOffset);
  factory CsistorageCapacityList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsistorageCapacityList> reader = _CsistorageCapacityListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<CsistorageCapacity>? get items => const fb.ListReader<CsistorageCapacity>(CsistorageCapacity.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'CsistorageCapacityList{metadata: ${metadata}, items: ${items}}';
  }
}

class _CsistorageCapacityListReader extends fb.TableReader<CsistorageCapacityList> {
  const _CsistorageCapacityListReader();

  @override
  CsistorageCapacityList createObject(fb.BufferContext bc, int offset) => 
    CsistorageCapacityList._(bc, offset);
}

class CsistorageCapacityListBuilder {
  CsistorageCapacityListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsistorageCapacityListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<CsistorageCapacityObjectBuilder>? _items;

  CsistorageCapacityListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<CsistorageCapacityObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachment {
  VolumeAttachment._(this._bc, this._bcOffset);
  factory VolumeAttachment(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachment> reader = _VolumeAttachmentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  VolumeAttachmentSpec? get spec => VolumeAttachmentSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  VolumeAttachmentStatus? get status => VolumeAttachmentStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'VolumeAttachment{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _VolumeAttachmentReader extends fb.TableReader<VolumeAttachment> {
  const _VolumeAttachmentReader();

  @override
  VolumeAttachment createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachment._(bc, offset);
}

class VolumeAttachmentBuilder {
  VolumeAttachmentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final VolumeAttachmentSpecObjectBuilder? _spec;
  final VolumeAttachmentStatusObjectBuilder? _status;

  VolumeAttachmentObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    VolumeAttachmentSpecObjectBuilder? spec,
    VolumeAttachmentStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachmentList {
  VolumeAttachmentList._(this._bc, this._bcOffset);
  factory VolumeAttachmentList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachmentList> reader = _VolumeAttachmentListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<VolumeAttachment>? get items => const fb.ListReader<VolumeAttachment>(VolumeAttachment.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VolumeAttachmentList{metadata: ${metadata}, items: ${items}}';
  }
}

class _VolumeAttachmentListReader extends fb.TableReader<VolumeAttachmentList> {
  const _VolumeAttachmentListReader();

  @override
  VolumeAttachmentList createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachmentList._(bc, offset);
}

class VolumeAttachmentListBuilder {
  VolumeAttachmentListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<VolumeAttachmentObjectBuilder>? _items;

  VolumeAttachmentListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<VolumeAttachmentObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachmentSource {
  VolumeAttachmentSource._(this._bc, this._bcOffset);
  factory VolumeAttachmentSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachmentSource> reader = _VolumeAttachmentSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get persistentVolumeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  api_core_v1.PersistentVolumeSpec? get inlineVolumeSpec => api_core_v1.PersistentVolumeSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VolumeAttachmentSource{persistentVolumeName: ${persistentVolumeName}, inlineVolumeSpec: ${inlineVolumeSpec}}';
  }
}

class _VolumeAttachmentSourceReader extends fb.TableReader<VolumeAttachmentSource> {
  const _VolumeAttachmentSourceReader();

  @override
  VolumeAttachmentSource createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachmentSource._(bc, offset);
}

class VolumeAttachmentSourceBuilder {
  VolumeAttachmentSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPersistentVolumeNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addInlineVolumeSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _persistentVolumeName;
  final api_core_v1.PersistentVolumeSpecObjectBuilder? _inlineVolumeSpec;

  VolumeAttachmentSourceObjectBuilder({
    String? persistentVolumeName,
    api_core_v1.PersistentVolumeSpecObjectBuilder? inlineVolumeSpec,
  })
      : _persistentVolumeName = persistentVolumeName,
        _inlineVolumeSpec = inlineVolumeSpec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? persistentVolumeNameOffset = _persistentVolumeName == null ? null
        : fbBuilder.writeString(_persistentVolumeName!);
    final int? inlineVolumeSpecOffset = _inlineVolumeSpec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, persistentVolumeNameOffset);
    fbBuilder.addOffset(1, inlineVolumeSpecOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachmentSpec {
  VolumeAttachmentSpec._(this._bc, this._bcOffset);
  factory VolumeAttachmentSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachmentSpec> reader = _VolumeAttachmentSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get attacher => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  VolumeAttachmentSource? get source => VolumeAttachmentSource.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get nodeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'VolumeAttachmentSpec{attacher: ${attacher}, source: ${source}, nodeName: ${nodeName}}';
  }
}

class _VolumeAttachmentSpecReader extends fb.TableReader<VolumeAttachmentSpec> {
  const _VolumeAttachmentSpecReader();

  @override
  VolumeAttachmentSpec createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachmentSpec._(bc, offset);
}

class VolumeAttachmentSpecBuilder {
  VolumeAttachmentSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addAttacherOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNodeNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _attacher;
  final VolumeAttachmentSourceObjectBuilder? _source;
  final String? _nodeName;

  VolumeAttachmentSpecObjectBuilder({
    String? attacher,
    VolumeAttachmentSourceObjectBuilder? source,
    String? nodeName,
  })
      : _attacher = attacher,
        _source = source,
        _nodeName = nodeName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? attacherOffset = _attacher == null ? null
        : fbBuilder.writeString(_attacher!);
    final int? sourceOffset = _source?.getOrCreateOffset(fbBuilder);
    final int? nodeNameOffset = _nodeName == null ? null
        : fbBuilder.writeString(_nodeName!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, attacherOffset);
    fbBuilder.addOffset(1, sourceOffset);
    fbBuilder.addOffset(2, nodeNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachmentStatus {
  VolumeAttachmentStatus._(this._bc, this._bcOffset);
  factory VolumeAttachmentStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachmentStatus> reader = _VolumeAttachmentStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get attached => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  List<api_storage_v1_alpha1_volume_attachment_status_.AttachmentMetadataEntry>? get attachmentMetadata => const fb.ListReader<api_storage_v1_alpha1_volume_attachment_status_.AttachmentMetadataEntry>(api_storage_v1_alpha1_volume_attachment_status_.AttachmentMetadataEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  VolumeError? get attachError => VolumeError.reader.vTableGetNullable(_bc, _bcOffset, 8);
  VolumeError? get detachError => VolumeError.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'VolumeAttachmentStatus{attached: ${attached}, attachmentMetadata: ${attachmentMetadata}, attachError: ${attachError}, detachError: ${detachError}}';
  }
}

class _VolumeAttachmentStatusReader extends fb.TableReader<VolumeAttachmentStatus> {
  const _VolumeAttachmentStatusReader();

  @override
  VolumeAttachmentStatus createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachmentStatus._(bc, offset);
}

class VolumeAttachmentStatusBuilder {
  VolumeAttachmentStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addAttached(bool? attached) {
    fbBuilder.addBool(0, attached);
    return fbBuilder.offset;
  }
  int addAttachmentMetadataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAttachErrorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDetachErrorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentStatusObjectBuilder extends fb.ObjectBuilder {
  final bool? _attached;
  final List<api_storage_v1_alpha1_volume_attachment_status_.AttachmentMetadataEntryObjectBuilder>? _attachmentMetadata;
  final VolumeErrorObjectBuilder? _attachError;
  final VolumeErrorObjectBuilder? _detachError;

  VolumeAttachmentStatusObjectBuilder({
    bool? attached,
    List<api_storage_v1_alpha1_volume_attachment_status_.AttachmentMetadataEntryObjectBuilder>? attachmentMetadata,
    VolumeErrorObjectBuilder? attachError,
    VolumeErrorObjectBuilder? detachError,
  })
      : _attached = attached,
        _attachmentMetadata = attachmentMetadata,
        _attachError = attachError,
        _detachError = detachError;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? attachmentMetadataOffset = _attachmentMetadata == null ? null
        : fbBuilder.writeList(_attachmentMetadata!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? attachErrorOffset = _attachError?.getOrCreateOffset(fbBuilder);
    final int? detachErrorOffset = _detachError?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addBool(0, _attached);
    fbBuilder.addOffset(1, attachmentMetadataOffset);
    fbBuilder.addOffset(2, attachErrorOffset);
    fbBuilder.addOffset(3, detachErrorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttributesClass {
  VolumeAttributesClass._(this._bc, this._bcOffset);
  factory VolumeAttributesClass(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttributesClass> reader = _VolumeAttributesClassReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get driverName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<api_storage_v1_alpha1_volume_attributes_class_.ParametersEntry>? get parameters => const fb.ListReader<api_storage_v1_alpha1_volume_attributes_class_.ParametersEntry>(api_storage_v1_alpha1_volume_attributes_class_.ParametersEntry.reader).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'VolumeAttributesClass{metadata: ${metadata}, driverName: ${driverName}, parameters: ${parameters}}';
  }
}

class _VolumeAttributesClassReader extends fb.TableReader<VolumeAttributesClass> {
  const _VolumeAttributesClassReader();

  @override
  VolumeAttributesClass createObject(fb.BufferContext bc, int offset) => 
    VolumeAttributesClass._(bc, offset);
}

class VolumeAttributesClassBuilder {
  VolumeAttributesClassBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDriverNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addParametersOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttributesClassObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final String? _driverName;
  final List<api_storage_v1_alpha1_volume_attributes_class_.ParametersEntryObjectBuilder>? _parameters;

  VolumeAttributesClassObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    String? driverName,
    List<api_storage_v1_alpha1_volume_attributes_class_.ParametersEntryObjectBuilder>? parameters,
  })
      : _metadata = metadata,
        _driverName = driverName,
        _parameters = parameters;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? driverNameOffset = _driverName == null ? null
        : fbBuilder.writeString(_driverName!);
    final int? parametersOffset = _parameters == null ? null
        : fbBuilder.writeList(_parameters!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, driverNameOffset);
    fbBuilder.addOffset(2, parametersOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttributesClassList {
  VolumeAttributesClassList._(this._bc, this._bcOffset);
  factory VolumeAttributesClassList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttributesClassList> reader = _VolumeAttributesClassListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<VolumeAttributesClass>? get items => const fb.ListReader<VolumeAttributesClass>(VolumeAttributesClass.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VolumeAttributesClassList{metadata: ${metadata}, items: ${items}}';
  }
}

class _VolumeAttributesClassListReader extends fb.TableReader<VolumeAttributesClassList> {
  const _VolumeAttributesClassListReader();

  @override
  VolumeAttributesClassList createObject(fb.BufferContext bc, int offset) => 
    VolumeAttributesClassList._(bc, offset);
}

class VolumeAttributesClassListBuilder {
  VolumeAttributesClassListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttributesClassListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<VolumeAttributesClassObjectBuilder>? _items;

  VolumeAttributesClassListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<VolumeAttributesClassObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeError {
  VolumeError._(this._bc, this._bcOffset);
  factory VolumeError(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeError> reader = _VolumeErrorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.Time? get time => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VolumeError{time: ${time}, message: ${message}}';
  }
}

class _VolumeErrorReader extends fb.TableReader<VolumeError> {
  const _VolumeErrorReader();

  @override
  VolumeError createObject(fb.BufferContext bc, int offset) => 
    VolumeError._(bc, offset);
}

class VolumeErrorBuilder {
  VolumeErrorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTimeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeErrorObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _time;
  final String? _message;

  VolumeErrorObjectBuilder({
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? time,
    String? message,
  })
      : _time = time,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? timeOffset = _time?.getOrCreateOffset(fbBuilder);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, timeOffset);
    fbBuilder.addOffset(1, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
