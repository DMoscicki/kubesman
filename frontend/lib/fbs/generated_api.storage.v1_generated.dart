// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library api.storage.v1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.storage.v1.storage_class__generated.dart' as api_storage_v1_storage_class_;
import './generated_api.storage.v1.volume_attachment_status__generated.dart' as api_storage_v1_volume_attachment_status_;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;
import './generated_apimachinery.pkg.util.intstr_generated.dart' as apimachinery_pkg_util_intstr;

import './generated_api.core.v1.config_map__generated.dart' as api_core_v1_config_map_;
import './generated_api.core.v1.container_status__generated.dart' as api_core_v1_container_status_;
import './generated_api.core.v1.csipersistent_volume_source__generated.dart' as api_core_v1_csipersistent_volume_source_;
import './generated_api.core.v1.csivolume_source__generated.dart' as api_core_v1_csivolume_source_;
import './generated_api.core.v1.flex_persistent_volume_source__generated.dart' as api_core_v1_flex_persistent_volume_source_;
import './generated_api.core.v1.flex_volume_source__generated.dart' as api_core_v1_flex_volume_source_;
import './generated_api.core.v1.limit_range_item__generated.dart' as api_core_v1_limit_range_item_;
import './generated_api.core.v1.node_status__generated.dart' as api_core_v1_node_status_;
import './generated_api.core.v1.persistent_volume_claim_status__generated.dart' as api_core_v1_persistent_volume_claim_status_;
import './generated_api.core.v1.persistent_volume_spec__generated.dart' as api_core_v1_persistent_volume_spec_;
import './generated_api.core.v1.pod_spec__generated.dart' as api_core_v1_pod_spec_;
import './generated_api.core.v1.replication_controller_spec__generated.dart' as api_core_v1_replication_controller_spec_;
import './generated_api.core.v1.resource_quota_spec__generated.dart' as api_core_v1_resource_quota_spec_;
import './generated_api.core.v1.resource_quota_status__generated.dart' as api_core_v1_resource_quota_status_;
import './generated_api.core.v1.resource_requirements__generated.dart' as api_core_v1_resource_requirements_;
import './generated_api.core.v1.secret__generated.dart' as api_core_v1_secret_;
import './generated_api.core.v1.service_spec__generated.dart' as api_core_v1_service_spec_;
import './generated_api.core.v1.volume_resource_requirements__generated.dart' as api_core_v1_volume_resource_requirements_;
import './generated_api.core.v1_generated.dart' as api_core_v1;
import './generated_apimachinery.pkg.api.resource_generated.dart' as apimachinery_pkg_api_resource;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class Csidriver {
  Csidriver._(this._bc, this._bcOffset);
  factory Csidriver(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Csidriver> reader = _CsidriverReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  CsidriverSpec? get spec => CsidriverSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Csidriver{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _CsidriverReader extends fb.TableReader<Csidriver> {
  const _CsidriverReader();

  @override
  Csidriver createObject(fb.BufferContext bc, int offset) => 
    Csidriver._(bc, offset);
}

class CsidriverBuilder {
  CsidriverBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsidriverObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final CsidriverSpecObjectBuilder? _spec;

  CsidriverObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    CsidriverSpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsidriverList {
  CsidriverList._(this._bc, this._bcOffset);
  factory CsidriverList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsidriverList> reader = _CsidriverListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Csidriver>? get items => const fb.ListReader<Csidriver>(Csidriver.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'CsidriverList{metadata: ${metadata}, items: ${items}}';
  }
}

class _CsidriverListReader extends fb.TableReader<CsidriverList> {
  const _CsidriverListReader();

  @override
  CsidriverList createObject(fb.BufferContext bc, int offset) => 
    CsidriverList._(bc, offset);
}

class CsidriverListBuilder {
  CsidriverListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsidriverListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<CsidriverObjectBuilder>? _items;

  CsidriverListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<CsidriverObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsidriverSpec {
  CsidriverSpec._(this._bc, this._bcOffset);
  factory CsidriverSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsidriverSpec> reader = _CsidriverSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get attachRequired => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  bool get podInfoOnMount => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  List<String>? get volumeLifecycleModes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  bool get storageCapacity => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  String? get fsGroupPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  List<TokenRequest>? get tokenRequests => const fb.ListReader<TokenRequest>(TokenRequest.reader).vTableGetNullable(_bc, _bcOffset, 14);
  bool get requiresRepublish => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  bool get seLinuxMount => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);

  @override
  String toString() {
    return 'CsidriverSpec{attachRequired: ${attachRequired}, podInfoOnMount: ${podInfoOnMount}, volumeLifecycleModes: ${volumeLifecycleModes}, storageCapacity: ${storageCapacity}, fsGroupPolicy: ${fsGroupPolicy}, tokenRequests: ${tokenRequests}, requiresRepublish: ${requiresRepublish}, seLinuxMount: ${seLinuxMount}}';
  }
}

class _CsidriverSpecReader extends fb.TableReader<CsidriverSpec> {
  const _CsidriverSpecReader();

  @override
  CsidriverSpec createObject(fb.BufferContext bc, int offset) => 
    CsidriverSpec._(bc, offset);
}

class CsidriverSpecBuilder {
  CsidriverSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addAttachRequired(bool? attachRequired) {
    fbBuilder.addBool(0, attachRequired);
    return fbBuilder.offset;
  }
  int addPodInfoOnMount(bool? podInfoOnMount) {
    fbBuilder.addBool(1, podInfoOnMount);
    return fbBuilder.offset;
  }
  int addVolumeLifecycleModesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addStorageCapacity(bool? storageCapacity) {
    fbBuilder.addBool(3, storageCapacity);
    return fbBuilder.offset;
  }
  int addFsGroupPolicyOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTokenRequestsOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addRequiresRepublish(bool? requiresRepublish) {
    fbBuilder.addBool(6, requiresRepublish);
    return fbBuilder.offset;
  }
  int addSeLinuxMount(bool? seLinuxMount) {
    fbBuilder.addBool(7, seLinuxMount);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsidriverSpecObjectBuilder extends fb.ObjectBuilder {
  final bool? _attachRequired;
  final bool? _podInfoOnMount;
  final List<String>? _volumeLifecycleModes;
  final bool? _storageCapacity;
  final String? _fsGroupPolicy;
  final List<TokenRequestObjectBuilder>? _tokenRequests;
  final bool? _requiresRepublish;
  final bool? _seLinuxMount;

  CsidriverSpecObjectBuilder({
    bool? attachRequired,
    bool? podInfoOnMount,
    List<String>? volumeLifecycleModes,
    bool? storageCapacity,
    String? fsGroupPolicy,
    List<TokenRequestObjectBuilder>? tokenRequests,
    bool? requiresRepublish,
    bool? seLinuxMount,
  })
      : _attachRequired = attachRequired,
        _podInfoOnMount = podInfoOnMount,
        _volumeLifecycleModes = volumeLifecycleModes,
        _storageCapacity = storageCapacity,
        _fsGroupPolicy = fsGroupPolicy,
        _tokenRequests = tokenRequests,
        _requiresRepublish = requiresRepublish,
        _seLinuxMount = seLinuxMount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? volumeLifecycleModesOffset = _volumeLifecycleModes == null ? null
        : fbBuilder.writeList(_volumeLifecycleModes!.map(fbBuilder.writeString).toList());
    final int? fsGroupPolicyOffset = _fsGroupPolicy == null ? null
        : fbBuilder.writeString(_fsGroupPolicy!);
    final int? tokenRequestsOffset = _tokenRequests == null ? null
        : fbBuilder.writeList(_tokenRequests!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addBool(0, _attachRequired);
    fbBuilder.addBool(1, _podInfoOnMount);
    fbBuilder.addOffset(2, volumeLifecycleModesOffset);
    fbBuilder.addBool(3, _storageCapacity);
    fbBuilder.addOffset(4, fsGroupPolicyOffset);
    fbBuilder.addOffset(5, tokenRequestsOffset);
    fbBuilder.addBool(6, _requiresRepublish);
    fbBuilder.addBool(7, _seLinuxMount);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Csinode {
  Csinode._(this._bc, this._bcOffset);
  factory Csinode(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Csinode> reader = _CsinodeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  CsinodeSpec? get spec => CsinodeSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Csinode{metadata: ${metadata}, spec: ${spec}}';
  }
}

class _CsinodeReader extends fb.TableReader<Csinode> {
  const _CsinodeReader();

  @override
  Csinode createObject(fb.BufferContext bc, int offset) => 
    Csinode._(bc, offset);
}

class CsinodeBuilder {
  CsinodeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsinodeObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final CsinodeSpecObjectBuilder? _spec;

  CsinodeObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    CsinodeSpecObjectBuilder? spec,
  })
      : _metadata = metadata,
        _spec = spec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsinodeDriver {
  CsinodeDriver._(this._bc, this._bcOffset);
  factory CsinodeDriver(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsinodeDriver> reader = _CsinodeDriverReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get nodeId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get topologyKeys => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);
  VolumeNodeResources? get allocatable => VolumeNodeResources.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'CsinodeDriver{name: ${name}, nodeId: ${nodeId}, topologyKeys: ${topologyKeys}, allocatable: ${allocatable}}';
  }
}

class _CsinodeDriverReader extends fb.TableReader<CsinodeDriver> {
  const _CsinodeDriverReader();

  @override
  CsinodeDriver createObject(fb.BufferContext bc, int offset) => 
    CsinodeDriver._(bc, offset);
}

class CsinodeDriverBuilder {
  CsinodeDriverBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNodeIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTopologyKeysOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAllocatableOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsinodeDriverObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _nodeId;
  final List<String>? _topologyKeys;
  final VolumeNodeResourcesObjectBuilder? _allocatable;

  CsinodeDriverObjectBuilder({
    String? name,
    String? nodeId,
    List<String>? topologyKeys,
    VolumeNodeResourcesObjectBuilder? allocatable,
  })
      : _name = name,
        _nodeId = nodeId,
        _topologyKeys = topologyKeys,
        _allocatable = allocatable;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? nodeIdOffset = _nodeId == null ? null
        : fbBuilder.writeString(_nodeId!);
    final int? topologyKeysOffset = _topologyKeys == null ? null
        : fbBuilder.writeList(_topologyKeys!.map(fbBuilder.writeString).toList());
    final int? allocatableOffset = _allocatable?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, nodeIdOffset);
    fbBuilder.addOffset(2, topologyKeysOffset);
    fbBuilder.addOffset(3, allocatableOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsinodeList {
  CsinodeList._(this._bc, this._bcOffset);
  factory CsinodeList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsinodeList> reader = _CsinodeListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Csinode>? get items => const fb.ListReader<Csinode>(Csinode.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'CsinodeList{metadata: ${metadata}, items: ${items}}';
  }
}

class _CsinodeListReader extends fb.TableReader<CsinodeList> {
  const _CsinodeListReader();

  @override
  CsinodeList createObject(fb.BufferContext bc, int offset) => 
    CsinodeList._(bc, offset);
}

class CsinodeListBuilder {
  CsinodeListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsinodeListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<CsinodeObjectBuilder>? _items;

  CsinodeListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<CsinodeObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsinodeSpec {
  CsinodeSpec._(this._bc, this._bcOffset);
  factory CsinodeSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsinodeSpec> reader = _CsinodeSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<CsinodeDriver>? get drivers => const fb.ListReader<CsinodeDriver>(CsinodeDriver.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'CsinodeSpec{drivers: ${drivers}}';
  }
}

class _CsinodeSpecReader extends fb.TableReader<CsinodeSpec> {
  const _CsinodeSpecReader();

  @override
  CsinodeSpec createObject(fb.BufferContext bc, int offset) => 
    CsinodeSpec._(bc, offset);
}

class CsinodeSpecBuilder {
  CsinodeSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addDriversOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsinodeSpecObjectBuilder extends fb.ObjectBuilder {
  final List<CsinodeDriverObjectBuilder>? _drivers;

  CsinodeSpecObjectBuilder({
    List<CsinodeDriverObjectBuilder>? drivers,
  })
      : _drivers = drivers;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? driversOffset = _drivers == null ? null
        : fbBuilder.writeList(_drivers!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, driversOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsistorageCapacity {
  CsistorageCapacity._(this._bc, this._bcOffset);
  factory CsistorageCapacity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsistorageCapacity> reader = _CsistorageCapacityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_apis_meta_v1.LabelSelector? get nodeTopology => apimachinery_pkg_apis_meta_v1.LabelSelector.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get storageClassName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_api_resource.Quantity? get capacity => apimachinery_pkg_api_resource.Quantity.reader.vTableGetNullable(_bc, _bcOffset, 10);
  apimachinery_pkg_api_resource.Quantity? get maximumVolumeSize => apimachinery_pkg_api_resource.Quantity.reader.vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'CsistorageCapacity{metadata: ${metadata}, nodeTopology: ${nodeTopology}, storageClassName: ${storageClassName}, capacity: ${capacity}, maximumVolumeSize: ${maximumVolumeSize}}';
  }
}

class _CsistorageCapacityReader extends fb.TableReader<CsistorageCapacity> {
  const _CsistorageCapacityReader();

  @override
  CsistorageCapacity createObject(fb.BufferContext bc, int offset) => 
    CsistorageCapacity._(bc, offset);
}

class CsistorageCapacityBuilder {
  CsistorageCapacityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNodeTopologyOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStorageClassNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addCapacityOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMaximumVolumeSizeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsistorageCapacityObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? _nodeTopology;
  final String? _storageClassName;
  final apimachinery_pkg_api_resource.QuantityObjectBuilder? _capacity;
  final apimachinery_pkg_api_resource.QuantityObjectBuilder? _maximumVolumeSize;

  CsistorageCapacityObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    apimachinery_pkg_apis_meta_v1.LabelSelectorObjectBuilder? nodeTopology,
    String? storageClassName,
    apimachinery_pkg_api_resource.QuantityObjectBuilder? capacity,
    apimachinery_pkg_api_resource.QuantityObjectBuilder? maximumVolumeSize,
  })
      : _metadata = metadata,
        _nodeTopology = nodeTopology,
        _storageClassName = storageClassName,
        _capacity = capacity,
        _maximumVolumeSize = maximumVolumeSize;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? nodeTopologyOffset = _nodeTopology?.getOrCreateOffset(fbBuilder);
    final int? storageClassNameOffset = _storageClassName == null ? null
        : fbBuilder.writeString(_storageClassName!);
    final int? capacityOffset = _capacity?.getOrCreateOffset(fbBuilder);
    final int? maximumVolumeSizeOffset = _maximumVolumeSize?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, nodeTopologyOffset);
    fbBuilder.addOffset(2, storageClassNameOffset);
    fbBuilder.addOffset(3, capacityOffset);
    fbBuilder.addOffset(4, maximumVolumeSizeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CsistorageCapacityList {
  CsistorageCapacityList._(this._bc, this._bcOffset);
  factory CsistorageCapacityList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CsistorageCapacityList> reader = _CsistorageCapacityListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<CsistorageCapacity>? get items => const fb.ListReader<CsistorageCapacity>(CsistorageCapacity.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'CsistorageCapacityList{metadata: ${metadata}, items: ${items}}';
  }
}

class _CsistorageCapacityListReader extends fb.TableReader<CsistorageCapacityList> {
  const _CsistorageCapacityListReader();

  @override
  CsistorageCapacityList createObject(fb.BufferContext bc, int offset) => 
    CsistorageCapacityList._(bc, offset);
}

class CsistorageCapacityListBuilder {
  CsistorageCapacityListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CsistorageCapacityListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<CsistorageCapacityObjectBuilder>? _items;

  CsistorageCapacityListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<CsistorageCapacityObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StorageClass {
  StorageClass._(this._bc, this._bcOffset);
  factory StorageClass(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StorageClass> reader = _StorageClassReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get provisioner => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<api_storage_v1_storage_class_.ParametersEntry>? get parameters => const fb.ListReader<api_storage_v1_storage_class_.ParametersEntry>(api_storage_v1_storage_class_.ParametersEntry.reader).vTableGetNullable(_bc, _bcOffset, 8);
  String? get reclaimPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<String>? get mountOptions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);
  bool get allowVolumeExpansion => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  String? get volumeBindingMode => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  List<api_core_v1.TopologySelectorTerm>? get allowedTopologies => const fb.ListReader<api_core_v1.TopologySelectorTerm>(api_core_v1.TopologySelectorTerm.reader).vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'StorageClass{metadata: ${metadata}, provisioner: ${provisioner}, parameters: ${parameters}, reclaimPolicy: ${reclaimPolicy}, mountOptions: ${mountOptions}, allowVolumeExpansion: ${allowVolumeExpansion}, volumeBindingMode: ${volumeBindingMode}, allowedTopologies: ${allowedTopologies}}';
  }
}

class _StorageClassReader extends fb.TableReader<StorageClass> {
  const _StorageClassReader();

  @override
  StorageClass createObject(fb.BufferContext bc, int offset) => 
    StorageClass._(bc, offset);
}

class StorageClassBuilder {
  StorageClassBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addProvisionerOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addParametersOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReclaimPolicyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMountOptionsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addAllowVolumeExpansion(bool? allowVolumeExpansion) {
    fbBuilder.addBool(5, allowVolumeExpansion);
    return fbBuilder.offset;
  }
  int addVolumeBindingModeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addAllowedTopologiesOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StorageClassObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final String? _provisioner;
  final List<api_storage_v1_storage_class_.ParametersEntryObjectBuilder>? _parameters;
  final String? _reclaimPolicy;
  final List<String>? _mountOptions;
  final bool? _allowVolumeExpansion;
  final String? _volumeBindingMode;
  final List<api_core_v1.TopologySelectorTermObjectBuilder>? _allowedTopologies;

  StorageClassObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    String? provisioner,
    List<api_storage_v1_storage_class_.ParametersEntryObjectBuilder>? parameters,
    String? reclaimPolicy,
    List<String>? mountOptions,
    bool? allowVolumeExpansion,
    String? volumeBindingMode,
    List<api_core_v1.TopologySelectorTermObjectBuilder>? allowedTopologies,
  })
      : _metadata = metadata,
        _provisioner = provisioner,
        _parameters = parameters,
        _reclaimPolicy = reclaimPolicy,
        _mountOptions = mountOptions,
        _allowVolumeExpansion = allowVolumeExpansion,
        _volumeBindingMode = volumeBindingMode,
        _allowedTopologies = allowedTopologies;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? provisionerOffset = _provisioner == null ? null
        : fbBuilder.writeString(_provisioner!);
    final int? parametersOffset = _parameters == null ? null
        : fbBuilder.writeList(_parameters!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? reclaimPolicyOffset = _reclaimPolicy == null ? null
        : fbBuilder.writeString(_reclaimPolicy!);
    final int? mountOptionsOffset = _mountOptions == null ? null
        : fbBuilder.writeList(_mountOptions!.map(fbBuilder.writeString).toList());
    final int? volumeBindingModeOffset = _volumeBindingMode == null ? null
        : fbBuilder.writeString(_volumeBindingMode!);
    final int? allowedTopologiesOffset = _allowedTopologies == null ? null
        : fbBuilder.writeList(_allowedTopologies!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, provisionerOffset);
    fbBuilder.addOffset(2, parametersOffset);
    fbBuilder.addOffset(3, reclaimPolicyOffset);
    fbBuilder.addOffset(4, mountOptionsOffset);
    fbBuilder.addBool(5, _allowVolumeExpansion);
    fbBuilder.addOffset(6, volumeBindingModeOffset);
    fbBuilder.addOffset(7, allowedTopologiesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StorageClassList {
  StorageClassList._(this._bc, this._bcOffset);
  factory StorageClassList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StorageClassList> reader = _StorageClassListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<StorageClass>? get items => const fb.ListReader<StorageClass>(StorageClass.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'StorageClassList{metadata: ${metadata}, items: ${items}}';
  }
}

class _StorageClassListReader extends fb.TableReader<StorageClassList> {
  const _StorageClassListReader();

  @override
  StorageClassList createObject(fb.BufferContext bc, int offset) => 
    StorageClassList._(bc, offset);
}

class StorageClassListBuilder {
  StorageClassListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StorageClassListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<StorageClassObjectBuilder>? _items;

  StorageClassListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<StorageClassObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TokenRequest {
  TokenRequest._(this._bc, this._bcOffset);
  factory TokenRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TokenRequest> reader = _TokenRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get audience => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get expirationSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'TokenRequest{audience: ${audience}, expirationSeconds: ${expirationSeconds}}';
  }
}

class _TokenRequestReader extends fb.TableReader<TokenRequest> {
  const _TokenRequestReader();

  @override
  TokenRequest createObject(fb.BufferContext bc, int offset) => 
    TokenRequest._(bc, offset);
}

class TokenRequestBuilder {
  TokenRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addAudienceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addExpirationSeconds(int? expirationSeconds) {
    fbBuilder.addInt64(1, expirationSeconds);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TokenRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _audience;
  final int? _expirationSeconds;

  TokenRequestObjectBuilder({
    String? audience,
    int? expirationSeconds,
  })
      : _audience = audience,
        _expirationSeconds = expirationSeconds;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? audienceOffset = _audience == null ? null
        : fbBuilder.writeString(_audience!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, audienceOffset);
    fbBuilder.addInt64(1, _expirationSeconds);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachment {
  VolumeAttachment._(this._bc, this._bcOffset);
  factory VolumeAttachment(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachment> reader = _VolumeAttachmentReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  VolumeAttachmentSpec? get spec => VolumeAttachmentSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  VolumeAttachmentStatus? get status => VolumeAttachmentStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'VolumeAttachment{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _VolumeAttachmentReader extends fb.TableReader<VolumeAttachment> {
  const _VolumeAttachmentReader();

  @override
  VolumeAttachment createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachment._(bc, offset);
}

class VolumeAttachmentBuilder {
  VolumeAttachmentBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final VolumeAttachmentSpecObjectBuilder? _spec;
  final VolumeAttachmentStatusObjectBuilder? _status;

  VolumeAttachmentObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    VolumeAttachmentSpecObjectBuilder? spec,
    VolumeAttachmentStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachmentList {
  VolumeAttachmentList._(this._bc, this._bcOffset);
  factory VolumeAttachmentList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachmentList> reader = _VolumeAttachmentListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<VolumeAttachment>? get items => const fb.ListReader<VolumeAttachment>(VolumeAttachment.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VolumeAttachmentList{metadata: ${metadata}, items: ${items}}';
  }
}

class _VolumeAttachmentListReader extends fb.TableReader<VolumeAttachmentList> {
  const _VolumeAttachmentListReader();

  @override
  VolumeAttachmentList createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachmentList._(bc, offset);
}

class VolumeAttachmentListBuilder {
  VolumeAttachmentListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<VolumeAttachmentObjectBuilder>? _items;

  VolumeAttachmentListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<VolumeAttachmentObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachmentSource {
  VolumeAttachmentSource._(this._bc, this._bcOffset);
  factory VolumeAttachmentSource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachmentSource> reader = _VolumeAttachmentSourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get persistentVolumeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  api_core_v1.PersistentVolumeSpec? get inlineVolumeSpec => api_core_v1.PersistentVolumeSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VolumeAttachmentSource{persistentVolumeName: ${persistentVolumeName}, inlineVolumeSpec: ${inlineVolumeSpec}}';
  }
}

class _VolumeAttachmentSourceReader extends fb.TableReader<VolumeAttachmentSource> {
  const _VolumeAttachmentSourceReader();

  @override
  VolumeAttachmentSource createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachmentSource._(bc, offset);
}

class VolumeAttachmentSourceBuilder {
  VolumeAttachmentSourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPersistentVolumeNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addInlineVolumeSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentSourceObjectBuilder extends fb.ObjectBuilder {
  final String? _persistentVolumeName;
  final api_core_v1.PersistentVolumeSpecObjectBuilder? _inlineVolumeSpec;

  VolumeAttachmentSourceObjectBuilder({
    String? persistentVolumeName,
    api_core_v1.PersistentVolumeSpecObjectBuilder? inlineVolumeSpec,
  })
      : _persistentVolumeName = persistentVolumeName,
        _inlineVolumeSpec = inlineVolumeSpec;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? persistentVolumeNameOffset = _persistentVolumeName == null ? null
        : fbBuilder.writeString(_persistentVolumeName!);
    final int? inlineVolumeSpecOffset = _inlineVolumeSpec?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, persistentVolumeNameOffset);
    fbBuilder.addOffset(1, inlineVolumeSpecOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachmentSpec {
  VolumeAttachmentSpec._(this._bc, this._bcOffset);
  factory VolumeAttachmentSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachmentSpec> reader = _VolumeAttachmentSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get attacher => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  VolumeAttachmentSource? get source => VolumeAttachmentSource.reader.vTableGetNullable(_bc, _bcOffset, 6);
  String? get nodeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'VolumeAttachmentSpec{attacher: ${attacher}, source: ${source}, nodeName: ${nodeName}}';
  }
}

class _VolumeAttachmentSpecReader extends fb.TableReader<VolumeAttachmentSpec> {
  const _VolumeAttachmentSpecReader();

  @override
  VolumeAttachmentSpec createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachmentSpec._(bc, offset);
}

class VolumeAttachmentSpecBuilder {
  VolumeAttachmentSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addAttacherOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNodeNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _attacher;
  final VolumeAttachmentSourceObjectBuilder? _source;
  final String? _nodeName;

  VolumeAttachmentSpecObjectBuilder({
    String? attacher,
    VolumeAttachmentSourceObjectBuilder? source,
    String? nodeName,
  })
      : _attacher = attacher,
        _source = source,
        _nodeName = nodeName;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? attacherOffset = _attacher == null ? null
        : fbBuilder.writeString(_attacher!);
    final int? sourceOffset = _source?.getOrCreateOffset(fbBuilder);
    final int? nodeNameOffset = _nodeName == null ? null
        : fbBuilder.writeString(_nodeName!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, attacherOffset);
    fbBuilder.addOffset(1, sourceOffset);
    fbBuilder.addOffset(2, nodeNameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeAttachmentStatus {
  VolumeAttachmentStatus._(this._bc, this._bcOffset);
  factory VolumeAttachmentStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeAttachmentStatus> reader = _VolumeAttachmentStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get attached => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  List<api_storage_v1_volume_attachment_status_.AttachmentMetadataEntry>? get attachmentMetadata => const fb.ListReader<api_storage_v1_volume_attachment_status_.AttachmentMetadataEntry>(api_storage_v1_volume_attachment_status_.AttachmentMetadataEntry.reader).vTableGetNullable(_bc, _bcOffset, 6);
  VolumeError? get attachError => VolumeError.reader.vTableGetNullable(_bc, _bcOffset, 8);
  VolumeError? get detachError => VolumeError.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'VolumeAttachmentStatus{attached: ${attached}, attachmentMetadata: ${attachmentMetadata}, attachError: ${attachError}, detachError: ${detachError}}';
  }
}

class _VolumeAttachmentStatusReader extends fb.TableReader<VolumeAttachmentStatus> {
  const _VolumeAttachmentStatusReader();

  @override
  VolumeAttachmentStatus createObject(fb.BufferContext bc, int offset) => 
    VolumeAttachmentStatus._(bc, offset);
}

class VolumeAttachmentStatusBuilder {
  VolumeAttachmentStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addAttached(bool? attached) {
    fbBuilder.addBool(0, attached);
    return fbBuilder.offset;
  }
  int addAttachmentMetadataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addAttachErrorOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addDetachErrorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeAttachmentStatusObjectBuilder extends fb.ObjectBuilder {
  final bool? _attached;
  final List<api_storage_v1_volume_attachment_status_.AttachmentMetadataEntryObjectBuilder>? _attachmentMetadata;
  final VolumeErrorObjectBuilder? _attachError;
  final VolumeErrorObjectBuilder? _detachError;

  VolumeAttachmentStatusObjectBuilder({
    bool? attached,
    List<api_storage_v1_volume_attachment_status_.AttachmentMetadataEntryObjectBuilder>? attachmentMetadata,
    VolumeErrorObjectBuilder? attachError,
    VolumeErrorObjectBuilder? detachError,
  })
      : _attached = attached,
        _attachmentMetadata = attachmentMetadata,
        _attachError = attachError,
        _detachError = detachError;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? attachmentMetadataOffset = _attachmentMetadata == null ? null
        : fbBuilder.writeList(_attachmentMetadata!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? attachErrorOffset = _attachError?.getOrCreateOffset(fbBuilder);
    final int? detachErrorOffset = _detachError?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addBool(0, _attached);
    fbBuilder.addOffset(1, attachmentMetadataOffset);
    fbBuilder.addOffset(2, attachErrorOffset);
    fbBuilder.addOffset(3, detachErrorOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeError {
  VolumeError._(this._bc, this._bcOffset);
  factory VolumeError(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeError> reader = _VolumeErrorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.Time? get time => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'VolumeError{time: ${time}, message: ${message}}';
  }
}

class _VolumeErrorReader extends fb.TableReader<VolumeError> {
  const _VolumeErrorReader();

  @override
  VolumeError createObject(fb.BufferContext bc, int offset) => 
    VolumeError._(bc, offset);
}

class VolumeErrorBuilder {
  VolumeErrorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTimeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeErrorObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _time;
  final String? _message;

  VolumeErrorObjectBuilder({
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? time,
    String? message,
  })
      : _time = time,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? timeOffset = _time?.getOrCreateOffset(fbBuilder);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, timeOffset);
    fbBuilder.addOffset(1, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class VolumeNodeResources {
  VolumeNodeResources._(this._bc, this._bcOffset);
  factory VolumeNodeResources(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<VolumeNodeResources> reader = _VolumeNodeResourcesReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get count => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'VolumeNodeResources{count: ${count}}';
  }
}

class _VolumeNodeResourcesReader extends fb.TableReader<VolumeNodeResources> {
  const _VolumeNodeResourcesReader();

  @override
  VolumeNodeResources createObject(fb.BufferContext bc, int offset) => 
    VolumeNodeResources._(bc, offset);
}

class VolumeNodeResourcesBuilder {
  VolumeNodeResourcesBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addCount(int? count) {
    fbBuilder.addInt32(0, count);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VolumeNodeResourcesObjectBuilder extends fb.ObjectBuilder {
  final int? _count;

  VolumeNodeResourcesObjectBuilder({
    int? count,
  })
      : _count = count;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt32(0, _count);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
