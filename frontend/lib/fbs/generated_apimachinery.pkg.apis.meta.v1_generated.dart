// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library apimachinery.pkg.apis.meta.v1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.flowcontrol.v1_beta2_generated.dart' as api_flowcontrol_v1_beta2;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class Apigroup {
  Apigroup._(this._bc, this._bcOffset);
  factory Apigroup(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Apigroup> reader = _ApigroupReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<GroupVersionForDiscovery>? get versions => const fb.ListReader<GroupVersionForDiscovery>(GroupVersionForDiscovery.reader).vTableGetNullable(_bc, _bcOffset, 6);
  GroupVersionForDiscovery? get preferredVersion => GroupVersionForDiscovery.reader.vTableGetNullable(_bc, _bcOffset, 8);
  List<ServerAddressByClientCidr>? get serverAddressByClientCidrs => const fb.ListReader<ServerAddressByClientCidr>(ServerAddressByClientCidr.reader).vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Apigroup{name: ${name}, versions: ${versions}, preferredVersion: ${preferredVersion}, serverAddressByClientCidrs: ${serverAddressByClientCidrs}}';
  }
}

class _ApigroupReader extends fb.TableReader<Apigroup> {
  const _ApigroupReader();

  @override
  Apigroup createObject(fb.BufferContext bc, int offset) => 
    Apigroup._(bc, offset);
}

class ApigroupBuilder {
  ApigroupBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVersionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPreferredVersionOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addServerAddressByClientCidrsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApigroupObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final List<GroupVersionForDiscoveryObjectBuilder>? _versions;
  final GroupVersionForDiscoveryObjectBuilder? _preferredVersion;
  final List<ServerAddressByClientCidrObjectBuilder>? _serverAddressByClientCidrs;

  ApigroupObjectBuilder({
    String? name,
    List<GroupVersionForDiscoveryObjectBuilder>? versions,
    GroupVersionForDiscoveryObjectBuilder? preferredVersion,
    List<ServerAddressByClientCidrObjectBuilder>? serverAddressByClientCidrs,
  })
      : _name = name,
        _versions = versions,
        _preferredVersion = preferredVersion,
        _serverAddressByClientCidrs = serverAddressByClientCidrs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? versionsOffset = _versions == null ? null
        : fbBuilder.writeList(_versions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? preferredVersionOffset = _preferredVersion?.getOrCreateOffset(fbBuilder);
    final int? serverAddressByClientCidrsOffset = _serverAddressByClientCidrs == null ? null
        : fbBuilder.writeList(_serverAddressByClientCidrs!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, versionsOffset);
    fbBuilder.addOffset(2, preferredVersionOffset);
    fbBuilder.addOffset(3, serverAddressByClientCidrsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ApigroupList {
  ApigroupList._(this._bc, this._bcOffset);
  factory ApigroupList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ApigroupList> reader = _ApigroupListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Apigroup>? get groups => const fb.ListReader<Apigroup>(Apigroup.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ApigroupList{groups: ${groups}}';
  }
}

class _ApigroupListReader extends fb.TableReader<ApigroupList> {
  const _ApigroupListReader();

  @override
  ApigroupList createObject(fb.BufferContext bc, int offset) => 
    ApigroupList._(bc, offset);
}

class ApigroupListBuilder {
  ApigroupListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addGroupsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApigroupListObjectBuilder extends fb.ObjectBuilder {
  final List<ApigroupObjectBuilder>? _groups;

  ApigroupListObjectBuilder({
    List<ApigroupObjectBuilder>? groups,
  })
      : _groups = groups;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? groupsOffset = _groups == null ? null
        : fbBuilder.writeList(_groups!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, groupsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Apiresource {
  Apiresource._(this._bc, this._bcOffset);
  factory Apiresource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Apiresource> reader = _ApiresourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get singularName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get namespaced => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  Verbs? get verbs => Verbs.reader.vTableGetNullable(_bc, _bcOffset, 16);
  List<String>? get shortNames => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 18);
  List<String>? get categories => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);
  String? get storageVersionHash => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'Apiresource{name: ${name}, singularName: ${singularName}, namespaced: ${namespaced}, group: ${group}, version: ${version}, kind: ${kind}, verbs: ${verbs}, shortNames: ${shortNames}, categories: ${categories}, storageVersionHash: ${storageVersionHash}}';
  }
}

class _ApiresourceReader extends fb.TableReader<Apiresource> {
  const _ApiresourceReader();

  @override
  Apiresource createObject(fb.BufferContext bc, int offset) => 
    Apiresource._(bc, offset);
}

class ApiresourceBuilder {
  ApiresourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSingularNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNamespaced(bool? namespaced) {
    fbBuilder.addBool(2, namespaced);
    return fbBuilder.offset;
  }
  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addVerbsOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addShortNamesOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addCategoriesOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addStorageVersionHashOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApiresourceObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _singularName;
  final bool? _namespaced;
  final String? _group;
  final String? _version;
  final String? _kind;
  final VerbsObjectBuilder? _verbs;
  final List<String>? _shortNames;
  final List<String>? _categories;
  final String? _storageVersionHash;

  ApiresourceObjectBuilder({
    String? name,
    String? singularName,
    bool? namespaced,
    String? group,
    String? version,
    String? kind,
    VerbsObjectBuilder? verbs,
    List<String>? shortNames,
    List<String>? categories,
    String? storageVersionHash,
  })
      : _name = name,
        _singularName = singularName,
        _namespaced = namespaced,
        _group = group,
        _version = version,
        _kind = kind,
        _verbs = verbs,
        _shortNames = shortNames,
        _categories = categories,
        _storageVersionHash = storageVersionHash;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? singularNameOffset = _singularName == null ? null
        : fbBuilder.writeString(_singularName!);
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? verbsOffset = _verbs?.getOrCreateOffset(fbBuilder);
    final int? shortNamesOffset = _shortNames == null ? null
        : fbBuilder.writeList(_shortNames!.map(fbBuilder.writeString).toList());
    final int? categoriesOffset = _categories == null ? null
        : fbBuilder.writeList(_categories!.map(fbBuilder.writeString).toList());
    final int? storageVersionHashOffset = _storageVersionHash == null ? null
        : fbBuilder.writeString(_storageVersionHash!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, singularNameOffset);
    fbBuilder.addBool(2, _namespaced);
    fbBuilder.addOffset(3, groupOffset);
    fbBuilder.addOffset(4, versionOffset);
    fbBuilder.addOffset(5, kindOffset);
    fbBuilder.addOffset(6, verbsOffset);
    fbBuilder.addOffset(7, shortNamesOffset);
    fbBuilder.addOffset(8, categoriesOffset);
    fbBuilder.addOffset(9, storageVersionHashOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ApiresourceList {
  ApiresourceList._(this._bc, this._bcOffset);
  factory ApiresourceList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ApiresourceList> reader = _ApiresourceListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get groupVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<Apiresource>? get resources => const fb.ListReader<Apiresource>(Apiresource.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ApiresourceList{groupVersion: ${groupVersion}, resources: ${resources}}';
  }
}

class _ApiresourceListReader extends fb.TableReader<ApiresourceList> {
  const _ApiresourceListReader();

  @override
  ApiresourceList createObject(fb.BufferContext bc, int offset) => 
    ApiresourceList._(bc, offset);
}

class ApiresourceListBuilder {
  ApiresourceListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addGroupVersionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourcesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApiresourceListObjectBuilder extends fb.ObjectBuilder {
  final String? _groupVersion;
  final List<ApiresourceObjectBuilder>? _resources;

  ApiresourceListObjectBuilder({
    String? groupVersion,
    List<ApiresourceObjectBuilder>? resources,
  })
      : _groupVersion = groupVersion,
        _resources = resources;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? groupVersionOffset = _groupVersion == null ? null
        : fbBuilder.writeString(_groupVersion!);
    final int? resourcesOffset = _resources == null ? null
        : fbBuilder.writeList(_resources!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, groupVersionOffset);
    fbBuilder.addOffset(1, resourcesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Apiversions {
  Apiversions._(this._bc, this._bcOffset);
  factory Apiversions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Apiversions> reader = _ApiversionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get versions => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  List<ServerAddressByClientCidr>? get serverAddressByClientCidrs => const fb.ListReader<ServerAddressByClientCidr>(ServerAddressByClientCidr.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Apiversions{versions: ${versions}, serverAddressByClientCidrs: ${serverAddressByClientCidrs}}';
  }
}

class _ApiversionsReader extends fb.TableReader<Apiversions> {
  const _ApiversionsReader();

  @override
  Apiversions createObject(fb.BufferContext bc, int offset) => 
    Apiversions._(bc, offset);
}

class ApiversionsBuilder {
  ApiversionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addVersionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addServerAddressByClientCidrsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApiversionsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _versions;
  final List<ServerAddressByClientCidrObjectBuilder>? _serverAddressByClientCidrs;

  ApiversionsObjectBuilder({
    List<String>? versions,
    List<ServerAddressByClientCidrObjectBuilder>? serverAddressByClientCidrs,
  })
      : _versions = versions,
        _serverAddressByClientCidrs = serverAddressByClientCidrs;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? versionsOffset = _versions == null ? null
        : fbBuilder.writeList(_versions!.map(fbBuilder.writeString).toList());
    final int? serverAddressByClientCidrsOffset = _serverAddressByClientCidrs == null ? null
        : fbBuilder.writeList(_serverAddressByClientCidrs!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, versionsOffset);
    fbBuilder.addOffset(1, serverAddressByClientCidrsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ApplyOptions {
  ApplyOptions._(this._bc, this._bcOffset);
  factory ApplyOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ApplyOptions> reader = _ApplyOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get dryRun => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  bool get force => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  String? get fieldManager => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ApplyOptions{dryRun: ${dryRun}, force: ${force}, fieldManager: ${fieldManager}}';
  }
}

class _ApplyOptionsReader extends fb.TableReader<ApplyOptions> {
  const _ApplyOptionsReader();

  @override
  ApplyOptions createObject(fb.BufferContext bc, int offset) => 
    ApplyOptions._(bc, offset);
}

class ApplyOptionsBuilder {
  ApplyOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addDryRunOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addForce(bool? force) {
    fbBuilder.addBool(1, force);
    return fbBuilder.offset;
  }
  int addFieldManagerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApplyOptionsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _dryRun;
  final bool? _force;
  final String? _fieldManager;

  ApplyOptionsObjectBuilder({
    List<String>? dryRun,
    bool? force,
    String? fieldManager,
  })
      : _dryRun = dryRun,
        _force = force,
        _fieldManager = fieldManager;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dryRunOffset = _dryRun == null ? null
        : fbBuilder.writeList(_dryRun!.map(fbBuilder.writeString).toList());
    final int? fieldManagerOffset = _fieldManager == null ? null
        : fbBuilder.writeString(_fieldManager!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, dryRunOffset);
    fbBuilder.addBool(1, _force);
    fbBuilder.addOffset(2, fieldManagerOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Condition {
  Condition._(this._bc, this._bcOffset);
  factory Condition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Condition> reader = _ConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get observedGeneration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  Time? get lastTransitionTime => Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'Condition{type: ${type}, status: ${status}, observedGeneration: ${observedGeneration}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _ConditionReader extends fb.TableReader<Condition> {
  const _ConditionReader();

  @override
  Condition createObject(fb.BufferContext bc, int offset) => 
    Condition._(bc, offset);
}

class ConditionBuilder {
  ConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addObservedGeneration(int? observedGeneration) {
    fbBuilder.addInt64(2, observedGeneration);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final int? _observedGeneration;
  final TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  ConditionObjectBuilder({
    String? type,
    String? status,
    int? observedGeneration,
    TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _observedGeneration = observedGeneration,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addInt64(2, _observedGeneration);
    fbBuilder.addOffset(3, lastTransitionTimeOffset);
    fbBuilder.addOffset(4, reasonOffset);
    fbBuilder.addOffset(5, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CreateOptions {
  CreateOptions._(this._bc, this._bcOffset);
  factory CreateOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CreateOptions> reader = _CreateOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get dryRun => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  String? get fieldManager => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get fieldValidation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'CreateOptions{dryRun: ${dryRun}, fieldManager: ${fieldManager}, fieldValidation: ${fieldValidation}}';
  }
}

class _CreateOptionsReader extends fb.TableReader<CreateOptions> {
  const _CreateOptionsReader();

  @override
  CreateOptions createObject(fb.BufferContext bc, int offset) => 
    CreateOptions._(bc, offset);
}

class CreateOptionsBuilder {
  CreateOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addDryRunOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFieldManagerOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFieldValidationOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CreateOptionsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _dryRun;
  final String? _fieldManager;
  final String? _fieldValidation;

  CreateOptionsObjectBuilder({
    List<String>? dryRun,
    String? fieldManager,
    String? fieldValidation,
  })
      : _dryRun = dryRun,
        _fieldManager = fieldManager,
        _fieldValidation = fieldValidation;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dryRunOffset = _dryRun == null ? null
        : fbBuilder.writeList(_dryRun!.map(fbBuilder.writeString).toList());
    final int? fieldManagerOffset = _fieldManager == null ? null
        : fbBuilder.writeString(_fieldManager!);
    final int? fieldValidationOffset = _fieldValidation == null ? null
        : fbBuilder.writeString(_fieldValidation!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, dryRunOffset);
    fbBuilder.addOffset(1, fieldManagerOffset);
    fbBuilder.addOffset(2, fieldValidationOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DeleteOptions {
  DeleteOptions._(this._bc, this._bcOffset);
  factory DeleteOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DeleteOptions> reader = _DeleteOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get gracePeriodSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  Preconditions? get preconditions => Preconditions.reader.vTableGetNullable(_bc, _bcOffset, 6);
  bool get orphanDependents => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  String? get propagationPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<String>? get dryRun => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'DeleteOptions{gracePeriodSeconds: ${gracePeriodSeconds}, preconditions: ${preconditions}, orphanDependents: ${orphanDependents}, propagationPolicy: ${propagationPolicy}, dryRun: ${dryRun}}';
  }
}

class _DeleteOptionsReader extends fb.TableReader<DeleteOptions> {
  const _DeleteOptionsReader();

  @override
  DeleteOptions createObject(fb.BufferContext bc, int offset) => 
    DeleteOptions._(bc, offset);
}

class DeleteOptionsBuilder {
  DeleteOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addGracePeriodSeconds(int? gracePeriodSeconds) {
    fbBuilder.addInt64(0, gracePeriodSeconds);
    return fbBuilder.offset;
  }
  int addPreconditionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addOrphanDependents(bool? orphanDependents) {
    fbBuilder.addBool(2, orphanDependents);
    return fbBuilder.offset;
  }
  int addPropagationPolicyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDryRunOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DeleteOptionsObjectBuilder extends fb.ObjectBuilder {
  final int? _gracePeriodSeconds;
  final PreconditionsObjectBuilder? _preconditions;
  final bool? _orphanDependents;
  final String? _propagationPolicy;
  final List<String>? _dryRun;

  DeleteOptionsObjectBuilder({
    int? gracePeriodSeconds,
    PreconditionsObjectBuilder? preconditions,
    bool? orphanDependents,
    String? propagationPolicy,
    List<String>? dryRun,
  })
      : _gracePeriodSeconds = gracePeriodSeconds,
        _preconditions = preconditions,
        _orphanDependents = orphanDependents,
        _propagationPolicy = propagationPolicy,
        _dryRun = dryRun;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? preconditionsOffset = _preconditions?.getOrCreateOffset(fbBuilder);
    final int? propagationPolicyOffset = _propagationPolicy == null ? null
        : fbBuilder.writeString(_propagationPolicy!);
    final int? dryRunOffset = _dryRun == null ? null
        : fbBuilder.writeList(_dryRun!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(5);
    fbBuilder.addInt64(0, _gracePeriodSeconds);
    fbBuilder.addOffset(1, preconditionsOffset);
    fbBuilder.addBool(2, _orphanDependents);
    fbBuilder.addOffset(3, propagationPolicyOffset);
    fbBuilder.addOffset(4, dryRunOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Duration {
  Duration._(this._bc, this._bcOffset);
  factory Duration(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Duration> reader = _DurationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get duration => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'Duration{duration: ${duration}}';
  }
}

class _DurationReader extends fb.TableReader<Duration> {
  const _DurationReader();

  @override
  Duration createObject(fb.BufferContext bc, int offset) => 
    Duration._(bc, offset);
}

class DurationBuilder {
  DurationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addDuration(int? duration) {
    fbBuilder.addInt64(0, duration);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DurationObjectBuilder extends fb.ObjectBuilder {
  final int? _duration;

  DurationObjectBuilder({
    int? duration,
  })
      : _duration = duration;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addInt64(0, _duration);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FieldsV1 {
  FieldsV1._(this._bc, this._bcOffset);
  factory FieldsV1(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FieldsV1> reader = _FieldsV1Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get raw => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'FieldsV1{raw: ${raw}}';
  }
}

class _FieldsV1Reader extends fb.TableReader<FieldsV1> {
  const _FieldsV1Reader();

  @override
  FieldsV1 createObject(fb.BufferContext bc, int offset) => 
    FieldsV1._(bc, offset);
}

class FieldsV1Builder {
  FieldsV1Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRawOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FieldsV1ObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _raw;

  FieldsV1ObjectBuilder({
    List<int>? raw,
  })
      : _raw = raw;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rawOffset = _raw == null ? null
        : fbBuilder.writeListUint8(_raw!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, rawOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GetOptions {
  GetOptions._(this._bc, this._bcOffset);
  factory GetOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GetOptions> reader = _GetOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get resourceVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'GetOptions{resourceVersion: ${resourceVersion}}';
  }
}

class _GetOptionsReader extends fb.TableReader<GetOptions> {
  const _GetOptionsReader();

  @override
  GetOptions createObject(fb.BufferContext bc, int offset) => 
    GetOptions._(bc, offset);
}

class GetOptionsBuilder {
  GetOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addResourceVersionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GetOptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _resourceVersion;

  GetOptionsObjectBuilder({
    String? resourceVersion,
  })
      : _resourceVersion = resourceVersion;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? resourceVersionOffset = _resourceVersion == null ? null
        : fbBuilder.writeString(_resourceVersion!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, resourceVersionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GroupKind {
  GroupKind._(this._bc, this._bcOffset);
  factory GroupKind(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GroupKind> reader = _GroupKindReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'GroupKind{group: ${group}, kind: ${kind}}';
  }
}

class _GroupKindReader extends fb.TableReader<GroupKind> {
  const _GroupKindReader();

  @override
  GroupKind createObject(fb.BufferContext bc, int offset) => 
    GroupKind._(bc, offset);
}

class GroupKindBuilder {
  GroupKindBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GroupKindObjectBuilder extends fb.ObjectBuilder {
  final String? _group;
  final String? _kind;

  GroupKindObjectBuilder({
    String? group,
    String? kind,
  })
      : _group = group,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, groupOffset);
    fbBuilder.addOffset(1, kindOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GroupResource {
  GroupResource._(this._bc, this._bcOffset);
  factory GroupResource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GroupResource> reader = _GroupResourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get resource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'GroupResource{group: ${group}, resource: ${resource}}';
  }
}

class _GroupResourceReader extends fb.TableReader<GroupResource> {
  const _GroupResourceReader();

  @override
  GroupResource createObject(fb.BufferContext bc, int offset) => 
    GroupResource._(bc, offset);
}

class GroupResourceBuilder {
  GroupResourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GroupResourceObjectBuilder extends fb.ObjectBuilder {
  final String? _group;
  final String? _resource;

  GroupResourceObjectBuilder({
    String? group,
    String? resource,
  })
      : _group = group,
        _resource = resource;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? resourceOffset = _resource == null ? null
        : fbBuilder.writeString(_resource!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, groupOffset);
    fbBuilder.addOffset(1, resourceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GroupVersion {
  GroupVersion._(this._bc, this._bcOffset);
  factory GroupVersion(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GroupVersion> reader = _GroupVersionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'GroupVersion{group: ${group}, version: ${version}}';
  }
}

class _GroupVersionReader extends fb.TableReader<GroupVersion> {
  const _GroupVersionReader();

  @override
  GroupVersion createObject(fb.BufferContext bc, int offset) => 
    GroupVersion._(bc, offset);
}

class GroupVersionBuilder {
  GroupVersionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GroupVersionObjectBuilder extends fb.ObjectBuilder {
  final String? _group;
  final String? _version;

  GroupVersionObjectBuilder({
    String? group,
    String? version,
  })
      : _group = group,
        _version = version;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, groupOffset);
    fbBuilder.addOffset(1, versionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GroupVersionForDiscovery {
  GroupVersionForDiscovery._(this._bc, this._bcOffset);
  factory GroupVersionForDiscovery(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GroupVersionForDiscovery> reader = _GroupVersionForDiscoveryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get groupVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'GroupVersionForDiscovery{groupVersion: ${groupVersion}, version: ${version}}';
  }
}

class _GroupVersionForDiscoveryReader extends fb.TableReader<GroupVersionForDiscovery> {
  const _GroupVersionForDiscoveryReader();

  @override
  GroupVersionForDiscovery createObject(fb.BufferContext bc, int offset) => 
    GroupVersionForDiscovery._(bc, offset);
}

class GroupVersionForDiscoveryBuilder {
  GroupVersionForDiscoveryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addGroupVersionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GroupVersionForDiscoveryObjectBuilder extends fb.ObjectBuilder {
  final String? _groupVersion;
  final String? _version;

  GroupVersionForDiscoveryObjectBuilder({
    String? groupVersion,
    String? version,
  })
      : _groupVersion = groupVersion,
        _version = version;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? groupVersionOffset = _groupVersion == null ? null
        : fbBuilder.writeString(_groupVersion!);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, groupVersionOffset);
    fbBuilder.addOffset(1, versionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GroupVersionKind {
  GroupVersionKind._(this._bc, this._bcOffset);
  factory GroupVersionKind(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GroupVersionKind> reader = _GroupVersionKindReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'GroupVersionKind{group: ${group}, version: ${version}, kind: ${kind}}';
  }
}

class _GroupVersionKindReader extends fb.TableReader<GroupVersionKind> {
  const _GroupVersionKindReader();

  @override
  GroupVersionKind createObject(fb.BufferContext bc, int offset) => 
    GroupVersionKind._(bc, offset);
}

class GroupVersionKindBuilder {
  GroupVersionKindBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GroupVersionKindObjectBuilder extends fb.ObjectBuilder {
  final String? _group;
  final String? _version;
  final String? _kind;

  GroupVersionKindObjectBuilder({
    String? group,
    String? version,
    String? kind,
  })
      : _group = group,
        _version = version,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, groupOffset);
    fbBuilder.addOffset(1, versionOffset);
    fbBuilder.addOffset(2, kindOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GroupVersionResource {
  GroupVersionResource._(this._bc, this._bcOffset);
  factory GroupVersionResource(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GroupVersionResource> reader = _GroupVersionResourceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get resource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'GroupVersionResource{group: ${group}, version: ${version}, resource: ${resource}}';
  }
}

class _GroupVersionResourceReader extends fb.TableReader<GroupVersionResource> {
  const _GroupVersionResourceReader();

  @override
  GroupVersionResource createObject(fb.BufferContext bc, int offset) => 
    GroupVersionResource._(bc, offset);
}

class GroupVersionResourceBuilder {
  GroupVersionResourceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addResourceOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GroupVersionResourceObjectBuilder extends fb.ObjectBuilder {
  final String? _group;
  final String? _version;
  final String? _resource;

  GroupVersionResourceObjectBuilder({
    String? group,
    String? version,
    String? resource,
  })
      : _group = group,
        _version = version,
        _resource = resource;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    final int? resourceOffset = _resource == null ? null
        : fbBuilder.writeString(_resource!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, groupOffset);
    fbBuilder.addOffset(1, versionOffset);
    fbBuilder.addOffset(2, resourceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LabelSelector {
  LabelSelector._(this._bc, this._bcOffset);
  factory LabelSelector(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LabelSelector> reader = _LabelSelectorReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<apimachinery_pkg_apis_meta_v1_label_selector_.MatchLabelsEntry>? get matchLabels => const fb.ListReader<apimachinery_pkg_apis_meta_v1_label_selector_.MatchLabelsEntry>(apimachinery_pkg_apis_meta_v1_label_selector_.MatchLabelsEntry.reader).vTableGetNullable(_bc, _bcOffset, 4);
  List<LabelSelectorRequirement>? get matchExpressions => const fb.ListReader<LabelSelectorRequirement>(LabelSelectorRequirement.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'LabelSelector{matchLabels: ${matchLabels}, matchExpressions: ${matchExpressions}}';
  }
}

class _LabelSelectorReader extends fb.TableReader<LabelSelector> {
  const _LabelSelectorReader();

  @override
  LabelSelector createObject(fb.BufferContext bc, int offset) => 
    LabelSelector._(bc, offset);
}

class LabelSelectorBuilder {
  LabelSelectorBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMatchLabelsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMatchExpressionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LabelSelectorObjectBuilder extends fb.ObjectBuilder {
  final List<apimachinery_pkg_apis_meta_v1_label_selector_.MatchLabelsEntryObjectBuilder>? _matchLabels;
  final List<LabelSelectorRequirementObjectBuilder>? _matchExpressions;

  LabelSelectorObjectBuilder({
    List<apimachinery_pkg_apis_meta_v1_label_selector_.MatchLabelsEntryObjectBuilder>? matchLabels,
    List<LabelSelectorRequirementObjectBuilder>? matchExpressions,
  })
      : _matchLabels = matchLabels,
        _matchExpressions = matchExpressions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? matchLabelsOffset = _matchLabels == null ? null
        : fbBuilder.writeList(_matchLabels!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? matchExpressionsOffset = _matchExpressions == null ? null
        : fbBuilder.writeList(_matchExpressions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, matchLabelsOffset);
    fbBuilder.addOffset(1, matchExpressionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class LabelSelectorRequirement {
  LabelSelectorRequirement._(this._bc, this._bcOffset);
  factory LabelSelectorRequirement(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<LabelSelectorRequirement> reader = _LabelSelectorRequirementReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get $operator => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  List<String>? get values => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'LabelSelectorRequirement{key: ${key}, \$operator: ${$operator}, values: ${values}}';
  }
}

class _LabelSelectorRequirementReader extends fb.TableReader<LabelSelectorRequirement> {
  const _LabelSelectorRequirementReader();

  @override
  LabelSelectorRequirement createObject(fb.BufferContext bc, int offset) => 
    LabelSelectorRequirement._(bc, offset);
}

class LabelSelectorRequirementBuilder {
  LabelSelectorRequirementBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOperatorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addValuesOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class LabelSelectorRequirementObjectBuilder extends fb.ObjectBuilder {
  final String? _key;
  final String? _$operator;
  final List<String>? _values;

  LabelSelectorRequirementObjectBuilder({
    String? key,
    String? $operator,
    List<String>? values,
  })
      : _key = key,
        _$operator = $operator,
        _values = values;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    final int? $operatorOffset = _$operator == null ? null
        : fbBuilder.writeString(_$operator!);
    final int? valuesOffset = _values == null ? null
        : fbBuilder.writeList(_values!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, keyOffset);
    fbBuilder.addOffset(1, $operatorOffset);
    fbBuilder.addOffset(2, valuesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class List {
  List._(this._bc, this._bcOffset);
  factory List(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<List> reader = _ListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ListMeta? get metadata => ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<apimachinery_pkg_runtime.RawExtension>? get items => const fb.ListReader<apimachinery_pkg_runtime.RawExtension>(apimachinery_pkg_runtime.RawExtension.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'List{metadata: ${metadata}, items: ${items}}';
  }
}

class _ListReader extends fb.TableReader<List> {
  const _ListReader();

  @override
  List createObject(fb.BufferContext bc, int offset) => 
    List._(bc, offset);
}

class ListBuilder {
  ListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ListObjectBuilder extends fb.ObjectBuilder {
  final ListMetaObjectBuilder? _metadata;
  final List<apimachinery_pkg_runtime.RawExtensionObjectBuilder>? _items;

  ListObjectBuilder({
    ListMetaObjectBuilder? metadata,
    List<apimachinery_pkg_runtime.RawExtensionObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ListMeta {
  ListMeta._(this._bc, this._bcOffset);
  factory ListMeta(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ListMeta> reader = _ListMetaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get selfLink => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get resourceVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get $continue => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get remainingItemCount => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 10, 0);

  @override
  String toString() {
    return 'ListMeta{selfLink: ${selfLink}, resourceVersion: ${resourceVersion}, \$continue: ${$continue}, remainingItemCount: ${remainingItemCount}}';
  }
}

class _ListMetaReader extends fb.TableReader<ListMeta> {
  const _ListMetaReader();

  @override
  ListMeta createObject(fb.BufferContext bc, int offset) => 
    ListMeta._(bc, offset);
}

class ListMetaBuilder {
  ListMetaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addSelfLinkOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addContinueOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addRemainingItemCount(int? remainingItemCount) {
    fbBuilder.addInt64(3, remainingItemCount);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ListMetaObjectBuilder extends fb.ObjectBuilder {
  final String? _selfLink;
  final String? _resourceVersion;
  final String? _$continue;
  final int? _remainingItemCount;

  ListMetaObjectBuilder({
    String? selfLink,
    String? resourceVersion,
    String? $continue,
    int? remainingItemCount,
  })
      : _selfLink = selfLink,
        _resourceVersion = resourceVersion,
        _$continue = $continue,
        _remainingItemCount = remainingItemCount;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? selfLinkOffset = _selfLink == null ? null
        : fbBuilder.writeString(_selfLink!);
    final int? resourceVersionOffset = _resourceVersion == null ? null
        : fbBuilder.writeString(_resourceVersion!);
    final int? $continueOffset = _$continue == null ? null
        : fbBuilder.writeString(_$continue!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, selfLinkOffset);
    fbBuilder.addOffset(1, resourceVersionOffset);
    fbBuilder.addOffset(2, $continueOffset);
    fbBuilder.addInt64(3, _remainingItemCount);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ListOptions {
  ListOptions._(this._bc, this._bcOffset);
  factory ListOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ListOptions> reader = _ListOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get labelSelector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get fieldSelector => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  bool get watch => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  bool get allowWatchBookmarks => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  String? get resourceVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get resourceVersionMatch => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  int get timeoutSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 16, 0);
  int get limit => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 18, 0);
  String? get $continue => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  bool get sendInitialEvents => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);

  @override
  String toString() {
    return 'ListOptions{labelSelector: ${labelSelector}, fieldSelector: ${fieldSelector}, watch: ${watch}, allowWatchBookmarks: ${allowWatchBookmarks}, resourceVersion: ${resourceVersion}, resourceVersionMatch: ${resourceVersionMatch}, timeoutSeconds: ${timeoutSeconds}, limit: ${limit}, \$continue: ${$continue}, sendInitialEvents: ${sendInitialEvents}}';
  }
}

class _ListOptionsReader extends fb.TableReader<ListOptions> {
  const _ListOptionsReader();

  @override
  ListOptions createObject(fb.BufferContext bc, int offset) => 
    ListOptions._(bc, offset);
}

class ListOptionsBuilder {
  ListOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addLabelSelectorOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFieldSelectorOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addWatch(bool? watch) {
    fbBuilder.addBool(2, watch);
    return fbBuilder.offset;
  }
  int addAllowWatchBookmarks(bool? allowWatchBookmarks) {
    fbBuilder.addBool(3, allowWatchBookmarks);
    return fbBuilder.offset;
  }
  int addResourceVersionOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addResourceVersionMatchOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTimeoutSeconds(int? timeoutSeconds) {
    fbBuilder.addInt64(6, timeoutSeconds);
    return fbBuilder.offset;
  }
  int addLimit(int? limit) {
    fbBuilder.addInt64(7, limit);
    return fbBuilder.offset;
  }
  int addContinueOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addSendInitialEvents(bool? sendInitialEvents) {
    fbBuilder.addBool(9, sendInitialEvents);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ListOptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _labelSelector;
  final String? _fieldSelector;
  final bool? _watch;
  final bool? _allowWatchBookmarks;
  final String? _resourceVersion;
  final String? _resourceVersionMatch;
  final int? _timeoutSeconds;
  final int? _limit;
  final String? _$continue;
  final bool? _sendInitialEvents;

  ListOptionsObjectBuilder({
    String? labelSelector,
    String? fieldSelector,
    bool? watch,
    bool? allowWatchBookmarks,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    int? limit,
    String? $continue,
    bool? sendInitialEvents,
  })
      : _labelSelector = labelSelector,
        _fieldSelector = fieldSelector,
        _watch = watch,
        _allowWatchBookmarks = allowWatchBookmarks,
        _resourceVersion = resourceVersion,
        _resourceVersionMatch = resourceVersionMatch,
        _timeoutSeconds = timeoutSeconds,
        _limit = limit,
        _$continue = $continue,
        _sendInitialEvents = sendInitialEvents;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? labelSelectorOffset = _labelSelector == null ? null
        : fbBuilder.writeString(_labelSelector!);
    final int? fieldSelectorOffset = _fieldSelector == null ? null
        : fbBuilder.writeString(_fieldSelector!);
    final int? resourceVersionOffset = _resourceVersion == null ? null
        : fbBuilder.writeString(_resourceVersion!);
    final int? resourceVersionMatchOffset = _resourceVersionMatch == null ? null
        : fbBuilder.writeString(_resourceVersionMatch!);
    final int? $continueOffset = _$continue == null ? null
        : fbBuilder.writeString(_$continue!);
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, labelSelectorOffset);
    fbBuilder.addOffset(1, fieldSelectorOffset);
    fbBuilder.addBool(2, _watch);
    fbBuilder.addBool(3, _allowWatchBookmarks);
    fbBuilder.addOffset(4, resourceVersionOffset);
    fbBuilder.addOffset(5, resourceVersionMatchOffset);
    fbBuilder.addInt64(6, _timeoutSeconds);
    fbBuilder.addInt64(7, _limit);
    fbBuilder.addOffset(8, $continueOffset);
    fbBuilder.addBool(9, _sendInitialEvents);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ManagedFieldsEntry {
  ManagedFieldsEntry._(this._bc, this._bcOffset);
  factory ManagedFieldsEntry(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ManagedFieldsEntry> reader = _ManagedFieldsEntryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get manager => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get operation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get apiVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  Time? get time => Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get fieldsType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  FieldsV1? get fieldsV1 => FieldsV1.reader.vTableGetNullable(_bc, _bcOffset, 14);
  String? get subresource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'ManagedFieldsEntry{manager: ${manager}, operation: ${operation}, apiVersion: ${apiVersion}, time: ${time}, fieldsType: ${fieldsType}, fieldsV1: ${fieldsV1}, subresource: ${subresource}}';
  }
}

class _ManagedFieldsEntryReader extends fb.TableReader<ManagedFieldsEntry> {
  const _ManagedFieldsEntryReader();

  @override
  ManagedFieldsEntry createObject(fb.BufferContext bc, int offset) => 
    ManagedFieldsEntry._(bc, offset);
}

class ManagedFieldsEntryBuilder {
  ManagedFieldsEntryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addManagerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOperationOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addApiVersionOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addFieldsTypeOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addFieldsV1Offset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSubresourceOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ManagedFieldsEntryObjectBuilder extends fb.ObjectBuilder {
  final String? _manager;
  final String? _operation;
  final String? _apiVersion;
  final TimeObjectBuilder? _time;
  final String? _fieldsType;
  final FieldsV1ObjectBuilder? _fieldsV1;
  final String? _subresource;

  ManagedFieldsEntryObjectBuilder({
    String? manager,
    String? operation,
    String? apiVersion,
    TimeObjectBuilder? time,
    String? fieldsType,
    FieldsV1ObjectBuilder? fieldsV1,
    String? subresource,
  })
      : _manager = manager,
        _operation = operation,
        _apiVersion = apiVersion,
        _time = time,
        _fieldsType = fieldsType,
        _fieldsV1 = fieldsV1,
        _subresource = subresource;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? managerOffset = _manager == null ? null
        : fbBuilder.writeString(_manager!);
    final int? operationOffset = _operation == null ? null
        : fbBuilder.writeString(_operation!);
    final int? apiVersionOffset = _apiVersion == null ? null
        : fbBuilder.writeString(_apiVersion!);
    final int? timeOffset = _time?.getOrCreateOffset(fbBuilder);
    final int? fieldsTypeOffset = _fieldsType == null ? null
        : fbBuilder.writeString(_fieldsType!);
    final int? fieldsV1Offset = _fieldsV1?.getOrCreateOffset(fbBuilder);
    final int? subresourceOffset = _subresource == null ? null
        : fbBuilder.writeString(_subresource!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, managerOffset);
    fbBuilder.addOffset(1, operationOffset);
    fbBuilder.addOffset(2, apiVersionOffset);
    fbBuilder.addOffset(3, timeOffset);
    fbBuilder.addOffset(4, fieldsTypeOffset);
    fbBuilder.addOffset(5, fieldsV1Offset);
    fbBuilder.addOffset(6, subresourceOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MicroTime {
  MicroTime._(this._bc, this._bcOffset);
  factory MicroTime(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MicroTime> reader = _MicroTimeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get seconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get nanos => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'MicroTime{seconds: ${seconds}, nanos: ${nanos}}';
  }
}

class _MicroTimeReader extends fb.TableReader<MicroTime> {
  const _MicroTimeReader();

  @override
  MicroTime createObject(fb.BufferContext bc, int offset) => 
    MicroTime._(bc, offset);
}

class MicroTimeBuilder {
  MicroTimeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSeconds(int? seconds) {
    fbBuilder.addInt64(0, seconds);
    return fbBuilder.offset;
  }
  int addNanos(int? nanos) {
    fbBuilder.addInt32(1, nanos);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MicroTimeObjectBuilder extends fb.ObjectBuilder {
  final int? _seconds;
  final int? _nanos;

  MicroTimeObjectBuilder({
    int? seconds,
    int? nanos,
  })
      : _seconds = seconds,
        _nanos = nanos;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addInt64(0, _seconds);
    fbBuilder.addInt32(1, _nanos);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ObjectMeta {
  ObjectMeta._(this._bc, this._bcOffset);
  factory ObjectMeta(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ObjectMeta> reader = _ObjectMetaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get generateName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get selfLink => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get uid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get resourceVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  int get generation => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 16, 0);
  Time? get creationTimestamp => Time.reader.vTableGetNullable(_bc, _bcOffset, 18);
  Time? get deletionTimestamp => Time.reader.vTableGetNullable(_bc, _bcOffset, 20);
  int get deletionGracePeriodSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 22, 0);
  List<apimachinery_pkg_apis_meta_v1_object_meta_.LabelsEntry>? get labels => const fb.ListReader<apimachinery_pkg_apis_meta_v1_object_meta_.LabelsEntry>(apimachinery_pkg_apis_meta_v1_object_meta_.LabelsEntry.reader).vTableGetNullable(_bc, _bcOffset, 24);
  List<apimachinery_pkg_apis_meta_v1_object_meta_.AnnotationsEntry>? get annotations => const fb.ListReader<apimachinery_pkg_apis_meta_v1_object_meta_.AnnotationsEntry>(apimachinery_pkg_apis_meta_v1_object_meta_.AnnotationsEntry.reader).vTableGetNullable(_bc, _bcOffset, 26);
  List<OwnerReference>? get ownerReferences => const fb.ListReader<OwnerReference>(OwnerReference.reader).vTableGetNullable(_bc, _bcOffset, 28);
  List<String>? get finalizers => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  List<ManagedFieldsEntry>? get managedFields => const fb.ListReader<ManagedFieldsEntry>(ManagedFieldsEntry.reader).vTableGetNullable(_bc, _bcOffset, 32);

  @override
  String toString() {
    return 'ObjectMeta{name: ${name}, generateName: ${generateName}, namespace: ${namespace}, selfLink: ${selfLink}, uid: ${uid}, resourceVersion: ${resourceVersion}, generation: ${generation}, creationTimestamp: ${creationTimestamp}, deletionTimestamp: ${deletionTimestamp}, deletionGracePeriodSeconds: ${deletionGracePeriodSeconds}, labels: ${labels}, annotations: ${annotations}, ownerReferences: ${ownerReferences}, finalizers: ${finalizers}, managedFields: ${managedFields}}';
  }
}

class _ObjectMetaReader extends fb.TableReader<ObjectMeta> {
  const _ObjectMetaReader();

  @override
  ObjectMeta createObject(fb.BufferContext bc, int offset) => 
    ObjectMeta._(bc, offset);
}

class ObjectMetaBuilder {
  ObjectMetaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(15);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addGenerateNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSelfLinkOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addUidOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addResourceVersionOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addGeneration(int? generation) {
    fbBuilder.addInt64(6, generation);
    return fbBuilder.offset;
  }
  int addCreationTimestampOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addDeletionTimestampOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addDeletionGracePeriodSeconds(int? deletionGracePeriodSeconds) {
    fbBuilder.addInt64(9, deletionGracePeriodSeconds);
    return fbBuilder.offset;
  }
  int addLabelsOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addAnnotationsOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addOwnerReferencesOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addFinalizersOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addManagedFieldsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ObjectMetaObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _generateName;
  final String? _namespace;
  final String? _selfLink;
  final String? _uid;
  final String? _resourceVersion;
  final int? _generation;
  final TimeObjectBuilder? _creationTimestamp;
  final TimeObjectBuilder? _deletionTimestamp;
  final int? _deletionGracePeriodSeconds;
  final List<apimachinery_pkg_apis_meta_v1_object_meta_.LabelsEntryObjectBuilder>? _labels;
  final List<apimachinery_pkg_apis_meta_v1_object_meta_.AnnotationsEntryObjectBuilder>? _annotations;
  final List<OwnerReferenceObjectBuilder>? _ownerReferences;
  final List<String>? _finalizers;
  final List<ManagedFieldsEntryObjectBuilder>? _managedFields;

  ObjectMetaObjectBuilder({
    String? name,
    String? generateName,
    String? namespace,
    String? selfLink,
    String? uid,
    String? resourceVersion,
    int? generation,
    TimeObjectBuilder? creationTimestamp,
    TimeObjectBuilder? deletionTimestamp,
    int? deletionGracePeriodSeconds,
    List<apimachinery_pkg_apis_meta_v1_object_meta_.LabelsEntryObjectBuilder>? labels,
    List<apimachinery_pkg_apis_meta_v1_object_meta_.AnnotationsEntryObjectBuilder>? annotations,
    List<OwnerReferenceObjectBuilder>? ownerReferences,
    List<String>? finalizers,
    List<ManagedFieldsEntryObjectBuilder>? managedFields,
  })
      : _name = name,
        _generateName = generateName,
        _namespace = namespace,
        _selfLink = selfLink,
        _uid = uid,
        _resourceVersion = resourceVersion,
        _generation = generation,
        _creationTimestamp = creationTimestamp,
        _deletionTimestamp = deletionTimestamp,
        _deletionGracePeriodSeconds = deletionGracePeriodSeconds,
        _labels = labels,
        _annotations = annotations,
        _ownerReferences = ownerReferences,
        _finalizers = finalizers,
        _managedFields = managedFields;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? generateNameOffset = _generateName == null ? null
        : fbBuilder.writeString(_generateName!);
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    final int? selfLinkOffset = _selfLink == null ? null
        : fbBuilder.writeString(_selfLink!);
    final int? uidOffset = _uid == null ? null
        : fbBuilder.writeString(_uid!);
    final int? resourceVersionOffset = _resourceVersion == null ? null
        : fbBuilder.writeString(_resourceVersion!);
    final int? creationTimestampOffset = _creationTimestamp?.getOrCreateOffset(fbBuilder);
    final int? deletionTimestampOffset = _deletionTimestamp?.getOrCreateOffset(fbBuilder);
    final int? labelsOffset = _labels == null ? null
        : fbBuilder.writeList(_labels!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? annotationsOffset = _annotations == null ? null
        : fbBuilder.writeList(_annotations!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? ownerReferencesOffset = _ownerReferences == null ? null
        : fbBuilder.writeList(_ownerReferences!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? finalizersOffset = _finalizers == null ? null
        : fbBuilder.writeList(_finalizers!.map(fbBuilder.writeString).toList());
    final int? managedFieldsOffset = _managedFields == null ? null
        : fbBuilder.writeList(_managedFields!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(15);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, generateNameOffset);
    fbBuilder.addOffset(2, namespaceOffset);
    fbBuilder.addOffset(3, selfLinkOffset);
    fbBuilder.addOffset(4, uidOffset);
    fbBuilder.addOffset(5, resourceVersionOffset);
    fbBuilder.addInt64(6, _generation);
    fbBuilder.addOffset(7, creationTimestampOffset);
    fbBuilder.addOffset(8, deletionTimestampOffset);
    fbBuilder.addInt64(9, _deletionGracePeriodSeconds);
    fbBuilder.addOffset(10, labelsOffset);
    fbBuilder.addOffset(11, annotationsOffset);
    fbBuilder.addOffset(12, ownerReferencesOffset);
    fbBuilder.addOffset(13, finalizersOffset);
    fbBuilder.addOffset(14, managedFieldsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class OwnerReference {
  OwnerReference._(this._bc, this._bcOffset);
  factory OwnerReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<OwnerReference> reader = _OwnerReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get apiVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get uid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  bool get controller => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  bool get blockOwnerDeletion => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);

  @override
  String toString() {
    return 'OwnerReference{apiVersion: ${apiVersion}, kind: ${kind}, name: ${name}, uid: ${uid}, controller: ${controller}, blockOwnerDeletion: ${blockOwnerDeletion}}';
  }
}

class _OwnerReferenceReader extends fb.TableReader<OwnerReference> {
  const _OwnerReferenceReader();

  @override
  OwnerReference createObject(fb.BufferContext bc, int offset) => 
    OwnerReference._(bc, offset);
}

class OwnerReferenceBuilder {
  OwnerReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addApiVersionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addUidOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addController(bool? controller) {
    fbBuilder.addBool(4, controller);
    return fbBuilder.offset;
  }
  int addBlockOwnerDeletion(bool? blockOwnerDeletion) {
    fbBuilder.addBool(5, blockOwnerDeletion);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class OwnerReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _apiVersion;
  final String? _kind;
  final String? _name;
  final String? _uid;
  final bool? _controller;
  final bool? _blockOwnerDeletion;

  OwnerReferenceObjectBuilder({
    String? apiVersion,
    String? kind,
    String? name,
    String? uid,
    bool? controller,
    bool? blockOwnerDeletion,
  })
      : _apiVersion = apiVersion,
        _kind = kind,
        _name = name,
        _uid = uid,
        _controller = controller,
        _blockOwnerDeletion = blockOwnerDeletion;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiVersionOffset = _apiVersion == null ? null
        : fbBuilder.writeString(_apiVersion!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? uidOffset = _uid == null ? null
        : fbBuilder.writeString(_uid!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, apiVersionOffset);
    fbBuilder.addOffset(1, kindOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, uidOffset);
    fbBuilder.addBool(4, _controller);
    fbBuilder.addBool(5, _blockOwnerDeletion);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PartialObjectMetadata {
  PartialObjectMetadata._(this._bc, this._bcOffset);
  factory PartialObjectMetadata(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PartialObjectMetadata> reader = _PartialObjectMetadataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ObjectMeta? get metadata => ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'PartialObjectMetadata{metadata: ${metadata}}';
  }
}

class _PartialObjectMetadataReader extends fb.TableReader<PartialObjectMetadata> {
  const _PartialObjectMetadataReader();

  @override
  PartialObjectMetadata createObject(fb.BufferContext bc, int offset) => 
    PartialObjectMetadata._(bc, offset);
}

class PartialObjectMetadataBuilder {
  PartialObjectMetadataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PartialObjectMetadataObjectBuilder extends fb.ObjectBuilder {
  final ObjectMetaObjectBuilder? _metadata;

  PartialObjectMetadataObjectBuilder({
    ObjectMetaObjectBuilder? metadata,
  })
      : _metadata = metadata;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, metadataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PartialObjectMetadataList {
  PartialObjectMetadataList._(this._bc, this._bcOffset);
  factory PartialObjectMetadataList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PartialObjectMetadataList> reader = _PartialObjectMetadataListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ListMeta? get metadata => ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<PartialObjectMetadata>? get items => const fb.ListReader<PartialObjectMetadata>(PartialObjectMetadata.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PartialObjectMetadataList{metadata: ${metadata}, items: ${items}}';
  }
}

class _PartialObjectMetadataListReader extends fb.TableReader<PartialObjectMetadataList> {
  const _PartialObjectMetadataListReader();

  @override
  PartialObjectMetadataList createObject(fb.BufferContext bc, int offset) => 
    PartialObjectMetadataList._(bc, offset);
}

class PartialObjectMetadataListBuilder {
  PartialObjectMetadataListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PartialObjectMetadataListObjectBuilder extends fb.ObjectBuilder {
  final ListMetaObjectBuilder? _metadata;
  final List<PartialObjectMetadataObjectBuilder>? _items;

  PartialObjectMetadataListObjectBuilder({
    ListMetaObjectBuilder? metadata,
    List<PartialObjectMetadataObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Patch {
  Patch._(this._bc, this._bcOffset);
  factory Patch(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Patch> reader = _PatchReader();

  final fb.BufferContext _bc;
  final int _bcOffset;


  @override
  String toString() {
    return 'Patch{}';
  }
}

class _PatchReader extends fb.TableReader<Patch> {
  const _PatchReader();

  @override
  Patch createObject(fb.BufferContext bc, int offset) => 
    Patch._(bc, offset);
}

class PatchObjectBuilder extends fb.ObjectBuilder {

  PatchObjectBuilder();

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(0);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PatchOptions {
  PatchOptions._(this._bc, this._bcOffset);
  factory PatchOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PatchOptions> reader = _PatchOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get dryRun => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  bool get force => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  String? get fieldManager => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get fieldValidation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'PatchOptions{dryRun: ${dryRun}, force: ${force}, fieldManager: ${fieldManager}, fieldValidation: ${fieldValidation}}';
  }
}

class _PatchOptionsReader extends fb.TableReader<PatchOptions> {
  const _PatchOptionsReader();

  @override
  PatchOptions createObject(fb.BufferContext bc, int offset) => 
    PatchOptions._(bc, offset);
}

class PatchOptionsBuilder {
  PatchOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addDryRunOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addForce(bool? force) {
    fbBuilder.addBool(1, force);
    return fbBuilder.offset;
  }
  int addFieldManagerOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addFieldValidationOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PatchOptionsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _dryRun;
  final bool? _force;
  final String? _fieldManager;
  final String? _fieldValidation;

  PatchOptionsObjectBuilder({
    List<String>? dryRun,
    bool? force,
    String? fieldManager,
    String? fieldValidation,
  })
      : _dryRun = dryRun,
        _force = force,
        _fieldManager = fieldManager,
        _fieldValidation = fieldValidation;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dryRunOffset = _dryRun == null ? null
        : fbBuilder.writeList(_dryRun!.map(fbBuilder.writeString).toList());
    final int? fieldManagerOffset = _fieldManager == null ? null
        : fbBuilder.writeString(_fieldManager!);
    final int? fieldValidationOffset = _fieldValidation == null ? null
        : fbBuilder.writeString(_fieldValidation!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, dryRunOffset);
    fbBuilder.addBool(1, _force);
    fbBuilder.addOffset(2, fieldManagerOffset);
    fbBuilder.addOffset(3, fieldValidationOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Preconditions {
  Preconditions._(this._bc, this._bcOffset);
  factory Preconditions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Preconditions> reader = _PreconditionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get uid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get resourceVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'Preconditions{uid: ${uid}, resourceVersion: ${resourceVersion}}';
  }
}

class _PreconditionsReader extends fb.TableReader<Preconditions> {
  const _PreconditionsReader();

  @override
  Preconditions createObject(fb.BufferContext bc, int offset) => 
    Preconditions._(bc, offset);
}

class PreconditionsBuilder {
  PreconditionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addUidOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addResourceVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PreconditionsObjectBuilder extends fb.ObjectBuilder {
  final String? _uid;
  final String? _resourceVersion;

  PreconditionsObjectBuilder({
    String? uid,
    String? resourceVersion,
  })
      : _uid = uid,
        _resourceVersion = resourceVersion;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? uidOffset = _uid == null ? null
        : fbBuilder.writeString(_uid!);
    final int? resourceVersionOffset = _resourceVersion == null ? null
        : fbBuilder.writeString(_resourceVersion!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, uidOffset);
    fbBuilder.addOffset(1, resourceVersionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RootPaths {
  RootPaths._(this._bc, this._bcOffset);
  factory RootPaths(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RootPaths> reader = _RootPathsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get paths => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'RootPaths{paths: ${paths}}';
  }
}

class _RootPathsReader extends fb.TableReader<RootPaths> {
  const _RootPathsReader();

  @override
  RootPaths createObject(fb.BufferContext bc, int offset) => 
    RootPaths._(bc, offset);
}

class RootPathsBuilder {
  RootPathsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addPathsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RootPathsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _paths;

  RootPathsObjectBuilder({
    List<String>? paths,
  })
      : _paths = paths;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pathsOffset = _paths == null ? null
        : fbBuilder.writeList(_paths!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, pathsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServerAddressByClientCidr {
  ServerAddressByClientCidr._(this._bc, this._bcOffset);
  factory ServerAddressByClientCidr(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServerAddressByClientCidr> reader = _ServerAddressByClientCidrReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get clientCidr => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get serverAddress => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ServerAddressByClientCidr{clientCidr: ${clientCidr}, serverAddress: ${serverAddress}}';
  }
}

class _ServerAddressByClientCidrReader extends fb.TableReader<ServerAddressByClientCidr> {
  const _ServerAddressByClientCidrReader();

  @override
  ServerAddressByClientCidr createObject(fb.BufferContext bc, int offset) => 
    ServerAddressByClientCidr._(bc, offset);
}

class ServerAddressByClientCidrBuilder {
  ServerAddressByClientCidrBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addClientCidrOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addServerAddressOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServerAddressByClientCidrObjectBuilder extends fb.ObjectBuilder {
  final String? _clientCidr;
  final String? _serverAddress;

  ServerAddressByClientCidrObjectBuilder({
    String? clientCidr,
    String? serverAddress,
  })
      : _clientCidr = clientCidr,
        _serverAddress = serverAddress;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? clientCidrOffset = _clientCidr == null ? null
        : fbBuilder.writeString(_clientCidr!);
    final int? serverAddressOffset = _serverAddress == null ? null
        : fbBuilder.writeString(_serverAddress!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, clientCidrOffset);
    fbBuilder.addOffset(1, serverAddressOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Status {
  Status._(this._bc, this._bcOffset);
  factory Status(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Status> reader = _StatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ListMeta? get metadata => ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  StatusDetails? get details => StatusDetails.reader.vTableGetNullable(_bc, _bcOffset, 12);
  int get code => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  @override
  String toString() {
    return 'Status{metadata: ${metadata}, status: ${status}, message: ${message}, reason: ${reason}, details: ${details}, code: ${code}}';
  }
}

class _StatusReader extends fb.TableReader<Status> {
  const _StatusReader();

  @override
  Status createObject(fb.BufferContext bc, int offset) => 
    Status._(bc, offset);
}

class StatusBuilder {
  StatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addDetailsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCode(int? code) {
    fbBuilder.addInt32(5, code);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatusObjectBuilder extends fb.ObjectBuilder {
  final ListMetaObjectBuilder? _metadata;
  final String? _status;
  final String? _message;
  final String? _reason;
  final StatusDetailsObjectBuilder? _details;
  final int? _code;

  StatusObjectBuilder({
    ListMetaObjectBuilder? metadata,
    String? status,
    String? message,
    String? reason,
    StatusDetailsObjectBuilder? details,
    int? code,
  })
      : _metadata = metadata,
        _status = status,
        _message = message,
        _reason = reason,
        _details = details,
        _code = code;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? detailsOffset = _details?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, messageOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, detailsOffset);
    fbBuilder.addInt32(5, _code);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatusCause {
  StatusCause._(this._bc, this._bcOffset);
  factory StatusCause(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatusCause> reader = _StatusCauseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get field => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'StatusCause{reason: ${reason}, message: ${message}, field: ${field}}';
  }
}

class _StatusCauseReader extends fb.TableReader<StatusCause> {
  const _StatusCauseReader();

  @override
  StatusCause createObject(fb.BufferContext bc, int offset) => 
    StatusCause._(bc, offset);
}

class StatusCauseBuilder {
  StatusCauseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFieldOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatusCauseObjectBuilder extends fb.ObjectBuilder {
  final String? _reason;
  final String? _message;
  final String? _field;

  StatusCauseObjectBuilder({
    String? reason,
    String? message,
    String? field,
  })
      : _reason = reason,
        _message = message,
        _field = field;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    final int? fieldOffset = _field == null ? null
        : fbBuilder.writeString(_field!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, reasonOffset);
    fbBuilder.addOffset(1, messageOffset);
    fbBuilder.addOffset(2, fieldOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class StatusDetails {
  StatusDetails._(this._bc, this._bcOffset);
  factory StatusDetails(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<StatusDetails> reader = _StatusDetailsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get uid => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<StatusCause>? get causes => const fb.ListReader<StatusCause>(StatusCause.reader).vTableGetNullable(_bc, _bcOffset, 12);
  int get retryAfterSeconds => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  @override
  String toString() {
    return 'StatusDetails{name: ${name}, group: ${group}, kind: ${kind}, uid: ${uid}, causes: ${causes}, retryAfterSeconds: ${retryAfterSeconds}}';
  }
}

class _StatusDetailsReader extends fb.TableReader<StatusDetails> {
  const _StatusDetailsReader();

  @override
  StatusDetails createObject(fb.BufferContext bc, int offset) => 
    StatusDetails._(bc, offset);
}

class StatusDetailsBuilder {
  StatusDetailsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addUidOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addCausesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addRetryAfterSeconds(int? retryAfterSeconds) {
    fbBuilder.addInt32(5, retryAfterSeconds);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StatusDetailsObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final String? _group;
  final String? _kind;
  final String? _uid;
  final List<StatusCauseObjectBuilder>? _causes;
  final int? _retryAfterSeconds;

  StatusDetailsObjectBuilder({
    String? name,
    String? group,
    String? kind,
    String? uid,
    List<StatusCauseObjectBuilder>? causes,
    int? retryAfterSeconds,
  })
      : _name = name,
        _group = group,
        _kind = kind,
        _uid = uid,
        _causes = causes,
        _retryAfterSeconds = retryAfterSeconds;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? uidOffset = _uid == null ? null
        : fbBuilder.writeString(_uid!);
    final int? causesOffset = _causes == null ? null
        : fbBuilder.writeList(_causes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, groupOffset);
    fbBuilder.addOffset(2, kindOffset);
    fbBuilder.addOffset(3, uidOffset);
    fbBuilder.addOffset(4, causesOffset);
    fbBuilder.addInt32(5, _retryAfterSeconds);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TableOptions {
  TableOptions._(this._bc, this._bcOffset);
  factory TableOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TableOptions> reader = _TableOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get includeObject => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'TableOptions{includeObject: ${includeObject}}';
  }
}

class _TableOptionsReader extends fb.TableReader<TableOptions> {
  const _TableOptionsReader();

  @override
  TableOptions createObject(fb.BufferContext bc, int offset) => 
    TableOptions._(bc, offset);
}

class TableOptionsBuilder {
  TableOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addIncludeObjectOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TableOptionsObjectBuilder extends fb.ObjectBuilder {
  final String? _includeObject;

  TableOptionsObjectBuilder({
    String? includeObject,
  })
      : _includeObject = includeObject;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? includeObjectOffset = _includeObject == null ? null
        : fbBuilder.writeString(_includeObject!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, includeObjectOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Time {
  Time._(this._bc, this._bcOffset);
  factory Time(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Time> reader = _TimeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get seconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get nanos => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Time{seconds: ${seconds}, nanos: ${nanos}}';
  }
}

class _TimeReader extends fb.TableReader<Time> {
  const _TimeReader();

  @override
  Time createObject(fb.BufferContext bc, int offset) => 
    Time._(bc, offset);
}

class TimeBuilder {
  TimeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSeconds(int? seconds) {
    fbBuilder.addInt64(0, seconds);
    return fbBuilder.offset;
  }
  int addNanos(int? nanos) {
    fbBuilder.addInt32(1, nanos);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TimeObjectBuilder extends fb.ObjectBuilder {
  final int? _seconds;
  final int? _nanos;

  TimeObjectBuilder({
    int? seconds,
    int? nanos,
  })
      : _seconds = seconds,
        _nanos = nanos;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addInt64(0, _seconds);
    fbBuilder.addInt32(1, _nanos);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Timestamp {
  Timestamp._(this._bc, this._bcOffset);
  factory Timestamp(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Timestamp> reader = _TimestampReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get seconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get nanos => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'Timestamp{seconds: ${seconds}, nanos: ${nanos}}';
  }
}

class _TimestampReader extends fb.TableReader<Timestamp> {
  const _TimestampReader();

  @override
  Timestamp createObject(fb.BufferContext bc, int offset) => 
    Timestamp._(bc, offset);
}

class TimestampBuilder {
  TimestampBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSeconds(int? seconds) {
    fbBuilder.addInt64(0, seconds);
    return fbBuilder.offset;
  }
  int addNanos(int? nanos) {
    fbBuilder.addInt32(1, nanos);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TimestampObjectBuilder extends fb.ObjectBuilder {
  final int? _seconds;
  final int? _nanos;

  TimestampObjectBuilder({
    int? seconds,
    int? nanos,
  })
      : _seconds = seconds,
        _nanos = nanos;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(2);
    fbBuilder.addInt64(0, _seconds);
    fbBuilder.addInt32(1, _nanos);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TypeMeta {
  TypeMeta._(this._bc, this._bcOffset);
  factory TypeMeta(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TypeMeta> reader = _TypeMetaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get apiVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'TypeMeta{kind: ${kind}, apiVersion: ${apiVersion}}';
  }
}

class _TypeMetaReader extends fb.TableReader<TypeMeta> {
  const _TypeMetaReader();

  @override
  TypeMeta createObject(fb.BufferContext bc, int offset) => 
    TypeMeta._(bc, offset);
}

class TypeMetaBuilder {
  TypeMetaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addKindOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addApiVersionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TypeMetaObjectBuilder extends fb.ObjectBuilder {
  final String? _kind;
  final String? _apiVersion;

  TypeMetaObjectBuilder({
    String? kind,
    String? apiVersion,
  })
      : _kind = kind,
        _apiVersion = apiVersion;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    final int? apiVersionOffset = _apiVersion == null ? null
        : fbBuilder.writeString(_apiVersion!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, kindOffset);
    fbBuilder.addOffset(1, apiVersionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UpdateOptions {
  UpdateOptions._(this._bc, this._bcOffset);
  factory UpdateOptions(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UpdateOptions> reader = _UpdateOptionsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get dryRun => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);
  String? get fieldManager => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get fieldValidation => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'UpdateOptions{dryRun: ${dryRun}, fieldManager: ${fieldManager}, fieldValidation: ${fieldValidation}}';
  }
}

class _UpdateOptionsReader extends fb.TableReader<UpdateOptions> {
  const _UpdateOptionsReader();

  @override
  UpdateOptions createObject(fb.BufferContext bc, int offset) => 
    UpdateOptions._(bc, offset);
}

class UpdateOptionsBuilder {
  UpdateOptionsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addDryRunOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFieldManagerOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFieldValidationOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UpdateOptionsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _dryRun;
  final String? _fieldManager;
  final String? _fieldValidation;

  UpdateOptionsObjectBuilder({
    List<String>? dryRun,
    String? fieldManager,
    String? fieldValidation,
  })
      : _dryRun = dryRun,
        _fieldManager = fieldManager,
        _fieldValidation = fieldValidation;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? dryRunOffset = _dryRun == null ? null
        : fbBuilder.writeList(_dryRun!.map(fbBuilder.writeString).toList());
    final int? fieldManagerOffset = _fieldManager == null ? null
        : fbBuilder.writeString(_fieldManager!);
    final int? fieldValidationOffset = _fieldValidation == null ? null
        : fbBuilder.writeString(_fieldValidation!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, dryRunOffset);
    fbBuilder.addOffset(1, fieldManagerOffset);
    fbBuilder.addOffset(2, fieldValidationOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Verbs {
  Verbs._(this._bc, this._bcOffset);
  factory Verbs(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Verbs> reader = _VerbsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<String>? get items => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'Verbs{items: ${items}}';
  }
}

class _VerbsReader extends fb.TableReader<Verbs> {
  const _VerbsReader();

  @override
  Verbs createObject(fb.BufferContext bc, int offset) => 
    Verbs._(bc, offset);
}

class VerbsBuilder {
  VerbsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class VerbsObjectBuilder extends fb.ObjectBuilder {
  final List<String>? _items;

  VerbsObjectBuilder({
    List<String>? items,
  })
      : _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class WatchEvent {
  WatchEvent._(this._bc, this._bcOffset);
  factory WatchEvent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<WatchEvent> reader = _WatchEventReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  apimachinery_pkg_runtime.RawExtension? get object => apimachinery_pkg_runtime.RawExtension.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'WatchEvent{type: ${type}, object: ${object}}';
  }
}

class _WatchEventReader extends fb.TableReader<WatchEvent> {
  const _WatchEventReader();

  @override
  WatchEvent createObject(fb.BufferContext bc, int offset) => 
    WatchEvent._(bc, offset);
}

class WatchEventBuilder {
  WatchEventBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addObjectOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class WatchEventObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final apimachinery_pkg_runtime.RawExtensionObjectBuilder? _object;

  WatchEventObjectBuilder({
    String? type,
    apimachinery_pkg_runtime.RawExtensionObjectBuilder? object,
  })
      : _type = type,
        _object = object;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? objectOffset = _object?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, objectOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
