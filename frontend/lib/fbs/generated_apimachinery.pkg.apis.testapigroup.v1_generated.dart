// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library apimachinery.pkg.apis.testapigroup.v1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.testapigroup.v1.carp_spec__generated.dart' as apimachinery_pkg_apis_testapigroup_v1_carp_spec_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class Carp {
  Carp._(this._bc, this._bcOffset);
  factory Carp(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Carp> reader = _CarpReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  CarpSpec? get spec => CarpSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  CarpStatus? get status => CarpStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Carp{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _CarpReader extends fb.TableReader<Carp> {
  const _CarpReader();

  @override
  Carp createObject(fb.BufferContext bc, int offset) => 
    Carp._(bc, offset);
}

class CarpBuilder {
  CarpBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CarpObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final CarpSpecObjectBuilder? _spec;
  final CarpStatusObjectBuilder? _status;

  CarpObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    CarpSpecObjectBuilder? spec,
    CarpStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CarpCondition {
  CarpCondition._(this._bc, this._bcOffset);
  factory CarpCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CarpCondition> reader = _CarpConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastProbeTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 10);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'CarpCondition{type: ${type}, status: ${status}, lastProbeTime: ${lastProbeTime}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _CarpConditionReader extends fb.TableReader<CarpCondition> {
  const _CarpConditionReader();

  @override
  CarpCondition createObject(fb.BufferContext bc, int offset) => 
    CarpCondition._(bc, offset);
}

class CarpConditionBuilder {
  CarpConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastProbeTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CarpConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastProbeTime;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  CarpConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastProbeTime,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastProbeTime = lastProbeTime,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastProbeTimeOffset = _lastProbeTime?.getOrCreateOffset(fbBuilder);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastProbeTimeOffset);
    fbBuilder.addOffset(3, lastTransitionTimeOffset);
    fbBuilder.addOffset(4, reasonOffset);
    fbBuilder.addOffset(5, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CarpList {
  CarpList._(this._bc, this._bcOffset);
  factory CarpList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CarpList> reader = _CarpListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Carp>? get items => const fb.ListReader<Carp>(Carp.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'CarpList{metadata: ${metadata}, items: ${items}}';
  }
}

class _CarpListReader extends fb.TableReader<CarpList> {
  const _CarpListReader();

  @override
  CarpList createObject(fb.BufferContext bc, int offset) => 
    CarpList._(bc, offset);
}

class CarpListBuilder {
  CarpListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CarpListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<CarpObjectBuilder>? _items;

  CarpListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<CarpObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CarpSpec {
  CarpSpec._(this._bc, this._bcOffset);
  factory CarpSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CarpSpec> reader = _CarpSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get restartPolicy => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get terminationGracePeriodSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get activeDeadlineSeconds => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  List<apimachinery_pkg_apis_testapigroup_v1_carp_spec_.NodeSelectorEntry>? get nodeSelector => const fb.ListReader<apimachinery_pkg_apis_testapigroup_v1_carp_spec_.NodeSelectorEntry>(apimachinery_pkg_apis_testapigroup_v1_carp_spec_.NodeSelectorEntry.reader).vTableGetNullable(_bc, _bcOffset, 10);
  String? get serviceAccountName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get serviceAccount => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get nodeName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  bool get hostNetwork => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  bool get hostPid => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  bool get hostIpc => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  String? get hostname => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  String? get subdomain => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 26);
  String? get schedulername => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);

  @override
  String toString() {
    return 'CarpSpec{restartPolicy: ${restartPolicy}, terminationGracePeriodSeconds: ${terminationGracePeriodSeconds}, activeDeadlineSeconds: ${activeDeadlineSeconds}, nodeSelector: ${nodeSelector}, serviceAccountName: ${serviceAccountName}, serviceAccount: ${serviceAccount}, nodeName: ${nodeName}, hostNetwork: ${hostNetwork}, hostPid: ${hostPid}, hostIpc: ${hostIpc}, hostname: ${hostname}, subdomain: ${subdomain}, schedulername: ${schedulername}}';
  }
}

class _CarpSpecReader extends fb.TableReader<CarpSpec> {
  const _CarpSpecReader();

  @override
  CarpSpec createObject(fb.BufferContext bc, int offset) => 
    CarpSpec._(bc, offset);
}

class CarpSpecBuilder {
  CarpSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(13);
  }

  int addRestartPolicyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTerminationGracePeriodSeconds(int? terminationGracePeriodSeconds) {
    fbBuilder.addInt64(1, terminationGracePeriodSeconds);
    return fbBuilder.offset;
  }
  int addActiveDeadlineSeconds(int? activeDeadlineSeconds) {
    fbBuilder.addInt64(2, activeDeadlineSeconds);
    return fbBuilder.offset;
  }
  int addNodeSelectorOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addServiceAccountNameOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addServiceAccountOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addNodeNameOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addHostNetwork(bool? hostNetwork) {
    fbBuilder.addBool(7, hostNetwork);
    return fbBuilder.offset;
  }
  int addHostPid(bool? hostPid) {
    fbBuilder.addBool(8, hostPid);
    return fbBuilder.offset;
  }
  int addHostIpc(bool? hostIpc) {
    fbBuilder.addBool(9, hostIpc);
    return fbBuilder.offset;
  }
  int addHostnameOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addSubdomainOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addSchedulernameOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CarpSpecObjectBuilder extends fb.ObjectBuilder {
  final String? _restartPolicy;
  final int? _terminationGracePeriodSeconds;
  final int? _activeDeadlineSeconds;
  final List<apimachinery_pkg_apis_testapigroup_v1_carp_spec_.NodeSelectorEntryObjectBuilder>? _nodeSelector;
  final String? _serviceAccountName;
  final String? _serviceAccount;
  final String? _nodeName;
  final bool? _hostNetwork;
  final bool? _hostPid;
  final bool? _hostIpc;
  final String? _hostname;
  final String? _subdomain;
  final String? _schedulername;

  CarpSpecObjectBuilder({
    String? restartPolicy,
    int? terminationGracePeriodSeconds,
    int? activeDeadlineSeconds,
    List<apimachinery_pkg_apis_testapigroup_v1_carp_spec_.NodeSelectorEntryObjectBuilder>? nodeSelector,
    String? serviceAccountName,
    String? serviceAccount,
    String? nodeName,
    bool? hostNetwork,
    bool? hostPid,
    bool? hostIpc,
    String? hostname,
    String? subdomain,
    String? schedulername,
  })
      : _restartPolicy = restartPolicy,
        _terminationGracePeriodSeconds = terminationGracePeriodSeconds,
        _activeDeadlineSeconds = activeDeadlineSeconds,
        _nodeSelector = nodeSelector,
        _serviceAccountName = serviceAccountName,
        _serviceAccount = serviceAccount,
        _nodeName = nodeName,
        _hostNetwork = hostNetwork,
        _hostPid = hostPid,
        _hostIpc = hostIpc,
        _hostname = hostname,
        _subdomain = subdomain,
        _schedulername = schedulername;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? restartPolicyOffset = _restartPolicy == null ? null
        : fbBuilder.writeString(_restartPolicy!);
    final int? nodeSelectorOffset = _nodeSelector == null ? null
        : fbBuilder.writeList(_nodeSelector!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? serviceAccountNameOffset = _serviceAccountName == null ? null
        : fbBuilder.writeString(_serviceAccountName!);
    final int? serviceAccountOffset = _serviceAccount == null ? null
        : fbBuilder.writeString(_serviceAccount!);
    final int? nodeNameOffset = _nodeName == null ? null
        : fbBuilder.writeString(_nodeName!);
    final int? hostnameOffset = _hostname == null ? null
        : fbBuilder.writeString(_hostname!);
    final int? subdomainOffset = _subdomain == null ? null
        : fbBuilder.writeString(_subdomain!);
    final int? schedulernameOffset = _schedulername == null ? null
        : fbBuilder.writeString(_schedulername!);
    fbBuilder.startTable(13);
    fbBuilder.addOffset(0, restartPolicyOffset);
    fbBuilder.addInt64(1, _terminationGracePeriodSeconds);
    fbBuilder.addInt64(2, _activeDeadlineSeconds);
    fbBuilder.addOffset(3, nodeSelectorOffset);
    fbBuilder.addOffset(4, serviceAccountNameOffset);
    fbBuilder.addOffset(5, serviceAccountOffset);
    fbBuilder.addOffset(6, nodeNameOffset);
    fbBuilder.addBool(7, _hostNetwork);
    fbBuilder.addBool(8, _hostPid);
    fbBuilder.addBool(9, _hostIpc);
    fbBuilder.addOffset(10, hostnameOffset);
    fbBuilder.addOffset(11, subdomainOffset);
    fbBuilder.addOffset(12, schedulernameOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CarpStatus {
  CarpStatus._(this._bc, this._bcOffset);
  factory CarpStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CarpStatus> reader = _CarpStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get phase => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<CarpCondition>? get conditions => const fb.ListReader<CarpCondition>(CarpCondition.reader).vTableGetNullable(_bc, _bcOffset, 6);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get hostIp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get carpIp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  apimachinery_pkg_apis_meta_v1.Time? get startTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'CarpStatus{phase: ${phase}, conditions: ${conditions}, message: ${message}, reason: ${reason}, hostIp: ${hostIp}, carpIp: ${carpIp}, startTime: ${startTime}}';
  }
}

class _CarpStatusReader extends fb.TableReader<CarpStatus> {
  const _CarpStatusReader();

  @override
  CarpStatus createObject(fb.BufferContext bc, int offset) => 
    CarpStatus._(bc, offset);
}

class CarpStatusBuilder {
  CarpStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addPhaseOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addHostIpOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addCarpIpOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addStartTimeOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CarpStatusObjectBuilder extends fb.ObjectBuilder {
  final String? _phase;
  final List<CarpConditionObjectBuilder>? _conditions;
  final String? _message;
  final String? _reason;
  final String? _hostIp;
  final String? _carpIp;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _startTime;

  CarpStatusObjectBuilder({
    String? phase,
    List<CarpConditionObjectBuilder>? conditions,
    String? message,
    String? reason,
    String? hostIp,
    String? carpIp,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? startTime,
  })
      : _phase = phase,
        _conditions = conditions,
        _message = message,
        _reason = reason,
        _hostIp = hostIp,
        _carpIp = carpIp,
        _startTime = startTime;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? phaseOffset = _phase == null ? null
        : fbBuilder.writeString(_phase!);
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? hostIpOffset = _hostIp == null ? null
        : fbBuilder.writeString(_hostIp!);
    final int? carpIpOffset = _carpIp == null ? null
        : fbBuilder.writeString(_carpIp!);
    final int? startTimeOffset = _startTime?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, phaseOffset);
    fbBuilder.addOffset(1, conditionsOffset);
    fbBuilder.addOffset(2, messageOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, hostIpOffset);
    fbBuilder.addOffset(5, carpIpOffset);
    fbBuilder.addOffset(6, startTimeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
