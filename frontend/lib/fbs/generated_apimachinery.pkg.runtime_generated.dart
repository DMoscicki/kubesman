// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library apimachinery.pkg.runtime;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_api.flowcontrol.v1_beta2_generated.dart' as api_flowcontrol_v1_beta2;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;

import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class RawExtension {
  RawExtension._(this._bc, this._bcOffset);
  factory RawExtension(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RawExtension> reader = _RawExtensionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get raw => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'RawExtension{raw: ${raw}}';
  }
}

class _RawExtensionReader extends fb.TableReader<RawExtension> {
  const _RawExtensionReader();

  @override
  RawExtension createObject(fb.BufferContext bc, int offset) => 
    RawExtension._(bc, offset);
}

class RawExtensionBuilder {
  RawExtensionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addRawOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RawExtensionObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _raw;

  RawExtensionObjectBuilder({
    List<int>? raw,
  })
      : _raw = raw;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rawOffset = _raw == null ? null
        : fbBuilder.writeListUint8(_raw!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, rawOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TypeMeta {
  TypeMeta._(this._bc, this._bcOffset);
  factory TypeMeta(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TypeMeta> reader = _TypeMetaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get apiVersion => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get kind => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'TypeMeta{apiVersion: ${apiVersion}, kind: ${kind}}';
  }
}

class _TypeMetaReader extends fb.TableReader<TypeMeta> {
  const _TypeMetaReader();

  @override
  TypeMeta createObject(fb.BufferContext bc, int offset) => 
    TypeMeta._(bc, offset);
}

class TypeMetaBuilder {
  TypeMetaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addApiVersionOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addKindOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TypeMetaObjectBuilder extends fb.ObjectBuilder {
  final String? _apiVersion;
  final String? _kind;

  TypeMetaObjectBuilder({
    String? apiVersion,
    String? kind,
  })
      : _apiVersion = apiVersion,
        _kind = kind;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiVersionOffset = _apiVersion == null ? null
        : fbBuilder.writeString(_apiVersion!);
    final int? kindOffset = _kind == null ? null
        : fbBuilder.writeString(_kind!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, apiVersionOffset);
    fbBuilder.addOffset(1, kindOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Unknown {
  Unknown._(this._bc, this._bcOffset);
  factory Unknown(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Unknown> reader = _UnknownReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  TypeMeta? get typeMeta => TypeMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get raw => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get contentEncoding => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get contentType => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Unknown{typeMeta: ${typeMeta}, raw: ${raw}, contentEncoding: ${contentEncoding}, contentType: ${contentType}}';
  }
}

class _UnknownReader extends fb.TableReader<Unknown> {
  const _UnknownReader();

  @override
  Unknown createObject(fb.BufferContext bc, int offset) => 
    Unknown._(bc, offset);
}

class UnknownBuilder {
  UnknownBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTypeMetaOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRawOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addContentEncodingOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addContentTypeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UnknownObjectBuilder extends fb.ObjectBuilder {
  final TypeMetaObjectBuilder? _typeMeta;
  final List<int>? _raw;
  final String? _contentEncoding;
  final String? _contentType;

  UnknownObjectBuilder({
    TypeMetaObjectBuilder? typeMeta,
    List<int>? raw,
    String? contentEncoding,
    String? contentType,
  })
      : _typeMeta = typeMeta,
        _raw = raw,
        _contentEncoding = contentEncoding,
        _contentType = contentType;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeMetaOffset = _typeMeta?.getOrCreateOffset(fbBuilder);
    final int? rawOffset = _raw == null ? null
        : fbBuilder.writeListUint8(_raw!);
    final int? contentEncodingOffset = _contentEncoding == null ? null
        : fbBuilder.writeString(_contentEncoding!);
    final int? contentTypeOffset = _contentType == null ? null
        : fbBuilder.writeString(_contentType!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, typeMetaOffset);
    fbBuilder.addOffset(1, rawOffset);
    fbBuilder.addOffset(2, contentEncodingOffset);
    fbBuilder.addOffset(3, contentTypeOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
