// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library kube_aggregator.pkg.apis.apiregistration.v1;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

import './generated_apimachinery.pkg.apis.meta.v1.label_selector__generated.dart' as apimachinery_pkg_apis_meta_v1_label_selector_;
import './generated_apimachinery.pkg.apis.meta.v1.object_meta__generated.dart' as apimachinery_pkg_apis_meta_v1_object_meta_;
import './generated_apimachinery.pkg.apis.meta.v1_generated.dart' as apimachinery_pkg_apis_meta_v1;
import './generated_apimachinery.pkg.runtime_generated.dart' as apimachinery_pkg_runtime;

class Apiservice {
  Apiservice._(this._bc, this._bcOffset);
  factory Apiservice(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Apiservice> reader = _ApiserviceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ObjectMeta? get metadata => apimachinery_pkg_apis_meta_v1.ObjectMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  ApiserviceSpec? get spec => ApiserviceSpec.reader.vTableGetNullable(_bc, _bcOffset, 6);
  ApiserviceStatus? get status => ApiserviceStatus.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'Apiservice{metadata: ${metadata}, spec: ${spec}, status: ${status}}';
  }
}

class _ApiserviceReader extends fb.TableReader<Apiservice> {
  const _ApiserviceReader();

  @override
  Apiservice createObject(fb.BufferContext bc, int offset) => 
    Apiservice._(bc, offset);
}

class ApiserviceBuilder {
  ApiserviceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSpecOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApiserviceObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? _metadata;
  final ApiserviceSpecObjectBuilder? _spec;
  final ApiserviceStatusObjectBuilder? _status;

  ApiserviceObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ObjectMetaObjectBuilder? metadata,
    ApiserviceSpecObjectBuilder? spec,
    ApiserviceStatusObjectBuilder? status,
  })
      : _metadata = metadata,
        _spec = spec,
        _status = status;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? specOffset = _spec?.getOrCreateOffset(fbBuilder);
    final int? statusOffset = _status?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, specOffset);
    fbBuilder.addOffset(2, statusOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ApiserviceCondition {
  ApiserviceCondition._(this._bc, this._bcOffset);
  factory ApiserviceCondition(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ApiserviceCondition> reader = _ApiserviceConditionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get status => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  apimachinery_pkg_apis_meta_v1.Time? get lastTransitionTime => apimachinery_pkg_apis_meta_v1.Time.reader.vTableGetNullable(_bc, _bcOffset, 8);
  String? get reason => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'ApiserviceCondition{type: ${type}, status: ${status}, lastTransitionTime: ${lastTransitionTime}, reason: ${reason}, message: ${message}}';
  }
}

class _ApiserviceConditionReader extends fb.TableReader<ApiserviceCondition> {
  const _ApiserviceConditionReader();

  @override
  ApiserviceCondition createObject(fb.BufferContext bc, int offset) => 
    ApiserviceCondition._(bc, offset);
}

class ApiserviceConditionBuilder {
  ApiserviceConditionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStatusOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastTransitionTimeOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addReasonOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApiserviceConditionObjectBuilder extends fb.ObjectBuilder {
  final String? _type;
  final String? _status;
  final apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? _lastTransitionTime;
  final String? _reason;
  final String? _message;

  ApiserviceConditionObjectBuilder({
    String? type,
    String? status,
    apimachinery_pkg_apis_meta_v1.TimeObjectBuilder? lastTransitionTime,
    String? reason,
    String? message,
  })
      : _type = type,
        _status = status,
        _lastTransitionTime = lastTransitionTime,
        _reason = reason,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? statusOffset = _status == null ? null
        : fbBuilder.writeString(_status!);
    final int? lastTransitionTimeOffset = _lastTransitionTime?.getOrCreateOffset(fbBuilder);
    final int? reasonOffset = _reason == null ? null
        : fbBuilder.writeString(_reason!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, typeOffset);
    fbBuilder.addOffset(1, statusOffset);
    fbBuilder.addOffset(2, lastTransitionTimeOffset);
    fbBuilder.addOffset(3, reasonOffset);
    fbBuilder.addOffset(4, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ApiserviceList {
  ApiserviceList._(this._bc, this._bcOffset);
  factory ApiserviceList(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ApiserviceList> reader = _ApiserviceListReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  apimachinery_pkg_apis_meta_v1.ListMeta? get metadata => apimachinery_pkg_apis_meta_v1.ListMeta.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<Apiservice>? get items => const fb.ListReader<Apiservice>(Apiservice.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ApiserviceList{metadata: ${metadata}, items: ${items}}';
  }
}

class _ApiserviceListReader extends fb.TableReader<ApiserviceList> {
  const _ApiserviceListReader();

  @override
  ApiserviceList createObject(fb.BufferContext bc, int offset) => 
    ApiserviceList._(bc, offset);
}

class ApiserviceListBuilder {
  ApiserviceListBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addItemsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApiserviceListObjectBuilder extends fb.ObjectBuilder {
  final apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? _metadata;
  final List<ApiserviceObjectBuilder>? _items;

  ApiserviceListObjectBuilder({
    apimachinery_pkg_apis_meta_v1.ListMetaObjectBuilder? metadata,
    List<ApiserviceObjectBuilder>? items,
  })
      : _metadata = metadata,
        _items = items;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? itemsOffset = _items == null ? null
        : fbBuilder.writeList(_items!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, itemsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ApiserviceSpec {
  ApiserviceSpec._(this._bc, this._bcOffset);
  factory ApiserviceSpec(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ApiserviceSpec> reader = _ApiserviceSpecReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  ServiceReference? get service => ServiceReference.reader.vTableGetNullable(_bc, _bcOffset, 4);
  String? get group => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get version => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  bool get insecureSkipTlsverify => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  List<int>? get caBundle => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 12);
  int get groupPriorityMinimum => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);
  int get versionPriority => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0);

  @override
  String toString() {
    return 'ApiserviceSpec{service: ${service}, group: ${group}, version: ${version}, insecureSkipTlsverify: ${insecureSkipTlsverify}, caBundle: ${caBundle}, groupPriorityMinimum: ${groupPriorityMinimum}, versionPriority: ${versionPriority}}';
  }
}

class _ApiserviceSpecReader extends fb.TableReader<ApiserviceSpec> {
  const _ApiserviceSpecReader();

  @override
  ApiserviceSpec createObject(fb.BufferContext bc, int offset) => 
    ApiserviceSpec._(bc, offset);
}

class ApiserviceSpecBuilder {
  ApiserviceSpecBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addServiceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addGroupOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addVersionOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addInsecureSkipTlsverify(bool? insecureSkipTlsverify) {
    fbBuilder.addBool(3, insecureSkipTlsverify);
    return fbBuilder.offset;
  }
  int addCaBundleOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addGroupPriorityMinimum(int? groupPriorityMinimum) {
    fbBuilder.addInt32(5, groupPriorityMinimum);
    return fbBuilder.offset;
  }
  int addVersionPriority(int? versionPriority) {
    fbBuilder.addInt32(6, versionPriority);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApiserviceSpecObjectBuilder extends fb.ObjectBuilder {
  final ServiceReferenceObjectBuilder? _service;
  final String? _group;
  final String? _version;
  final bool? _insecureSkipTlsverify;
  final List<int>? _caBundle;
  final int? _groupPriorityMinimum;
  final int? _versionPriority;

  ApiserviceSpecObjectBuilder({
    ServiceReferenceObjectBuilder? service,
    String? group,
    String? version,
    bool? insecureSkipTlsverify,
    List<int>? caBundle,
    int? groupPriorityMinimum,
    int? versionPriority,
  })
      : _service = service,
        _group = group,
        _version = version,
        _insecureSkipTlsverify = insecureSkipTlsverify,
        _caBundle = caBundle,
        _groupPriorityMinimum = groupPriorityMinimum,
        _versionPriority = versionPriority;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? serviceOffset = _service?.getOrCreateOffset(fbBuilder);
    final int? groupOffset = _group == null ? null
        : fbBuilder.writeString(_group!);
    final int? versionOffset = _version == null ? null
        : fbBuilder.writeString(_version!);
    final int? caBundleOffset = _caBundle == null ? null
        : fbBuilder.writeListUint8(_caBundle!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, serviceOffset);
    fbBuilder.addOffset(1, groupOffset);
    fbBuilder.addOffset(2, versionOffset);
    fbBuilder.addBool(3, _insecureSkipTlsverify);
    fbBuilder.addOffset(4, caBundleOffset);
    fbBuilder.addInt32(5, _groupPriorityMinimum);
    fbBuilder.addInt32(6, _versionPriority);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ApiserviceStatus {
  ApiserviceStatus._(this._bc, this._bcOffset);
  factory ApiserviceStatus(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ApiserviceStatus> reader = _ApiserviceStatusReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<ApiserviceCondition>? get conditions => const fb.ListReader<ApiserviceCondition>(ApiserviceCondition.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'ApiserviceStatus{conditions: ${conditions}}';
  }
}

class _ApiserviceStatusReader extends fb.TableReader<ApiserviceStatus> {
  const _ApiserviceStatusReader();

  @override
  ApiserviceStatus createObject(fb.BufferContext bc, int offset) => 
    ApiserviceStatus._(bc, offset);
}

class ApiserviceStatusBuilder {
  ApiserviceStatusBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addConditionsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ApiserviceStatusObjectBuilder extends fb.ObjectBuilder {
  final List<ApiserviceConditionObjectBuilder>? _conditions;

  ApiserviceStatusObjectBuilder({
    List<ApiserviceConditionObjectBuilder>? conditions,
  })
      : _conditions = conditions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? conditionsOffset = _conditions == null ? null
        : fbBuilder.writeList(_conditions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, conditionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ServiceReference {
  ServiceReference._(this._bc, this._bcOffset);
  factory ServiceReference(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ServiceReference> reader = _ServiceReferenceReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get namespace => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get port => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'ServiceReference{namespace: ${namespace}, name: ${name}, port: ${port}}';
  }
}

class _ServiceReferenceReader extends fb.TableReader<ServiceReference> {
  const _ServiceReferenceReader();

  @override
  ServiceReference createObject(fb.BufferContext bc, int offset) => 
    ServiceReference._(bc, offset);
}

class ServiceReferenceBuilder {
  ServiceReferenceBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNamespaceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPort(int? port) {
    fbBuilder.addInt32(2, port);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ServiceReferenceObjectBuilder extends fb.ObjectBuilder {
  final String? _namespace;
  final String? _name;
  final int? _port;

  ServiceReferenceObjectBuilder({
    String? namespace,
    String? name,
    int? port,
  })
      : _namespace = namespace,
        _name = name,
        _port = port;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? namespaceOffset = _namespace == null ? null
        : fbBuilder.writeString(_namespace!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, namespaceOffset);
    fbBuilder.addOffset(1, nameOffset);
    fbBuilder.addInt32(2, _port);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
