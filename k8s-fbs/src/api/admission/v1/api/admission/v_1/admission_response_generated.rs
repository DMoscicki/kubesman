// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AdmissionResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AdmissionResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AdmissionResponse<'a> {
  type Inner = AdmissionResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AdmissionResponse<'a> {
  pub const VT_UID: flatbuffers::VOffsetT = 4;
  pub const VT_ALLOWED: flatbuffers::VOffsetT = 6;
  pub const VT_STATUS: flatbuffers::VOffsetT = 8;
  pub const VT_PATCH: flatbuffers::VOffsetT = 10;
  pub const VT_PATCHTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_AUDITANNOTATIONS: flatbuffers::VOffsetT = 14;
  pub const VT_WARNINGS: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AdmissionResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AdmissionResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<AdmissionResponse<'bldr>> {
    let mut builder = AdmissionResponseBuilder::new(_fbb);
    if let Some(x) = args.warnings { builder.add_warnings(x); }
    if let Some(x) = args.auditAnnotations { builder.add_auditAnnotations(x); }
    if let Some(x) = args.patchType { builder.add_patchType(x); }
    if let Some(x) = args.patch { builder.add_patch(x); }
    if let Some(x) = args.status { builder.add_status(x); }
    if let Some(x) = args.uid { builder.add_uid(x); }
    builder.add_allowed(args.allowed);
    builder.finish()
  }


  #[inline]
  pub fn uid(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AdmissionResponse::VT_UID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn allowed(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AdmissionResponse::VT_ALLOWED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn status(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::Status<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Status>>(AdmissionResponse::VT_STATUS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn patch(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AdmissionResponse::VT_PATCH, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn patchType(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AdmissionResponse::VT_PATCHTYPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn auditAnnotations(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<admission_response_::AuditAnnotationsEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<admission_response_::AuditAnnotationsEntry>>>>(AdmissionResponse::VT_AUDITANNOTATIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn warnings(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AdmissionResponse::VT_WARNINGS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for AdmissionResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("uid", Self::VT_UID, false)?
     .visit_field::<bool>("allowed", Self::VT_ALLOWED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Status>>("status", Self::VT_STATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("patch", Self::VT_PATCH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("patchType", Self::VT_PATCHTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<admission_response_::AuditAnnotationsEntry>>>>("auditAnnotations", Self::VT_AUDITANNOTATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("warnings", Self::VT_WARNINGS, false)?
     .finish();
    Ok(())
  }
}
pub struct AdmissionResponseArgs<'a> {
    pub uid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub allowed: bool,
    pub status: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Status<'a>>>,
    pub patch: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub patchType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub auditAnnotations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<admission_response_::AuditAnnotationsEntry<'a>>>>>,
    pub warnings: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for AdmissionResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    AdmissionResponseArgs {
      uid: None,
      allowed: false,
      status: None,
      patch: None,
      patchType: None,
      auditAnnotations: None,
      warnings: None,
    }
  }
}

impl Serialize for AdmissionResponse<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AdmissionResponse", 7)?;
      s.serialize_field("uid", &self.uid())?;
      s.serialize_field("allowed", &self.allowed())?;
      s.serialize_field("status", &self.status())?;
      s.serialize_field("patch", &self.patch())?;
      s.serialize_field("patchType", &self.patchType())?;
      s.serialize_field("auditAnnotations", &self.auditAnnotations())?;
      s.serialize_field("warnings", &self.warnings())?;
    s.end()
  }
}

pub struct AdmissionResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AdmissionResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_uid(&mut self, uid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionResponse::VT_UID, uid);
  }
  #[inline]
  pub fn add_allowed(&mut self, allowed: bool) {
    self.fbb_.push_slot::<bool>(AdmissionResponse::VT_ALLOWED, allowed, false);
  }
  #[inline]
  pub fn add_status(&mut self, status: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Status<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Status>>(AdmissionResponse::VT_STATUS, status);
  }
  #[inline]
  pub fn add_patch(&mut self, patch: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionResponse::VT_PATCH, patch);
  }
  #[inline]
  pub fn add_patchType(&mut self, patchType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionResponse::VT_PATCHTYPE, patchType);
  }
  #[inline]
  pub fn add_auditAnnotations(&mut self, auditAnnotations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<admission_response_::AuditAnnotationsEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionResponse::VT_AUDITANNOTATIONS, auditAnnotations);
  }
  #[inline]
  pub fn add_warnings(&mut self, warnings: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionResponse::VT_WARNINGS, warnings);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AdmissionResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AdmissionResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AdmissionResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AdmissionResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AdmissionResponse");
      ds.field("uid", &self.uid());
      ds.field("allowed", &self.allowed());
      ds.field("status", &self.status());
      ds.field("patch", &self.patch());
      ds.field("patchType", &self.patchType());
      ds.field("auditAnnotations", &self.auditAnnotations());
      ds.field("warnings", &self.warnings());
      ds.finish()
  }
}
