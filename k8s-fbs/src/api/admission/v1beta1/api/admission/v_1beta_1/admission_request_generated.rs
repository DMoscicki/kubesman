// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AdmissionRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AdmissionRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AdmissionRequest<'a> {
  type Inner = AdmissionRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AdmissionRequest<'a> {
  pub const VT_UID: flatbuffers::VOffsetT = 4;
  pub const VT_KIND: flatbuffers::VOffsetT = 6;
  pub const VT_RESOURCE: flatbuffers::VOffsetT = 8;
  pub const VT_SUBRESOURCE: flatbuffers::VOffsetT = 10;
  pub const VT_REQUESTKIND: flatbuffers::VOffsetT = 12;
  pub const VT_REQUESTRESOURCE: flatbuffers::VOffsetT = 14;
  pub const VT_REQUESTSUBRESOURCE: flatbuffers::VOffsetT = 16;
  pub const VT_NAME: flatbuffers::VOffsetT = 18;
  pub const VT_NAMESPACE: flatbuffers::VOffsetT = 20;
  pub const VT_OPERATION: flatbuffers::VOffsetT = 22;
  pub const VT_USERINFO: flatbuffers::VOffsetT = 24;
  pub const VT_OBJECT: flatbuffers::VOffsetT = 26;
  pub const VT_OLDOBJECT: flatbuffers::VOffsetT = 28;
  pub const VT_DRYRUN: flatbuffers::VOffsetT = 30;
  pub const VT_OPTIONS: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AdmissionRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AdmissionRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<AdmissionRequest<'bldr>> {
    let mut builder = AdmissionRequestBuilder::new(_fbb);
    if let Some(x) = args.options { builder.add_options(x); }
    if let Some(x) = args.oldObject { builder.add_oldObject(x); }
    if let Some(x) = args.object { builder.add_object(x); }
    if let Some(x) = args.userInfo { builder.add_userInfo(x); }
    if let Some(x) = args.operation { builder.add_operation(x); }
    if let Some(x) = args.namespace { builder.add_namespace(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.requestSubResource { builder.add_requestSubResource(x); }
    if let Some(x) = args.requestResource { builder.add_requestResource(x); }
    if let Some(x) = args.requestKind { builder.add_requestKind(x); }
    if let Some(x) = args.subResource { builder.add_subResource(x); }
    if let Some(x) = args.resource { builder.add_resource(x); }
    if let Some(x) = args.kind { builder.add_kind(x); }
    if let Some(x) = args.uid { builder.add_uid(x); }
    builder.add_dryRun(args.dryRun);
    builder.finish()
  }


  #[inline]
  pub fn uid(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AdmissionRequest::VT_UID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn kind(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind>>(AdmissionRequest::VT_KIND, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resource(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource>>(AdmissionRequest::VT_RESOURCE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn subResource(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AdmissionRequest::VT_SUBRESOURCE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn requestKind(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind>>(AdmissionRequest::VT_REQUESTKIND, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn requestResource(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource>>(AdmissionRequest::VT_REQUESTRESOURCE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn requestSubResource(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AdmissionRequest::VT_REQUESTSUBRESOURCE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AdmissionRequest::VT_NAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn namespace(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AdmissionRequest::VT_NAMESPACE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn operation(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AdmissionRequest::VT_OPERATION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn userInfo(&self) -> super::super::authentication::v_1::UserInfo<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::authentication::v_1::UserInfo>>(AdmissionRequest::VT_USERINFO, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn object(&self) -> super::super::super::apimachinery::pkg::runtime::RawExtension<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::runtime::RawExtension>>(AdmissionRequest::VT_OBJECT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn oldObject(&self) -> super::super::super::apimachinery::pkg::runtime::RawExtension<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::runtime::RawExtension>>(AdmissionRequest::VT_OLDOBJECT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn dryRun(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AdmissionRequest::VT_DRYRUN, Some(false)).unwrap()}
  }
  #[inline]
  pub fn options(&self) -> super::super::super::apimachinery::pkg::runtime::RawExtension<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::runtime::RawExtension>>(AdmissionRequest::VT_OPTIONS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for AdmissionRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("uid", Self::VT_UID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind>>("kind", Self::VT_KIND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource>>("resource", Self::VT_RESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("subResource", Self::VT_SUBRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind>>("requestKind", Self::VT_REQUESTKIND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource>>("requestResource", Self::VT_REQUESTRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("requestSubResource", Self::VT_REQUESTSUBRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("namespace", Self::VT_NAMESPACE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operation", Self::VT_OPERATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::authentication::v_1::UserInfo>>("userInfo", Self::VT_USERINFO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::runtime::RawExtension>>("object", Self::VT_OBJECT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::runtime::RawExtension>>("oldObject", Self::VT_OLDOBJECT, false)?
     .visit_field::<bool>("dryRun", Self::VT_DRYRUN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::runtime::RawExtension>>("options", Self::VT_OPTIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct AdmissionRequestArgs<'a> {
    pub uid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub kind: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind<'a>>>,
    pub resource: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource<'a>>>,
    pub subResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub requestKind: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind<'a>>>,
    pub requestResource: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource<'a>>>,
    pub requestSubResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub namespace: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub userInfo: Option<flatbuffers::WIPOffset<super::super::authentication::v_1::UserInfo<'a>>>,
    pub object: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::runtime::RawExtension<'a>>>,
    pub oldObject: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::runtime::RawExtension<'a>>>,
    pub dryRun: bool,
    pub options: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::runtime::RawExtension<'a>>>,
}
impl<'a> Default for AdmissionRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AdmissionRequestArgs {
      uid: None,
      kind: None,
      resource: None,
      subResource: None,
      requestKind: None,
      requestResource: None,
      requestSubResource: None,
      name: None,
      namespace: None,
      operation: None,
      userInfo: None,
      object: None,
      oldObject: None,
      dryRun: false,
      options: None,
    }
  }
}

impl Serialize for AdmissionRequest<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AdmissionRequest", 15)?;
      s.serialize_field("uid", &self.uid())?;
      s.serialize_field("kind", &self.kind())?;
      s.serialize_field("resource", &self.resource())?;
      s.serialize_field("subResource", &self.subResource())?;
      s.serialize_field("requestKind", &self.requestKind())?;
      s.serialize_field("requestResource", &self.requestResource())?;
      s.serialize_field("requestSubResource", &self.requestSubResource())?;
      s.serialize_field("name", &self.name())?;
      s.serialize_field("namespace", &self.namespace())?;
      s.serialize_field("operation", &self.operation())?;
      s.serialize_field("userInfo", &self.userInfo())?;
      s.serialize_field("object", &self.object())?;
      s.serialize_field("oldObject", &self.oldObject())?;
      s.serialize_field("dryRun", &self.dryRun())?;
      s.serialize_field("options", &self.options())?;
    s.end()
  }
}

pub struct AdmissionRequestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AdmissionRequestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_uid(&mut self, uid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionRequest::VT_UID, uid);
  }
  #[inline]
  pub fn add_kind(&mut self, kind: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind>>(AdmissionRequest::VT_KIND, kind);
  }
  #[inline]
  pub fn add_resource(&mut self, resource: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource>>(AdmissionRequest::VT_RESOURCE, resource);
  }
  #[inline]
  pub fn add_subResource(&mut self, subResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionRequest::VT_SUBRESOURCE, subResource);
  }
  #[inline]
  pub fn add_requestKind(&mut self, requestKind: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind>>(AdmissionRequest::VT_REQUESTKIND, requestKind);
  }
  #[inline]
  pub fn add_requestResource(&mut self, requestResource: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionResource>>(AdmissionRequest::VT_REQUESTRESOURCE, requestResource);
  }
  #[inline]
  pub fn add_requestSubResource(&mut self, requestSubResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionRequest::VT_REQUESTSUBRESOURCE, requestSubResource);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionRequest::VT_NAME, name);
  }
  #[inline]
  pub fn add_namespace(&mut self, namespace: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionRequest::VT_NAMESPACE, namespace);
  }
  #[inline]
  pub fn add_operation(&mut self, operation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AdmissionRequest::VT_OPERATION, operation);
  }
  #[inline]
  pub fn add_userInfo(&mut self, userInfo: flatbuffers::WIPOffset<super::super::authentication::v_1::UserInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::authentication::v_1::UserInfo>>(AdmissionRequest::VT_USERINFO, userInfo);
  }
  #[inline]
  pub fn add_object(&mut self, object: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::runtime::RawExtension<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::runtime::RawExtension>>(AdmissionRequest::VT_OBJECT, object);
  }
  #[inline]
  pub fn add_oldObject(&mut self, oldObject: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::runtime::RawExtension<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::runtime::RawExtension>>(AdmissionRequest::VT_OLDOBJECT, oldObject);
  }
  #[inline]
  pub fn add_dryRun(&mut self, dryRun: bool) {
    self.fbb_.push_slot::<bool>(AdmissionRequest::VT_DRYRUN, dryRun, false);
  }
  #[inline]
  pub fn add_options(&mut self, options: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::runtime::RawExtension<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::runtime::RawExtension>>(AdmissionRequest::VT_OPTIONS, options);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AdmissionRequestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AdmissionRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AdmissionRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AdmissionRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AdmissionRequest");
      ds.field("uid", &self.uid());
      ds.field("kind", &self.kind());
      ds.field("resource", &self.resource());
      ds.field("subResource", &self.subResource());
      ds.field("requestKind", &self.requestKind());
      ds.field("requestResource", &self.requestResource());
      ds.field("requestSubResource", &self.requestSubResource());
      ds.field("name", &self.name());
      ds.field("namespace", &self.namespace());
      ds.field("operation", &self.operation());
      ds.field("userInfo", &self.userInfo());
      ds.field("object", &self.object());
      ds.field("oldObject", &self.oldObject());
      ds.field("dryRun", &self.dryRun());
      ds.field("options", &self.options());
      ds.finish()
  }
}
