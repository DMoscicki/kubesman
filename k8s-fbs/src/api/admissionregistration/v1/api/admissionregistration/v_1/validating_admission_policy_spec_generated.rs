// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ValidatingAdmissionPolicySpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ValidatingAdmissionPolicySpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ValidatingAdmissionPolicySpec<'a> {
  type Inner = ValidatingAdmissionPolicySpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ValidatingAdmissionPolicySpec<'a> {
  pub const VT_PARAMKIND: flatbuffers::VOffsetT = 4;
  pub const VT_MATCHCONSTRAINTS: flatbuffers::VOffsetT = 6;
  pub const VT_VALIDATIONS: flatbuffers::VOffsetT = 8;
  pub const VT_FAILUREPOLICY: flatbuffers::VOffsetT = 10;
  pub const VT_AUDITANNOTATIONS: flatbuffers::VOffsetT = 12;
  pub const VT_MATCHCONDITIONS: flatbuffers::VOffsetT = 14;
  pub const VT_VARIABLES: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ValidatingAdmissionPolicySpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ValidatingAdmissionPolicySpecArgs<'args>
  ) -> flatbuffers::WIPOffset<ValidatingAdmissionPolicySpec<'bldr>> {
    let mut builder = ValidatingAdmissionPolicySpecBuilder::new(_fbb);
    if let Some(x) = args.variables { builder.add_variables(x); }
    if let Some(x) = args.matchConditions { builder.add_matchConditions(x); }
    if let Some(x) = args.auditAnnotations { builder.add_auditAnnotations(x); }
    if let Some(x) = args.failurePolicy { builder.add_failurePolicy(x); }
    if let Some(x) = args.validations { builder.add_validations(x); }
    if let Some(x) = args.matchConstraints { builder.add_matchConstraints(x); }
    if let Some(x) = args.paramKind { builder.add_paramKind(x); }
    builder.finish()
  }


  #[inline]
  pub fn paramKind(&self) -> ParamKind<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ParamKind>>(ValidatingAdmissionPolicySpec::VT_PARAMKIND, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn matchConstraints(&self) -> MatchResources<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<MatchResources>>(ValidatingAdmissionPolicySpec::VT_MATCHCONSTRAINTS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn validations(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Validation<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Validation>>>>(ValidatingAdmissionPolicySpec::VT_VALIDATIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn failurePolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ValidatingAdmissionPolicySpec::VT_FAILUREPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn auditAnnotations(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AuditAnnotation<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AuditAnnotation>>>>(ValidatingAdmissionPolicySpec::VT_AUDITANNOTATIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn matchConditions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MatchCondition<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MatchCondition>>>>(ValidatingAdmissionPolicySpec::VT_MATCHCONDITIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn variables(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Variable<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Variable>>>>(ValidatingAdmissionPolicySpec::VT_VARIABLES, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for ValidatingAdmissionPolicySpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<ParamKind>>("paramKind", Self::VT_PARAMKIND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<MatchResources>>("matchConstraints", Self::VT_MATCHCONSTRAINTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Validation>>>>("validations", Self::VT_VALIDATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("failurePolicy", Self::VT_FAILUREPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<AuditAnnotation>>>>("auditAnnotations", Self::VT_AUDITANNOTATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MatchCondition>>>>("matchConditions", Self::VT_MATCHCONDITIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Variable>>>>("variables", Self::VT_VARIABLES, false)?
     .finish();
    Ok(())
  }
}
pub struct ValidatingAdmissionPolicySpecArgs<'a> {
    pub paramKind: Option<flatbuffers::WIPOffset<ParamKind<'a>>>,
    pub matchConstraints: Option<flatbuffers::WIPOffset<MatchResources<'a>>>,
    pub validations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Validation<'a>>>>>,
    pub failurePolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub auditAnnotations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AuditAnnotation<'a>>>>>,
    pub matchConditions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MatchCondition<'a>>>>>,
    pub variables: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Variable<'a>>>>>,
}
impl<'a> Default for ValidatingAdmissionPolicySpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    ValidatingAdmissionPolicySpecArgs {
      paramKind: None,
      matchConstraints: None,
      validations: None,
      failurePolicy: None,
      auditAnnotations: None,
      matchConditions: None,
      variables: None,
    }
  }
}

impl Serialize for ValidatingAdmissionPolicySpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ValidatingAdmissionPolicySpec", 7)?;
      s.serialize_field("paramKind", &self.paramKind())?;
      s.serialize_field("matchConstraints", &self.matchConstraints())?;
      s.serialize_field("validations", &self.validations())?;
      s.serialize_field("failurePolicy", &self.failurePolicy())?;
      s.serialize_field("auditAnnotations", &self.auditAnnotations())?;
      s.serialize_field("matchConditions", &self.matchConditions())?;
      s.serialize_field("variables", &self.variables())?;
    s.end()
  }
}

pub struct ValidatingAdmissionPolicySpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ValidatingAdmissionPolicySpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_paramKind(&mut self, paramKind: flatbuffers::WIPOffset<ParamKind<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ParamKind>>(ValidatingAdmissionPolicySpec::VT_PARAMKIND, paramKind);
  }
  #[inline]
  pub fn add_matchConstraints(&mut self, matchConstraints: flatbuffers::WIPOffset<MatchResources<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<MatchResources>>(ValidatingAdmissionPolicySpec::VT_MATCHCONSTRAINTS, matchConstraints);
  }
  #[inline]
  pub fn add_validations(&mut self, validations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Validation<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingAdmissionPolicySpec::VT_VALIDATIONS, validations);
  }
  #[inline]
  pub fn add_failurePolicy(&mut self, failurePolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingAdmissionPolicySpec::VT_FAILUREPOLICY, failurePolicy);
  }
  #[inline]
  pub fn add_auditAnnotations(&mut self, auditAnnotations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<AuditAnnotation<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingAdmissionPolicySpec::VT_AUDITANNOTATIONS, auditAnnotations);
  }
  #[inline]
  pub fn add_matchConditions(&mut self, matchConditions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MatchCondition<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingAdmissionPolicySpec::VT_MATCHCONDITIONS, matchConditions);
  }
  #[inline]
  pub fn add_variables(&mut self, variables: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Variable<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingAdmissionPolicySpec::VT_VARIABLES, variables);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ValidatingAdmissionPolicySpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ValidatingAdmissionPolicySpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ValidatingAdmissionPolicySpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ValidatingAdmissionPolicySpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ValidatingAdmissionPolicySpec");
      ds.field("paramKind", &self.paramKind());
      ds.field("matchConstraints", &self.matchConstraints());
      ds.field("validations", &self.validations());
      ds.field("failurePolicy", &self.failurePolicy());
      ds.field("auditAnnotations", &self.auditAnnotations());
      ds.field("matchConditions", &self.matchConditions());
      ds.field("variables", &self.variables());
      ds.finish()
  }
}
