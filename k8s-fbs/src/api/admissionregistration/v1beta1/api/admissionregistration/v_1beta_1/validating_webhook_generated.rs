// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ValidatingWebhookOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ValidatingWebhook<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ValidatingWebhook<'a> {
  type Inner = ValidatingWebhook<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ValidatingWebhook<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_CLIENTCONFIG: flatbuffers::VOffsetT = 6;
  pub const VT_RULES: flatbuffers::VOffsetT = 8;
  pub const VT_FAILUREPOLICY: flatbuffers::VOffsetT = 10;
  pub const VT_MATCHPOLICY: flatbuffers::VOffsetT = 12;
  pub const VT_NAMESPACESELECTOR: flatbuffers::VOffsetT = 14;
  pub const VT_OBJECTSELECTOR: flatbuffers::VOffsetT = 16;
  pub const VT_SIDEEFFECTS: flatbuffers::VOffsetT = 18;
  pub const VT_TIMEOUTSECONDS: flatbuffers::VOffsetT = 20;
  pub const VT_ADMISSIONREVIEWVERSIONS: flatbuffers::VOffsetT = 22;
  pub const VT_MATCHCONDITIONS: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ValidatingWebhook { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ValidatingWebhookArgs<'args>
  ) -> flatbuffers::WIPOffset<ValidatingWebhook<'bldr>> {
    let mut builder = ValidatingWebhookBuilder::new(_fbb);
    if let Some(x) = args.matchConditions { builder.add_matchConditions(x); }
    if let Some(x) = args.admissionReviewVersions { builder.add_admissionReviewVersions(x); }
    builder.add_timeoutSeconds(args.timeoutSeconds);
    if let Some(x) = args.sideEffects { builder.add_sideEffects(x); }
    if let Some(x) = args.objectSelector { builder.add_objectSelector(x); }
    if let Some(x) = args.namespaceSelector { builder.add_namespaceSelector(x); }
    if let Some(x) = args.matchPolicy { builder.add_matchPolicy(x); }
    if let Some(x) = args.failurePolicy { builder.add_failurePolicy(x); }
    if let Some(x) = args.rules { builder.add_rules(x); }
    if let Some(x) = args.clientConfig { builder.add_clientConfig(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ValidatingWebhook::VT_NAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn clientConfig(&self) -> WebhookClientConfig<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<WebhookClientConfig>>(ValidatingWebhook::VT_CLIENTCONFIG, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn rules(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::v_1::RuleWithOperations<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::v_1::RuleWithOperations>>>>(ValidatingWebhook::VT_RULES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn failurePolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ValidatingWebhook::VT_FAILUREPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn matchPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ValidatingWebhook::VT_MATCHPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn namespaceSelector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(ValidatingWebhook::VT_NAMESPACESELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn objectSelector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(ValidatingWebhook::VT_OBJECTSELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn sideEffects(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ValidatingWebhook::VT_SIDEEFFECTS, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn timeoutSeconds(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ValidatingWebhook::VT_TIMEOUTSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn admissionReviewVersions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ValidatingWebhook::VT_ADMISSIONREVIEWVERSIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn matchConditions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MatchCondition<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MatchCondition>>>>(ValidatingWebhook::VT_MATCHCONDITIONS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for ValidatingWebhook<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<WebhookClientConfig>>("clientConfig", Self::VT_CLIENTCONFIG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::v_1::RuleWithOperations>>>>("rules", Self::VT_RULES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("failurePolicy", Self::VT_FAILUREPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("matchPolicy", Self::VT_MATCHPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("namespaceSelector", Self::VT_NAMESPACESELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("objectSelector", Self::VT_OBJECTSELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sideEffects", Self::VT_SIDEEFFECTS, false)?
     .visit_field::<i32>("timeoutSeconds", Self::VT_TIMEOUTSECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("admissionReviewVersions", Self::VT_ADMISSIONREVIEWVERSIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MatchCondition>>>>("matchConditions", Self::VT_MATCHCONDITIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct ValidatingWebhookArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub clientConfig: Option<flatbuffers::WIPOffset<WebhookClientConfig<'a>>>,
    pub rules: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::v_1::RuleWithOperations<'a>>>>>,
    pub failurePolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub matchPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub namespaceSelector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub objectSelector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub sideEffects: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timeoutSeconds: i32,
    pub admissionReviewVersions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub matchConditions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MatchCondition<'a>>>>>,
}
impl<'a> Default for ValidatingWebhookArgs<'a> {
  #[inline]
  fn default() -> Self {
    ValidatingWebhookArgs {
      name: None,
      clientConfig: None,
      rules: None,
      failurePolicy: None,
      matchPolicy: None,
      namespaceSelector: None,
      objectSelector: None,
      sideEffects: None,
      timeoutSeconds: 0,
      admissionReviewVersions: None,
      matchConditions: None,
    }
  }
}

impl Serialize for ValidatingWebhook<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ValidatingWebhook", 11)?;
      s.serialize_field("name", &self.name())?;
      s.serialize_field("clientConfig", &self.clientConfig())?;
      s.serialize_field("rules", &self.rules())?;
      s.serialize_field("failurePolicy", &self.failurePolicy())?;
      s.serialize_field("matchPolicy", &self.matchPolicy())?;
      s.serialize_field("namespaceSelector", &self.namespaceSelector())?;
      s.serialize_field("objectSelector", &self.objectSelector())?;
      s.serialize_field("sideEffects", &self.sideEffects())?;
      s.serialize_field("timeoutSeconds", &self.timeoutSeconds())?;
      s.serialize_field("admissionReviewVersions", &self.admissionReviewVersions())?;
      s.serialize_field("matchConditions", &self.matchConditions())?;
    s.end()
  }
}

pub struct ValidatingWebhookBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ValidatingWebhookBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingWebhook::VT_NAME, name);
  }
  #[inline]
  pub fn add_clientConfig(&mut self, clientConfig: flatbuffers::WIPOffset<WebhookClientConfig<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<WebhookClientConfig>>(ValidatingWebhook::VT_CLIENTCONFIG, clientConfig);
  }
  #[inline]
  pub fn add_rules(&mut self, rules: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::v_1::RuleWithOperations<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingWebhook::VT_RULES, rules);
  }
  #[inline]
  pub fn add_failurePolicy(&mut self, failurePolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingWebhook::VT_FAILUREPOLICY, failurePolicy);
  }
  #[inline]
  pub fn add_matchPolicy(&mut self, matchPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingWebhook::VT_MATCHPOLICY, matchPolicy);
  }
  #[inline]
  pub fn add_namespaceSelector(&mut self, namespaceSelector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(ValidatingWebhook::VT_NAMESPACESELECTOR, namespaceSelector);
  }
  #[inline]
  pub fn add_objectSelector(&mut self, objectSelector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(ValidatingWebhook::VT_OBJECTSELECTOR, objectSelector);
  }
  #[inline]
  pub fn add_sideEffects(&mut self, sideEffects: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingWebhook::VT_SIDEEFFECTS, sideEffects);
  }
  #[inline]
  pub fn add_timeoutSeconds(&mut self, timeoutSeconds: i32) {
    self.fbb_.push_slot::<i32>(ValidatingWebhook::VT_TIMEOUTSECONDS, timeoutSeconds, 0);
  }
  #[inline]
  pub fn add_admissionReviewVersions(&mut self, admissionReviewVersions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingWebhook::VT_ADMISSIONREVIEWVERSIONS, admissionReviewVersions);
  }
  #[inline]
  pub fn add_matchConditions(&mut self, matchConditions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MatchCondition<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ValidatingWebhook::VT_MATCHCONDITIONS, matchConditions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ValidatingWebhookBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ValidatingWebhookBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ValidatingWebhook<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ValidatingWebhook<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ValidatingWebhook");
      ds.field("name", &self.name());
      ds.field("clientConfig", &self.clientConfig());
      ds.field("rules", &self.rules());
      ds.field("failurePolicy", &self.failurePolicy());
      ds.field("matchPolicy", &self.matchPolicy());
      ds.field("namespaceSelector", &self.namespaceSelector());
      ds.field("objectSelector", &self.objectSelector());
      ds.field("sideEffects", &self.sideEffects());
      ds.field("timeoutSeconds", &self.timeoutSeconds());
      ds.field("admissionReviewVersions", &self.admissionReviewVersions());
      ds.field("matchConditions", &self.matchConditions());
      ds.finish()
  }
}
