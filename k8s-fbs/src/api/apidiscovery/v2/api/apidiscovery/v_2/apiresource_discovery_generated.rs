// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum APIResourceDiscoveryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct APIResourceDiscovery<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for APIResourceDiscovery<'a> {
  type Inner = APIResourceDiscovery<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> APIResourceDiscovery<'a> {
  pub const VT_RESOURCE: flatbuffers::VOffsetT = 4;
  pub const VT_RESPONSEKIND: flatbuffers::VOffsetT = 6;
  pub const VT_SCOPE: flatbuffers::VOffsetT = 8;
  pub const VT_SINGULARRESOURCE: flatbuffers::VOffsetT = 10;
  pub const VT_VERBS: flatbuffers::VOffsetT = 12;
  pub const VT_SHORTNAMES: flatbuffers::VOffsetT = 14;
  pub const VT_CATEGORIES: flatbuffers::VOffsetT = 16;
  pub const VT_SUBRESOURCES: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    APIResourceDiscovery { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args APIResourceDiscoveryArgs<'args>
  ) -> flatbuffers::WIPOffset<APIResourceDiscovery<'bldr>> {
    let mut builder = APIResourceDiscoveryBuilder::new(_fbb);
    if let Some(x) = args.subresources { builder.add_subresources(x); }
    if let Some(x) = args.categories { builder.add_categories(x); }
    if let Some(x) = args.shortNames { builder.add_shortNames(x); }
    if let Some(x) = args.verbs { builder.add_verbs(x); }
    if let Some(x) = args.singularResource { builder.add_singularResource(x); }
    if let Some(x) = args.scope { builder.add_scope(x); }
    if let Some(x) = args.responseKind { builder.add_responseKind(x); }
    if let Some(x) = args.resource { builder.add_resource(x); }
    builder.finish()
  }


  #[inline]
  pub fn resource(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(APIResourceDiscovery::VT_RESOURCE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn responseKind(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind>>(APIResourceDiscovery::VT_RESPONSEKIND, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn scope(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(APIResourceDiscovery::VT_SCOPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn singularResource(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(APIResourceDiscovery::VT_SINGULARRESOURCE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn verbs(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(APIResourceDiscovery::VT_VERBS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn shortNames(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(APIResourceDiscovery::VT_SHORTNAMES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn categories(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(APIResourceDiscovery::VT_CATEGORIES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn subresources(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<APISubresourceDiscovery<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<APISubresourceDiscovery>>>>(APIResourceDiscovery::VT_SUBRESOURCES, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for APIResourceDiscovery<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resource", Self::VT_RESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind>>("responseKind", Self::VT_RESPONSEKIND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scope", Self::VT_SCOPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("singularResource", Self::VT_SINGULARRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("verbs", Self::VT_VERBS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("shortNames", Self::VT_SHORTNAMES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("categories", Self::VT_CATEGORIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<APISubresourceDiscovery>>>>("subresources", Self::VT_SUBRESOURCES, false)?
     .finish();
    Ok(())
  }
}
pub struct APIResourceDiscoveryArgs<'a> {
    pub resource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub responseKind: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind<'a>>>,
    pub scope: Option<flatbuffers::WIPOffset<&'a str>>,
    pub singularResource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub verbs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub shortNames: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub categories: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub subresources: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<APISubresourceDiscovery<'a>>>>>,
}
impl<'a> Default for APIResourceDiscoveryArgs<'a> {
  #[inline]
  fn default() -> Self {
    APIResourceDiscoveryArgs {
      resource: None,
      responseKind: None,
      scope: None,
      singularResource: None,
      verbs: None,
      shortNames: None,
      categories: None,
      subresources: None,
    }
  }
}

impl Serialize for APIResourceDiscovery<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("APIResourceDiscovery", 8)?;
      s.serialize_field("resource", &self.resource())?;
      s.serialize_field("responseKind", &self.responseKind())?;
      s.serialize_field("scope", &self.scope())?;
      s.serialize_field("singularResource", &self.singularResource())?;
      s.serialize_field("verbs", &self.verbs())?;
      s.serialize_field("shortNames", &self.shortNames())?;
      s.serialize_field("categories", &self.categories())?;
      s.serialize_field("subresources", &self.subresources())?;
    s.end()
  }
}

pub struct APIResourceDiscoveryBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> APIResourceDiscoveryBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_resource(&mut self, resource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(APIResourceDiscovery::VT_RESOURCE, resource);
  }
  #[inline]
  pub fn add_responseKind(&mut self, responseKind: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::GroupVersionKind>>(APIResourceDiscovery::VT_RESPONSEKIND, responseKind);
  }
  #[inline]
  pub fn add_scope(&mut self, scope: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(APIResourceDiscovery::VT_SCOPE, scope);
  }
  #[inline]
  pub fn add_singularResource(&mut self, singularResource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(APIResourceDiscovery::VT_SINGULARRESOURCE, singularResource);
  }
  #[inline]
  pub fn add_verbs(&mut self, verbs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(APIResourceDiscovery::VT_VERBS, verbs);
  }
  #[inline]
  pub fn add_shortNames(&mut self, shortNames: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(APIResourceDiscovery::VT_SHORTNAMES, shortNames);
  }
  #[inline]
  pub fn add_categories(&mut self, categories: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(APIResourceDiscovery::VT_CATEGORIES, categories);
  }
  #[inline]
  pub fn add_subresources(&mut self, subresources: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<APISubresourceDiscovery<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(APIResourceDiscovery::VT_SUBRESOURCES, subresources);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> APIResourceDiscoveryBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    APIResourceDiscoveryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<APIResourceDiscovery<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for APIResourceDiscovery<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("APIResourceDiscovery");
      ds.field("resource", &self.resource());
      ds.field("responseKind", &self.responseKind());
      ds.field("scope", &self.scope());
      ds.field("singularResource", &self.singularResource());
      ds.field("verbs", &self.verbs());
      ds.field("shortNames", &self.shortNames());
      ds.field("categories", &self.categories());
      ds.field("subresources", &self.subresources());
      ds.finish()
  }
}
