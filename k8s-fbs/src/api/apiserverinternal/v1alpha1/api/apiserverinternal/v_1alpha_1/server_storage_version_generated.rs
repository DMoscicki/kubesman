// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ServerStorageVersionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServerStorageVersion<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServerStorageVersion<'a> {
  type Inner = ServerStorageVersion<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ServerStorageVersion<'a> {
  pub const VT_APISERVERID: flatbuffers::VOffsetT = 4;
  pub const VT_ENCODINGVERSION: flatbuffers::VOffsetT = 6;
  pub const VT_DECODABLEVERSIONS: flatbuffers::VOffsetT = 8;
  pub const VT_SERVEDVERSIONS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServerStorageVersion { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ServerStorageVersionArgs<'args>
  ) -> flatbuffers::WIPOffset<ServerStorageVersion<'bldr>> {
    let mut builder = ServerStorageVersionBuilder::new(_fbb);
    if let Some(x) = args.servedVersions { builder.add_servedVersions(x); }
    if let Some(x) = args.decodableVersions { builder.add_decodableVersions(x); }
    if let Some(x) = args.encodingVersion { builder.add_encodingVersion(x); }
    if let Some(x) = args.apiServerID { builder.add_apiServerID(x); }
    builder.finish()
  }


  #[inline]
  pub fn apiServerID(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ServerStorageVersion::VT_APISERVERID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn encodingVersion(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ServerStorageVersion::VT_ENCODINGVERSION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn decodableVersions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ServerStorageVersion::VT_DECODABLEVERSIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn servedVersions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ServerStorageVersion::VT_SERVEDVERSIONS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for ServerStorageVersion<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("apiServerID", Self::VT_APISERVERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("encodingVersion", Self::VT_ENCODINGVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("decodableVersions", Self::VT_DECODABLEVERSIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("servedVersions", Self::VT_SERVEDVERSIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct ServerStorageVersionArgs<'a> {
    pub apiServerID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub encodingVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub decodableVersions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub servedVersions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for ServerStorageVersionArgs<'a> {
  #[inline]
  fn default() -> Self {
    ServerStorageVersionArgs {
      apiServerID: None,
      encodingVersion: None,
      decodableVersions: None,
      servedVersions: None,
    }
  }
}

impl Serialize for ServerStorageVersion<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ServerStorageVersion", 4)?;
      s.serialize_field("apiServerID", &self.apiServerID())?;
      s.serialize_field("encodingVersion", &self.encodingVersion())?;
      s.serialize_field("decodableVersions", &self.decodableVersions())?;
      s.serialize_field("servedVersions", &self.servedVersions())?;
    s.end()
  }
}

pub struct ServerStorageVersionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ServerStorageVersionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_apiServerID(&mut self, apiServerID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerStorageVersion::VT_APISERVERID, apiServerID);
  }
  #[inline]
  pub fn add_encodingVersion(&mut self, encodingVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerStorageVersion::VT_ENCODINGVERSION, encodingVersion);
  }
  #[inline]
  pub fn add_decodableVersions(&mut self, decodableVersions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerStorageVersion::VT_DECODABLEVERSIONS, decodableVersions);
  }
  #[inline]
  pub fn add_servedVersions(&mut self, servedVersions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServerStorageVersion::VT_SERVEDVERSIONS, servedVersions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ServerStorageVersionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ServerStorageVersionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServerStorageVersion<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServerStorageVersion<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServerStorageVersion");
      ds.field("apiServerID", &self.apiServerID());
      ds.field("encodingVersion", &self.encodingVersion());
      ds.field("decodableVersions", &self.decodableVersions());
      ds.field("servedVersions", &self.servedVersions());
      ds.finish()
  }
}
