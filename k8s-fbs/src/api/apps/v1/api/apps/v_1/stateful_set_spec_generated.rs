// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StatefulSetSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StatefulSetSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StatefulSetSpec<'a> {
  type Inner = StatefulSetSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StatefulSetSpec<'a> {
  pub const VT_REPLICAS: flatbuffers::VOffsetT = 4;
  pub const VT_SELECTOR: flatbuffers::VOffsetT = 6;
  pub const VT_TEMPLATE: flatbuffers::VOffsetT = 8;
  pub const VT_VOLUMECLAIMTEMPLATES: flatbuffers::VOffsetT = 10;
  pub const VT_SERVICENAME: flatbuffers::VOffsetT = 12;
  pub const VT_PODMANAGEMENTPOLICY: flatbuffers::VOffsetT = 14;
  pub const VT_UPDATESTRATEGY: flatbuffers::VOffsetT = 16;
  pub const VT_REVISIONHISTORYLIMIT: flatbuffers::VOffsetT = 18;
  pub const VT_MINREADYSECONDS: flatbuffers::VOffsetT = 20;
  pub const VT_PERSISTENTVOLUMECLAIMRETENTIONPOLICY: flatbuffers::VOffsetT = 22;
  pub const VT_ORDINALS: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StatefulSetSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StatefulSetSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<StatefulSetSpec<'bldr>> {
    let mut builder = StatefulSetSpecBuilder::new(_fbb);
    if let Some(x) = args.ordinals { builder.add_ordinals(x); }
    if let Some(x) = args.persistentVolumeClaimRetentionPolicy { builder.add_persistentVolumeClaimRetentionPolicy(x); }
    builder.add_minReadySeconds(args.minReadySeconds);
    builder.add_revisionHistoryLimit(args.revisionHistoryLimit);
    if let Some(x) = args.updateStrategy { builder.add_updateStrategy(x); }
    if let Some(x) = args.podManagementPolicy { builder.add_podManagementPolicy(x); }
    if let Some(x) = args.serviceName { builder.add_serviceName(x); }
    if let Some(x) = args.volumeClaimTemplates { builder.add_volumeClaimTemplates(x); }
    if let Some(x) = args.template { builder.add_template(x); }
    if let Some(x) = args.selector { builder.add_selector(x); }
    builder.add_replicas(args.replicas);
    builder.finish()
  }


  #[inline]
  pub fn replicas(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StatefulSetSpec::VT_REPLICAS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn selector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(StatefulSetSpec::VT_SELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn template(&self) -> super::super::core::v_1::PodTemplateSpec<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::core::v_1::PodTemplateSpec>>(StatefulSetSpec::VT_TEMPLATE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn volumeClaimTemplates(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::super::core::v_1::PersistentVolumeClaim<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::super::core::v_1::PersistentVolumeClaim>>>>(StatefulSetSpec::VT_VOLUMECLAIMTEMPLATES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn serviceName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StatefulSetSpec::VT_SERVICENAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn podManagementPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StatefulSetSpec::VT_PODMANAGEMENTPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn updateStrategy(&self) -> StatefulSetUpdateStrategy<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<StatefulSetUpdateStrategy>>(StatefulSetSpec::VT_UPDATESTRATEGY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn revisionHistoryLimit(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StatefulSetSpec::VT_REVISIONHISTORYLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn minReadySeconds(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StatefulSetSpec::VT_MINREADYSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn persistentVolumeClaimRetentionPolicy(&self) -> StatefulSetPersistentVolumeClaimRetentionPolicy<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<StatefulSetPersistentVolumeClaimRetentionPolicy>>(StatefulSetSpec::VT_PERSISTENTVOLUMECLAIMRETENTIONPOLICY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn ordinals(&self) -> StatefulSetOrdinals<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<StatefulSetOrdinals>>(StatefulSetSpec::VT_ORDINALS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for StatefulSetSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("replicas", Self::VT_REPLICAS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("selector", Self::VT_SELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::core::v_1::PodTemplateSpec>>("template", Self::VT_TEMPLATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::super::core::v_1::PersistentVolumeClaim>>>>("volumeClaimTemplates", Self::VT_VOLUMECLAIMTEMPLATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("serviceName", Self::VT_SERVICENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("podManagementPolicy", Self::VT_PODMANAGEMENTPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<StatefulSetUpdateStrategy>>("updateStrategy", Self::VT_UPDATESTRATEGY, false)?
     .visit_field::<i32>("revisionHistoryLimit", Self::VT_REVISIONHISTORYLIMIT, false)?
     .visit_field::<i32>("minReadySeconds", Self::VT_MINREADYSECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<StatefulSetPersistentVolumeClaimRetentionPolicy>>("persistentVolumeClaimRetentionPolicy", Self::VT_PERSISTENTVOLUMECLAIMRETENTIONPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<StatefulSetOrdinals>>("ordinals", Self::VT_ORDINALS, false)?
     .finish();
    Ok(())
  }
}
pub struct StatefulSetSpecArgs<'a> {
    pub replicas: i32,
    pub selector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub template: Option<flatbuffers::WIPOffset<super::super::core::v_1::PodTemplateSpec<'a>>>,
    pub volumeClaimTemplates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::super::core::v_1::PersistentVolumeClaim<'a>>>>>,
    pub serviceName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub podManagementPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updateStrategy: Option<flatbuffers::WIPOffset<StatefulSetUpdateStrategy<'a>>>,
    pub revisionHistoryLimit: i32,
    pub minReadySeconds: i32,
    pub persistentVolumeClaimRetentionPolicy: Option<flatbuffers::WIPOffset<StatefulSetPersistentVolumeClaimRetentionPolicy<'a>>>,
    pub ordinals: Option<flatbuffers::WIPOffset<StatefulSetOrdinals<'a>>>,
}
impl<'a> Default for StatefulSetSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    StatefulSetSpecArgs {
      replicas: 0,
      selector: None,
      template: None,
      volumeClaimTemplates: None,
      serviceName: None,
      podManagementPolicy: None,
      updateStrategy: None,
      revisionHistoryLimit: 0,
      minReadySeconds: 0,
      persistentVolumeClaimRetentionPolicy: None,
      ordinals: None,
    }
  }
}

impl Serialize for StatefulSetSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("StatefulSetSpec", 11)?;
      s.serialize_field("replicas", &self.replicas())?;
      s.serialize_field("selector", &self.selector())?;
      s.serialize_field("template", &self.template())?;
      s.serialize_field("volumeClaimTemplates", &self.volumeClaimTemplates())?;
      s.serialize_field("serviceName", &self.serviceName())?;
      s.serialize_field("podManagementPolicy", &self.podManagementPolicy())?;
      s.serialize_field("updateStrategy", &self.updateStrategy())?;
      s.serialize_field("revisionHistoryLimit", &self.revisionHistoryLimit())?;
      s.serialize_field("minReadySeconds", &self.minReadySeconds())?;
      s.serialize_field("persistentVolumeClaimRetentionPolicy", &self.persistentVolumeClaimRetentionPolicy())?;
      s.serialize_field("ordinals", &self.ordinals())?;
    s.end()
  }
}

pub struct StatefulSetSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StatefulSetSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_replicas(&mut self, replicas: i32) {
    self.fbb_.push_slot::<i32>(StatefulSetSpec::VT_REPLICAS, replicas, 0);
  }
  #[inline]
  pub fn add_selector(&mut self, selector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(StatefulSetSpec::VT_SELECTOR, selector);
  }
  #[inline]
  pub fn add_template(&mut self, template: flatbuffers::WIPOffset<super::super::core::v_1::PodTemplateSpec<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::core::v_1::PodTemplateSpec>>(StatefulSetSpec::VT_TEMPLATE, template);
  }
  #[inline]
  pub fn add_volumeClaimTemplates(&mut self, volumeClaimTemplates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::super::core::v_1::PersistentVolumeClaim<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StatefulSetSpec::VT_VOLUMECLAIMTEMPLATES, volumeClaimTemplates);
  }
  #[inline]
  pub fn add_serviceName(&mut self, serviceName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StatefulSetSpec::VT_SERVICENAME, serviceName);
  }
  #[inline]
  pub fn add_podManagementPolicy(&mut self, podManagementPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StatefulSetSpec::VT_PODMANAGEMENTPOLICY, podManagementPolicy);
  }
  #[inline]
  pub fn add_updateStrategy(&mut self, updateStrategy: flatbuffers::WIPOffset<StatefulSetUpdateStrategy<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<StatefulSetUpdateStrategy>>(StatefulSetSpec::VT_UPDATESTRATEGY, updateStrategy);
  }
  #[inline]
  pub fn add_revisionHistoryLimit(&mut self, revisionHistoryLimit: i32) {
    self.fbb_.push_slot::<i32>(StatefulSetSpec::VT_REVISIONHISTORYLIMIT, revisionHistoryLimit, 0);
  }
  #[inline]
  pub fn add_minReadySeconds(&mut self, minReadySeconds: i32) {
    self.fbb_.push_slot::<i32>(StatefulSetSpec::VT_MINREADYSECONDS, minReadySeconds, 0);
  }
  #[inline]
  pub fn add_persistentVolumeClaimRetentionPolicy(&mut self, persistentVolumeClaimRetentionPolicy: flatbuffers::WIPOffset<StatefulSetPersistentVolumeClaimRetentionPolicy<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<StatefulSetPersistentVolumeClaimRetentionPolicy>>(StatefulSetSpec::VT_PERSISTENTVOLUMECLAIMRETENTIONPOLICY, persistentVolumeClaimRetentionPolicy);
  }
  #[inline]
  pub fn add_ordinals(&mut self, ordinals: flatbuffers::WIPOffset<StatefulSetOrdinals<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<StatefulSetOrdinals>>(StatefulSetSpec::VT_ORDINALS, ordinals);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StatefulSetSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StatefulSetSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StatefulSetSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StatefulSetSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StatefulSetSpec");
      ds.field("replicas", &self.replicas());
      ds.field("selector", &self.selector());
      ds.field("template", &self.template());
      ds.field("volumeClaimTemplates", &self.volumeClaimTemplates());
      ds.field("serviceName", &self.serviceName());
      ds.field("podManagementPolicy", &self.podManagementPolicy());
      ds.field("updateStrategy", &self.updateStrategy());
      ds.field("revisionHistoryLimit", &self.revisionHistoryLimit());
      ds.field("minReadySeconds", &self.minReadySeconds());
      ds.field("persistentVolumeClaimRetentionPolicy", &self.persistentVolumeClaimRetentionPolicy());
      ds.field("ordinals", &self.ordinals());
      ds.finish()
  }
}
