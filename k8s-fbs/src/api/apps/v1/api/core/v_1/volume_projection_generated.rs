// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VolumeProjectionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VolumeProjection<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VolumeProjection<'a> {
  type Inner = VolumeProjection<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VolumeProjection<'a> {
  pub const VT_SECRET: flatbuffers::VOffsetT = 4;
  pub const VT_DOWNWARDAPI: flatbuffers::VOffsetT = 6;
  pub const VT_CONFIGMAP: flatbuffers::VOffsetT = 8;
  pub const VT_SERVICEACCOUNTTOKEN: flatbuffers::VOffsetT = 10;
  pub const VT_CLUSTERTRUSTBUNDLE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VolumeProjection { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VolumeProjectionArgs<'args>
  ) -> flatbuffers::WIPOffset<VolumeProjection<'bldr>> {
    let mut builder = VolumeProjectionBuilder::new(_fbb);
    if let Some(x) = args.clusterTrustBundle { builder.add_clusterTrustBundle(x); }
    if let Some(x) = args.serviceAccountToken { builder.add_serviceAccountToken(x); }
    if let Some(x) = args.configMap { builder.add_configMap(x); }
    if let Some(x) = args.downwardAPI { builder.add_downwardAPI(x); }
    if let Some(x) = args.secret { builder.add_secret(x); }
    builder.finish()
  }


  #[inline]
  pub fn secret(&self) -> SecretProjection<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SecretProjection>>(VolumeProjection::VT_SECRET, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn downwardAPI(&self) -> DownwardAPIProjection<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<DownwardAPIProjection>>(VolumeProjection::VT_DOWNWARDAPI, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn configMap(&self) -> ConfigMapProjection<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ConfigMapProjection>>(VolumeProjection::VT_CONFIGMAP, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn serviceAccountToken(&self) -> ServiceAccountTokenProjection<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ServiceAccountTokenProjection>>(VolumeProjection::VT_SERVICEACCOUNTTOKEN, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn clusterTrustBundle(&self) -> ClusterTrustBundleProjection<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ClusterTrustBundleProjection>>(VolumeProjection::VT_CLUSTERTRUSTBUNDLE, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for VolumeProjection<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<SecretProjection>>("secret", Self::VT_SECRET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<DownwardAPIProjection>>("downwardAPI", Self::VT_DOWNWARDAPI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ConfigMapProjection>>("configMap", Self::VT_CONFIGMAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ServiceAccountTokenProjection>>("serviceAccountToken", Self::VT_SERVICEACCOUNTTOKEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ClusterTrustBundleProjection>>("clusterTrustBundle", Self::VT_CLUSTERTRUSTBUNDLE, false)?
     .finish();
    Ok(())
  }
}
pub struct VolumeProjectionArgs<'a> {
    pub secret: Option<flatbuffers::WIPOffset<SecretProjection<'a>>>,
    pub downwardAPI: Option<flatbuffers::WIPOffset<DownwardAPIProjection<'a>>>,
    pub configMap: Option<flatbuffers::WIPOffset<ConfigMapProjection<'a>>>,
    pub serviceAccountToken: Option<flatbuffers::WIPOffset<ServiceAccountTokenProjection<'a>>>,
    pub clusterTrustBundle: Option<flatbuffers::WIPOffset<ClusterTrustBundleProjection<'a>>>,
}
impl<'a> Default for VolumeProjectionArgs<'a> {
  #[inline]
  fn default() -> Self {
    VolumeProjectionArgs {
      secret: None,
      downwardAPI: None,
      configMap: None,
      serviceAccountToken: None,
      clusterTrustBundle: None,
    }
  }
}

impl Serialize for VolumeProjection<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VolumeProjection", 5)?;
      s.serialize_field("secret", &self.secret())?;
      s.serialize_field("downwardAPI", &self.downwardAPI())?;
      s.serialize_field("configMap", &self.configMap())?;
      s.serialize_field("serviceAccountToken", &self.serviceAccountToken())?;
      s.serialize_field("clusterTrustBundle", &self.clusterTrustBundle())?;
    s.end()
  }
}

pub struct VolumeProjectionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VolumeProjectionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_secret(&mut self, secret: flatbuffers::WIPOffset<SecretProjection<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SecretProjection>>(VolumeProjection::VT_SECRET, secret);
  }
  #[inline]
  pub fn add_downwardAPI(&mut self, downwardAPI: flatbuffers::WIPOffset<DownwardAPIProjection<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<DownwardAPIProjection>>(VolumeProjection::VT_DOWNWARDAPI, downwardAPI);
  }
  #[inline]
  pub fn add_configMap(&mut self, configMap: flatbuffers::WIPOffset<ConfigMapProjection<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ConfigMapProjection>>(VolumeProjection::VT_CONFIGMAP, configMap);
  }
  #[inline]
  pub fn add_serviceAccountToken(&mut self, serviceAccountToken: flatbuffers::WIPOffset<ServiceAccountTokenProjection<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ServiceAccountTokenProjection>>(VolumeProjection::VT_SERVICEACCOUNTTOKEN, serviceAccountToken);
  }
  #[inline]
  pub fn add_clusterTrustBundle(&mut self, clusterTrustBundle: flatbuffers::WIPOffset<ClusterTrustBundleProjection<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ClusterTrustBundleProjection>>(VolumeProjection::VT_CLUSTERTRUSTBUNDLE, clusterTrustBundle);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VolumeProjectionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VolumeProjectionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VolumeProjection<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VolumeProjection<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VolumeProjection");
      ds.field("secret", &self.secret());
      ds.field("downwardAPI", &self.downwardAPI());
      ds.field("configMap", &self.configMap());
      ds.field("serviceAccountToken", &self.serviceAccountToken());
      ds.field("clusterTrustBundle", &self.clusterTrustBundle());
      ds.finish()
  }
}
