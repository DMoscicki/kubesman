// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum NodeSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NodeSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NodeSpec<'a> {
  type Inner = NodeSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NodeSpec<'a> {
  pub const VT_PODCIDR: flatbuffers::VOffsetT = 4;
  pub const VT_PODCIDRS: flatbuffers::VOffsetT = 6;
  pub const VT_PROVIDERID: flatbuffers::VOffsetT = 8;
  pub const VT_UNSCHEDULABLE: flatbuffers::VOffsetT = 10;
  pub const VT_TAINTS: flatbuffers::VOffsetT = 12;
  pub const VT_CONFIGSOURCE: flatbuffers::VOffsetT = 14;
  pub const VT_EXTERNALID: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NodeSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NodeSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<NodeSpec<'bldr>> {
    let mut builder = NodeSpecBuilder::new(_fbb);
    if let Some(x) = args.externalID { builder.add_externalID(x); }
    if let Some(x) = args.configSource { builder.add_configSource(x); }
    if let Some(x) = args.taints { builder.add_taints(x); }
    if let Some(x) = args.providerID { builder.add_providerID(x); }
    if let Some(x) = args.podCIDRs { builder.add_podCIDRs(x); }
    if let Some(x) = args.podCIDR { builder.add_podCIDR(x); }
    builder.add_unschedulable(args.unschedulable);
    builder.finish()
  }


  #[inline]
  pub fn podCIDR(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSpec::VT_PODCIDR, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn podCIDRs(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(NodeSpec::VT_PODCIDRS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn providerID(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSpec::VT_PROVIDERID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn unschedulable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(NodeSpec::VT_UNSCHEDULABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn taints(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Taint<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Taint>>>>(NodeSpec::VT_TAINTS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn configSource(&self) -> NodeConfigSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<NodeConfigSource>>(NodeSpec::VT_CONFIGSOURCE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn externalID(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSpec::VT_EXTERNALID, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for NodeSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("podCIDR", Self::VT_PODCIDR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("podCIDRs", Self::VT_PODCIDRS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("providerID", Self::VT_PROVIDERID, false)?
     .visit_field::<bool>("unschedulable", Self::VT_UNSCHEDULABLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Taint>>>>("taints", Self::VT_TAINTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<NodeConfigSource>>("configSource", Self::VT_CONFIGSOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalID", Self::VT_EXTERNALID, false)?
     .finish();
    Ok(())
  }
}
pub struct NodeSpecArgs<'a> {
    pub podCIDR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub podCIDRs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub providerID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unschedulable: bool,
    pub taints: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Taint<'a>>>>>,
    pub configSource: Option<flatbuffers::WIPOffset<NodeConfigSource<'a>>>,
    pub externalID: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for NodeSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    NodeSpecArgs {
      podCIDR: None,
      podCIDRs: None,
      providerID: None,
      unschedulable: false,
      taints: None,
      configSource: None,
      externalID: None,
    }
  }
}

impl Serialize for NodeSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("NodeSpec", 7)?;
      s.serialize_field("podCIDR", &self.podCIDR())?;
      s.serialize_field("podCIDRs", &self.podCIDRs())?;
      s.serialize_field("providerID", &self.providerID())?;
      s.serialize_field("unschedulable", &self.unschedulable())?;
      s.serialize_field("taints", &self.taints())?;
      s.serialize_field("configSource", &self.configSource())?;
      s.serialize_field("externalID", &self.externalID())?;
    s.end()
  }
}

pub struct NodeSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NodeSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_podCIDR(&mut self, podCIDR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSpec::VT_PODCIDR, podCIDR);
  }
  #[inline]
  pub fn add_podCIDRs(&mut self, podCIDRs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSpec::VT_PODCIDRS, podCIDRs);
  }
  #[inline]
  pub fn add_providerID(&mut self, providerID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSpec::VT_PROVIDERID, providerID);
  }
  #[inline]
  pub fn add_unschedulable(&mut self, unschedulable: bool) {
    self.fbb_.push_slot::<bool>(NodeSpec::VT_UNSCHEDULABLE, unschedulable, false);
  }
  #[inline]
  pub fn add_taints(&mut self, taints: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Taint<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSpec::VT_TAINTS, taints);
  }
  #[inline]
  pub fn add_configSource(&mut self, configSource: flatbuffers::WIPOffset<NodeConfigSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<NodeConfigSource>>(NodeSpec::VT_CONFIGSOURCE, configSource);
  }
  #[inline]
  pub fn add_externalID(&mut self, externalID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSpec::VT_EXTERNALID, externalID);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NodeSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NodeSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NodeSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NodeSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NodeSpec");
      ds.field("podCIDR", &self.podCIDR());
      ds.field("podCIDRs", &self.podCIDRs());
      ds.field("providerID", &self.providerID());
      ds.field("unschedulable", &self.unschedulable());
      ds.field("taints", &self.taints());
      ds.field("configSource", &self.configSource());
      ds.field("externalID", &self.externalID());
      ds.finish()
  }
}
