// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TokenReviewStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TokenReviewStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TokenReviewStatus<'a> {
  type Inner = TokenReviewStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TokenReviewStatus<'a> {
  pub const VT_AUTHENTICATED: flatbuffers::VOffsetT = 4;
  pub const VT_USER: flatbuffers::VOffsetT = 6;
  pub const VT_AUDIENCES: flatbuffers::VOffsetT = 8;
  pub const VT_ERROR: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TokenReviewStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TokenReviewStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<TokenReviewStatus<'bldr>> {
    let mut builder = TokenReviewStatusBuilder::new(_fbb);
    if let Some(x) = args.error { builder.add_error(x); }
    if let Some(x) = args.audiences { builder.add_audiences(x); }
    if let Some(x) = args.user { builder.add_user(x); }
    builder.add_authenticated(args.authenticated);
    builder.finish()
  }


  #[inline]
  pub fn authenticated(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TokenReviewStatus::VT_AUTHENTICATED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn user(&self) -> UserInfo<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<UserInfo>>(TokenReviewStatus::VT_USER, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn audiences(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TokenReviewStatus::VT_AUDIENCES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn error(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TokenReviewStatus::VT_ERROR, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for TokenReviewStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("authenticated", Self::VT_AUTHENTICATED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<UserInfo>>("user", Self::VT_USER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("audiences", Self::VT_AUDIENCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("error", Self::VT_ERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct TokenReviewStatusArgs<'a> {
    pub authenticated: bool,
    pub user: Option<flatbuffers::WIPOffset<UserInfo<'a>>>,
    pub audiences: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub error: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for TokenReviewStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    TokenReviewStatusArgs {
      authenticated: false,
      user: None,
      audiences: None,
      error: None,
    }
  }
}

impl Serialize for TokenReviewStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TokenReviewStatus", 4)?;
      s.serialize_field("authenticated", &self.authenticated())?;
      s.serialize_field("user", &self.user())?;
      s.serialize_field("audiences", &self.audiences())?;
      s.serialize_field("error", &self.error())?;
    s.end()
  }
}

pub struct TokenReviewStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TokenReviewStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_authenticated(&mut self, authenticated: bool) {
    self.fbb_.push_slot::<bool>(TokenReviewStatus::VT_AUTHENTICATED, authenticated, false);
  }
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<UserInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<UserInfo>>(TokenReviewStatus::VT_USER, user);
  }
  #[inline]
  pub fn add_audiences(&mut self, audiences: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TokenReviewStatus::VT_AUDIENCES, audiences);
  }
  #[inline]
  pub fn add_error(&mut self, error: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TokenReviewStatus::VT_ERROR, error);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TokenReviewStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TokenReviewStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TokenReviewStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TokenReviewStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TokenReviewStatus");
      ds.field("authenticated", &self.authenticated());
      ds.field("user", &self.user());
      ds.field("audiences", &self.audiences());
      ds.field("error", &self.error());
      ds.finish()
  }
}
