// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum SubjectRulesReviewStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SubjectRulesReviewStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SubjectRulesReviewStatus<'a> {
  type Inner = SubjectRulesReviewStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SubjectRulesReviewStatus<'a> {
  pub const VT_RESOURCERULES: flatbuffers::VOffsetT = 4;
  pub const VT_NONRESOURCERULES: flatbuffers::VOffsetT = 6;
  pub const VT_INCOMPLETE: flatbuffers::VOffsetT = 8;
  pub const VT_EVALUATIONERROR: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SubjectRulesReviewStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SubjectRulesReviewStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<SubjectRulesReviewStatus<'bldr>> {
    let mut builder = SubjectRulesReviewStatusBuilder::new(_fbb);
    if let Some(x) = args.evaluationError { builder.add_evaluationError(x); }
    if let Some(x) = args.nonResourceRules { builder.add_nonResourceRules(x); }
    if let Some(x) = args.resourceRules { builder.add_resourceRules(x); }
    builder.add_incomplete(args.incomplete);
    builder.finish()
  }


  #[inline]
  pub fn resourceRules(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ResourceRule<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ResourceRule>>>>(SubjectRulesReviewStatus::VT_RESOURCERULES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn nonResourceRules(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NonResourceRule<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NonResourceRule>>>>(SubjectRulesReviewStatus::VT_NONRESOURCERULES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn incomplete(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SubjectRulesReviewStatus::VT_INCOMPLETE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn evaluationError(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SubjectRulesReviewStatus::VT_EVALUATIONERROR, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for SubjectRulesReviewStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ResourceRule>>>>("resourceRules", Self::VT_RESOURCERULES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<NonResourceRule>>>>("nonResourceRules", Self::VT_NONRESOURCERULES, false)?
     .visit_field::<bool>("incomplete", Self::VT_INCOMPLETE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("evaluationError", Self::VT_EVALUATIONERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct SubjectRulesReviewStatusArgs<'a> {
    pub resourceRules: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ResourceRule<'a>>>>>,
    pub nonResourceRules: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NonResourceRule<'a>>>>>,
    pub incomplete: bool,
    pub evaluationError: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SubjectRulesReviewStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    SubjectRulesReviewStatusArgs {
      resourceRules: None,
      nonResourceRules: None,
      incomplete: false,
      evaluationError: None,
    }
  }
}

impl Serialize for SubjectRulesReviewStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("SubjectRulesReviewStatus", 4)?;
      s.serialize_field("resourceRules", &self.resourceRules())?;
      s.serialize_field("nonResourceRules", &self.nonResourceRules())?;
      s.serialize_field("incomplete", &self.incomplete())?;
      s.serialize_field("evaluationError", &self.evaluationError())?;
    s.end()
  }
}

pub struct SubjectRulesReviewStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SubjectRulesReviewStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_resourceRules(&mut self, resourceRules: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ResourceRule<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SubjectRulesReviewStatus::VT_RESOURCERULES, resourceRules);
  }
  #[inline]
  pub fn add_nonResourceRules(&mut self, nonResourceRules: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<NonResourceRule<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SubjectRulesReviewStatus::VT_NONRESOURCERULES, nonResourceRules);
  }
  #[inline]
  pub fn add_incomplete(&mut self, incomplete: bool) {
    self.fbb_.push_slot::<bool>(SubjectRulesReviewStatus::VT_INCOMPLETE, incomplete, false);
  }
  #[inline]
  pub fn add_evaluationError(&mut self, evaluationError: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SubjectRulesReviewStatus::VT_EVALUATIONERROR, evaluationError);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SubjectRulesReviewStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SubjectRulesReviewStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SubjectRulesReviewStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SubjectRulesReviewStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SubjectRulesReviewStatus");
      ds.field("resourceRules", &self.resourceRules());
      ds.field("nonResourceRules", &self.nonResourceRules());
      ds.field("incomplete", &self.incomplete());
      ds.field("evaluationError", &self.evaluationError());
      ds.finish()
  }
}
