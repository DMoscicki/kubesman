// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum HorizontalPodAutoscalerStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct HorizontalPodAutoscalerStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HorizontalPodAutoscalerStatus<'a> {
  type Inner = HorizontalPodAutoscalerStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HorizontalPodAutoscalerStatus<'a> {
  pub const VT_OBSERVEDGENERATION: flatbuffers::VOffsetT = 4;
  pub const VT_LASTSCALETIME: flatbuffers::VOffsetT = 6;
  pub const VT_CURRENTREPLICAS: flatbuffers::VOffsetT = 8;
  pub const VT_DESIREDREPLICAS: flatbuffers::VOffsetT = 10;
  pub const VT_CURRENTCPUUTILIZATIONPERCENTAGE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HorizontalPodAutoscalerStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HorizontalPodAutoscalerStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<HorizontalPodAutoscalerStatus<'bldr>> {
    let mut builder = HorizontalPodAutoscalerStatusBuilder::new(_fbb);
    builder.add_observedGeneration(args.observedGeneration);
    builder.add_currentCPUUtilizationPercentage(args.currentCPUUtilizationPercentage);
    builder.add_desiredReplicas(args.desiredReplicas);
    builder.add_currentReplicas(args.currentReplicas);
    if let Some(x) = args.lastScaleTime { builder.add_lastScaleTime(x); }
    builder.finish()
  }


  #[inline]
  pub fn observedGeneration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(HorizontalPodAutoscalerStatus::VT_OBSERVEDGENERATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn lastScaleTime(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(HorizontalPodAutoscalerStatus::VT_LASTSCALETIME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn currentReplicas(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HorizontalPodAutoscalerStatus::VT_CURRENTREPLICAS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn desiredReplicas(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HorizontalPodAutoscalerStatus::VT_DESIREDREPLICAS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn currentCPUUtilizationPercentage(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HorizontalPodAutoscalerStatus::VT_CURRENTCPUUTILIZATIONPERCENTAGE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for HorizontalPodAutoscalerStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("observedGeneration", Self::VT_OBSERVEDGENERATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>("lastScaleTime", Self::VT_LASTSCALETIME, false)?
     .visit_field::<i32>("currentReplicas", Self::VT_CURRENTREPLICAS, false)?
     .visit_field::<i32>("desiredReplicas", Self::VT_DESIREDREPLICAS, false)?
     .visit_field::<i32>("currentCPUUtilizationPercentage", Self::VT_CURRENTCPUUTILIZATIONPERCENTAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct HorizontalPodAutoscalerStatusArgs<'a> {
    pub observedGeneration: i64,
    pub lastScaleTime: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a>>>,
    pub currentReplicas: i32,
    pub desiredReplicas: i32,
    pub currentCPUUtilizationPercentage: i32,
}
impl<'a> Default for HorizontalPodAutoscalerStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    HorizontalPodAutoscalerStatusArgs {
      observedGeneration: 0,
      lastScaleTime: None,
      currentReplicas: 0,
      desiredReplicas: 0,
      currentCPUUtilizationPercentage: 0,
    }
  }
}

impl Serialize for HorizontalPodAutoscalerStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("HorizontalPodAutoscalerStatus", 5)?;
      s.serialize_field("observedGeneration", &self.observedGeneration())?;
      s.serialize_field("lastScaleTime", &self.lastScaleTime())?;
      s.serialize_field("currentReplicas", &self.currentReplicas())?;
      s.serialize_field("desiredReplicas", &self.desiredReplicas())?;
      s.serialize_field("currentCPUUtilizationPercentage", &self.currentCPUUtilizationPercentage())?;
    s.end()
  }
}

pub struct HorizontalPodAutoscalerStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HorizontalPodAutoscalerStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_observedGeneration(&mut self, observedGeneration: i64) {
    self.fbb_.push_slot::<i64>(HorizontalPodAutoscalerStatus::VT_OBSERVEDGENERATION, observedGeneration, 0);
  }
  #[inline]
  pub fn add_lastScaleTime(&mut self, lastScaleTime: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(HorizontalPodAutoscalerStatus::VT_LASTSCALETIME, lastScaleTime);
  }
  #[inline]
  pub fn add_currentReplicas(&mut self, currentReplicas: i32) {
    self.fbb_.push_slot::<i32>(HorizontalPodAutoscalerStatus::VT_CURRENTREPLICAS, currentReplicas, 0);
  }
  #[inline]
  pub fn add_desiredReplicas(&mut self, desiredReplicas: i32) {
    self.fbb_.push_slot::<i32>(HorizontalPodAutoscalerStatus::VT_DESIREDREPLICAS, desiredReplicas, 0);
  }
  #[inline]
  pub fn add_currentCPUUtilizationPercentage(&mut self, currentCPUUtilizationPercentage: i32) {
    self.fbb_.push_slot::<i32>(HorizontalPodAutoscalerStatus::VT_CURRENTCPUUTILIZATIONPERCENTAGE, currentCPUUtilizationPercentage, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HorizontalPodAutoscalerStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HorizontalPodAutoscalerStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HorizontalPodAutoscalerStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HorizontalPodAutoscalerStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HorizontalPodAutoscalerStatus");
      ds.field("observedGeneration", &self.observedGeneration());
      ds.field("lastScaleTime", &self.lastScaleTime());
      ds.field("currentReplicas", &self.currentReplicas());
      ds.field("desiredReplicas", &self.desiredReplicas());
      ds.field("currentCPUUtilizationPercentage", &self.currentCPUUtilizationPercentage());
      ds.finish()
  }
}
