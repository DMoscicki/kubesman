// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ObjectMetricStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ObjectMetricStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ObjectMetricStatus<'a> {
  type Inner = ObjectMetricStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ObjectMetricStatus<'a> {
  pub const VT_TARGET: flatbuffers::VOffsetT = 4;
  pub const VT_METRICNAME: flatbuffers::VOffsetT = 6;
  pub const VT_CURRENTVALUE: flatbuffers::VOffsetT = 8;
  pub const VT_SELECTOR: flatbuffers::VOffsetT = 10;
  pub const VT_AVERAGEVALUE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ObjectMetricStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ObjectMetricStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<ObjectMetricStatus<'bldr>> {
    let mut builder = ObjectMetricStatusBuilder::new(_fbb);
    if let Some(x) = args.averageValue { builder.add_averageValue(x); }
    if let Some(x) = args.selector { builder.add_selector(x); }
    if let Some(x) = args.currentValue { builder.add_currentValue(x); }
    if let Some(x) = args.metricName { builder.add_metricName(x); }
    if let Some(x) = args.target { builder.add_target(x); }
    builder.finish()
  }


  #[inline]
  pub fn target(&self) -> CrossVersionObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CrossVersionObjectReference>>(ObjectMetricStatus::VT_TARGET, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn metricName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectMetricStatus::VT_METRICNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn currentValue(&self) -> super::super::super::apimachinery::pkg::api::resource::Quantity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(ObjectMetricStatus::VT_CURRENTVALUE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn selector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(ObjectMetricStatus::VT_SELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn averageValue(&self) -> super::super::super::apimachinery::pkg::api::resource::Quantity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(ObjectMetricStatus::VT_AVERAGEVALUE, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for ObjectMetricStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<CrossVersionObjectReference>>("target", Self::VT_TARGET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("metricName", Self::VT_METRICNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>("currentValue", Self::VT_CURRENTVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("selector", Self::VT_SELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>("averageValue", Self::VT_AVERAGEVALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct ObjectMetricStatusArgs<'a> {
    pub target: Option<flatbuffers::WIPOffset<CrossVersionObjectReference<'a>>>,
    pub metricName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub currentValue: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'a>>>,
    pub selector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub averageValue: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'a>>>,
}
impl<'a> Default for ObjectMetricStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    ObjectMetricStatusArgs {
      target: None,
      metricName: None,
      currentValue: None,
      selector: None,
      averageValue: None,
    }
  }
}

impl Serialize for ObjectMetricStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ObjectMetricStatus", 5)?;
      s.serialize_field("target", &self.target())?;
      s.serialize_field("metricName", &self.metricName())?;
      s.serialize_field("currentValue", &self.currentValue())?;
      s.serialize_field("selector", &self.selector())?;
      s.serialize_field("averageValue", &self.averageValue())?;
    s.end()
  }
}

pub struct ObjectMetricStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ObjectMetricStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_target(&mut self, target: flatbuffers::WIPOffset<CrossVersionObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CrossVersionObjectReference>>(ObjectMetricStatus::VT_TARGET, target);
  }
  #[inline]
  pub fn add_metricName(&mut self, metricName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMetricStatus::VT_METRICNAME, metricName);
  }
  #[inline]
  pub fn add_currentValue(&mut self, currentValue: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(ObjectMetricStatus::VT_CURRENTVALUE, currentValue);
  }
  #[inline]
  pub fn add_selector(&mut self, selector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(ObjectMetricStatus::VT_SELECTOR, selector);
  }
  #[inline]
  pub fn add_averageValue(&mut self, averageValue: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(ObjectMetricStatus::VT_AVERAGEVALUE, averageValue);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ObjectMetricStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ObjectMetricStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ObjectMetricStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ObjectMetricStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ObjectMetricStatus");
      ds.field("target", &self.target());
      ds.field("metricName", &self.metricName());
      ds.field("currentValue", &self.currentValue());
      ds.field("selector", &self.selector());
      ds.field("averageValue", &self.averageValue());
      ds.finish()
  }
}
