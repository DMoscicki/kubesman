// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ScaleStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ScaleStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ScaleStatus<'a> {
  type Inner = ScaleStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ScaleStatus<'a> {
  pub const VT_REPLICAS: flatbuffers::VOffsetT = 4;
  pub const VT_SELECTOR: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ScaleStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ScaleStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<ScaleStatus<'bldr>> {
    let mut builder = ScaleStatusBuilder::new(_fbb);
    if let Some(x) = args.selector { builder.add_selector(x); }
    builder.add_replicas(args.replicas);
    builder.finish()
  }


  #[inline]
  pub fn replicas(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ScaleStatus::VT_REPLICAS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn selector(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ScaleStatus::VT_SELECTOR, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for ScaleStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("replicas", Self::VT_REPLICAS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("selector", Self::VT_SELECTOR, false)?
     .finish();
    Ok(())
  }
}
pub struct ScaleStatusArgs<'a> {
    pub replicas: i32,
    pub selector: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ScaleStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    ScaleStatusArgs {
      replicas: 0,
      selector: None,
    }
  }
}

impl Serialize for ScaleStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ScaleStatus", 2)?;
      s.serialize_field("replicas", &self.replicas())?;
      s.serialize_field("selector", &self.selector())?;
    s.end()
  }
}

pub struct ScaleStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ScaleStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_replicas(&mut self, replicas: i32) {
    self.fbb_.push_slot::<i32>(ScaleStatus::VT_REPLICAS, replicas, 0);
  }
  #[inline]
  pub fn add_selector(&mut self, selector: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ScaleStatus::VT_SELECTOR, selector);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ScaleStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ScaleStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ScaleStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ScaleStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ScaleStatus");
      ds.field("replicas", &self.replicas());
      ds.field("selector", &self.selector());
      ds.finish()
  }
}
