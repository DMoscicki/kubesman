// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Event<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Event<'a> {
  type Inner = Event<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Event<'a> {
  pub const VT_METADATA: flatbuffers::VOffsetT = 4;
  pub const VT_INVOLVEDOBJECT: flatbuffers::VOffsetT = 6;
  pub const VT_REASON: flatbuffers::VOffsetT = 8;
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 10;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 12;
  pub const VT_FIRSTTIMESTAMP: flatbuffers::VOffsetT = 14;
  pub const VT_LASTTIMESTAMP: flatbuffers::VOffsetT = 16;
  pub const VT_COUNT: flatbuffers::VOffsetT = 18;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 20;
  pub const VT_EVENTTIME: flatbuffers::VOffsetT = 22;
  pub const VT_SERIES: flatbuffers::VOffsetT = 24;
  pub const VT_ACTION: flatbuffers::VOffsetT = 26;
  pub const VT_RELATED: flatbuffers::VOffsetT = 28;
  pub const VT_REPORTINGCOMPONENT: flatbuffers::VOffsetT = 30;
  pub const VT_REPORTINGINSTANCE: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Event { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventArgs<'args>
  ) -> flatbuffers::WIPOffset<Event<'bldr>> {
    let mut builder = EventBuilder::new(_fbb);
    if let Some(x) = args.reportingInstance { builder.add_reportingInstance(x); }
    if let Some(x) = args.reportingComponent { builder.add_reportingComponent(x); }
    if let Some(x) = args.related { builder.add_related(x); }
    if let Some(x) = args.action { builder.add_action(x); }
    if let Some(x) = args.series { builder.add_series(x); }
    if let Some(x) = args.eventTime { builder.add_eventTime(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.add_count(args.count);
    if let Some(x) = args.lastTimestamp { builder.add_lastTimestamp(x); }
    if let Some(x) = args.firstTimestamp { builder.add_firstTimestamp(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.message { builder.add_message(x); }
    if let Some(x) = args.reason { builder.add_reason(x); }
    if let Some(x) = args.involvedObject { builder.add_involvedObject(x); }
    if let Some(x) = args.metadata { builder.add_metadata(x); }
    builder.finish()
  }


  #[inline]
  pub fn metadata(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta>>(Event::VT_METADATA, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn involvedObject(&self) -> ObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ObjectReference>>(Event::VT_INVOLVEDOBJECT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn reason(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_REASON, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn message(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_MESSAGE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn source(&self) -> EventSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<EventSource>>(Event::VT_SOURCE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn firstTimestamp(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(Event::VT_FIRSTTIMESTAMP, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn lastTimestamp(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(Event::VT_LASTTIMESTAMP, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn count(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Event::VT_COUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn type_(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_TYPE_, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn eventTime(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>(Event::VT_EVENTTIME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn series(&self) -> EventSeries<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<EventSeries>>(Event::VT_SERIES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn action(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_ACTION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn related(&self) -> ObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ObjectReference>>(Event::VT_RELATED, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn reportingComponent(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_REPORTINGCOMPONENT, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn reportingInstance(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_REPORTINGINSTANCE, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for Event<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta>>("metadata", Self::VT_METADATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ObjectReference>>("involvedObject", Self::VT_INVOLVEDOBJECT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reason", Self::VT_REASON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("message", Self::VT_MESSAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<EventSource>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>("firstTimestamp", Self::VT_FIRSTTIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>("lastTimestamp", Self::VT_LASTTIMESTAMP, false)?
     .visit_field::<i32>("count", Self::VT_COUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>("eventTime", Self::VT_EVENTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<EventSeries>>("series", Self::VT_SERIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("action", Self::VT_ACTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ObjectReference>>("related", Self::VT_RELATED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reportingComponent", Self::VT_REPORTINGCOMPONENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reportingInstance", Self::VT_REPORTINGINSTANCE, false)?
     .finish();
    Ok(())
  }
}
pub struct EventArgs<'a> {
    pub metadata: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta<'a>>>,
    pub involvedObject: Option<flatbuffers::WIPOffset<ObjectReference<'a>>>,
    pub reason: Option<flatbuffers::WIPOffset<&'a str>>,
    pub message: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<EventSource<'a>>>,
    pub firstTimestamp: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a>>>,
    pub lastTimestamp: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a>>>,
    pub count: i32,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eventTime: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'a>>>,
    pub series: Option<flatbuffers::WIPOffset<EventSeries<'a>>>,
    pub action: Option<flatbuffers::WIPOffset<&'a str>>,
    pub related: Option<flatbuffers::WIPOffset<ObjectReference<'a>>>,
    pub reportingComponent: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reportingInstance: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EventArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventArgs {
      metadata: None,
      involvedObject: None,
      reason: None,
      message: None,
      source: None,
      firstTimestamp: None,
      lastTimestamp: None,
      count: 0,
      type_: None,
      eventTime: None,
      series: None,
      action: None,
      related: None,
      reportingComponent: None,
      reportingInstance: None,
    }
  }
}

impl Serialize for Event<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("Event", 15)?;
      s.serialize_field("metadata", &self.metadata())?;
      s.serialize_field("involvedObject", &self.involvedObject())?;
      s.serialize_field("reason", &self.reason())?;
      s.serialize_field("message", &self.message())?;
      s.serialize_field("source", &self.source())?;
      s.serialize_field("firstTimestamp", &self.firstTimestamp())?;
      s.serialize_field("lastTimestamp", &self.lastTimestamp())?;
      s.serialize_field("count", &self.count())?;
      s.serialize_field("type_", &self.type_())?;
      s.serialize_field("eventTime", &self.eventTime())?;
      s.serialize_field("series", &self.series())?;
      s.serialize_field("action", &self.action())?;
      s.serialize_field("related", &self.related())?;
      s.serialize_field("reportingComponent", &self.reportingComponent())?;
      s.serialize_field("reportingInstance", &self.reportingInstance())?;
    s.end()
  }
}

pub struct EventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_metadata(&mut self, metadata: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta>>(Event::VT_METADATA, metadata);
  }
  #[inline]
  pub fn add_involvedObject(&mut self, involvedObject: flatbuffers::WIPOffset<ObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ObjectReference>>(Event::VT_INVOLVEDOBJECT, involvedObject);
  }
  #[inline]
  pub fn add_reason(&mut self, reason: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_REASON, reason);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_MESSAGE, message);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<EventSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<EventSource>>(Event::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_firstTimestamp(&mut self, firstTimestamp: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(Event::VT_FIRSTTIMESTAMP, firstTimestamp);
  }
  #[inline]
  pub fn add_lastTimestamp(&mut self, lastTimestamp: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(Event::VT_LASTTIMESTAMP, lastTimestamp);
  }
  #[inline]
  pub fn add_count(&mut self, count: i32) {
    self.fbb_.push_slot::<i32>(Event::VT_COUNT, count, 0);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_eventTime(&mut self, eventTime: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>(Event::VT_EVENTTIME, eventTime);
  }
  #[inline]
  pub fn add_series(&mut self, series: flatbuffers::WIPOffset<EventSeries<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<EventSeries>>(Event::VT_SERIES, series);
  }
  #[inline]
  pub fn add_action(&mut self, action: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_ACTION, action);
  }
  #[inline]
  pub fn add_related(&mut self, related: flatbuffers::WIPOffset<ObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ObjectReference>>(Event::VT_RELATED, related);
  }
  #[inline]
  pub fn add_reportingComponent(&mut self, reportingComponent: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_REPORTINGCOMPONENT, reportingComponent);
  }
  #[inline]
  pub fn add_reportingInstance(&mut self, reportingInstance: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_REPORTINGINSTANCE, reportingInstance);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Event<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Event<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Event");
      ds.field("metadata", &self.metadata());
      ds.field("involvedObject", &self.involvedObject());
      ds.field("reason", &self.reason());
      ds.field("message", &self.message());
      ds.field("source", &self.source());
      ds.field("firstTimestamp", &self.firstTimestamp());
      ds.field("lastTimestamp", &self.lastTimestamp());
      ds.field("count", &self.count());
      ds.field("type_", &self.type_());
      ds.field("eventTime", &self.eventTime());
      ds.field("series", &self.series());
      ds.field("action", &self.action());
      ds.field("related", &self.related());
      ds.field("reportingComponent", &self.reportingComponent());
      ds.field("reportingInstance", &self.reportingInstance());
      ds.finish()
  }
}
