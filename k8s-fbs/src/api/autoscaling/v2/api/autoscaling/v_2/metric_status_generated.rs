// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MetricStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MetricStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MetricStatus<'a> {
  type Inner = MetricStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MetricStatus<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_OBJECT: flatbuffers::VOffsetT = 6;
  pub const VT_PODS: flatbuffers::VOffsetT = 8;
  pub const VT_RESOURCE: flatbuffers::VOffsetT = 10;
  pub const VT_CONTAINERRESOURCE: flatbuffers::VOffsetT = 12;
  pub const VT_EXTERNAL: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MetricStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MetricStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<MetricStatus<'bldr>> {
    let mut builder = MetricStatusBuilder::new(_fbb);
    if let Some(x) = args.external { builder.add_external(x); }
    if let Some(x) = args.containerResource { builder.add_containerResource(x); }
    if let Some(x) = args.resource { builder.add_resource(x); }
    if let Some(x) = args.pods { builder.add_pods(x); }
    if let Some(x) = args.object { builder.add_object(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.finish()
  }


  #[inline]
  pub fn type_(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MetricStatus::VT_TYPE_, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn object(&self) -> ObjectMetricStatus<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ObjectMetricStatus>>(MetricStatus::VT_OBJECT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn pods(&self) -> PodsMetricStatus<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PodsMetricStatus>>(MetricStatus::VT_PODS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resource(&self) -> ResourceMetricStatus<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ResourceMetricStatus>>(MetricStatus::VT_RESOURCE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn containerResource(&self) -> ContainerResourceMetricStatus<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ContainerResourceMetricStatus>>(MetricStatus::VT_CONTAINERRESOURCE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn external(&self) -> ExternalMetricStatus<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ExternalMetricStatus>>(MetricStatus::VT_EXTERNAL, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for MetricStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ObjectMetricStatus>>("object", Self::VT_OBJECT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PodsMetricStatus>>("pods", Self::VT_PODS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ResourceMetricStatus>>("resource", Self::VT_RESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ContainerResourceMetricStatus>>("containerResource", Self::VT_CONTAINERRESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ExternalMetricStatus>>("external", Self::VT_EXTERNAL, false)?
     .finish();
    Ok(())
  }
}
pub struct MetricStatusArgs<'a> {
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub object: Option<flatbuffers::WIPOffset<ObjectMetricStatus<'a>>>,
    pub pods: Option<flatbuffers::WIPOffset<PodsMetricStatus<'a>>>,
    pub resource: Option<flatbuffers::WIPOffset<ResourceMetricStatus<'a>>>,
    pub containerResource: Option<flatbuffers::WIPOffset<ContainerResourceMetricStatus<'a>>>,
    pub external: Option<flatbuffers::WIPOffset<ExternalMetricStatus<'a>>>,
}
impl<'a> Default for MetricStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    MetricStatusArgs {
      type_: None,
      object: None,
      pods: None,
      resource: None,
      containerResource: None,
      external: None,
    }
  }
}

impl Serialize for MetricStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MetricStatus", 6)?;
      s.serialize_field("type_", &self.type_())?;
      s.serialize_field("object", &self.object())?;
      s.serialize_field("pods", &self.pods())?;
      s.serialize_field("resource", &self.resource())?;
      s.serialize_field("containerResource", &self.containerResource())?;
      s.serialize_field("external", &self.external())?;
    s.end()
  }
}

pub struct MetricStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MetricStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MetricStatus::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_object(&mut self, object: flatbuffers::WIPOffset<ObjectMetricStatus<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ObjectMetricStatus>>(MetricStatus::VT_OBJECT, object);
  }
  #[inline]
  pub fn add_pods(&mut self, pods: flatbuffers::WIPOffset<PodsMetricStatus<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PodsMetricStatus>>(MetricStatus::VT_PODS, pods);
  }
  #[inline]
  pub fn add_resource(&mut self, resource: flatbuffers::WIPOffset<ResourceMetricStatus<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ResourceMetricStatus>>(MetricStatus::VT_RESOURCE, resource);
  }
  #[inline]
  pub fn add_containerResource(&mut self, containerResource: flatbuffers::WIPOffset<ContainerResourceMetricStatus<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ContainerResourceMetricStatus>>(MetricStatus::VT_CONTAINERRESOURCE, containerResource);
  }
  #[inline]
  pub fn add_external(&mut self, external: flatbuffers::WIPOffset<ExternalMetricStatus<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ExternalMetricStatus>>(MetricStatus::VT_EXTERNAL, external);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MetricStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MetricStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MetricStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MetricStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MetricStatus");
      ds.field("type_", &self.type_());
      ds.field("object", &self.object());
      ds.field("pods", &self.pods());
      ds.field("resource", &self.resource());
      ds.field("containerResource", &self.containerResource());
      ds.field("external", &self.external());
      ds.finish()
  }
}
