// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum MetricTargetOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MetricTarget<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MetricTarget<'a> {
  type Inner = MetricTarget<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MetricTarget<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;
  pub const VT_AVERAGEVALUE: flatbuffers::VOffsetT = 8;
  pub const VT_AVERAGEUTILIZATION: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MetricTarget { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MetricTargetArgs<'args>
  ) -> flatbuffers::WIPOffset<MetricTarget<'bldr>> {
    let mut builder = MetricTargetBuilder::new(_fbb);
    builder.add_averageUtilization(args.averageUtilization);
    if let Some(x) = args.averageValue { builder.add_averageValue(x); }
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.finish()
  }


  #[inline]
  pub fn type_(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MetricTarget::VT_TYPE_, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn value(&self) -> super::super::super::apimachinery::pkg::api::resource::Quantity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(MetricTarget::VT_VALUE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn averageValue(&self) -> super::super::super::apimachinery::pkg::api::resource::Quantity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(MetricTarget::VT_AVERAGEVALUE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn averageUtilization(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MetricTarget::VT_AVERAGEUTILIZATION, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MetricTarget<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>("value", Self::VT_VALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>("averageValue", Self::VT_AVERAGEVALUE, false)?
     .visit_field::<i32>("averageUtilization", Self::VT_AVERAGEUTILIZATION, false)?
     .finish();
    Ok(())
  }
}
pub struct MetricTargetArgs<'a> {
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'a>>>,
    pub averageValue: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'a>>>,
    pub averageUtilization: i32,
}
impl<'a> Default for MetricTargetArgs<'a> {
  #[inline]
  fn default() -> Self {
    MetricTargetArgs {
      type_: None,
      value: None,
      averageValue: None,
      averageUtilization: 0,
    }
  }
}

impl Serialize for MetricTarget<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("MetricTarget", 4)?;
      s.serialize_field("type_", &self.type_())?;
      s.serialize_field("value", &self.value())?;
      s.serialize_field("averageValue", &self.averageValue())?;
      s.serialize_field("averageUtilization", &self.averageUtilization())?;
    s.end()
  }
}

pub struct MetricTargetBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MetricTargetBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MetricTarget::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(MetricTarget::VT_VALUE, value);
  }
  #[inline]
  pub fn add_averageValue(&mut self, averageValue: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(MetricTarget::VT_AVERAGEVALUE, averageValue);
  }
  #[inline]
  pub fn add_averageUtilization(&mut self, averageUtilization: i32) {
    self.fbb_.push_slot::<i32>(MetricTarget::VT_AVERAGEUTILIZATION, averageUtilization, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MetricTargetBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MetricTargetBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MetricTarget<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MetricTarget<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MetricTarget");
      ds.field("type_", &self.type_());
      ds.field("value", &self.value());
      ds.field("averageValue", &self.averageValue());
      ds.field("averageUtilization", &self.averageUtilization());
      ds.finish()
  }
}
