// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PodSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PodSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PodSpec<'a> {
  type Inner = PodSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PodSpec<'a> {
  pub const VT_VOLUMES: flatbuffers::VOffsetT = 4;
  pub const VT_INITCONTAINERS: flatbuffers::VOffsetT = 6;
  pub const VT_CONTAINERS: flatbuffers::VOffsetT = 8;
  pub const VT_EPHEMERALCONTAINERS: flatbuffers::VOffsetT = 10;
  pub const VT_RESTARTPOLICY: flatbuffers::VOffsetT = 12;
  pub const VT_TERMINATIONGRACEPERIODSECONDS: flatbuffers::VOffsetT = 14;
  pub const VT_ACTIVEDEADLINESECONDS: flatbuffers::VOffsetT = 16;
  pub const VT_DNSPOLICY: flatbuffers::VOffsetT = 18;
  pub const VT_NODESELECTOR: flatbuffers::VOffsetT = 20;
  pub const VT_SERVICEACCOUNTNAME: flatbuffers::VOffsetT = 22;
  pub const VT_SERVICEACCOUNT: flatbuffers::VOffsetT = 24;
  pub const VT_AUTOMOUNTSERVICEACCOUNTTOKEN: flatbuffers::VOffsetT = 26;
  pub const VT_NODENAME: flatbuffers::VOffsetT = 28;
  pub const VT_HOSTNETWORK: flatbuffers::VOffsetT = 30;
  pub const VT_HOSTPID: flatbuffers::VOffsetT = 32;
  pub const VT_HOSTIPC: flatbuffers::VOffsetT = 34;
  pub const VT_SHAREPROCESSNAMESPACE: flatbuffers::VOffsetT = 36;
  pub const VT_SECURITYCONTEXT: flatbuffers::VOffsetT = 38;
  pub const VT_IMAGEPULLSECRETS: flatbuffers::VOffsetT = 40;
  pub const VT_HOSTNAME: flatbuffers::VOffsetT = 42;
  pub const VT_SUBDOMAIN: flatbuffers::VOffsetT = 44;
  pub const VT_AFFINITY: flatbuffers::VOffsetT = 46;
  pub const VT_SCHEDULERNAME: flatbuffers::VOffsetT = 48;
  pub const VT_TOLERATIONS: flatbuffers::VOffsetT = 50;
  pub const VT_HOSTALIASES: flatbuffers::VOffsetT = 52;
  pub const VT_PRIORITYCLASSNAME: flatbuffers::VOffsetT = 54;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 56;
  pub const VT_DNSCONFIG: flatbuffers::VOffsetT = 58;
  pub const VT_READINESSGATES: flatbuffers::VOffsetT = 60;
  pub const VT_RUNTIMECLASSNAME: flatbuffers::VOffsetT = 62;
  pub const VT_ENABLESERVICELINKS: flatbuffers::VOffsetT = 64;
  pub const VT_PREEMPTIONPOLICY: flatbuffers::VOffsetT = 66;
  pub const VT_OVERHEAD: flatbuffers::VOffsetT = 68;
  pub const VT_TOPOLOGYSPREADCONSTRAINTS: flatbuffers::VOffsetT = 70;
  pub const VT_SETHOSTNAMEASFQDN: flatbuffers::VOffsetT = 72;
  pub const VT_OS: flatbuffers::VOffsetT = 74;
  pub const VT_HOSTUSERS: flatbuffers::VOffsetT = 76;
  pub const VT_SCHEDULINGGATES: flatbuffers::VOffsetT = 78;
  pub const VT_RESOURCECLAIMS: flatbuffers::VOffsetT = 80;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PodSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PodSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<PodSpec<'bldr>> {
    let mut builder = PodSpecBuilder::new(_fbb);
    builder.add_activeDeadlineSeconds(args.activeDeadlineSeconds);
    builder.add_terminationGracePeriodSeconds(args.terminationGracePeriodSeconds);
    if let Some(x) = args.resourceClaims { builder.add_resourceClaims(x); }
    if let Some(x) = args.schedulingGates { builder.add_schedulingGates(x); }
    if let Some(x) = args.os { builder.add_os(x); }
    if let Some(x) = args.topologySpreadConstraints { builder.add_topologySpreadConstraints(x); }
    if let Some(x) = args.overhead { builder.add_overhead(x); }
    if let Some(x) = args.preemptionPolicy { builder.add_preemptionPolicy(x); }
    if let Some(x) = args.runtimeClassName { builder.add_runtimeClassName(x); }
    if let Some(x) = args.readinessGates { builder.add_readinessGates(x); }
    if let Some(x) = args.dnsConfig { builder.add_dnsConfig(x); }
    builder.add_priority(args.priority);
    if let Some(x) = args.priorityClassName { builder.add_priorityClassName(x); }
    if let Some(x) = args.hostAliases { builder.add_hostAliases(x); }
    if let Some(x) = args.tolerations { builder.add_tolerations(x); }
    if let Some(x) = args.schedulerName { builder.add_schedulerName(x); }
    if let Some(x) = args.affinity { builder.add_affinity(x); }
    if let Some(x) = args.subdomain { builder.add_subdomain(x); }
    if let Some(x) = args.hostname { builder.add_hostname(x); }
    if let Some(x) = args.imagePullSecrets { builder.add_imagePullSecrets(x); }
    if let Some(x) = args.securityContext { builder.add_securityContext(x); }
    if let Some(x) = args.nodeName { builder.add_nodeName(x); }
    if let Some(x) = args.serviceAccount { builder.add_serviceAccount(x); }
    if let Some(x) = args.serviceAccountName { builder.add_serviceAccountName(x); }
    if let Some(x) = args.nodeSelector { builder.add_nodeSelector(x); }
    if let Some(x) = args.dnsPolicy { builder.add_dnsPolicy(x); }
    if let Some(x) = args.restartPolicy { builder.add_restartPolicy(x); }
    if let Some(x) = args.ephemeralContainers { builder.add_ephemeralContainers(x); }
    if let Some(x) = args.containers { builder.add_containers(x); }
    if let Some(x) = args.initContainers { builder.add_initContainers(x); }
    if let Some(x) = args.volumes { builder.add_volumes(x); }
    builder.add_hostUsers(args.hostUsers);
    builder.add_setHostnameAsFQDN(args.setHostnameAsFQDN);
    builder.add_enableServiceLinks(args.enableServiceLinks);
    builder.add_shareProcessNamespace(args.shareProcessNamespace);
    builder.add_hostIPC(args.hostIPC);
    builder.add_hostPID(args.hostPID);
    builder.add_hostNetwork(args.hostNetwork);
    builder.add_automountServiceAccountToken(args.automountServiceAccountToken);
    builder.finish()
  }


  #[inline]
  pub fn volumes(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Volume<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Volume>>>>(PodSpec::VT_VOLUMES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn initContainers(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Container<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Container>>>>(PodSpec::VT_INITCONTAINERS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn containers(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Container<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Container>>>>(PodSpec::VT_CONTAINERS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn ephemeralContainers(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EphemeralContainer<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EphemeralContainer>>>>(PodSpec::VT_EPHEMERALCONTAINERS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn restartPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_RESTARTPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn terminationGracePeriodSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PodSpec::VT_TERMINATIONGRACEPERIODSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn activeDeadlineSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(PodSpec::VT_ACTIVEDEADLINESECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dnsPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_DNSPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn nodeSelector(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<pod_spec_::NodeSelectorEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<pod_spec_::NodeSelectorEntry>>>>(PodSpec::VT_NODESELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn serviceAccountName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_SERVICEACCOUNTNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn serviceAccount(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_SERVICEACCOUNT, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn automountServiceAccountToken(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PodSpec::VT_AUTOMOUNTSERVICEACCOUNTTOKEN, Some(false)).unwrap()}
  }
  #[inline]
  pub fn nodeName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_NODENAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn hostNetwork(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PodSpec::VT_HOSTNETWORK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn hostPID(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PodSpec::VT_HOSTPID, Some(false)).unwrap()}
  }
  #[inline]
  pub fn hostIPC(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PodSpec::VT_HOSTIPC, Some(false)).unwrap()}
  }
  #[inline]
  pub fn shareProcessNamespace(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PodSpec::VT_SHAREPROCESSNAMESPACE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn securityContext(&self) -> PodSecurityContext<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PodSecurityContext>>(PodSpec::VT_SECURITYCONTEXT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn imagePullSecrets(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LocalObjectReference<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LocalObjectReference>>>>(PodSpec::VT_IMAGEPULLSECRETS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn hostname(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_HOSTNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn subdomain(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_SUBDOMAIN, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn affinity(&self) -> Affinity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Affinity>>(PodSpec::VT_AFFINITY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn schedulerName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_SCHEDULERNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn tolerations(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Toleration<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Toleration>>>>(PodSpec::VT_TOLERATIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn hostAliases(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HostAlias<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HostAlias>>>>(PodSpec::VT_HOSTALIASES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn priorityClassName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_PRIORITYCLASSNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn priority(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PodSpec::VT_PRIORITY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn dnsConfig(&self) -> PodDNSConfig<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PodDNSConfig>>(PodSpec::VT_DNSCONFIG, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn readinessGates(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodReadinessGate<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodReadinessGate>>>>(PodSpec::VT_READINESSGATES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn runtimeClassName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_RUNTIMECLASSNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn enableServiceLinks(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PodSpec::VT_ENABLESERVICELINKS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn preemptionPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodSpec::VT_PREEMPTIONPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn overhead(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<pod_spec_::OverheadEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<pod_spec_::OverheadEntry>>>>(PodSpec::VT_OVERHEAD, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn topologySpreadConstraints(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TopologySpreadConstraint<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TopologySpreadConstraint>>>>(PodSpec::VT_TOPOLOGYSPREADCONSTRAINTS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn setHostnameAsFQDN(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PodSpec::VT_SETHOSTNAMEASFQDN, Some(false)).unwrap()}
  }
  #[inline]
  pub fn os(&self) -> PodOS<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PodOS>>(PodSpec::VT_OS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn hostUsers(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PodSpec::VT_HOSTUSERS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn schedulingGates(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodSchedulingGate<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodSchedulingGate>>>>(PodSpec::VT_SCHEDULINGGATES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resourceClaims(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodResourceClaim<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodResourceClaim>>>>(PodSpec::VT_RESOURCECLAIMS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for PodSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Volume>>>>("volumes", Self::VT_VOLUMES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Container>>>>("initContainers", Self::VT_INITCONTAINERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Container>>>>("containers", Self::VT_CONTAINERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<EphemeralContainer>>>>("ephemeralContainers", Self::VT_EPHEMERALCONTAINERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("restartPolicy", Self::VT_RESTARTPOLICY, false)?
     .visit_field::<i64>("terminationGracePeriodSeconds", Self::VT_TERMINATIONGRACEPERIODSECONDS, false)?
     .visit_field::<i64>("activeDeadlineSeconds", Self::VT_ACTIVEDEADLINESECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dnsPolicy", Self::VT_DNSPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<pod_spec_::NodeSelectorEntry>>>>("nodeSelector", Self::VT_NODESELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("serviceAccountName", Self::VT_SERVICEACCOUNTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("serviceAccount", Self::VT_SERVICEACCOUNT, false)?
     .visit_field::<bool>("automountServiceAccountToken", Self::VT_AUTOMOUNTSERVICEACCOUNTTOKEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nodeName", Self::VT_NODENAME, false)?
     .visit_field::<bool>("hostNetwork", Self::VT_HOSTNETWORK, false)?
     .visit_field::<bool>("hostPID", Self::VT_HOSTPID, false)?
     .visit_field::<bool>("hostIPC", Self::VT_HOSTIPC, false)?
     .visit_field::<bool>("shareProcessNamespace", Self::VT_SHAREPROCESSNAMESPACE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PodSecurityContext>>("securityContext", Self::VT_SECURITYCONTEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<LocalObjectReference>>>>("imagePullSecrets", Self::VT_IMAGEPULLSECRETS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hostname", Self::VT_HOSTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("subdomain", Self::VT_SUBDOMAIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Affinity>>("affinity", Self::VT_AFFINITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("schedulerName", Self::VT_SCHEDULERNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Toleration>>>>("tolerations", Self::VT_TOLERATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<HostAlias>>>>("hostAliases", Self::VT_HOSTALIASES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("priorityClassName", Self::VT_PRIORITYCLASSNAME, false)?
     .visit_field::<i32>("priority", Self::VT_PRIORITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PodDNSConfig>>("dnsConfig", Self::VT_DNSCONFIG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PodReadinessGate>>>>("readinessGates", Self::VT_READINESSGATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("runtimeClassName", Self::VT_RUNTIMECLASSNAME, false)?
     .visit_field::<bool>("enableServiceLinks", Self::VT_ENABLESERVICELINKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("preemptionPolicy", Self::VT_PREEMPTIONPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<pod_spec_::OverheadEntry>>>>("overhead", Self::VT_OVERHEAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TopologySpreadConstraint>>>>("topologySpreadConstraints", Self::VT_TOPOLOGYSPREADCONSTRAINTS, false)?
     .visit_field::<bool>("setHostnameAsFQDN", Self::VT_SETHOSTNAMEASFQDN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PodOS>>("os", Self::VT_OS, false)?
     .visit_field::<bool>("hostUsers", Self::VT_HOSTUSERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PodSchedulingGate>>>>("schedulingGates", Self::VT_SCHEDULINGGATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PodResourceClaim>>>>("resourceClaims", Self::VT_RESOURCECLAIMS, false)?
     .finish();
    Ok(())
  }
}
pub struct PodSpecArgs<'a> {
    pub volumes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Volume<'a>>>>>,
    pub initContainers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Container<'a>>>>>,
    pub containers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Container<'a>>>>>,
    pub ephemeralContainers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EphemeralContainer<'a>>>>>,
    pub restartPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub terminationGracePeriodSeconds: i64,
    pub activeDeadlineSeconds: i64,
    pub dnsPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nodeSelector: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<pod_spec_::NodeSelectorEntry<'a>>>>>,
    pub serviceAccountName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub serviceAccount: Option<flatbuffers::WIPOffset<&'a str>>,
    pub automountServiceAccountToken: bool,
    pub nodeName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hostNetwork: bool,
    pub hostPID: bool,
    pub hostIPC: bool,
    pub shareProcessNamespace: bool,
    pub securityContext: Option<flatbuffers::WIPOffset<PodSecurityContext<'a>>>,
    pub imagePullSecrets: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LocalObjectReference<'a>>>>>,
    pub hostname: Option<flatbuffers::WIPOffset<&'a str>>,
    pub subdomain: Option<flatbuffers::WIPOffset<&'a str>>,
    pub affinity: Option<flatbuffers::WIPOffset<Affinity<'a>>>,
    pub schedulerName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tolerations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Toleration<'a>>>>>,
    pub hostAliases: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HostAlias<'a>>>>>,
    pub priorityClassName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub priority: i32,
    pub dnsConfig: Option<flatbuffers::WIPOffset<PodDNSConfig<'a>>>,
    pub readinessGates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodReadinessGate<'a>>>>>,
    pub runtimeClassName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub enableServiceLinks: bool,
    pub preemptionPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub overhead: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<pod_spec_::OverheadEntry<'a>>>>>,
    pub topologySpreadConstraints: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TopologySpreadConstraint<'a>>>>>,
    pub setHostnameAsFQDN: bool,
    pub os: Option<flatbuffers::WIPOffset<PodOS<'a>>>,
    pub hostUsers: bool,
    pub schedulingGates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodSchedulingGate<'a>>>>>,
    pub resourceClaims: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodResourceClaim<'a>>>>>,
}
impl<'a> Default for PodSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    PodSpecArgs {
      volumes: None,
      initContainers: None,
      containers: None,
      ephemeralContainers: None,
      restartPolicy: None,
      terminationGracePeriodSeconds: 0,
      activeDeadlineSeconds: 0,
      dnsPolicy: None,
      nodeSelector: None,
      serviceAccountName: None,
      serviceAccount: None,
      automountServiceAccountToken: false,
      nodeName: None,
      hostNetwork: false,
      hostPID: false,
      hostIPC: false,
      shareProcessNamespace: false,
      securityContext: None,
      imagePullSecrets: None,
      hostname: None,
      subdomain: None,
      affinity: None,
      schedulerName: None,
      tolerations: None,
      hostAliases: None,
      priorityClassName: None,
      priority: 0,
      dnsConfig: None,
      readinessGates: None,
      runtimeClassName: None,
      enableServiceLinks: false,
      preemptionPolicy: None,
      overhead: None,
      topologySpreadConstraints: None,
      setHostnameAsFQDN: false,
      os: None,
      hostUsers: false,
      schedulingGates: None,
      resourceClaims: None,
    }
  }
}

impl Serialize for PodSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PodSpec", 39)?;
      s.serialize_field("volumes", &self.volumes())?;
      s.serialize_field("initContainers", &self.initContainers())?;
      s.serialize_field("containers", &self.containers())?;
      s.serialize_field("ephemeralContainers", &self.ephemeralContainers())?;
      s.serialize_field("restartPolicy", &self.restartPolicy())?;
      s.serialize_field("terminationGracePeriodSeconds", &self.terminationGracePeriodSeconds())?;
      s.serialize_field("activeDeadlineSeconds", &self.activeDeadlineSeconds())?;
      s.serialize_field("dnsPolicy", &self.dnsPolicy())?;
      s.serialize_field("nodeSelector", &self.nodeSelector())?;
      s.serialize_field("serviceAccountName", &self.serviceAccountName())?;
      s.serialize_field("serviceAccount", &self.serviceAccount())?;
      s.serialize_field("automountServiceAccountToken", &self.automountServiceAccountToken())?;
      s.serialize_field("nodeName", &self.nodeName())?;
      s.serialize_field("hostNetwork", &self.hostNetwork())?;
      s.serialize_field("hostPID", &self.hostPID())?;
      s.serialize_field("hostIPC", &self.hostIPC())?;
      s.serialize_field("shareProcessNamespace", &self.shareProcessNamespace())?;
      s.serialize_field("securityContext", &self.securityContext())?;
      s.serialize_field("imagePullSecrets", &self.imagePullSecrets())?;
      s.serialize_field("hostname", &self.hostname())?;
      s.serialize_field("subdomain", &self.subdomain())?;
      s.serialize_field("affinity", &self.affinity())?;
      s.serialize_field("schedulerName", &self.schedulerName())?;
      s.serialize_field("tolerations", &self.tolerations())?;
      s.serialize_field("hostAliases", &self.hostAliases())?;
      s.serialize_field("priorityClassName", &self.priorityClassName())?;
      s.serialize_field("priority", &self.priority())?;
      s.serialize_field("dnsConfig", &self.dnsConfig())?;
      s.serialize_field("readinessGates", &self.readinessGates())?;
      s.serialize_field("runtimeClassName", &self.runtimeClassName())?;
      s.serialize_field("enableServiceLinks", &self.enableServiceLinks())?;
      s.serialize_field("preemptionPolicy", &self.preemptionPolicy())?;
      s.serialize_field("overhead", &self.overhead())?;
      s.serialize_field("topologySpreadConstraints", &self.topologySpreadConstraints())?;
      s.serialize_field("setHostnameAsFQDN", &self.setHostnameAsFQDN())?;
      s.serialize_field("os", &self.os())?;
      s.serialize_field("hostUsers", &self.hostUsers())?;
      s.serialize_field("schedulingGates", &self.schedulingGates())?;
      s.serialize_field("resourceClaims", &self.resourceClaims())?;
    s.end()
  }
}

pub struct PodSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PodSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_volumes(&mut self, volumes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Volume<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_VOLUMES, volumes);
  }
  #[inline]
  pub fn add_initContainers(&mut self, initContainers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Container<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_INITCONTAINERS, initContainers);
  }
  #[inline]
  pub fn add_containers(&mut self, containers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Container<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_CONTAINERS, containers);
  }
  #[inline]
  pub fn add_ephemeralContainers(&mut self, ephemeralContainers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<EphemeralContainer<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_EPHEMERALCONTAINERS, ephemeralContainers);
  }
  #[inline]
  pub fn add_restartPolicy(&mut self, restartPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_RESTARTPOLICY, restartPolicy);
  }
  #[inline]
  pub fn add_terminationGracePeriodSeconds(&mut self, terminationGracePeriodSeconds: i64) {
    self.fbb_.push_slot::<i64>(PodSpec::VT_TERMINATIONGRACEPERIODSECONDS, terminationGracePeriodSeconds, 0);
  }
  #[inline]
  pub fn add_activeDeadlineSeconds(&mut self, activeDeadlineSeconds: i64) {
    self.fbb_.push_slot::<i64>(PodSpec::VT_ACTIVEDEADLINESECONDS, activeDeadlineSeconds, 0);
  }
  #[inline]
  pub fn add_dnsPolicy(&mut self, dnsPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_DNSPOLICY, dnsPolicy);
  }
  #[inline]
  pub fn add_nodeSelector(&mut self, nodeSelector: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<pod_spec_::NodeSelectorEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_NODESELECTOR, nodeSelector);
  }
  #[inline]
  pub fn add_serviceAccountName(&mut self, serviceAccountName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_SERVICEACCOUNTNAME, serviceAccountName);
  }
  #[inline]
  pub fn add_serviceAccount(&mut self, serviceAccount: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_SERVICEACCOUNT, serviceAccount);
  }
  #[inline]
  pub fn add_automountServiceAccountToken(&mut self, automountServiceAccountToken: bool) {
    self.fbb_.push_slot::<bool>(PodSpec::VT_AUTOMOUNTSERVICEACCOUNTTOKEN, automountServiceAccountToken, false);
  }
  #[inline]
  pub fn add_nodeName(&mut self, nodeName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_NODENAME, nodeName);
  }
  #[inline]
  pub fn add_hostNetwork(&mut self, hostNetwork: bool) {
    self.fbb_.push_slot::<bool>(PodSpec::VT_HOSTNETWORK, hostNetwork, false);
  }
  #[inline]
  pub fn add_hostPID(&mut self, hostPID: bool) {
    self.fbb_.push_slot::<bool>(PodSpec::VT_HOSTPID, hostPID, false);
  }
  #[inline]
  pub fn add_hostIPC(&mut self, hostIPC: bool) {
    self.fbb_.push_slot::<bool>(PodSpec::VT_HOSTIPC, hostIPC, false);
  }
  #[inline]
  pub fn add_shareProcessNamespace(&mut self, shareProcessNamespace: bool) {
    self.fbb_.push_slot::<bool>(PodSpec::VT_SHAREPROCESSNAMESPACE, shareProcessNamespace, false);
  }
  #[inline]
  pub fn add_securityContext(&mut self, securityContext: flatbuffers::WIPOffset<PodSecurityContext<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PodSecurityContext>>(PodSpec::VT_SECURITYCONTEXT, securityContext);
  }
  #[inline]
  pub fn add_imagePullSecrets(&mut self, imagePullSecrets: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<LocalObjectReference<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_IMAGEPULLSECRETS, imagePullSecrets);
  }
  #[inline]
  pub fn add_hostname(&mut self, hostname: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_HOSTNAME, hostname);
  }
  #[inline]
  pub fn add_subdomain(&mut self, subdomain: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_SUBDOMAIN, subdomain);
  }
  #[inline]
  pub fn add_affinity(&mut self, affinity: flatbuffers::WIPOffset<Affinity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Affinity>>(PodSpec::VT_AFFINITY, affinity);
  }
  #[inline]
  pub fn add_schedulerName(&mut self, schedulerName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_SCHEDULERNAME, schedulerName);
  }
  #[inline]
  pub fn add_tolerations(&mut self, tolerations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Toleration<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_TOLERATIONS, tolerations);
  }
  #[inline]
  pub fn add_hostAliases(&mut self, hostAliases: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<HostAlias<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_HOSTALIASES, hostAliases);
  }
  #[inline]
  pub fn add_priorityClassName(&mut self, priorityClassName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_PRIORITYCLASSNAME, priorityClassName);
  }
  #[inline]
  pub fn add_priority(&mut self, priority: i32) {
    self.fbb_.push_slot::<i32>(PodSpec::VT_PRIORITY, priority, 0);
  }
  #[inline]
  pub fn add_dnsConfig(&mut self, dnsConfig: flatbuffers::WIPOffset<PodDNSConfig<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PodDNSConfig>>(PodSpec::VT_DNSCONFIG, dnsConfig);
  }
  #[inline]
  pub fn add_readinessGates(&mut self, readinessGates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PodReadinessGate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_READINESSGATES, readinessGates);
  }
  #[inline]
  pub fn add_runtimeClassName(&mut self, runtimeClassName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_RUNTIMECLASSNAME, runtimeClassName);
  }
  #[inline]
  pub fn add_enableServiceLinks(&mut self, enableServiceLinks: bool) {
    self.fbb_.push_slot::<bool>(PodSpec::VT_ENABLESERVICELINKS, enableServiceLinks, false);
  }
  #[inline]
  pub fn add_preemptionPolicy(&mut self, preemptionPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_PREEMPTIONPOLICY, preemptionPolicy);
  }
  #[inline]
  pub fn add_overhead(&mut self, overhead: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<pod_spec_::OverheadEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_OVERHEAD, overhead);
  }
  #[inline]
  pub fn add_topologySpreadConstraints(&mut self, topologySpreadConstraints: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TopologySpreadConstraint<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_TOPOLOGYSPREADCONSTRAINTS, topologySpreadConstraints);
  }
  #[inline]
  pub fn add_setHostnameAsFQDN(&mut self, setHostnameAsFQDN: bool) {
    self.fbb_.push_slot::<bool>(PodSpec::VT_SETHOSTNAMEASFQDN, setHostnameAsFQDN, false);
  }
  #[inline]
  pub fn add_os(&mut self, os: flatbuffers::WIPOffset<PodOS<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PodOS>>(PodSpec::VT_OS, os);
  }
  #[inline]
  pub fn add_hostUsers(&mut self, hostUsers: bool) {
    self.fbb_.push_slot::<bool>(PodSpec::VT_HOSTUSERS, hostUsers, false);
  }
  #[inline]
  pub fn add_schedulingGates(&mut self, schedulingGates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PodSchedulingGate<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_SCHEDULINGGATES, schedulingGates);
  }
  #[inline]
  pub fn add_resourceClaims(&mut self, resourceClaims: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PodResourceClaim<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodSpec::VT_RESOURCECLAIMS, resourceClaims);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PodSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PodSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PodSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PodSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PodSpec");
      ds.field("volumes", &self.volumes());
      ds.field("initContainers", &self.initContainers());
      ds.field("containers", &self.containers());
      ds.field("ephemeralContainers", &self.ephemeralContainers());
      ds.field("restartPolicy", &self.restartPolicy());
      ds.field("terminationGracePeriodSeconds", &self.terminationGracePeriodSeconds());
      ds.field("activeDeadlineSeconds", &self.activeDeadlineSeconds());
      ds.field("dnsPolicy", &self.dnsPolicy());
      ds.field("nodeSelector", &self.nodeSelector());
      ds.field("serviceAccountName", &self.serviceAccountName());
      ds.field("serviceAccount", &self.serviceAccount());
      ds.field("automountServiceAccountToken", &self.automountServiceAccountToken());
      ds.field("nodeName", &self.nodeName());
      ds.field("hostNetwork", &self.hostNetwork());
      ds.field("hostPID", &self.hostPID());
      ds.field("hostIPC", &self.hostIPC());
      ds.field("shareProcessNamespace", &self.shareProcessNamespace());
      ds.field("securityContext", &self.securityContext());
      ds.field("imagePullSecrets", &self.imagePullSecrets());
      ds.field("hostname", &self.hostname());
      ds.field("subdomain", &self.subdomain());
      ds.field("affinity", &self.affinity());
      ds.field("schedulerName", &self.schedulerName());
      ds.field("tolerations", &self.tolerations());
      ds.field("hostAliases", &self.hostAliases());
      ds.field("priorityClassName", &self.priorityClassName());
      ds.field("priority", &self.priority());
      ds.field("dnsConfig", &self.dnsConfig());
      ds.field("readinessGates", &self.readinessGates());
      ds.field("runtimeClassName", &self.runtimeClassName());
      ds.field("enableServiceLinks", &self.enableServiceLinks());
      ds.field("preemptionPolicy", &self.preemptionPolicy());
      ds.field("overhead", &self.overhead());
      ds.field("topologySpreadConstraints", &self.topologySpreadConstraints());
      ds.field("setHostnameAsFQDN", &self.setHostnameAsFQDN());
      ds.field("os", &self.os());
      ds.field("hostUsers", &self.hostUsers());
      ds.field("schedulingGates", &self.schedulingGates());
      ds.field("resourceClaims", &self.resourceClaims());
      ds.finish()
  }
}
