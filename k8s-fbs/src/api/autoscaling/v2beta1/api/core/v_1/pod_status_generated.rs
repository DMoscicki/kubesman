// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PodStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PodStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PodStatus<'a> {
  type Inner = PodStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PodStatus<'a> {
  pub const VT_PHASE: flatbuffers::VOffsetT = 4;
  pub const VT_CONDITIONS: flatbuffers::VOffsetT = 6;
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 8;
  pub const VT_REASON: flatbuffers::VOffsetT = 10;
  pub const VT_NOMINATEDNODENAME: flatbuffers::VOffsetT = 12;
  pub const VT_HOSTIP: flatbuffers::VOffsetT = 14;
  pub const VT_HOSTIPS: flatbuffers::VOffsetT = 16;
  pub const VT_PODIP: flatbuffers::VOffsetT = 18;
  pub const VT_PODIPS: flatbuffers::VOffsetT = 20;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 22;
  pub const VT_INITCONTAINERSTATUSES: flatbuffers::VOffsetT = 24;
  pub const VT_CONTAINERSTATUSES: flatbuffers::VOffsetT = 26;
  pub const VT_QOSCLASS: flatbuffers::VOffsetT = 28;
  pub const VT_EPHEMERALCONTAINERSTATUSES: flatbuffers::VOffsetT = 30;
  pub const VT_RESIZE: flatbuffers::VOffsetT = 32;
  pub const VT_RESOURCECLAIMSTATUSES: flatbuffers::VOffsetT = 34;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PodStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PodStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<PodStatus<'bldr>> {
    let mut builder = PodStatusBuilder::new(_fbb);
    if let Some(x) = args.resourceClaimStatuses { builder.add_resourceClaimStatuses(x); }
    if let Some(x) = args.resize { builder.add_resize(x); }
    if let Some(x) = args.ephemeralContainerStatuses { builder.add_ephemeralContainerStatuses(x); }
    if let Some(x) = args.qosClass { builder.add_qosClass(x); }
    if let Some(x) = args.containerStatuses { builder.add_containerStatuses(x); }
    if let Some(x) = args.initContainerStatuses { builder.add_initContainerStatuses(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    if let Some(x) = args.podIPs { builder.add_podIPs(x); }
    if let Some(x) = args.podIP { builder.add_podIP(x); }
    if let Some(x) = args.hostIPs { builder.add_hostIPs(x); }
    if let Some(x) = args.hostIP { builder.add_hostIP(x); }
    if let Some(x) = args.nominatedNodeName { builder.add_nominatedNodeName(x); }
    if let Some(x) = args.reason { builder.add_reason(x); }
    if let Some(x) = args.message { builder.add_message(x); }
    if let Some(x) = args.conditions { builder.add_conditions(x); }
    if let Some(x) = args.phase { builder.add_phase(x); }
    builder.finish()
  }


  #[inline]
  pub fn phase(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodStatus::VT_PHASE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn conditions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodCondition<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodCondition>>>>(PodStatus::VT_CONDITIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn message(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodStatus::VT_MESSAGE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn reason(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodStatus::VT_REASON, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn nominatedNodeName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodStatus::VT_NOMINATEDNODENAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn hostIP(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodStatus::VT_HOSTIP, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn hostIPs(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HostIP<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HostIP>>>>(PodStatus::VT_HOSTIPS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn podIP(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodStatus::VT_PODIP, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn podIPs(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodIP<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodIP>>>>(PodStatus::VT_PODIPS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn startTime(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(PodStatus::VT_STARTTIME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn initContainerStatuses(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerStatus<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerStatus>>>>(PodStatus::VT_INITCONTAINERSTATUSES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn containerStatuses(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerStatus<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerStatus>>>>(PodStatus::VT_CONTAINERSTATUSES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn qosClass(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodStatus::VT_QOSCLASS, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn ephemeralContainerStatuses(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerStatus<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerStatus>>>>(PodStatus::VT_EPHEMERALCONTAINERSTATUSES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resize(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodStatus::VT_RESIZE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn resourceClaimStatuses(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodResourceClaimStatus<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodResourceClaimStatus>>>>(PodStatus::VT_RESOURCECLAIMSTATUSES, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for PodStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("phase", Self::VT_PHASE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PodCondition>>>>("conditions", Self::VT_CONDITIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("message", Self::VT_MESSAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reason", Self::VT_REASON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nominatedNodeName", Self::VT_NOMINATEDNODENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hostIP", Self::VT_HOSTIP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<HostIP>>>>("hostIPs", Self::VT_HOSTIPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("podIP", Self::VT_PODIP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PodIP>>>>("podIPs", Self::VT_PODIPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ContainerStatus>>>>("initContainerStatuses", Self::VT_INITCONTAINERSTATUSES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ContainerStatus>>>>("containerStatuses", Self::VT_CONTAINERSTATUSES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("qosClass", Self::VT_QOSCLASS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ContainerStatus>>>>("ephemeralContainerStatuses", Self::VT_EPHEMERALCONTAINERSTATUSES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resize", Self::VT_RESIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PodResourceClaimStatus>>>>("resourceClaimStatuses", Self::VT_RESOURCECLAIMSTATUSES, false)?
     .finish();
    Ok(())
  }
}
pub struct PodStatusArgs<'a> {
    pub phase: Option<flatbuffers::WIPOffset<&'a str>>,
    pub conditions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodCondition<'a>>>>>,
    pub message: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reason: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nominatedNodeName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hostIP: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hostIPs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<HostIP<'a>>>>>,
    pub podIP: Option<flatbuffers::WIPOffset<&'a str>>,
    pub podIPs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodIP<'a>>>>>,
    pub startTime: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a>>>,
    pub initContainerStatuses: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerStatus<'a>>>>>,
    pub containerStatuses: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerStatus<'a>>>>>,
    pub qosClass: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ephemeralContainerStatuses: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerStatus<'a>>>>>,
    pub resize: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resourceClaimStatuses: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodResourceClaimStatus<'a>>>>>,
}
impl<'a> Default for PodStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    PodStatusArgs {
      phase: None,
      conditions: None,
      message: None,
      reason: None,
      nominatedNodeName: None,
      hostIP: None,
      hostIPs: None,
      podIP: None,
      podIPs: None,
      startTime: None,
      initContainerStatuses: None,
      containerStatuses: None,
      qosClass: None,
      ephemeralContainerStatuses: None,
      resize: None,
      resourceClaimStatuses: None,
    }
  }
}

impl Serialize for PodStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PodStatus", 16)?;
      s.serialize_field("phase", &self.phase())?;
      s.serialize_field("conditions", &self.conditions())?;
      s.serialize_field("message", &self.message())?;
      s.serialize_field("reason", &self.reason())?;
      s.serialize_field("nominatedNodeName", &self.nominatedNodeName())?;
      s.serialize_field("hostIP", &self.hostIP())?;
      s.serialize_field("hostIPs", &self.hostIPs())?;
      s.serialize_field("podIP", &self.podIP())?;
      s.serialize_field("podIPs", &self.podIPs())?;
      s.serialize_field("startTime", &self.startTime())?;
      s.serialize_field("initContainerStatuses", &self.initContainerStatuses())?;
      s.serialize_field("containerStatuses", &self.containerStatuses())?;
      s.serialize_field("qosClass", &self.qosClass())?;
      s.serialize_field("ephemeralContainerStatuses", &self.ephemeralContainerStatuses())?;
      s.serialize_field("resize", &self.resize())?;
      s.serialize_field("resourceClaimStatuses", &self.resourceClaimStatuses())?;
    s.end()
  }
}

pub struct PodStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PodStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_phase(&mut self, phase: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_PHASE, phase);
  }
  #[inline]
  pub fn add_conditions(&mut self, conditions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PodCondition<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_CONDITIONS, conditions);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_MESSAGE, message);
  }
  #[inline]
  pub fn add_reason(&mut self, reason: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_REASON, reason);
  }
  #[inline]
  pub fn add_nominatedNodeName(&mut self, nominatedNodeName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_NOMINATEDNODENAME, nominatedNodeName);
  }
  #[inline]
  pub fn add_hostIP(&mut self, hostIP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_HOSTIP, hostIP);
  }
  #[inline]
  pub fn add_hostIPs(&mut self, hostIPs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<HostIP<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_HOSTIPS, hostIPs);
  }
  #[inline]
  pub fn add_podIP(&mut self, podIP: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_PODIP, podIP);
  }
  #[inline]
  pub fn add_podIPs(&mut self, podIPs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PodIP<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_PODIPS, podIPs);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(PodStatus::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_initContainerStatuses(&mut self, initContainerStatuses: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ContainerStatus<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_INITCONTAINERSTATUSES, initContainerStatuses);
  }
  #[inline]
  pub fn add_containerStatuses(&mut self, containerStatuses: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ContainerStatus<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_CONTAINERSTATUSES, containerStatuses);
  }
  #[inline]
  pub fn add_qosClass(&mut self, qosClass: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_QOSCLASS, qosClass);
  }
  #[inline]
  pub fn add_ephemeralContainerStatuses(&mut self, ephemeralContainerStatuses: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ContainerStatus<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_EPHEMERALCONTAINERSTATUSES, ephemeralContainerStatuses);
  }
  #[inline]
  pub fn add_resize(&mut self, resize: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_RESIZE, resize);
  }
  #[inline]
  pub fn add_resourceClaimStatuses(&mut self, resourceClaimStatuses: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PodResourceClaimStatus<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodStatus::VT_RESOURCECLAIMSTATUSES, resourceClaimStatuses);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PodStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PodStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PodStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PodStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PodStatus");
      ds.field("phase", &self.phase());
      ds.field("conditions", &self.conditions());
      ds.field("message", &self.message());
      ds.field("reason", &self.reason());
      ds.field("nominatedNodeName", &self.nominatedNodeName());
      ds.field("hostIP", &self.hostIP());
      ds.field("hostIPs", &self.hostIPs());
      ds.field("podIP", &self.podIP());
      ds.field("podIPs", &self.podIPs());
      ds.field("startTime", &self.startTime());
      ds.field("initContainerStatuses", &self.initContainerStatuses());
      ds.field("containerStatuses", &self.containerStatuses());
      ds.field("qosClass", &self.qosClass());
      ds.field("ephemeralContainerStatuses", &self.ephemeralContainerStatuses());
      ds.field("resize", &self.resize());
      ds.field("resourceClaimStatuses", &self.resourceClaimStatuses());
      ds.finish()
  }
}
