// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum HorizontalPodAutoscalerSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct HorizontalPodAutoscalerSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for HorizontalPodAutoscalerSpec<'a> {
  type Inner = HorizontalPodAutoscalerSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> HorizontalPodAutoscalerSpec<'a> {
  pub const VT_SCALETARGETREF: flatbuffers::VOffsetT = 4;
  pub const VT_MINREPLICAS: flatbuffers::VOffsetT = 6;
  pub const VT_MAXREPLICAS: flatbuffers::VOffsetT = 8;
  pub const VT_METRICS: flatbuffers::VOffsetT = 10;
  pub const VT_BEHAVIOR: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    HorizontalPodAutoscalerSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args HorizontalPodAutoscalerSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<HorizontalPodAutoscalerSpec<'bldr>> {
    let mut builder = HorizontalPodAutoscalerSpecBuilder::new(_fbb);
    if let Some(x) = args.behavior { builder.add_behavior(x); }
    if let Some(x) = args.metrics { builder.add_metrics(x); }
    builder.add_maxReplicas(args.maxReplicas);
    builder.add_minReplicas(args.minReplicas);
    if let Some(x) = args.scaleTargetRef { builder.add_scaleTargetRef(x); }
    builder.finish()
  }


  #[inline]
  pub fn scaleTargetRef(&self) -> CrossVersionObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CrossVersionObjectReference>>(HorizontalPodAutoscalerSpec::VT_SCALETARGETREF, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn minReplicas(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HorizontalPodAutoscalerSpec::VT_MINREPLICAS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn maxReplicas(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(HorizontalPodAutoscalerSpec::VT_MAXREPLICAS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn metrics(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MetricSpec<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MetricSpec>>>>(HorizontalPodAutoscalerSpec::VT_METRICS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn behavior(&self) -> HorizontalPodAutoscalerBehavior<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<HorizontalPodAutoscalerBehavior>>(HorizontalPodAutoscalerSpec::VT_BEHAVIOR, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for HorizontalPodAutoscalerSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<CrossVersionObjectReference>>("scaleTargetRef", Self::VT_SCALETARGETREF, false)?
     .visit_field::<i32>("minReplicas", Self::VT_MINREPLICAS, false)?
     .visit_field::<i32>("maxReplicas", Self::VT_MAXREPLICAS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MetricSpec>>>>("metrics", Self::VT_METRICS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<HorizontalPodAutoscalerBehavior>>("behavior", Self::VT_BEHAVIOR, false)?
     .finish();
    Ok(())
  }
}
pub struct HorizontalPodAutoscalerSpecArgs<'a> {
    pub scaleTargetRef: Option<flatbuffers::WIPOffset<CrossVersionObjectReference<'a>>>,
    pub minReplicas: i32,
    pub maxReplicas: i32,
    pub metrics: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MetricSpec<'a>>>>>,
    pub behavior: Option<flatbuffers::WIPOffset<HorizontalPodAutoscalerBehavior<'a>>>,
}
impl<'a> Default for HorizontalPodAutoscalerSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    HorizontalPodAutoscalerSpecArgs {
      scaleTargetRef: None,
      minReplicas: 0,
      maxReplicas: 0,
      metrics: None,
      behavior: None,
    }
  }
}

impl Serialize for HorizontalPodAutoscalerSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("HorizontalPodAutoscalerSpec", 5)?;
      s.serialize_field("scaleTargetRef", &self.scaleTargetRef())?;
      s.serialize_field("minReplicas", &self.minReplicas())?;
      s.serialize_field("maxReplicas", &self.maxReplicas())?;
      s.serialize_field("metrics", &self.metrics())?;
      s.serialize_field("behavior", &self.behavior())?;
    s.end()
  }
}

pub struct HorizontalPodAutoscalerSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> HorizontalPodAutoscalerSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_scaleTargetRef(&mut self, scaleTargetRef: flatbuffers::WIPOffset<CrossVersionObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CrossVersionObjectReference>>(HorizontalPodAutoscalerSpec::VT_SCALETARGETREF, scaleTargetRef);
  }
  #[inline]
  pub fn add_minReplicas(&mut self, minReplicas: i32) {
    self.fbb_.push_slot::<i32>(HorizontalPodAutoscalerSpec::VT_MINREPLICAS, minReplicas, 0);
  }
  #[inline]
  pub fn add_maxReplicas(&mut self, maxReplicas: i32) {
    self.fbb_.push_slot::<i32>(HorizontalPodAutoscalerSpec::VT_MAXREPLICAS, maxReplicas, 0);
  }
  #[inline]
  pub fn add_metrics(&mut self, metrics: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MetricSpec<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(HorizontalPodAutoscalerSpec::VT_METRICS, metrics);
  }
  #[inline]
  pub fn add_behavior(&mut self, behavior: flatbuffers::WIPOffset<HorizontalPodAutoscalerBehavior<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<HorizontalPodAutoscalerBehavior>>(HorizontalPodAutoscalerSpec::VT_BEHAVIOR, behavior);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> HorizontalPodAutoscalerSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    HorizontalPodAutoscalerSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<HorizontalPodAutoscalerSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for HorizontalPodAutoscalerSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("HorizontalPodAutoscalerSpec");
      ds.field("scaleTargetRef", &self.scaleTargetRef());
      ds.field("minReplicas", &self.minReplicas());
      ds.field("maxReplicas", &self.maxReplicas());
      ds.field("metrics", &self.metrics());
      ds.field("behavior", &self.behavior());
      ds.finish()
  }
}
