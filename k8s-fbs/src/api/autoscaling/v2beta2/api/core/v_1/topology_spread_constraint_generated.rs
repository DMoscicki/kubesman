// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum TopologySpreadConstraintOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TopologySpreadConstraint<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TopologySpreadConstraint<'a> {
  type Inner = TopologySpreadConstraint<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TopologySpreadConstraint<'a> {
  pub const VT_MAXSKEW: flatbuffers::VOffsetT = 4;
  pub const VT_TOPOLOGYKEY: flatbuffers::VOffsetT = 6;
  pub const VT_WHENUNSATISFIABLE: flatbuffers::VOffsetT = 8;
  pub const VT_LABELSELECTOR: flatbuffers::VOffsetT = 10;
  pub const VT_MINDOMAINS: flatbuffers::VOffsetT = 12;
  pub const VT_NODEAFFINITYPOLICY: flatbuffers::VOffsetT = 14;
  pub const VT_NODETAINTSPOLICY: flatbuffers::VOffsetT = 16;
  pub const VT_MATCHLABELKEYS: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TopologySpreadConstraint { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TopologySpreadConstraintArgs<'args>
  ) -> flatbuffers::WIPOffset<TopologySpreadConstraint<'bldr>> {
    let mut builder = TopologySpreadConstraintBuilder::new(_fbb);
    if let Some(x) = args.matchLabelKeys { builder.add_matchLabelKeys(x); }
    if let Some(x) = args.nodeTaintsPolicy { builder.add_nodeTaintsPolicy(x); }
    if let Some(x) = args.nodeAffinityPolicy { builder.add_nodeAffinityPolicy(x); }
    builder.add_minDomains(args.minDomains);
    if let Some(x) = args.labelSelector { builder.add_labelSelector(x); }
    if let Some(x) = args.whenUnsatisfiable { builder.add_whenUnsatisfiable(x); }
    if let Some(x) = args.topologyKey { builder.add_topologyKey(x); }
    builder.add_maxSkew(args.maxSkew);
    builder.finish()
  }


  #[inline]
  pub fn maxSkew(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(TopologySpreadConstraint::VT_MAXSKEW, Some(0)).unwrap()}
  }
  #[inline]
  pub fn topologyKey(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TopologySpreadConstraint::VT_TOPOLOGYKEY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn whenUnsatisfiable(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TopologySpreadConstraint::VT_WHENUNSATISFIABLE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn labelSelector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(TopologySpreadConstraint::VT_LABELSELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn minDomains(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(TopologySpreadConstraint::VT_MINDOMAINS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn nodeAffinityPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TopologySpreadConstraint::VT_NODEAFFINITYPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn nodeTaintsPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TopologySpreadConstraint::VT_NODETAINTSPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn matchLabelKeys(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TopologySpreadConstraint::VT_MATCHLABELKEYS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for TopologySpreadConstraint<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("maxSkew", Self::VT_MAXSKEW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("topologyKey", Self::VT_TOPOLOGYKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("whenUnsatisfiable", Self::VT_WHENUNSATISFIABLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("labelSelector", Self::VT_LABELSELECTOR, false)?
     .visit_field::<i32>("minDomains", Self::VT_MINDOMAINS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nodeAffinityPolicy", Self::VT_NODEAFFINITYPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nodeTaintsPolicy", Self::VT_NODETAINTSPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("matchLabelKeys", Self::VT_MATCHLABELKEYS, false)?
     .finish();
    Ok(())
  }
}
pub struct TopologySpreadConstraintArgs<'a> {
    pub maxSkew: i32,
    pub topologyKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub whenUnsatisfiable: Option<flatbuffers::WIPOffset<&'a str>>,
    pub labelSelector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub minDomains: i32,
    pub nodeAffinityPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nodeTaintsPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub matchLabelKeys: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for TopologySpreadConstraintArgs<'a> {
  #[inline]
  fn default() -> Self {
    TopologySpreadConstraintArgs {
      maxSkew: 0,
      topologyKey: None,
      whenUnsatisfiable: None,
      labelSelector: None,
      minDomains: 0,
      nodeAffinityPolicy: None,
      nodeTaintsPolicy: None,
      matchLabelKeys: None,
    }
  }
}

impl Serialize for TopologySpreadConstraint<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("TopologySpreadConstraint", 8)?;
      s.serialize_field("maxSkew", &self.maxSkew())?;
      s.serialize_field("topologyKey", &self.topologyKey())?;
      s.serialize_field("whenUnsatisfiable", &self.whenUnsatisfiable())?;
      s.serialize_field("labelSelector", &self.labelSelector())?;
      s.serialize_field("minDomains", &self.minDomains())?;
      s.serialize_field("nodeAffinityPolicy", &self.nodeAffinityPolicy())?;
      s.serialize_field("nodeTaintsPolicy", &self.nodeTaintsPolicy())?;
      s.serialize_field("matchLabelKeys", &self.matchLabelKeys())?;
    s.end()
  }
}

pub struct TopologySpreadConstraintBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TopologySpreadConstraintBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_maxSkew(&mut self, maxSkew: i32) {
    self.fbb_.push_slot::<i32>(TopologySpreadConstraint::VT_MAXSKEW, maxSkew, 0);
  }
  #[inline]
  pub fn add_topologyKey(&mut self, topologyKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TopologySpreadConstraint::VT_TOPOLOGYKEY, topologyKey);
  }
  #[inline]
  pub fn add_whenUnsatisfiable(&mut self, whenUnsatisfiable: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TopologySpreadConstraint::VT_WHENUNSATISFIABLE, whenUnsatisfiable);
  }
  #[inline]
  pub fn add_labelSelector(&mut self, labelSelector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(TopologySpreadConstraint::VT_LABELSELECTOR, labelSelector);
  }
  #[inline]
  pub fn add_minDomains(&mut self, minDomains: i32) {
    self.fbb_.push_slot::<i32>(TopologySpreadConstraint::VT_MINDOMAINS, minDomains, 0);
  }
  #[inline]
  pub fn add_nodeAffinityPolicy(&mut self, nodeAffinityPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TopologySpreadConstraint::VT_NODEAFFINITYPOLICY, nodeAffinityPolicy);
  }
  #[inline]
  pub fn add_nodeTaintsPolicy(&mut self, nodeTaintsPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TopologySpreadConstraint::VT_NODETAINTSPOLICY, nodeTaintsPolicy);
  }
  #[inline]
  pub fn add_matchLabelKeys(&mut self, matchLabelKeys: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TopologySpreadConstraint::VT_MATCHLABELKEYS, matchLabelKeys);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TopologySpreadConstraintBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TopologySpreadConstraintBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TopologySpreadConstraint<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TopologySpreadConstraint<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TopologySpreadConstraint");
      ds.field("maxSkew", &self.maxSkew());
      ds.field("topologyKey", &self.topologyKey());
      ds.field("whenUnsatisfiable", &self.whenUnsatisfiable());
      ds.field("labelSelector", &self.labelSelector());
      ds.field("minDomains", &self.minDomains());
      ds.field("nodeAffinityPolicy", &self.nodeAffinityPolicy());
      ds.field("nodeTaintsPolicy", &self.nodeTaintsPolicy());
      ds.field("matchLabelKeys", &self.matchLabelKeys());
      ds.finish()
  }
}
