// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum NodeSystemInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NodeSystemInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NodeSystemInfo<'a> {
  type Inner = NodeSystemInfo<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NodeSystemInfo<'a> {
  pub const VT_MACHINEID: flatbuffers::VOffsetT = 4;
  pub const VT_SYSTEMUUID: flatbuffers::VOffsetT = 6;
  pub const VT_BOOTID: flatbuffers::VOffsetT = 8;
  pub const VT_KERNELVERSION: flatbuffers::VOffsetT = 10;
  pub const VT_OSIMAGE: flatbuffers::VOffsetT = 12;
  pub const VT_CONTAINERRUNTIMEVERSION: flatbuffers::VOffsetT = 14;
  pub const VT_KUBELETVERSION: flatbuffers::VOffsetT = 16;
  pub const VT_KUBEPROXYVERSION: flatbuffers::VOffsetT = 18;
  pub const VT_OPERATINGSYSTEM: flatbuffers::VOffsetT = 20;
  pub const VT_ARCHITECTURE: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NodeSystemInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NodeSystemInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<NodeSystemInfo<'bldr>> {
    let mut builder = NodeSystemInfoBuilder::new(_fbb);
    if let Some(x) = args.architecture { builder.add_architecture(x); }
    if let Some(x) = args.operatingSystem { builder.add_operatingSystem(x); }
    if let Some(x) = args.kubeProxyVersion { builder.add_kubeProxyVersion(x); }
    if let Some(x) = args.kubeletVersion { builder.add_kubeletVersion(x); }
    if let Some(x) = args.containerRuntimeVersion { builder.add_containerRuntimeVersion(x); }
    if let Some(x) = args.osImage { builder.add_osImage(x); }
    if let Some(x) = args.kernelVersion { builder.add_kernelVersion(x); }
    if let Some(x) = args.bootID { builder.add_bootID(x); }
    if let Some(x) = args.systemUUID { builder.add_systemUUID(x); }
    if let Some(x) = args.machineID { builder.add_machineID(x); }
    builder.finish()
  }


  #[inline]
  pub fn machineID(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_MACHINEID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn systemUUID(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_SYSTEMUUID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn bootID(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_BOOTID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn kernelVersion(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_KERNELVERSION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn osImage(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_OSIMAGE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn containerRuntimeVersion(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_CONTAINERRUNTIMEVERSION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn kubeletVersion(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_KUBELETVERSION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn kubeProxyVersion(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_KUBEPROXYVERSION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn operatingSystem(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_OPERATINGSYSTEM, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn architecture(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NodeSystemInfo::VT_ARCHITECTURE, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for NodeSystemInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("machineID", Self::VT_MACHINEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("systemUUID", Self::VT_SYSTEMUUID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("bootID", Self::VT_BOOTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("kernelVersion", Self::VT_KERNELVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("osImage", Self::VT_OSIMAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("containerRuntimeVersion", Self::VT_CONTAINERRUNTIMEVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("kubeletVersion", Self::VT_KUBELETVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("kubeProxyVersion", Self::VT_KUBEPROXYVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operatingSystem", Self::VT_OPERATINGSYSTEM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("architecture", Self::VT_ARCHITECTURE, false)?
     .finish();
    Ok(())
  }
}
pub struct NodeSystemInfoArgs<'a> {
    pub machineID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub systemUUID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bootID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub kernelVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub osImage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub containerRuntimeVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub kubeletVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub kubeProxyVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operatingSystem: Option<flatbuffers::WIPOffset<&'a str>>,
    pub architecture: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for NodeSystemInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    NodeSystemInfoArgs {
      machineID: None,
      systemUUID: None,
      bootID: None,
      kernelVersion: None,
      osImage: None,
      containerRuntimeVersion: None,
      kubeletVersion: None,
      kubeProxyVersion: None,
      operatingSystem: None,
      architecture: None,
    }
  }
}

impl Serialize for NodeSystemInfo<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("NodeSystemInfo", 10)?;
      s.serialize_field("machineID", &self.machineID())?;
      s.serialize_field("systemUUID", &self.systemUUID())?;
      s.serialize_field("bootID", &self.bootID())?;
      s.serialize_field("kernelVersion", &self.kernelVersion())?;
      s.serialize_field("osImage", &self.osImage())?;
      s.serialize_field("containerRuntimeVersion", &self.containerRuntimeVersion())?;
      s.serialize_field("kubeletVersion", &self.kubeletVersion())?;
      s.serialize_field("kubeProxyVersion", &self.kubeProxyVersion())?;
      s.serialize_field("operatingSystem", &self.operatingSystem())?;
      s.serialize_field("architecture", &self.architecture())?;
    s.end()
  }
}

pub struct NodeSystemInfoBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NodeSystemInfoBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_machineID(&mut self, machineID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_MACHINEID, machineID);
  }
  #[inline]
  pub fn add_systemUUID(&mut self, systemUUID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_SYSTEMUUID, systemUUID);
  }
  #[inline]
  pub fn add_bootID(&mut self, bootID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_BOOTID, bootID);
  }
  #[inline]
  pub fn add_kernelVersion(&mut self, kernelVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_KERNELVERSION, kernelVersion);
  }
  #[inline]
  pub fn add_osImage(&mut self, osImage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_OSIMAGE, osImage);
  }
  #[inline]
  pub fn add_containerRuntimeVersion(&mut self, containerRuntimeVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_CONTAINERRUNTIMEVERSION, containerRuntimeVersion);
  }
  #[inline]
  pub fn add_kubeletVersion(&mut self, kubeletVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_KUBELETVERSION, kubeletVersion);
  }
  #[inline]
  pub fn add_kubeProxyVersion(&mut self, kubeProxyVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_KUBEPROXYVERSION, kubeProxyVersion);
  }
  #[inline]
  pub fn add_operatingSystem(&mut self, operatingSystem: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_OPERATINGSYSTEM, operatingSystem);
  }
  #[inline]
  pub fn add_architecture(&mut self, architecture: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NodeSystemInfo::VT_ARCHITECTURE, architecture);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NodeSystemInfoBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NodeSystemInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NodeSystemInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NodeSystemInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NodeSystemInfo");
      ds.field("machineID", &self.machineID());
      ds.field("systemUUID", &self.systemUUID());
      ds.field("bootID", &self.bootID());
      ds.field("kernelVersion", &self.kernelVersion());
      ds.field("osImage", &self.osImage());
      ds.field("containerRuntimeVersion", &self.containerRuntimeVersion());
      ds.field("kubeletVersion", &self.kubeletVersion());
      ds.field("kubeProxyVersion", &self.kubeProxyVersion());
      ds.field("operatingSystem", &self.operatingSystem());
      ds.field("architecture", &self.architecture());
      ds.finish()
  }
}
