// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ListOptionsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ListOptions<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ListOptions<'a> {
  type Inner = ListOptions<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ListOptions<'a> {
  pub const VT_LABELSELECTOR: flatbuffers::VOffsetT = 4;
  pub const VT_FIELDSELECTOR: flatbuffers::VOffsetT = 6;
  pub const VT_WATCH: flatbuffers::VOffsetT = 8;
  pub const VT_ALLOWWATCHBOOKMARKS: flatbuffers::VOffsetT = 10;
  pub const VT_RESOURCEVERSION: flatbuffers::VOffsetT = 12;
  pub const VT_RESOURCEVERSIONMATCH: flatbuffers::VOffsetT = 14;
  pub const VT_TIMEOUTSECONDS: flatbuffers::VOffsetT = 16;
  pub const VT_LIMIT: flatbuffers::VOffsetT = 18;
  pub const VT_CONTINUE_: flatbuffers::VOffsetT = 20;
  pub const VT_SENDINITIALEVENTS: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ListOptions { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ListOptionsArgs<'args>
  ) -> flatbuffers::WIPOffset<ListOptions<'bldr>> {
    let mut builder = ListOptionsBuilder::new(_fbb);
    builder.add_limit(args.limit);
    builder.add_timeoutSeconds(args.timeoutSeconds);
    if let Some(x) = args.continue_ { builder.add_continue_(x); }
    if let Some(x) = args.resourceVersionMatch { builder.add_resourceVersionMatch(x); }
    if let Some(x) = args.resourceVersion { builder.add_resourceVersion(x); }
    if let Some(x) = args.fieldSelector { builder.add_fieldSelector(x); }
    if let Some(x) = args.labelSelector { builder.add_labelSelector(x); }
    builder.add_sendInitialEvents(args.sendInitialEvents);
    builder.add_allowWatchBookmarks(args.allowWatchBookmarks);
    builder.add_watch(args.watch);
    builder.finish()
  }


  #[inline]
  pub fn labelSelector(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ListOptions::VT_LABELSELECTOR, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn fieldSelector(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ListOptions::VT_FIELDSELECTOR, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn watch(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ListOptions::VT_WATCH, Some(false)).unwrap()}
  }
  #[inline]
  pub fn allowWatchBookmarks(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ListOptions::VT_ALLOWWATCHBOOKMARKS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn resourceVersion(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ListOptions::VT_RESOURCEVERSION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn resourceVersionMatch(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ListOptions::VT_RESOURCEVERSIONMATCH, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn timeoutSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ListOptions::VT_TIMEOUTSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn limit(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ListOptions::VT_LIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn continue_(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ListOptions::VT_CONTINUE_, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn sendInitialEvents(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ListOptions::VT_SENDINITIALEVENTS, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ListOptions<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("labelSelector", Self::VT_LABELSELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fieldSelector", Self::VT_FIELDSELECTOR, false)?
     .visit_field::<bool>("watch", Self::VT_WATCH, false)?
     .visit_field::<bool>("allowWatchBookmarks", Self::VT_ALLOWWATCHBOOKMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resourceVersion", Self::VT_RESOURCEVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resourceVersionMatch", Self::VT_RESOURCEVERSIONMATCH, false)?
     .visit_field::<i64>("timeoutSeconds", Self::VT_TIMEOUTSECONDS, false)?
     .visit_field::<i64>("limit", Self::VT_LIMIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("continue_", Self::VT_CONTINUE_, false)?
     .visit_field::<bool>("sendInitialEvents", Self::VT_SENDINITIALEVENTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ListOptionsArgs<'a> {
    pub labelSelector: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fieldSelector: Option<flatbuffers::WIPOffset<&'a str>>,
    pub watch: bool,
    pub allowWatchBookmarks: bool,
    pub resourceVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resourceVersionMatch: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timeoutSeconds: i64,
    pub limit: i64,
    pub continue_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sendInitialEvents: bool,
}
impl<'a> Default for ListOptionsArgs<'a> {
  #[inline]
  fn default() -> Self {
    ListOptionsArgs {
      labelSelector: None,
      fieldSelector: None,
      watch: false,
      allowWatchBookmarks: false,
      resourceVersion: None,
      resourceVersionMatch: None,
      timeoutSeconds: 0,
      limit: 0,
      continue_: None,
      sendInitialEvents: false,
    }
  }
}

impl Serialize for ListOptions<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ListOptions", 10)?;
      s.serialize_field("labelSelector", &self.labelSelector())?;
      s.serialize_field("fieldSelector", &self.fieldSelector())?;
      s.serialize_field("watch", &self.watch())?;
      s.serialize_field("allowWatchBookmarks", &self.allowWatchBookmarks())?;
      s.serialize_field("resourceVersion", &self.resourceVersion())?;
      s.serialize_field("resourceVersionMatch", &self.resourceVersionMatch())?;
      s.serialize_field("timeoutSeconds", &self.timeoutSeconds())?;
      s.serialize_field("limit", &self.limit())?;
      s.serialize_field("continue_", &self.continue_())?;
      s.serialize_field("sendInitialEvents", &self.sendInitialEvents())?;
    s.end()
  }
}

pub struct ListOptionsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ListOptionsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_labelSelector(&mut self, labelSelector: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ListOptions::VT_LABELSELECTOR, labelSelector);
  }
  #[inline]
  pub fn add_fieldSelector(&mut self, fieldSelector: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ListOptions::VT_FIELDSELECTOR, fieldSelector);
  }
  #[inline]
  pub fn add_watch(&mut self, watch: bool) {
    self.fbb_.push_slot::<bool>(ListOptions::VT_WATCH, watch, false);
  }
  #[inline]
  pub fn add_allowWatchBookmarks(&mut self, allowWatchBookmarks: bool) {
    self.fbb_.push_slot::<bool>(ListOptions::VT_ALLOWWATCHBOOKMARKS, allowWatchBookmarks, false);
  }
  #[inline]
  pub fn add_resourceVersion(&mut self, resourceVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ListOptions::VT_RESOURCEVERSION, resourceVersion);
  }
  #[inline]
  pub fn add_resourceVersionMatch(&mut self, resourceVersionMatch: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ListOptions::VT_RESOURCEVERSIONMATCH, resourceVersionMatch);
  }
  #[inline]
  pub fn add_timeoutSeconds(&mut self, timeoutSeconds: i64) {
    self.fbb_.push_slot::<i64>(ListOptions::VT_TIMEOUTSECONDS, timeoutSeconds, 0);
  }
  #[inline]
  pub fn add_limit(&mut self, limit: i64) {
    self.fbb_.push_slot::<i64>(ListOptions::VT_LIMIT, limit, 0);
  }
  #[inline]
  pub fn add_continue_(&mut self, continue_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ListOptions::VT_CONTINUE_, continue_);
  }
  #[inline]
  pub fn add_sendInitialEvents(&mut self, sendInitialEvents: bool) {
    self.fbb_.push_slot::<bool>(ListOptions::VT_SENDINITIALEVENTS, sendInitialEvents, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ListOptionsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ListOptionsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ListOptions<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ListOptions<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ListOptions");
      ds.field("labelSelector", &self.labelSelector());
      ds.field("fieldSelector", &self.fieldSelector());
      ds.field("watch", &self.watch());
      ds.field("allowWatchBookmarks", &self.allowWatchBookmarks());
      ds.field("resourceVersion", &self.resourceVersion());
      ds.field("resourceVersionMatch", &self.resourceVersionMatch());
      ds.field("timeoutSeconds", &self.timeoutSeconds());
      ds.field("limit", &self.limit());
      ds.field("continue_", &self.continue_());
      ds.field("sendInitialEvents", &self.sendInitialEvents());
      ds.finish()
  }
}
