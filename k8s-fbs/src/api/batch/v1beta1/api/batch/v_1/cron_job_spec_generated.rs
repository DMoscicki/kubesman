// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CronJobSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CronJobSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CronJobSpec<'a> {
  type Inner = CronJobSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CronJobSpec<'a> {
  pub const VT_SCHEDULE: flatbuffers::VOffsetT = 4;
  pub const VT_TIMEZONE: flatbuffers::VOffsetT = 6;
  pub const VT_STARTINGDEADLINESECONDS: flatbuffers::VOffsetT = 8;
  pub const VT_CONCURRENCYPOLICY: flatbuffers::VOffsetT = 10;
  pub const VT_SUSPEND: flatbuffers::VOffsetT = 12;
  pub const VT_JOBTEMPLATE: flatbuffers::VOffsetT = 14;
  pub const VT_SUCCESSFULJOBSHISTORYLIMIT: flatbuffers::VOffsetT = 16;
  pub const VT_FAILEDJOBSHISTORYLIMIT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CronJobSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CronJobSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<CronJobSpec<'bldr>> {
    let mut builder = CronJobSpecBuilder::new(_fbb);
    builder.add_startingDeadlineSeconds(args.startingDeadlineSeconds);
    builder.add_failedJobsHistoryLimit(args.failedJobsHistoryLimit);
    builder.add_successfulJobsHistoryLimit(args.successfulJobsHistoryLimit);
    if let Some(x) = args.jobTemplate { builder.add_jobTemplate(x); }
    if let Some(x) = args.concurrencyPolicy { builder.add_concurrencyPolicy(x); }
    if let Some(x) = args.timeZone { builder.add_timeZone(x); }
    if let Some(x) = args.schedule { builder.add_schedule(x); }
    builder.add_suspend(args.suspend);
    builder.finish()
  }


  #[inline]
  pub fn schedule(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CronJobSpec::VT_SCHEDULE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn timeZone(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CronJobSpec::VT_TIMEZONE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn startingDeadlineSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CronJobSpec::VT_STARTINGDEADLINESECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn concurrencyPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CronJobSpec::VT_CONCURRENCYPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn suspend(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CronJobSpec::VT_SUSPEND, Some(false)).unwrap()}
  }
  #[inline]
  pub fn jobTemplate(&self) -> JobTemplateSpec<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<JobTemplateSpec>>(CronJobSpec::VT_JOBTEMPLATE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn successfulJobsHistoryLimit(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CronJobSpec::VT_SUCCESSFULJOBSHISTORYLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn failedJobsHistoryLimit(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CronJobSpec::VT_FAILEDJOBSHISTORYLIMIT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CronJobSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("schedule", Self::VT_SCHEDULE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("timeZone", Self::VT_TIMEZONE, false)?
     .visit_field::<i64>("startingDeadlineSeconds", Self::VT_STARTINGDEADLINESECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("concurrencyPolicy", Self::VT_CONCURRENCYPOLICY, false)?
     .visit_field::<bool>("suspend", Self::VT_SUSPEND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<JobTemplateSpec>>("jobTemplate", Self::VT_JOBTEMPLATE, false)?
     .visit_field::<i32>("successfulJobsHistoryLimit", Self::VT_SUCCESSFULJOBSHISTORYLIMIT, false)?
     .visit_field::<i32>("failedJobsHistoryLimit", Self::VT_FAILEDJOBSHISTORYLIMIT, false)?
     .finish();
    Ok(())
  }
}
pub struct CronJobSpecArgs<'a> {
    pub schedule: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timeZone: Option<flatbuffers::WIPOffset<&'a str>>,
    pub startingDeadlineSeconds: i64,
    pub concurrencyPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub suspend: bool,
    pub jobTemplate: Option<flatbuffers::WIPOffset<JobTemplateSpec<'a>>>,
    pub successfulJobsHistoryLimit: i32,
    pub failedJobsHistoryLimit: i32,
}
impl<'a> Default for CronJobSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    CronJobSpecArgs {
      schedule: None,
      timeZone: None,
      startingDeadlineSeconds: 0,
      concurrencyPolicy: None,
      suspend: false,
      jobTemplate: None,
      successfulJobsHistoryLimit: 0,
      failedJobsHistoryLimit: 0,
    }
  }
}

impl Serialize for CronJobSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CronJobSpec", 8)?;
      s.serialize_field("schedule", &self.schedule())?;
      s.serialize_field("timeZone", &self.timeZone())?;
      s.serialize_field("startingDeadlineSeconds", &self.startingDeadlineSeconds())?;
      s.serialize_field("concurrencyPolicy", &self.concurrencyPolicy())?;
      s.serialize_field("suspend", &self.suspend())?;
      s.serialize_field("jobTemplate", &self.jobTemplate())?;
      s.serialize_field("successfulJobsHistoryLimit", &self.successfulJobsHistoryLimit())?;
      s.serialize_field("failedJobsHistoryLimit", &self.failedJobsHistoryLimit())?;
    s.end()
  }
}

pub struct CronJobSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CronJobSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_schedule(&mut self, schedule: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CronJobSpec::VT_SCHEDULE, schedule);
  }
  #[inline]
  pub fn add_timeZone(&mut self, timeZone: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CronJobSpec::VT_TIMEZONE, timeZone);
  }
  #[inline]
  pub fn add_startingDeadlineSeconds(&mut self, startingDeadlineSeconds: i64) {
    self.fbb_.push_slot::<i64>(CronJobSpec::VT_STARTINGDEADLINESECONDS, startingDeadlineSeconds, 0);
  }
  #[inline]
  pub fn add_concurrencyPolicy(&mut self, concurrencyPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CronJobSpec::VT_CONCURRENCYPOLICY, concurrencyPolicy);
  }
  #[inline]
  pub fn add_suspend(&mut self, suspend: bool) {
    self.fbb_.push_slot::<bool>(CronJobSpec::VT_SUSPEND, suspend, false);
  }
  #[inline]
  pub fn add_jobTemplate(&mut self, jobTemplate: flatbuffers::WIPOffset<JobTemplateSpec<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<JobTemplateSpec>>(CronJobSpec::VT_JOBTEMPLATE, jobTemplate);
  }
  #[inline]
  pub fn add_successfulJobsHistoryLimit(&mut self, successfulJobsHistoryLimit: i32) {
    self.fbb_.push_slot::<i32>(CronJobSpec::VT_SUCCESSFULJOBSHISTORYLIMIT, successfulJobsHistoryLimit, 0);
  }
  #[inline]
  pub fn add_failedJobsHistoryLimit(&mut self, failedJobsHistoryLimit: i32) {
    self.fbb_.push_slot::<i32>(CronJobSpec::VT_FAILEDJOBSHISTORYLIMIT, failedJobsHistoryLimit, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CronJobSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CronJobSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CronJobSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CronJobSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CronJobSpec");
      ds.field("schedule", &self.schedule());
      ds.field("timeZone", &self.timeZone());
      ds.field("startingDeadlineSeconds", &self.startingDeadlineSeconds());
      ds.field("concurrencyPolicy", &self.concurrencyPolicy());
      ds.field("suspend", &self.suspend());
      ds.field("jobTemplate", &self.jobTemplate());
      ds.field("successfulJobsHistoryLimit", &self.successfulJobsHistoryLimit());
      ds.field("failedJobsHistoryLimit", &self.failedJobsHistoryLimit());
      ds.finish()
  }
}
