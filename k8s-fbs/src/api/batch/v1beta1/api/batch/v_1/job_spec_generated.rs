// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum JobSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JobSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JobSpec<'a> {
  type Inner = JobSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JobSpec<'a> {
  pub const VT_PARALLELISM: flatbuffers::VOffsetT = 4;
  pub const VT_COMPLETIONS: flatbuffers::VOffsetT = 6;
  pub const VT_ACTIVEDEADLINESECONDS: flatbuffers::VOffsetT = 8;
  pub const VT_PODFAILUREPOLICY: flatbuffers::VOffsetT = 10;
  pub const VT_SUCCESSPOLICY: flatbuffers::VOffsetT = 12;
  pub const VT_BACKOFFLIMIT: flatbuffers::VOffsetT = 14;
  pub const VT_BACKOFFLIMITPERINDEX: flatbuffers::VOffsetT = 16;
  pub const VT_MAXFAILEDINDEXES: flatbuffers::VOffsetT = 18;
  pub const VT_SELECTOR: flatbuffers::VOffsetT = 20;
  pub const VT_MANUALSELECTOR: flatbuffers::VOffsetT = 22;
  pub const VT_TEMPLATE: flatbuffers::VOffsetT = 24;
  pub const VT_TTLSECONDSAFTERFINISHED: flatbuffers::VOffsetT = 26;
  pub const VT_COMPLETIONMODE: flatbuffers::VOffsetT = 28;
  pub const VT_SUSPEND: flatbuffers::VOffsetT = 30;
  pub const VT_PODREPLACEMENTPOLICY: flatbuffers::VOffsetT = 32;
  pub const VT_MANAGEDBY: flatbuffers::VOffsetT = 34;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JobSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args JobSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<JobSpec<'bldr>> {
    let mut builder = JobSpecBuilder::new(_fbb);
    builder.add_activeDeadlineSeconds(args.activeDeadlineSeconds);
    if let Some(x) = args.managedBy { builder.add_managedBy(x); }
    if let Some(x) = args.podReplacementPolicy { builder.add_podReplacementPolicy(x); }
    if let Some(x) = args.completionMode { builder.add_completionMode(x); }
    builder.add_ttlSecondsAfterFinished(args.ttlSecondsAfterFinished);
    if let Some(x) = args.template { builder.add_template(x); }
    if let Some(x) = args.selector { builder.add_selector(x); }
    builder.add_maxFailedIndexes(args.maxFailedIndexes);
    builder.add_backoffLimitPerIndex(args.backoffLimitPerIndex);
    builder.add_backoffLimit(args.backoffLimit);
    if let Some(x) = args.successPolicy { builder.add_successPolicy(x); }
    if let Some(x) = args.podFailurePolicy { builder.add_podFailurePolicy(x); }
    builder.add_completions(args.completions);
    builder.add_parallelism(args.parallelism);
    builder.add_suspend(args.suspend);
    builder.add_manualSelector(args.manualSelector);
    builder.finish()
  }


  #[inline]
  pub fn parallelism(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobSpec::VT_PARALLELISM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn completions(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobSpec::VT_COMPLETIONS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn activeDeadlineSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JobSpec::VT_ACTIVEDEADLINESECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn podFailurePolicy(&self) -> PodFailurePolicy<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PodFailurePolicy>>(JobSpec::VT_PODFAILUREPOLICY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn successPolicy(&self) -> SuccessPolicy<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SuccessPolicy>>(JobSpec::VT_SUCCESSPOLICY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn backoffLimit(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobSpec::VT_BACKOFFLIMIT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn backoffLimitPerIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobSpec::VT_BACKOFFLIMITPERINDEX, Some(0)).unwrap()}
  }
  #[inline]
  pub fn maxFailedIndexes(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobSpec::VT_MAXFAILEDINDEXES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn selector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(JobSpec::VT_SELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn manualSelector(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JobSpec::VT_MANUALSELECTOR, Some(false)).unwrap()}
  }
  #[inline]
  pub fn template(&self) -> super::super::core::v_1::PodTemplateSpec<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::core::v_1::PodTemplateSpec>>(JobSpec::VT_TEMPLATE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn ttlSecondsAfterFinished(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobSpec::VT_TTLSECONDSAFTERFINISHED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn completionMode(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JobSpec::VT_COMPLETIONMODE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn suspend(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JobSpec::VT_SUSPEND, Some(false)).unwrap()}
  }
  #[inline]
  pub fn podReplacementPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JobSpec::VT_PODREPLACEMENTPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn managedBy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JobSpec::VT_MANAGEDBY, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for JobSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("parallelism", Self::VT_PARALLELISM, false)?
     .visit_field::<i32>("completions", Self::VT_COMPLETIONS, false)?
     .visit_field::<i64>("activeDeadlineSeconds", Self::VT_ACTIVEDEADLINESECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PodFailurePolicy>>("podFailurePolicy", Self::VT_PODFAILUREPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SuccessPolicy>>("successPolicy", Self::VT_SUCCESSPOLICY, false)?
     .visit_field::<i32>("backoffLimit", Self::VT_BACKOFFLIMIT, false)?
     .visit_field::<i32>("backoffLimitPerIndex", Self::VT_BACKOFFLIMITPERINDEX, false)?
     .visit_field::<i32>("maxFailedIndexes", Self::VT_MAXFAILEDINDEXES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("selector", Self::VT_SELECTOR, false)?
     .visit_field::<bool>("manualSelector", Self::VT_MANUALSELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::core::v_1::PodTemplateSpec>>("template", Self::VT_TEMPLATE, false)?
     .visit_field::<i32>("ttlSecondsAfterFinished", Self::VT_TTLSECONDSAFTERFINISHED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("completionMode", Self::VT_COMPLETIONMODE, false)?
     .visit_field::<bool>("suspend", Self::VT_SUSPEND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("podReplacementPolicy", Self::VT_PODREPLACEMENTPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("managedBy", Self::VT_MANAGEDBY, false)?
     .finish();
    Ok(())
  }
}
pub struct JobSpecArgs<'a> {
    pub parallelism: i32,
    pub completions: i32,
    pub activeDeadlineSeconds: i64,
    pub podFailurePolicy: Option<flatbuffers::WIPOffset<PodFailurePolicy<'a>>>,
    pub successPolicy: Option<flatbuffers::WIPOffset<SuccessPolicy<'a>>>,
    pub backoffLimit: i32,
    pub backoffLimitPerIndex: i32,
    pub maxFailedIndexes: i32,
    pub selector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub manualSelector: bool,
    pub template: Option<flatbuffers::WIPOffset<super::super::core::v_1::PodTemplateSpec<'a>>>,
    pub ttlSecondsAfterFinished: i32,
    pub completionMode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub suspend: bool,
    pub podReplacementPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub managedBy: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for JobSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    JobSpecArgs {
      parallelism: 0,
      completions: 0,
      activeDeadlineSeconds: 0,
      podFailurePolicy: None,
      successPolicy: None,
      backoffLimit: 0,
      backoffLimitPerIndex: 0,
      maxFailedIndexes: 0,
      selector: None,
      manualSelector: false,
      template: None,
      ttlSecondsAfterFinished: 0,
      completionMode: None,
      suspend: false,
      podReplacementPolicy: None,
      managedBy: None,
    }
  }
}

impl Serialize for JobSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("JobSpec", 16)?;
      s.serialize_field("parallelism", &self.parallelism())?;
      s.serialize_field("completions", &self.completions())?;
      s.serialize_field("activeDeadlineSeconds", &self.activeDeadlineSeconds())?;
      s.serialize_field("podFailurePolicy", &self.podFailurePolicy())?;
      s.serialize_field("successPolicy", &self.successPolicy())?;
      s.serialize_field("backoffLimit", &self.backoffLimit())?;
      s.serialize_field("backoffLimitPerIndex", &self.backoffLimitPerIndex())?;
      s.serialize_field("maxFailedIndexes", &self.maxFailedIndexes())?;
      s.serialize_field("selector", &self.selector())?;
      s.serialize_field("manualSelector", &self.manualSelector())?;
      s.serialize_field("template", &self.template())?;
      s.serialize_field("ttlSecondsAfterFinished", &self.ttlSecondsAfterFinished())?;
      s.serialize_field("completionMode", &self.completionMode())?;
      s.serialize_field("suspend", &self.suspend())?;
      s.serialize_field("podReplacementPolicy", &self.podReplacementPolicy())?;
      s.serialize_field("managedBy", &self.managedBy())?;
    s.end()
  }
}

pub struct JobSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> JobSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_parallelism(&mut self, parallelism: i32) {
    self.fbb_.push_slot::<i32>(JobSpec::VT_PARALLELISM, parallelism, 0);
  }
  #[inline]
  pub fn add_completions(&mut self, completions: i32) {
    self.fbb_.push_slot::<i32>(JobSpec::VT_COMPLETIONS, completions, 0);
  }
  #[inline]
  pub fn add_activeDeadlineSeconds(&mut self, activeDeadlineSeconds: i64) {
    self.fbb_.push_slot::<i64>(JobSpec::VT_ACTIVEDEADLINESECONDS, activeDeadlineSeconds, 0);
  }
  #[inline]
  pub fn add_podFailurePolicy(&mut self, podFailurePolicy: flatbuffers::WIPOffset<PodFailurePolicy<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PodFailurePolicy>>(JobSpec::VT_PODFAILUREPOLICY, podFailurePolicy);
  }
  #[inline]
  pub fn add_successPolicy(&mut self, successPolicy: flatbuffers::WIPOffset<SuccessPolicy<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SuccessPolicy>>(JobSpec::VT_SUCCESSPOLICY, successPolicy);
  }
  #[inline]
  pub fn add_backoffLimit(&mut self, backoffLimit: i32) {
    self.fbb_.push_slot::<i32>(JobSpec::VT_BACKOFFLIMIT, backoffLimit, 0);
  }
  #[inline]
  pub fn add_backoffLimitPerIndex(&mut self, backoffLimitPerIndex: i32) {
    self.fbb_.push_slot::<i32>(JobSpec::VT_BACKOFFLIMITPERINDEX, backoffLimitPerIndex, 0);
  }
  #[inline]
  pub fn add_maxFailedIndexes(&mut self, maxFailedIndexes: i32) {
    self.fbb_.push_slot::<i32>(JobSpec::VT_MAXFAILEDINDEXES, maxFailedIndexes, 0);
  }
  #[inline]
  pub fn add_selector(&mut self, selector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(JobSpec::VT_SELECTOR, selector);
  }
  #[inline]
  pub fn add_manualSelector(&mut self, manualSelector: bool) {
    self.fbb_.push_slot::<bool>(JobSpec::VT_MANUALSELECTOR, manualSelector, false);
  }
  #[inline]
  pub fn add_template(&mut self, template: flatbuffers::WIPOffset<super::super::core::v_1::PodTemplateSpec<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::core::v_1::PodTemplateSpec>>(JobSpec::VT_TEMPLATE, template);
  }
  #[inline]
  pub fn add_ttlSecondsAfterFinished(&mut self, ttlSecondsAfterFinished: i32) {
    self.fbb_.push_slot::<i32>(JobSpec::VT_TTLSECONDSAFTERFINISHED, ttlSecondsAfterFinished, 0);
  }
  #[inline]
  pub fn add_completionMode(&mut self, completionMode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JobSpec::VT_COMPLETIONMODE, completionMode);
  }
  #[inline]
  pub fn add_suspend(&mut self, suspend: bool) {
    self.fbb_.push_slot::<bool>(JobSpec::VT_SUSPEND, suspend, false);
  }
  #[inline]
  pub fn add_podReplacementPolicy(&mut self, podReplacementPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JobSpec::VT_PODREPLACEMENTPOLICY, podReplacementPolicy);
  }
  #[inline]
  pub fn add_managedBy(&mut self, managedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JobSpec::VT_MANAGEDBY, managedBy);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> JobSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    JobSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JobSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JobSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JobSpec");
      ds.field("parallelism", &self.parallelism());
      ds.field("completions", &self.completions());
      ds.field("activeDeadlineSeconds", &self.activeDeadlineSeconds());
      ds.field("podFailurePolicy", &self.podFailurePolicy());
      ds.field("successPolicy", &self.successPolicy());
      ds.field("backoffLimit", &self.backoffLimit());
      ds.field("backoffLimitPerIndex", &self.backoffLimitPerIndex());
      ds.field("maxFailedIndexes", &self.maxFailedIndexes());
      ds.field("selector", &self.selector());
      ds.field("manualSelector", &self.manualSelector());
      ds.field("template", &self.template());
      ds.field("ttlSecondsAfterFinished", &self.ttlSecondsAfterFinished());
      ds.field("completionMode", &self.completionMode());
      ds.field("suspend", &self.suspend());
      ds.field("podReplacementPolicy", &self.podReplacementPolicy());
      ds.field("managedBy", &self.managedBy());
      ds.finish()
  }
}
