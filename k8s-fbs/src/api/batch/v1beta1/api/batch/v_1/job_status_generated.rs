// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum JobStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JobStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JobStatus<'a> {
  type Inner = JobStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JobStatus<'a> {
  pub const VT_CONDITIONS: flatbuffers::VOffsetT = 4;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 6;
  pub const VT_COMPLETIONTIME: flatbuffers::VOffsetT = 8;
  pub const VT_ACTIVE: flatbuffers::VOffsetT = 10;
  pub const VT_SUCCEEDED: flatbuffers::VOffsetT = 12;
  pub const VT_FAILED: flatbuffers::VOffsetT = 14;
  pub const VT_TERMINATING: flatbuffers::VOffsetT = 16;
  pub const VT_COMPLETEDINDEXES: flatbuffers::VOffsetT = 18;
  pub const VT_FAILEDINDEXES: flatbuffers::VOffsetT = 20;
  pub const VT_UNCOUNTEDTERMINATEDPODS: flatbuffers::VOffsetT = 22;
  pub const VT_READY: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JobStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args JobStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<JobStatus<'bldr>> {
    let mut builder = JobStatusBuilder::new(_fbb);
    builder.add_ready(args.ready);
    if let Some(x) = args.uncountedTerminatedPods { builder.add_uncountedTerminatedPods(x); }
    if let Some(x) = args.failedIndexes { builder.add_failedIndexes(x); }
    if let Some(x) = args.completedIndexes { builder.add_completedIndexes(x); }
    builder.add_terminating(args.terminating);
    builder.add_failed(args.failed);
    builder.add_succeeded(args.succeeded);
    builder.add_active(args.active);
    if let Some(x) = args.completionTime { builder.add_completionTime(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    if let Some(x) = args.conditions { builder.add_conditions(x); }
    builder.finish()
  }


  #[inline]
  pub fn conditions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JobCondition<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JobCondition>>>>(JobStatus::VT_CONDITIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn startTime(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(JobStatus::VT_STARTTIME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn completionTime(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(JobStatus::VT_COMPLETIONTIME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn active(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobStatus::VT_ACTIVE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn succeeded(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobStatus::VT_SUCCEEDED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn failed(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobStatus::VT_FAILED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn terminating(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobStatus::VT_TERMINATING, Some(0)).unwrap()}
  }
  #[inline]
  pub fn completedIndexes(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JobStatus::VT_COMPLETEDINDEXES, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn failedIndexes(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JobStatus::VT_FAILEDINDEXES, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn uncountedTerminatedPods(&self) -> UncountedTerminatedPods<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<UncountedTerminatedPods>>(JobStatus::VT_UNCOUNTEDTERMINATEDPODS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn ready(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(JobStatus::VT_READY, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for JobStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JobCondition>>>>("conditions", Self::VT_CONDITIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>("completionTime", Self::VT_COMPLETIONTIME, false)?
     .visit_field::<i32>("active", Self::VT_ACTIVE, false)?
     .visit_field::<i32>("succeeded", Self::VT_SUCCEEDED, false)?
     .visit_field::<i32>("failed", Self::VT_FAILED, false)?
     .visit_field::<i32>("terminating", Self::VT_TERMINATING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("completedIndexes", Self::VT_COMPLETEDINDEXES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("failedIndexes", Self::VT_FAILEDINDEXES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<UncountedTerminatedPods>>("uncountedTerminatedPods", Self::VT_UNCOUNTEDTERMINATEDPODS, false)?
     .visit_field::<i32>("ready", Self::VT_READY, false)?
     .finish();
    Ok(())
  }
}
pub struct JobStatusArgs<'a> {
    pub conditions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JobCondition<'a>>>>>,
    pub startTime: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a>>>,
    pub completionTime: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a>>>,
    pub active: i32,
    pub succeeded: i32,
    pub failed: i32,
    pub terminating: i32,
    pub completedIndexes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub failedIndexes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub uncountedTerminatedPods: Option<flatbuffers::WIPOffset<UncountedTerminatedPods<'a>>>,
    pub ready: i32,
}
impl<'a> Default for JobStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    JobStatusArgs {
      conditions: None,
      startTime: None,
      completionTime: None,
      active: 0,
      succeeded: 0,
      failed: 0,
      terminating: 0,
      completedIndexes: None,
      failedIndexes: None,
      uncountedTerminatedPods: None,
      ready: 0,
    }
  }
}

impl Serialize for JobStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("JobStatus", 11)?;
      s.serialize_field("conditions", &self.conditions())?;
      s.serialize_field("startTime", &self.startTime())?;
      s.serialize_field("completionTime", &self.completionTime())?;
      s.serialize_field("active", &self.active())?;
      s.serialize_field("succeeded", &self.succeeded())?;
      s.serialize_field("failed", &self.failed())?;
      s.serialize_field("terminating", &self.terminating())?;
      s.serialize_field("completedIndexes", &self.completedIndexes())?;
      s.serialize_field("failedIndexes", &self.failedIndexes())?;
      s.serialize_field("uncountedTerminatedPods", &self.uncountedTerminatedPods())?;
      s.serialize_field("ready", &self.ready())?;
    s.end()
  }
}

pub struct JobStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> JobStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_conditions(&mut self, conditions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JobCondition<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JobStatus::VT_CONDITIONS, conditions);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(JobStatus::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_completionTime(&mut self, completionTime: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(JobStatus::VT_COMPLETIONTIME, completionTime);
  }
  #[inline]
  pub fn add_active(&mut self, active: i32) {
    self.fbb_.push_slot::<i32>(JobStatus::VT_ACTIVE, active, 0);
  }
  #[inline]
  pub fn add_succeeded(&mut self, succeeded: i32) {
    self.fbb_.push_slot::<i32>(JobStatus::VT_SUCCEEDED, succeeded, 0);
  }
  #[inline]
  pub fn add_failed(&mut self, failed: i32) {
    self.fbb_.push_slot::<i32>(JobStatus::VT_FAILED, failed, 0);
  }
  #[inline]
  pub fn add_terminating(&mut self, terminating: i32) {
    self.fbb_.push_slot::<i32>(JobStatus::VT_TERMINATING, terminating, 0);
  }
  #[inline]
  pub fn add_completedIndexes(&mut self, completedIndexes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JobStatus::VT_COMPLETEDINDEXES, completedIndexes);
  }
  #[inline]
  pub fn add_failedIndexes(&mut self, failedIndexes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JobStatus::VT_FAILEDINDEXES, failedIndexes);
  }
  #[inline]
  pub fn add_uncountedTerminatedPods(&mut self, uncountedTerminatedPods: flatbuffers::WIPOffset<UncountedTerminatedPods<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<UncountedTerminatedPods>>(JobStatus::VT_UNCOUNTEDTERMINATEDPODS, uncountedTerminatedPods);
  }
  #[inline]
  pub fn add_ready(&mut self, ready: i32) {
    self.fbb_.push_slot::<i32>(JobStatus::VT_READY, ready, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> JobStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    JobStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JobStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JobStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JobStatus");
      ds.field("conditions", &self.conditions());
      ds.field("startTime", &self.startTime());
      ds.field("completionTime", &self.completionTime());
      ds.field("active", &self.active());
      ds.field("succeeded", &self.succeeded());
      ds.field("failed", &self.failed());
      ds.field("terminating", &self.terminating());
      ds.field("completedIndexes", &self.completedIndexes());
      ds.field("failedIndexes", &self.failedIndexes());
      ds.field("uncountedTerminatedPods", &self.uncountedTerminatedPods());
      ds.field("ready", &self.ready());
      ds.finish()
  }
}
