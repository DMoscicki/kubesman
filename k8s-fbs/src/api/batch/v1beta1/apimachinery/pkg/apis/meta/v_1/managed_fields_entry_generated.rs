// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ManagedFieldsEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ManagedFieldsEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ManagedFieldsEntry<'a> {
  type Inner = ManagedFieldsEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ManagedFieldsEntry<'a> {
  pub const VT_MANAGER: flatbuffers::VOffsetT = 4;
  pub const VT_OPERATION: flatbuffers::VOffsetT = 6;
  pub const VT_APIVERSION: flatbuffers::VOffsetT = 8;
  pub const VT_TIME: flatbuffers::VOffsetT = 10;
  pub const VT_FIELDSTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_FIELDSV1: flatbuffers::VOffsetT = 14;
  pub const VT_SUBRESOURCE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ManagedFieldsEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ManagedFieldsEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<ManagedFieldsEntry<'bldr>> {
    let mut builder = ManagedFieldsEntryBuilder::new(_fbb);
    if let Some(x) = args.subresource { builder.add_subresource(x); }
    if let Some(x) = args.fieldsV1 { builder.add_fieldsV1(x); }
    if let Some(x) = args.fieldsType { builder.add_fieldsType(x); }
    if let Some(x) = args.time { builder.add_time(x); }
    if let Some(x) = args.apiVersion { builder.add_apiVersion(x); }
    if let Some(x) = args.operation { builder.add_operation(x); }
    if let Some(x) = args.manager { builder.add_manager(x); }
    builder.finish()
  }


  #[inline]
  pub fn manager(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManagedFieldsEntry::VT_MANAGER, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn operation(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManagedFieldsEntry::VT_OPERATION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn apiVersion(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManagedFieldsEntry::VT_APIVERSION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn time(&self) -> Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Time>>(ManagedFieldsEntry::VT_TIME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn fieldsType(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManagedFieldsEntry::VT_FIELDSTYPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn fieldsV1(&self) -> FieldsV1<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FieldsV1>>(ManagedFieldsEntry::VT_FIELDSV1, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn subresource(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ManagedFieldsEntry::VT_SUBRESOURCE, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for ManagedFieldsEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manager", Self::VT_MANAGER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operation", Self::VT_OPERATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("apiVersion", Self::VT_APIVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Time>>("time", Self::VT_TIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fieldsType", Self::VT_FIELDSTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<FieldsV1>>("fieldsV1", Self::VT_FIELDSV1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("subresource", Self::VT_SUBRESOURCE, false)?
     .finish();
    Ok(())
  }
}
pub struct ManagedFieldsEntryArgs<'a> {
    pub manager: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub apiVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub time: Option<flatbuffers::WIPOffset<Time<'a>>>,
    pub fieldsType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fieldsV1: Option<flatbuffers::WIPOffset<FieldsV1<'a>>>,
    pub subresource: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ManagedFieldsEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    ManagedFieldsEntryArgs {
      manager: None,
      operation: None,
      apiVersion: None,
      time: None,
      fieldsType: None,
      fieldsV1: None,
      subresource: None,
    }
  }
}

impl Serialize for ManagedFieldsEntry<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ManagedFieldsEntry", 7)?;
      s.serialize_field("manager", &self.manager())?;
      s.serialize_field("operation", &self.operation())?;
      s.serialize_field("apiVersion", &self.apiVersion())?;
      s.serialize_field("time", &self.time())?;
      s.serialize_field("fieldsType", &self.fieldsType())?;
      s.serialize_field("fieldsV1", &self.fieldsV1())?;
      s.serialize_field("subresource", &self.subresource())?;
    s.end()
  }
}

pub struct ManagedFieldsEntryBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ManagedFieldsEntryBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_manager(&mut self, manager: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManagedFieldsEntry::VT_MANAGER, manager);
  }
  #[inline]
  pub fn add_operation(&mut self, operation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManagedFieldsEntry::VT_OPERATION, operation);
  }
  #[inline]
  pub fn add_apiVersion(&mut self, apiVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManagedFieldsEntry::VT_APIVERSION, apiVersion);
  }
  #[inline]
  pub fn add_time(&mut self, time: flatbuffers::WIPOffset<Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Time>>(ManagedFieldsEntry::VT_TIME, time);
  }
  #[inline]
  pub fn add_fieldsType(&mut self, fieldsType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManagedFieldsEntry::VT_FIELDSTYPE, fieldsType);
  }
  #[inline]
  pub fn add_fieldsV1(&mut self, fieldsV1: flatbuffers::WIPOffset<FieldsV1<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FieldsV1>>(ManagedFieldsEntry::VT_FIELDSV1, fieldsV1);
  }
  #[inline]
  pub fn add_subresource(&mut self, subresource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManagedFieldsEntry::VT_SUBRESOURCE, subresource);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ManagedFieldsEntryBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ManagedFieldsEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ManagedFieldsEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ManagedFieldsEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ManagedFieldsEntry");
      ds.field("manager", &self.manager());
      ds.field("operation", &self.operation());
      ds.field("apiVersion", &self.apiVersion());
      ds.field("time", &self.time());
      ds.field("fieldsType", &self.fieldsType());
      ds.field("fieldsV1", &self.fieldsV1());
      ds.field("subresource", &self.subresource());
      ds.finish()
  }
}
