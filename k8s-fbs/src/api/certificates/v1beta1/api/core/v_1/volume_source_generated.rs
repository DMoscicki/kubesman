// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VolumeSourceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VolumeSource<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VolumeSource<'a> {
  type Inner = VolumeSource<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VolumeSource<'a> {
  pub const VT_HOSTPATH: flatbuffers::VOffsetT = 4;
  pub const VT_EMPTYDIR: flatbuffers::VOffsetT = 6;
  pub const VT_GCEPERSISTENTDISK: flatbuffers::VOffsetT = 8;
  pub const VT_AWSELASTICBLOCKSTORE: flatbuffers::VOffsetT = 10;
  pub const VT_GITREPO: flatbuffers::VOffsetT = 12;
  pub const VT_SECRET: flatbuffers::VOffsetT = 14;
  pub const VT_NFS: flatbuffers::VOffsetT = 16;
  pub const VT_ISCSI: flatbuffers::VOffsetT = 18;
  pub const VT_GLUSTERFS: flatbuffers::VOffsetT = 20;
  pub const VT_PERSISTENTVOLUMECLAIM: flatbuffers::VOffsetT = 22;
  pub const VT_RBD: flatbuffers::VOffsetT = 24;
  pub const VT_FLEXVOLUME: flatbuffers::VOffsetT = 26;
  pub const VT_CINDER: flatbuffers::VOffsetT = 28;
  pub const VT_CEPHFS: flatbuffers::VOffsetT = 30;
  pub const VT_FLOCKER: flatbuffers::VOffsetT = 32;
  pub const VT_DOWNWARDAPI: flatbuffers::VOffsetT = 34;
  pub const VT_FC: flatbuffers::VOffsetT = 36;
  pub const VT_AZUREFILE: flatbuffers::VOffsetT = 38;
  pub const VT_CONFIGMAP: flatbuffers::VOffsetT = 40;
  pub const VT_VSPHEREVOLUME: flatbuffers::VOffsetT = 42;
  pub const VT_QUOBYTE: flatbuffers::VOffsetT = 44;
  pub const VT_AZUREDISK: flatbuffers::VOffsetT = 46;
  pub const VT_PHOTONPERSISTENTDISK: flatbuffers::VOffsetT = 48;
  pub const VT_PROJECTED: flatbuffers::VOffsetT = 50;
  pub const VT_PORTWORXVOLUME: flatbuffers::VOffsetT = 52;
  pub const VT_SCALEIO: flatbuffers::VOffsetT = 54;
  pub const VT_STORAGEOS: flatbuffers::VOffsetT = 56;
  pub const VT_CSI: flatbuffers::VOffsetT = 58;
  pub const VT_EPHEMERAL: flatbuffers::VOffsetT = 60;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VolumeSource { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VolumeSourceArgs<'args>
  ) -> flatbuffers::WIPOffset<VolumeSource<'bldr>> {
    let mut builder = VolumeSourceBuilder::new(_fbb);
    if let Some(x) = args.ephemeral { builder.add_ephemeral(x); }
    if let Some(x) = args.csi { builder.add_csi(x); }
    if let Some(x) = args.storageos { builder.add_storageos(x); }
    if let Some(x) = args.scaleIO { builder.add_scaleIO(x); }
    if let Some(x) = args.portworxVolume { builder.add_portworxVolume(x); }
    if let Some(x) = args.projected { builder.add_projected(x); }
    if let Some(x) = args.photonPersistentDisk { builder.add_photonPersistentDisk(x); }
    if let Some(x) = args.azureDisk { builder.add_azureDisk(x); }
    if let Some(x) = args.quobyte { builder.add_quobyte(x); }
    if let Some(x) = args.vsphereVolume { builder.add_vsphereVolume(x); }
    if let Some(x) = args.configMap { builder.add_configMap(x); }
    if let Some(x) = args.azureFile { builder.add_azureFile(x); }
    if let Some(x) = args.fc { builder.add_fc(x); }
    if let Some(x) = args.downwardAPI { builder.add_downwardAPI(x); }
    if let Some(x) = args.flocker { builder.add_flocker(x); }
    if let Some(x) = args.cephfs { builder.add_cephfs(x); }
    if let Some(x) = args.cinder { builder.add_cinder(x); }
    if let Some(x) = args.flexVolume { builder.add_flexVolume(x); }
    if let Some(x) = args.rbd { builder.add_rbd(x); }
    if let Some(x) = args.persistentVolumeClaim { builder.add_persistentVolumeClaim(x); }
    if let Some(x) = args.glusterfs { builder.add_glusterfs(x); }
    if let Some(x) = args.iscsi { builder.add_iscsi(x); }
    if let Some(x) = args.nfs { builder.add_nfs(x); }
    if let Some(x) = args.secret { builder.add_secret(x); }
    if let Some(x) = args.gitRepo { builder.add_gitRepo(x); }
    if let Some(x) = args.awsElasticBlockStore { builder.add_awsElasticBlockStore(x); }
    if let Some(x) = args.gcePersistentDisk { builder.add_gcePersistentDisk(x); }
    if let Some(x) = args.emptyDir { builder.add_emptyDir(x); }
    if let Some(x) = args.hostPath { builder.add_hostPath(x); }
    builder.finish()
  }


  #[inline]
  pub fn hostPath(&self) -> HostPathVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<HostPathVolumeSource>>(VolumeSource::VT_HOSTPATH, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn emptyDir(&self) -> EmptyDirVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<EmptyDirVolumeSource>>(VolumeSource::VT_EMPTYDIR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn gcePersistentDisk(&self) -> GCEPersistentDiskVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<GCEPersistentDiskVolumeSource>>(VolumeSource::VT_GCEPERSISTENTDISK, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn awsElasticBlockStore(&self) -> AWSElasticBlockStoreVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<AWSElasticBlockStoreVolumeSource>>(VolumeSource::VT_AWSELASTICBLOCKSTORE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn gitRepo(&self) -> GitRepoVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<GitRepoVolumeSource>>(VolumeSource::VT_GITREPO, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn secret(&self) -> SecretVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SecretVolumeSource>>(VolumeSource::VT_SECRET, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn nfs(&self) -> NFSVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<NFSVolumeSource>>(VolumeSource::VT_NFS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn iscsi(&self) -> ISCSIVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ISCSIVolumeSource>>(VolumeSource::VT_ISCSI, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn glusterfs(&self) -> GlusterfsVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<GlusterfsVolumeSource>>(VolumeSource::VT_GLUSTERFS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn persistentVolumeClaim(&self) -> PersistentVolumeClaimVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PersistentVolumeClaimVolumeSource>>(VolumeSource::VT_PERSISTENTVOLUMECLAIM, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn rbd(&self) -> RBDVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<RBDVolumeSource>>(VolumeSource::VT_RBD, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn flexVolume(&self) -> FlexVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FlexVolumeSource>>(VolumeSource::VT_FLEXVOLUME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn cinder(&self) -> CinderVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CinderVolumeSource>>(VolumeSource::VT_CINDER, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn cephfs(&self) -> CephFSVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CephFSVolumeSource>>(VolumeSource::VT_CEPHFS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn flocker(&self) -> FlockerVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FlockerVolumeSource>>(VolumeSource::VT_FLOCKER, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn downwardAPI(&self) -> DownwardAPIVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<DownwardAPIVolumeSource>>(VolumeSource::VT_DOWNWARDAPI, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn fc(&self) -> FCVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FCVolumeSource>>(VolumeSource::VT_FC, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn azureFile(&self) -> AzureFileVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<AzureFileVolumeSource>>(VolumeSource::VT_AZUREFILE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn configMap(&self) -> ConfigMapVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ConfigMapVolumeSource>>(VolumeSource::VT_CONFIGMAP, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn vsphereVolume(&self) -> VsphereVirtualDiskVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VsphereVirtualDiskVolumeSource>>(VolumeSource::VT_VSPHEREVOLUME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn quobyte(&self) -> QuobyteVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<QuobyteVolumeSource>>(VolumeSource::VT_QUOBYTE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn azureDisk(&self) -> AzureDiskVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<AzureDiskVolumeSource>>(VolumeSource::VT_AZUREDISK, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn photonPersistentDisk(&self) -> PhotonPersistentDiskVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PhotonPersistentDiskVolumeSource>>(VolumeSource::VT_PHOTONPERSISTENTDISK, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn projected(&self) -> ProjectedVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ProjectedVolumeSource>>(VolumeSource::VT_PROJECTED, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn portworxVolume(&self) -> PortworxVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PortworxVolumeSource>>(VolumeSource::VT_PORTWORXVOLUME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn scaleIO(&self) -> ScaleIOVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ScaleIOVolumeSource>>(VolumeSource::VT_SCALEIO, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn storageos(&self) -> StorageOSVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<StorageOSVolumeSource>>(VolumeSource::VT_STORAGEOS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn csi(&self) -> CSIVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CSIVolumeSource>>(VolumeSource::VT_CSI, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn ephemeral(&self) -> EphemeralVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<EphemeralVolumeSource>>(VolumeSource::VT_EPHEMERAL, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for VolumeSource<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<HostPathVolumeSource>>("hostPath", Self::VT_HOSTPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<EmptyDirVolumeSource>>("emptyDir", Self::VT_EMPTYDIR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<GCEPersistentDiskVolumeSource>>("gcePersistentDisk", Self::VT_GCEPERSISTENTDISK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<AWSElasticBlockStoreVolumeSource>>("awsElasticBlockStore", Self::VT_AWSELASTICBLOCKSTORE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<GitRepoVolumeSource>>("gitRepo", Self::VT_GITREPO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SecretVolumeSource>>("secret", Self::VT_SECRET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<NFSVolumeSource>>("nfs", Self::VT_NFS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ISCSIVolumeSource>>("iscsi", Self::VT_ISCSI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<GlusterfsVolumeSource>>("glusterfs", Self::VT_GLUSTERFS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PersistentVolumeClaimVolumeSource>>("persistentVolumeClaim", Self::VT_PERSISTENTVOLUMECLAIM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<RBDVolumeSource>>("rbd", Self::VT_RBD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<FlexVolumeSource>>("flexVolume", Self::VT_FLEXVOLUME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<CinderVolumeSource>>("cinder", Self::VT_CINDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<CephFSVolumeSource>>("cephfs", Self::VT_CEPHFS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<FlockerVolumeSource>>("flocker", Self::VT_FLOCKER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<DownwardAPIVolumeSource>>("downwardAPI", Self::VT_DOWNWARDAPI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<FCVolumeSource>>("fc", Self::VT_FC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<AzureFileVolumeSource>>("azureFile", Self::VT_AZUREFILE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ConfigMapVolumeSource>>("configMap", Self::VT_CONFIGMAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VsphereVirtualDiskVolumeSource>>("vsphereVolume", Self::VT_VSPHEREVOLUME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<QuobyteVolumeSource>>("quobyte", Self::VT_QUOBYTE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<AzureDiskVolumeSource>>("azureDisk", Self::VT_AZUREDISK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PhotonPersistentDiskVolumeSource>>("photonPersistentDisk", Self::VT_PHOTONPERSISTENTDISK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ProjectedVolumeSource>>("projected", Self::VT_PROJECTED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PortworxVolumeSource>>("portworxVolume", Self::VT_PORTWORXVOLUME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ScaleIOVolumeSource>>("scaleIO", Self::VT_SCALEIO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<StorageOSVolumeSource>>("storageos", Self::VT_STORAGEOS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<CSIVolumeSource>>("csi", Self::VT_CSI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<EphemeralVolumeSource>>("ephemeral", Self::VT_EPHEMERAL, false)?
     .finish();
    Ok(())
  }
}
pub struct VolumeSourceArgs<'a> {
    pub hostPath: Option<flatbuffers::WIPOffset<HostPathVolumeSource<'a>>>,
    pub emptyDir: Option<flatbuffers::WIPOffset<EmptyDirVolumeSource<'a>>>,
    pub gcePersistentDisk: Option<flatbuffers::WIPOffset<GCEPersistentDiskVolumeSource<'a>>>,
    pub awsElasticBlockStore: Option<flatbuffers::WIPOffset<AWSElasticBlockStoreVolumeSource<'a>>>,
    pub gitRepo: Option<flatbuffers::WIPOffset<GitRepoVolumeSource<'a>>>,
    pub secret: Option<flatbuffers::WIPOffset<SecretVolumeSource<'a>>>,
    pub nfs: Option<flatbuffers::WIPOffset<NFSVolumeSource<'a>>>,
    pub iscsi: Option<flatbuffers::WIPOffset<ISCSIVolumeSource<'a>>>,
    pub glusterfs: Option<flatbuffers::WIPOffset<GlusterfsVolumeSource<'a>>>,
    pub persistentVolumeClaim: Option<flatbuffers::WIPOffset<PersistentVolumeClaimVolumeSource<'a>>>,
    pub rbd: Option<flatbuffers::WIPOffset<RBDVolumeSource<'a>>>,
    pub flexVolume: Option<flatbuffers::WIPOffset<FlexVolumeSource<'a>>>,
    pub cinder: Option<flatbuffers::WIPOffset<CinderVolumeSource<'a>>>,
    pub cephfs: Option<flatbuffers::WIPOffset<CephFSVolumeSource<'a>>>,
    pub flocker: Option<flatbuffers::WIPOffset<FlockerVolumeSource<'a>>>,
    pub downwardAPI: Option<flatbuffers::WIPOffset<DownwardAPIVolumeSource<'a>>>,
    pub fc: Option<flatbuffers::WIPOffset<FCVolumeSource<'a>>>,
    pub azureFile: Option<flatbuffers::WIPOffset<AzureFileVolumeSource<'a>>>,
    pub configMap: Option<flatbuffers::WIPOffset<ConfigMapVolumeSource<'a>>>,
    pub vsphereVolume: Option<flatbuffers::WIPOffset<VsphereVirtualDiskVolumeSource<'a>>>,
    pub quobyte: Option<flatbuffers::WIPOffset<QuobyteVolumeSource<'a>>>,
    pub azureDisk: Option<flatbuffers::WIPOffset<AzureDiskVolumeSource<'a>>>,
    pub photonPersistentDisk: Option<flatbuffers::WIPOffset<PhotonPersistentDiskVolumeSource<'a>>>,
    pub projected: Option<flatbuffers::WIPOffset<ProjectedVolumeSource<'a>>>,
    pub portworxVolume: Option<flatbuffers::WIPOffset<PortworxVolumeSource<'a>>>,
    pub scaleIO: Option<flatbuffers::WIPOffset<ScaleIOVolumeSource<'a>>>,
    pub storageos: Option<flatbuffers::WIPOffset<StorageOSVolumeSource<'a>>>,
    pub csi: Option<flatbuffers::WIPOffset<CSIVolumeSource<'a>>>,
    pub ephemeral: Option<flatbuffers::WIPOffset<EphemeralVolumeSource<'a>>>,
}
impl<'a> Default for VolumeSourceArgs<'a> {
  #[inline]
  fn default() -> Self {
    VolumeSourceArgs {
      hostPath: None,
      emptyDir: None,
      gcePersistentDisk: None,
      awsElasticBlockStore: None,
      gitRepo: None,
      secret: None,
      nfs: None,
      iscsi: None,
      glusterfs: None,
      persistentVolumeClaim: None,
      rbd: None,
      flexVolume: None,
      cinder: None,
      cephfs: None,
      flocker: None,
      downwardAPI: None,
      fc: None,
      azureFile: None,
      configMap: None,
      vsphereVolume: None,
      quobyte: None,
      azureDisk: None,
      photonPersistentDisk: None,
      projected: None,
      portworxVolume: None,
      scaleIO: None,
      storageos: None,
      csi: None,
      ephemeral: None,
    }
  }
}

impl Serialize for VolumeSource<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VolumeSource", 29)?;
      s.serialize_field("hostPath", &self.hostPath())?;
      s.serialize_field("emptyDir", &self.emptyDir())?;
      s.serialize_field("gcePersistentDisk", &self.gcePersistentDisk())?;
      s.serialize_field("awsElasticBlockStore", &self.awsElasticBlockStore())?;
      s.serialize_field("gitRepo", &self.gitRepo())?;
      s.serialize_field("secret", &self.secret())?;
      s.serialize_field("nfs", &self.nfs())?;
      s.serialize_field("iscsi", &self.iscsi())?;
      s.serialize_field("glusterfs", &self.glusterfs())?;
      s.serialize_field("persistentVolumeClaim", &self.persistentVolumeClaim())?;
      s.serialize_field("rbd", &self.rbd())?;
      s.serialize_field("flexVolume", &self.flexVolume())?;
      s.serialize_field("cinder", &self.cinder())?;
      s.serialize_field("cephfs", &self.cephfs())?;
      s.serialize_field("flocker", &self.flocker())?;
      s.serialize_field("downwardAPI", &self.downwardAPI())?;
      s.serialize_field("fc", &self.fc())?;
      s.serialize_field("azureFile", &self.azureFile())?;
      s.serialize_field("configMap", &self.configMap())?;
      s.serialize_field("vsphereVolume", &self.vsphereVolume())?;
      s.serialize_field("quobyte", &self.quobyte())?;
      s.serialize_field("azureDisk", &self.azureDisk())?;
      s.serialize_field("photonPersistentDisk", &self.photonPersistentDisk())?;
      s.serialize_field("projected", &self.projected())?;
      s.serialize_field("portworxVolume", &self.portworxVolume())?;
      s.serialize_field("scaleIO", &self.scaleIO())?;
      s.serialize_field("storageos", &self.storageos())?;
      s.serialize_field("csi", &self.csi())?;
      s.serialize_field("ephemeral", &self.ephemeral())?;
    s.end()
  }
}

pub struct VolumeSourceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VolumeSourceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_hostPath(&mut self, hostPath: flatbuffers::WIPOffset<HostPathVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<HostPathVolumeSource>>(VolumeSource::VT_HOSTPATH, hostPath);
  }
  #[inline]
  pub fn add_emptyDir(&mut self, emptyDir: flatbuffers::WIPOffset<EmptyDirVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<EmptyDirVolumeSource>>(VolumeSource::VT_EMPTYDIR, emptyDir);
  }
  #[inline]
  pub fn add_gcePersistentDisk(&mut self, gcePersistentDisk: flatbuffers::WIPOffset<GCEPersistentDiskVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<GCEPersistentDiskVolumeSource>>(VolumeSource::VT_GCEPERSISTENTDISK, gcePersistentDisk);
  }
  #[inline]
  pub fn add_awsElasticBlockStore(&mut self, awsElasticBlockStore: flatbuffers::WIPOffset<AWSElasticBlockStoreVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<AWSElasticBlockStoreVolumeSource>>(VolumeSource::VT_AWSELASTICBLOCKSTORE, awsElasticBlockStore);
  }
  #[inline]
  pub fn add_gitRepo(&mut self, gitRepo: flatbuffers::WIPOffset<GitRepoVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<GitRepoVolumeSource>>(VolumeSource::VT_GITREPO, gitRepo);
  }
  #[inline]
  pub fn add_secret(&mut self, secret: flatbuffers::WIPOffset<SecretVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SecretVolumeSource>>(VolumeSource::VT_SECRET, secret);
  }
  #[inline]
  pub fn add_nfs(&mut self, nfs: flatbuffers::WIPOffset<NFSVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<NFSVolumeSource>>(VolumeSource::VT_NFS, nfs);
  }
  #[inline]
  pub fn add_iscsi(&mut self, iscsi: flatbuffers::WIPOffset<ISCSIVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ISCSIVolumeSource>>(VolumeSource::VT_ISCSI, iscsi);
  }
  #[inline]
  pub fn add_glusterfs(&mut self, glusterfs: flatbuffers::WIPOffset<GlusterfsVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<GlusterfsVolumeSource>>(VolumeSource::VT_GLUSTERFS, glusterfs);
  }
  #[inline]
  pub fn add_persistentVolumeClaim(&mut self, persistentVolumeClaim: flatbuffers::WIPOffset<PersistentVolumeClaimVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PersistentVolumeClaimVolumeSource>>(VolumeSource::VT_PERSISTENTVOLUMECLAIM, persistentVolumeClaim);
  }
  #[inline]
  pub fn add_rbd(&mut self, rbd: flatbuffers::WIPOffset<RBDVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<RBDVolumeSource>>(VolumeSource::VT_RBD, rbd);
  }
  #[inline]
  pub fn add_flexVolume(&mut self, flexVolume: flatbuffers::WIPOffset<FlexVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FlexVolumeSource>>(VolumeSource::VT_FLEXVOLUME, flexVolume);
  }
  #[inline]
  pub fn add_cinder(&mut self, cinder: flatbuffers::WIPOffset<CinderVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CinderVolumeSource>>(VolumeSource::VT_CINDER, cinder);
  }
  #[inline]
  pub fn add_cephfs(&mut self, cephfs: flatbuffers::WIPOffset<CephFSVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CephFSVolumeSource>>(VolumeSource::VT_CEPHFS, cephfs);
  }
  #[inline]
  pub fn add_flocker(&mut self, flocker: flatbuffers::WIPOffset<FlockerVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FlockerVolumeSource>>(VolumeSource::VT_FLOCKER, flocker);
  }
  #[inline]
  pub fn add_downwardAPI(&mut self, downwardAPI: flatbuffers::WIPOffset<DownwardAPIVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<DownwardAPIVolumeSource>>(VolumeSource::VT_DOWNWARDAPI, downwardAPI);
  }
  #[inline]
  pub fn add_fc(&mut self, fc: flatbuffers::WIPOffset<FCVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FCVolumeSource>>(VolumeSource::VT_FC, fc);
  }
  #[inline]
  pub fn add_azureFile(&mut self, azureFile: flatbuffers::WIPOffset<AzureFileVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<AzureFileVolumeSource>>(VolumeSource::VT_AZUREFILE, azureFile);
  }
  #[inline]
  pub fn add_configMap(&mut self, configMap: flatbuffers::WIPOffset<ConfigMapVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ConfigMapVolumeSource>>(VolumeSource::VT_CONFIGMAP, configMap);
  }
  #[inline]
  pub fn add_vsphereVolume(&mut self, vsphereVolume: flatbuffers::WIPOffset<VsphereVirtualDiskVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VsphereVirtualDiskVolumeSource>>(VolumeSource::VT_VSPHEREVOLUME, vsphereVolume);
  }
  #[inline]
  pub fn add_quobyte(&mut self, quobyte: flatbuffers::WIPOffset<QuobyteVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<QuobyteVolumeSource>>(VolumeSource::VT_QUOBYTE, quobyte);
  }
  #[inline]
  pub fn add_azureDisk(&mut self, azureDisk: flatbuffers::WIPOffset<AzureDiskVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<AzureDiskVolumeSource>>(VolumeSource::VT_AZUREDISK, azureDisk);
  }
  #[inline]
  pub fn add_photonPersistentDisk(&mut self, photonPersistentDisk: flatbuffers::WIPOffset<PhotonPersistentDiskVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PhotonPersistentDiskVolumeSource>>(VolumeSource::VT_PHOTONPERSISTENTDISK, photonPersistentDisk);
  }
  #[inline]
  pub fn add_projected(&mut self, projected: flatbuffers::WIPOffset<ProjectedVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ProjectedVolumeSource>>(VolumeSource::VT_PROJECTED, projected);
  }
  #[inline]
  pub fn add_portworxVolume(&mut self, portworxVolume: flatbuffers::WIPOffset<PortworxVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PortworxVolumeSource>>(VolumeSource::VT_PORTWORXVOLUME, portworxVolume);
  }
  #[inline]
  pub fn add_scaleIO(&mut self, scaleIO: flatbuffers::WIPOffset<ScaleIOVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ScaleIOVolumeSource>>(VolumeSource::VT_SCALEIO, scaleIO);
  }
  #[inline]
  pub fn add_storageos(&mut self, storageos: flatbuffers::WIPOffset<StorageOSVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<StorageOSVolumeSource>>(VolumeSource::VT_STORAGEOS, storageos);
  }
  #[inline]
  pub fn add_csi(&mut self, csi: flatbuffers::WIPOffset<CSIVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CSIVolumeSource>>(VolumeSource::VT_CSI, csi);
  }
  #[inline]
  pub fn add_ephemeral(&mut self, ephemeral: flatbuffers::WIPOffset<EphemeralVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<EphemeralVolumeSource>>(VolumeSource::VT_EPHEMERAL, ephemeral);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VolumeSourceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VolumeSourceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VolumeSource<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VolumeSource<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VolumeSource");
      ds.field("hostPath", &self.hostPath());
      ds.field("emptyDir", &self.emptyDir());
      ds.field("gcePersistentDisk", &self.gcePersistentDisk());
      ds.field("awsElasticBlockStore", &self.awsElasticBlockStore());
      ds.field("gitRepo", &self.gitRepo());
      ds.field("secret", &self.secret());
      ds.field("nfs", &self.nfs());
      ds.field("iscsi", &self.iscsi());
      ds.field("glusterfs", &self.glusterfs());
      ds.field("persistentVolumeClaim", &self.persistentVolumeClaim());
      ds.field("rbd", &self.rbd());
      ds.field("flexVolume", &self.flexVolume());
      ds.field("cinder", &self.cinder());
      ds.field("cephfs", &self.cephfs());
      ds.field("flocker", &self.flocker());
      ds.field("downwardAPI", &self.downwardAPI());
      ds.field("fc", &self.fc());
      ds.field("azureFile", &self.azureFile());
      ds.field("configMap", &self.configMap());
      ds.field("vsphereVolume", &self.vsphereVolume());
      ds.field("quobyte", &self.quobyte());
      ds.field("azureDisk", &self.azureDisk());
      ds.field("photonPersistentDisk", &self.photonPersistentDisk());
      ds.field("projected", &self.projected());
      ds.field("portworxVolume", &self.portworxVolume());
      ds.field("scaleIO", &self.scaleIO());
      ds.field("storageos", &self.storageos());
      ds.field("csi", &self.csi());
      ds.field("ephemeral", &self.ephemeral());
      ds.finish()
  }
}
