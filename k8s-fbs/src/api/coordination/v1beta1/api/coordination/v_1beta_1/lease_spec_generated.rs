// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LeaseSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LeaseSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LeaseSpec<'a> {
  type Inner = LeaseSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LeaseSpec<'a> {
  pub const VT_HOLDERIDENTITY: flatbuffers::VOffsetT = 4;
  pub const VT_LEASEDURATIONSECONDS: flatbuffers::VOffsetT = 6;
  pub const VT_ACQUIRETIME: flatbuffers::VOffsetT = 8;
  pub const VT_RENEWTIME: flatbuffers::VOffsetT = 10;
  pub const VT_LEASETRANSITIONS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LeaseSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LeaseSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<LeaseSpec<'bldr>> {
    let mut builder = LeaseSpecBuilder::new(_fbb);
    builder.add_leaseTransitions(args.leaseTransitions);
    if let Some(x) = args.renewTime { builder.add_renewTime(x); }
    if let Some(x) = args.acquireTime { builder.add_acquireTime(x); }
    builder.add_leaseDurationSeconds(args.leaseDurationSeconds);
    if let Some(x) = args.holderIdentity { builder.add_holderIdentity(x); }
    builder.finish()
  }


  #[inline]
  pub fn holderIdentity(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LeaseSpec::VT_HOLDERIDENTITY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn leaseDurationSeconds(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LeaseSpec::VT_LEASEDURATIONSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn acquireTime(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>(LeaseSpec::VT_ACQUIRETIME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn renewTime(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>(LeaseSpec::VT_RENEWTIME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn leaseTransitions(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LeaseSpec::VT_LEASETRANSITIONS, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LeaseSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("holderIdentity", Self::VT_HOLDERIDENTITY, false)?
     .visit_field::<i32>("leaseDurationSeconds", Self::VT_LEASEDURATIONSECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>("acquireTime", Self::VT_ACQUIRETIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>("renewTime", Self::VT_RENEWTIME, false)?
     .visit_field::<i32>("leaseTransitions", Self::VT_LEASETRANSITIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct LeaseSpecArgs<'a> {
    pub holderIdentity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub leaseDurationSeconds: i32,
    pub acquireTime: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'a>>>,
    pub renewTime: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'a>>>,
    pub leaseTransitions: i32,
}
impl<'a> Default for LeaseSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    LeaseSpecArgs {
      holderIdentity: None,
      leaseDurationSeconds: 0,
      acquireTime: None,
      renewTime: None,
      leaseTransitions: 0,
    }
  }
}

impl Serialize for LeaseSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LeaseSpec", 5)?;
      s.serialize_field("holderIdentity", &self.holderIdentity())?;
      s.serialize_field("leaseDurationSeconds", &self.leaseDurationSeconds())?;
      s.serialize_field("acquireTime", &self.acquireTime())?;
      s.serialize_field("renewTime", &self.renewTime())?;
      s.serialize_field("leaseTransitions", &self.leaseTransitions())?;
    s.end()
  }
}

pub struct LeaseSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LeaseSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_holderIdentity(&mut self, holderIdentity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LeaseSpec::VT_HOLDERIDENTITY, holderIdentity);
  }
  #[inline]
  pub fn add_leaseDurationSeconds(&mut self, leaseDurationSeconds: i32) {
    self.fbb_.push_slot::<i32>(LeaseSpec::VT_LEASEDURATIONSECONDS, leaseDurationSeconds, 0);
  }
  #[inline]
  pub fn add_acquireTime(&mut self, acquireTime: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>(LeaseSpec::VT_ACQUIRETIME, acquireTime);
  }
  #[inline]
  pub fn add_renewTime(&mut self, renewTime: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>(LeaseSpec::VT_RENEWTIME, renewTime);
  }
  #[inline]
  pub fn add_leaseTransitions(&mut self, leaseTransitions: i32) {
    self.fbb_.push_slot::<i32>(LeaseSpec::VT_LEASETRANSITIONS, leaseTransitions, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LeaseSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LeaseSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LeaseSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LeaseSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LeaseSpec");
      ds.field("holderIdentity", &self.holderIdentity());
      ds.field("leaseDurationSeconds", &self.leaseDurationSeconds());
      ds.field("acquireTime", &self.acquireTime());
      ds.field("renewTime", &self.renewTime());
      ds.field("leaseTransitions", &self.leaseTransitions());
      ds.finish()
  }
}
