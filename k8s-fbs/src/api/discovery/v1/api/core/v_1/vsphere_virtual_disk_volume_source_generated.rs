// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VsphereVirtualDiskVolumeSourceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VsphereVirtualDiskVolumeSource<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VsphereVirtualDiskVolumeSource<'a> {
  type Inner = VsphereVirtualDiskVolumeSource<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VsphereVirtualDiskVolumeSource<'a> {
  pub const VT_VOLUMEPATH: flatbuffers::VOffsetT = 4;
  pub const VT_FSTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_STORAGEPOLICYNAME: flatbuffers::VOffsetT = 8;
  pub const VT_STORAGEPOLICYID: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VsphereVirtualDiskVolumeSource { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VsphereVirtualDiskVolumeSourceArgs<'args>
  ) -> flatbuffers::WIPOffset<VsphereVirtualDiskVolumeSource<'bldr>> {
    let mut builder = VsphereVirtualDiskVolumeSourceBuilder::new(_fbb);
    if let Some(x) = args.storagePolicyID { builder.add_storagePolicyID(x); }
    if let Some(x) = args.storagePolicyName { builder.add_storagePolicyName(x); }
    if let Some(x) = args.fsType { builder.add_fsType(x); }
    if let Some(x) = args.volumePath { builder.add_volumePath(x); }
    builder.finish()
  }


  #[inline]
  pub fn volumePath(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VsphereVirtualDiskVolumeSource::VT_VOLUMEPATH, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn fsType(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VsphereVirtualDiskVolumeSource::VT_FSTYPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn storagePolicyName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VsphereVirtualDiskVolumeSource::VT_STORAGEPOLICYNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn storagePolicyID(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(VsphereVirtualDiskVolumeSource::VT_STORAGEPOLICYID, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for VsphereVirtualDiskVolumeSource<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volumePath", Self::VT_VOLUMEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fsType", Self::VT_FSTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("storagePolicyName", Self::VT_STORAGEPOLICYNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("storagePolicyID", Self::VT_STORAGEPOLICYID, false)?
     .finish();
    Ok(())
  }
}
pub struct VsphereVirtualDiskVolumeSourceArgs<'a> {
    pub volumePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fsType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub storagePolicyName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub storagePolicyID: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for VsphereVirtualDiskVolumeSourceArgs<'a> {
  #[inline]
  fn default() -> Self {
    VsphereVirtualDiskVolumeSourceArgs {
      volumePath: None,
      fsType: None,
      storagePolicyName: None,
      storagePolicyID: None,
    }
  }
}

impl Serialize for VsphereVirtualDiskVolumeSource<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VsphereVirtualDiskVolumeSource", 4)?;
      s.serialize_field("volumePath", &self.volumePath())?;
      s.serialize_field("fsType", &self.fsType())?;
      s.serialize_field("storagePolicyName", &self.storagePolicyName())?;
      s.serialize_field("storagePolicyID", &self.storagePolicyID())?;
    s.end()
  }
}

pub struct VsphereVirtualDiskVolumeSourceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VsphereVirtualDiskVolumeSourceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_volumePath(&mut self, volumePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VsphereVirtualDiskVolumeSource::VT_VOLUMEPATH, volumePath);
  }
  #[inline]
  pub fn add_fsType(&mut self, fsType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VsphereVirtualDiskVolumeSource::VT_FSTYPE, fsType);
  }
  #[inline]
  pub fn add_storagePolicyName(&mut self, storagePolicyName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VsphereVirtualDiskVolumeSource::VT_STORAGEPOLICYNAME, storagePolicyName);
  }
  #[inline]
  pub fn add_storagePolicyID(&mut self, storagePolicyID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VsphereVirtualDiskVolumeSource::VT_STORAGEPOLICYID, storagePolicyID);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VsphereVirtualDiskVolumeSourceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VsphereVirtualDiskVolumeSourceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VsphereVirtualDiskVolumeSource<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VsphereVirtualDiskVolumeSource<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VsphereVirtualDiskVolumeSource");
      ds.field("volumePath", &self.volumePath());
      ds.field("fsType", &self.fsType());
      ds.field("storagePolicyName", &self.storagePolicyName());
      ds.field("storagePolicyID", &self.storagePolicyID());
      ds.finish()
  }
}
