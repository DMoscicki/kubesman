// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EnvVarSourceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EnvVarSource<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EnvVarSource<'a> {
  type Inner = EnvVarSource<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EnvVarSource<'a> {
  pub const VT_FIELDREF: flatbuffers::VOffsetT = 4;
  pub const VT_RESOURCEFIELDREF: flatbuffers::VOffsetT = 6;
  pub const VT_CONFIGMAPKEYREF: flatbuffers::VOffsetT = 8;
  pub const VT_SECRETKEYREF: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EnvVarSource { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EnvVarSourceArgs<'args>
  ) -> flatbuffers::WIPOffset<EnvVarSource<'bldr>> {
    let mut builder = EnvVarSourceBuilder::new(_fbb);
    if let Some(x) = args.secretKeyRef { builder.add_secretKeyRef(x); }
    if let Some(x) = args.configMapKeyRef { builder.add_configMapKeyRef(x); }
    if let Some(x) = args.resourceFieldRef { builder.add_resourceFieldRef(x); }
    if let Some(x) = args.fieldRef { builder.add_fieldRef(x); }
    builder.finish()
  }


  #[inline]
  pub fn fieldRef(&self) -> ObjectFieldSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ObjectFieldSelector>>(EnvVarSource::VT_FIELDREF, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resourceFieldRef(&self) -> ResourceFieldSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ResourceFieldSelector>>(EnvVarSource::VT_RESOURCEFIELDREF, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn configMapKeyRef(&self) -> ConfigMapKeySelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ConfigMapKeySelector>>(EnvVarSource::VT_CONFIGMAPKEYREF, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn secretKeyRef(&self) -> SecretKeySelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SecretKeySelector>>(EnvVarSource::VT_SECRETKEYREF, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for EnvVarSource<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<ObjectFieldSelector>>("fieldRef", Self::VT_FIELDREF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ResourceFieldSelector>>("resourceFieldRef", Self::VT_RESOURCEFIELDREF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ConfigMapKeySelector>>("configMapKeyRef", Self::VT_CONFIGMAPKEYREF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SecretKeySelector>>("secretKeyRef", Self::VT_SECRETKEYREF, false)?
     .finish();
    Ok(())
  }
}
pub struct EnvVarSourceArgs<'a> {
    pub fieldRef: Option<flatbuffers::WIPOffset<ObjectFieldSelector<'a>>>,
    pub resourceFieldRef: Option<flatbuffers::WIPOffset<ResourceFieldSelector<'a>>>,
    pub configMapKeyRef: Option<flatbuffers::WIPOffset<ConfigMapKeySelector<'a>>>,
    pub secretKeyRef: Option<flatbuffers::WIPOffset<SecretKeySelector<'a>>>,
}
impl<'a> Default for EnvVarSourceArgs<'a> {
  #[inline]
  fn default() -> Self {
    EnvVarSourceArgs {
      fieldRef: None,
      resourceFieldRef: None,
      configMapKeyRef: None,
      secretKeyRef: None,
    }
  }
}

impl Serialize for EnvVarSource<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("EnvVarSource", 4)?;
      s.serialize_field("fieldRef", &self.fieldRef())?;
      s.serialize_field("resourceFieldRef", &self.resourceFieldRef())?;
      s.serialize_field("configMapKeyRef", &self.configMapKeyRef())?;
      s.serialize_field("secretKeyRef", &self.secretKeyRef())?;
    s.end()
  }
}

pub struct EnvVarSourceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EnvVarSourceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_fieldRef(&mut self, fieldRef: flatbuffers::WIPOffset<ObjectFieldSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ObjectFieldSelector>>(EnvVarSource::VT_FIELDREF, fieldRef);
  }
  #[inline]
  pub fn add_resourceFieldRef(&mut self, resourceFieldRef: flatbuffers::WIPOffset<ResourceFieldSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ResourceFieldSelector>>(EnvVarSource::VT_RESOURCEFIELDREF, resourceFieldRef);
  }
  #[inline]
  pub fn add_configMapKeyRef(&mut self, configMapKeyRef: flatbuffers::WIPOffset<ConfigMapKeySelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ConfigMapKeySelector>>(EnvVarSource::VT_CONFIGMAPKEYREF, configMapKeyRef);
  }
  #[inline]
  pub fn add_secretKeyRef(&mut self, secretKeyRef: flatbuffers::WIPOffset<SecretKeySelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SecretKeySelector>>(EnvVarSource::VT_SECRETKEYREF, secretKeyRef);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EnvVarSourceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EnvVarSourceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EnvVarSource<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EnvVarSource<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EnvVarSource");
      ds.field("fieldRef", &self.fieldRef());
      ds.field("resourceFieldRef", &self.resourceFieldRef());
      ds.field("configMapKeyRef", &self.configMapKeyRef());
      ds.field("secretKeyRef", &self.secretKeyRef());
      ds.finish()
  }
}
