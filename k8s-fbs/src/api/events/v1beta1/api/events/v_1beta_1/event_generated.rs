// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum EventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Event<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Event<'a> {
  type Inner = Event<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Event<'a> {
  pub const VT_METADATA: flatbuffers::VOffsetT = 4;
  pub const VT_EVENTTIME: flatbuffers::VOffsetT = 6;
  pub const VT_SERIES: flatbuffers::VOffsetT = 8;
  pub const VT_REPORTINGCONTROLLER: flatbuffers::VOffsetT = 10;
  pub const VT_REPORTINGINSTANCE: flatbuffers::VOffsetT = 12;
  pub const VT_ACTION: flatbuffers::VOffsetT = 14;
  pub const VT_REASON: flatbuffers::VOffsetT = 16;
  pub const VT_REGARDING: flatbuffers::VOffsetT = 18;
  pub const VT_RELATED: flatbuffers::VOffsetT = 20;
  pub const VT_NOTE: flatbuffers::VOffsetT = 22;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 24;
  pub const VT_DEPRECATEDSOURCE: flatbuffers::VOffsetT = 26;
  pub const VT_DEPRECATEDFIRSTTIMESTAMP: flatbuffers::VOffsetT = 28;
  pub const VT_DEPRECATEDLASTTIMESTAMP: flatbuffers::VOffsetT = 30;
  pub const VT_DEPRECATEDCOUNT: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Event { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EventArgs<'args>
  ) -> flatbuffers::WIPOffset<Event<'bldr>> {
    let mut builder = EventBuilder::new(_fbb);
    builder.add_deprecatedCount(args.deprecatedCount);
    if let Some(x) = args.deprecatedLastTimestamp { builder.add_deprecatedLastTimestamp(x); }
    if let Some(x) = args.deprecatedFirstTimestamp { builder.add_deprecatedFirstTimestamp(x); }
    if let Some(x) = args.deprecatedSource { builder.add_deprecatedSource(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.note { builder.add_note(x); }
    if let Some(x) = args.related { builder.add_related(x); }
    if let Some(x) = args.regarding { builder.add_regarding(x); }
    if let Some(x) = args.reason { builder.add_reason(x); }
    if let Some(x) = args.action { builder.add_action(x); }
    if let Some(x) = args.reportingInstance { builder.add_reportingInstance(x); }
    if let Some(x) = args.reportingController { builder.add_reportingController(x); }
    if let Some(x) = args.series { builder.add_series(x); }
    if let Some(x) = args.eventTime { builder.add_eventTime(x); }
    if let Some(x) = args.metadata { builder.add_metadata(x); }
    builder.finish()
  }


  #[inline]
  pub fn metadata(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta>>(Event::VT_METADATA, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn eventTime(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>(Event::VT_EVENTTIME, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn series(&self) -> EventSeries<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<EventSeries>>(Event::VT_SERIES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn reportingController(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_REPORTINGCONTROLLER, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn reportingInstance(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_REPORTINGINSTANCE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn action(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_ACTION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn reason(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_REASON, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn regarding(&self) -> super::super::core::v_1::ObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::core::v_1::ObjectReference>>(Event::VT_REGARDING, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn related(&self) -> super::super::core::v_1::ObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::core::v_1::ObjectReference>>(Event::VT_RELATED, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn note(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_NOTE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn type_(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Event::VT_TYPE_, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn deprecatedSource(&self) -> super::super::core::v_1::EventSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::core::v_1::EventSource>>(Event::VT_DEPRECATEDSOURCE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn deprecatedFirstTimestamp(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(Event::VT_DEPRECATEDFIRSTTIMESTAMP, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn deprecatedLastTimestamp(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(Event::VT_DEPRECATEDLASTTIMESTAMP, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn deprecatedCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Event::VT_DEPRECATEDCOUNT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Event<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta>>("metadata", Self::VT_METADATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>("eventTime", Self::VT_EVENTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<EventSeries>>("series", Self::VT_SERIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reportingController", Self::VT_REPORTINGCONTROLLER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reportingInstance", Self::VT_REPORTINGINSTANCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("action", Self::VT_ACTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reason", Self::VT_REASON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::core::v_1::ObjectReference>>("regarding", Self::VT_REGARDING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::core::v_1::ObjectReference>>("related", Self::VT_RELATED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("note", Self::VT_NOTE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::core::v_1::EventSource>>("deprecatedSource", Self::VT_DEPRECATEDSOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>("deprecatedFirstTimestamp", Self::VT_DEPRECATEDFIRSTTIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>("deprecatedLastTimestamp", Self::VT_DEPRECATEDLASTTIMESTAMP, false)?
     .visit_field::<i32>("deprecatedCount", Self::VT_DEPRECATEDCOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct EventArgs<'a> {
    pub metadata: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta<'a>>>,
    pub eventTime: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'a>>>,
    pub series: Option<flatbuffers::WIPOffset<EventSeries<'a>>>,
    pub reportingController: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reportingInstance: Option<flatbuffers::WIPOffset<&'a str>>,
    pub action: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reason: Option<flatbuffers::WIPOffset<&'a str>>,
    pub regarding: Option<flatbuffers::WIPOffset<super::super::core::v_1::ObjectReference<'a>>>,
    pub related: Option<flatbuffers::WIPOffset<super::super::core::v_1::ObjectReference<'a>>>,
    pub note: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub deprecatedSource: Option<flatbuffers::WIPOffset<super::super::core::v_1::EventSource<'a>>>,
    pub deprecatedFirstTimestamp: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a>>>,
    pub deprecatedLastTimestamp: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'a>>>,
    pub deprecatedCount: i32,
}
impl<'a> Default for EventArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventArgs {
      metadata: None,
      eventTime: None,
      series: None,
      reportingController: None,
      reportingInstance: None,
      action: None,
      reason: None,
      regarding: None,
      related: None,
      note: None,
      type_: None,
      deprecatedSource: None,
      deprecatedFirstTimestamp: None,
      deprecatedLastTimestamp: None,
      deprecatedCount: 0,
    }
  }
}

impl Serialize for Event<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("Event", 15)?;
      s.serialize_field("metadata", &self.metadata())?;
      s.serialize_field("eventTime", &self.eventTime())?;
      s.serialize_field("series", &self.series())?;
      s.serialize_field("reportingController", &self.reportingController())?;
      s.serialize_field("reportingInstance", &self.reportingInstance())?;
      s.serialize_field("action", &self.action())?;
      s.serialize_field("reason", &self.reason())?;
      s.serialize_field("regarding", &self.regarding())?;
      s.serialize_field("related", &self.related())?;
      s.serialize_field("note", &self.note())?;
      s.serialize_field("type_", &self.type_())?;
      s.serialize_field("deprecatedSource", &self.deprecatedSource())?;
      s.serialize_field("deprecatedFirstTimestamp", &self.deprecatedFirstTimestamp())?;
      s.serialize_field("deprecatedLastTimestamp", &self.deprecatedLastTimestamp())?;
      s.serialize_field("deprecatedCount", &self.deprecatedCount())?;
    s.end()
  }
}

pub struct EventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_metadata(&mut self, metadata: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta>>(Event::VT_METADATA, metadata);
  }
  #[inline]
  pub fn add_eventTime(&mut self, eventTime: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::MicroTime>>(Event::VT_EVENTTIME, eventTime);
  }
  #[inline]
  pub fn add_series(&mut self, series: flatbuffers::WIPOffset<EventSeries<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<EventSeries>>(Event::VT_SERIES, series);
  }
  #[inline]
  pub fn add_reportingController(&mut self, reportingController: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_REPORTINGCONTROLLER, reportingController);
  }
  #[inline]
  pub fn add_reportingInstance(&mut self, reportingInstance: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_REPORTINGINSTANCE, reportingInstance);
  }
  #[inline]
  pub fn add_action(&mut self, action: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_ACTION, action);
  }
  #[inline]
  pub fn add_reason(&mut self, reason: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_REASON, reason);
  }
  #[inline]
  pub fn add_regarding(&mut self, regarding: flatbuffers::WIPOffset<super::super::core::v_1::ObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::core::v_1::ObjectReference>>(Event::VT_REGARDING, regarding);
  }
  #[inline]
  pub fn add_related(&mut self, related: flatbuffers::WIPOffset<super::super::core::v_1::ObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::core::v_1::ObjectReference>>(Event::VT_RELATED, related);
  }
  #[inline]
  pub fn add_note(&mut self, note: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_NOTE, note);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_deprecatedSource(&mut self, deprecatedSource: flatbuffers::WIPOffset<super::super::core::v_1::EventSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::core::v_1::EventSource>>(Event::VT_DEPRECATEDSOURCE, deprecatedSource);
  }
  #[inline]
  pub fn add_deprecatedFirstTimestamp(&mut self, deprecatedFirstTimestamp: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(Event::VT_DEPRECATEDFIRSTTIMESTAMP, deprecatedFirstTimestamp);
  }
  #[inline]
  pub fn add_deprecatedLastTimestamp(&mut self, deprecatedLastTimestamp: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::Time>>(Event::VT_DEPRECATEDLASTTIMESTAMP, deprecatedLastTimestamp);
  }
  #[inline]
  pub fn add_deprecatedCount(&mut self, deprecatedCount: i32) {
    self.fbb_.push_slot::<i32>(Event::VT_DEPRECATEDCOUNT, deprecatedCount, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Event<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Event<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Event");
      ds.field("metadata", &self.metadata());
      ds.field("eventTime", &self.eventTime());
      ds.field("series", &self.series());
      ds.field("reportingController", &self.reportingController());
      ds.field("reportingInstance", &self.reportingInstance());
      ds.field("action", &self.action());
      ds.field("reason", &self.reason());
      ds.field("regarding", &self.regarding());
      ds.field("related", &self.related());
      ds.field("note", &self.note());
      ds.field("type_", &self.type_());
      ds.field("deprecatedSource", &self.deprecatedSource());
      ds.field("deprecatedFirstTimestamp", &self.deprecatedFirstTimestamp());
      ds.field("deprecatedLastTimestamp", &self.deprecatedLastTimestamp());
      ds.field("deprecatedCount", &self.deprecatedCount());
      ds.finish()
  }
}
