// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DeleteOptionsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeleteOptions<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeleteOptions<'a> {
  type Inner = DeleteOptions<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DeleteOptions<'a> {
  pub const VT_GRACEPERIODSECONDS: flatbuffers::VOffsetT = 4;
  pub const VT_PRECONDITIONS: flatbuffers::VOffsetT = 6;
  pub const VT_ORPHANDEPENDENTS: flatbuffers::VOffsetT = 8;
  pub const VT_PROPAGATIONPOLICY: flatbuffers::VOffsetT = 10;
  pub const VT_DRYRUN: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeleteOptions { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DeleteOptionsArgs<'args>
  ) -> flatbuffers::WIPOffset<DeleteOptions<'bldr>> {
    let mut builder = DeleteOptionsBuilder::new(_fbb);
    builder.add_gracePeriodSeconds(args.gracePeriodSeconds);
    if let Some(x) = args.dryRun { builder.add_dryRun(x); }
    if let Some(x) = args.propagationPolicy { builder.add_propagationPolicy(x); }
    if let Some(x) = args.preconditions { builder.add_preconditions(x); }
    builder.add_orphanDependents(args.orphanDependents);
    builder.finish()
  }


  #[inline]
  pub fn gracePeriodSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DeleteOptions::VT_GRACEPERIODSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn preconditions(&self) -> Preconditions<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Preconditions>>(DeleteOptions::VT_PRECONDITIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn orphanDependents(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DeleteOptions::VT_ORPHANDEPENDENTS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn propagationPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DeleteOptions::VT_PROPAGATIONPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn dryRun(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(DeleteOptions::VT_DRYRUN, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for DeleteOptions<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("gracePeriodSeconds", Self::VT_GRACEPERIODSECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Preconditions>>("preconditions", Self::VT_PRECONDITIONS, false)?
     .visit_field::<bool>("orphanDependents", Self::VT_ORPHANDEPENDENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("propagationPolicy", Self::VT_PROPAGATIONPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("dryRun", Self::VT_DRYRUN, false)?
     .finish();
    Ok(())
  }
}
pub struct DeleteOptionsArgs<'a> {
    pub gracePeriodSeconds: i64,
    pub preconditions: Option<flatbuffers::WIPOffset<Preconditions<'a>>>,
    pub orphanDependents: bool,
    pub propagationPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dryRun: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for DeleteOptionsArgs<'a> {
  #[inline]
  fn default() -> Self {
    DeleteOptionsArgs {
      gracePeriodSeconds: 0,
      preconditions: None,
      orphanDependents: false,
      propagationPolicy: None,
      dryRun: None,
    }
  }
}

impl Serialize for DeleteOptions<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("DeleteOptions", 5)?;
      s.serialize_field("gracePeriodSeconds", &self.gracePeriodSeconds())?;
      s.serialize_field("preconditions", &self.preconditions())?;
      s.serialize_field("orphanDependents", &self.orphanDependents())?;
      s.serialize_field("propagationPolicy", &self.propagationPolicy())?;
      s.serialize_field("dryRun", &self.dryRun())?;
    s.end()
  }
}

pub struct DeleteOptionsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DeleteOptionsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_gracePeriodSeconds(&mut self, gracePeriodSeconds: i64) {
    self.fbb_.push_slot::<i64>(DeleteOptions::VT_GRACEPERIODSECONDS, gracePeriodSeconds, 0);
  }
  #[inline]
  pub fn add_preconditions(&mut self, preconditions: flatbuffers::WIPOffset<Preconditions<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Preconditions>>(DeleteOptions::VT_PRECONDITIONS, preconditions);
  }
  #[inline]
  pub fn add_orphanDependents(&mut self, orphanDependents: bool) {
    self.fbb_.push_slot::<bool>(DeleteOptions::VT_ORPHANDEPENDENTS, orphanDependents, false);
  }
  #[inline]
  pub fn add_propagationPolicy(&mut self, propagationPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeleteOptions::VT_PROPAGATIONPOLICY, propagationPolicy);
  }
  #[inline]
  pub fn add_dryRun(&mut self, dryRun: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeleteOptions::VT_DRYRUN, dryRun);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DeleteOptionsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DeleteOptionsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeleteOptions<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DeleteOptions<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DeleteOptions");
      ds.field("gracePeriodSeconds", &self.gracePeriodSeconds());
      ds.field("preconditions", &self.preconditions());
      ds.field("orphanDependents", &self.orphanDependents());
      ds.field("propagationPolicy", &self.propagationPolicy());
      ds.field("dryRun", &self.dryRun());
      ds.finish()
  }
}
