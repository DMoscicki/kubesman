// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DaemonSetStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DaemonSetStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DaemonSetStatus<'a> {
  type Inner = DaemonSetStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DaemonSetStatus<'a> {
  pub const VT_CURRENTNUMBERSCHEDULED: flatbuffers::VOffsetT = 4;
  pub const VT_NUMBERMISSCHEDULED: flatbuffers::VOffsetT = 6;
  pub const VT_DESIREDNUMBERSCHEDULED: flatbuffers::VOffsetT = 8;
  pub const VT_NUMBERREADY: flatbuffers::VOffsetT = 10;
  pub const VT_OBSERVEDGENERATION: flatbuffers::VOffsetT = 12;
  pub const VT_UPDATEDNUMBERSCHEDULED: flatbuffers::VOffsetT = 14;
  pub const VT_NUMBERAVAILABLE: flatbuffers::VOffsetT = 16;
  pub const VT_NUMBERUNAVAILABLE: flatbuffers::VOffsetT = 18;
  pub const VT_COLLISIONCOUNT: flatbuffers::VOffsetT = 20;
  pub const VT_CONDITIONS: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DaemonSetStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DaemonSetStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<DaemonSetStatus<'bldr>> {
    let mut builder = DaemonSetStatusBuilder::new(_fbb);
    builder.add_observedGeneration(args.observedGeneration);
    if let Some(x) = args.conditions { builder.add_conditions(x); }
    builder.add_collisionCount(args.collisionCount);
    builder.add_numberUnavailable(args.numberUnavailable);
    builder.add_numberAvailable(args.numberAvailable);
    builder.add_updatedNumberScheduled(args.updatedNumberScheduled);
    builder.add_numberReady(args.numberReady);
    builder.add_desiredNumberScheduled(args.desiredNumberScheduled);
    builder.add_numberMisscheduled(args.numberMisscheduled);
    builder.add_currentNumberScheduled(args.currentNumberScheduled);
    builder.finish()
  }


  #[inline]
  pub fn currentNumberScheduled(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DaemonSetStatus::VT_CURRENTNUMBERSCHEDULED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn numberMisscheduled(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DaemonSetStatus::VT_NUMBERMISSCHEDULED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn desiredNumberScheduled(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DaemonSetStatus::VT_DESIREDNUMBERSCHEDULED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn numberReady(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DaemonSetStatus::VT_NUMBERREADY, Some(0)).unwrap()}
  }
  #[inline]
  pub fn observedGeneration(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(DaemonSetStatus::VT_OBSERVEDGENERATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn updatedNumberScheduled(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DaemonSetStatus::VT_UPDATEDNUMBERSCHEDULED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn numberAvailable(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DaemonSetStatus::VT_NUMBERAVAILABLE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn numberUnavailable(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DaemonSetStatus::VT_NUMBERUNAVAILABLE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn collisionCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DaemonSetStatus::VT_COLLISIONCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn conditions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DaemonSetCondition<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DaemonSetCondition>>>>(DaemonSetStatus::VT_CONDITIONS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for DaemonSetStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("currentNumberScheduled", Self::VT_CURRENTNUMBERSCHEDULED, false)?
     .visit_field::<i32>("numberMisscheduled", Self::VT_NUMBERMISSCHEDULED, false)?
     .visit_field::<i32>("desiredNumberScheduled", Self::VT_DESIREDNUMBERSCHEDULED, false)?
     .visit_field::<i32>("numberReady", Self::VT_NUMBERREADY, false)?
     .visit_field::<i64>("observedGeneration", Self::VT_OBSERVEDGENERATION, false)?
     .visit_field::<i32>("updatedNumberScheduled", Self::VT_UPDATEDNUMBERSCHEDULED, false)?
     .visit_field::<i32>("numberAvailable", Self::VT_NUMBERAVAILABLE, false)?
     .visit_field::<i32>("numberUnavailable", Self::VT_NUMBERUNAVAILABLE, false)?
     .visit_field::<i32>("collisionCount", Self::VT_COLLISIONCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<DaemonSetCondition>>>>("conditions", Self::VT_CONDITIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct DaemonSetStatusArgs<'a> {
    pub currentNumberScheduled: i32,
    pub numberMisscheduled: i32,
    pub desiredNumberScheduled: i32,
    pub numberReady: i32,
    pub observedGeneration: i64,
    pub updatedNumberScheduled: i32,
    pub numberAvailable: i32,
    pub numberUnavailable: i32,
    pub collisionCount: i32,
    pub conditions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<DaemonSetCondition<'a>>>>>,
}
impl<'a> Default for DaemonSetStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    DaemonSetStatusArgs {
      currentNumberScheduled: 0,
      numberMisscheduled: 0,
      desiredNumberScheduled: 0,
      numberReady: 0,
      observedGeneration: 0,
      updatedNumberScheduled: 0,
      numberAvailable: 0,
      numberUnavailable: 0,
      collisionCount: 0,
      conditions: None,
    }
  }
}

impl Serialize for DaemonSetStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("DaemonSetStatus", 10)?;
      s.serialize_field("currentNumberScheduled", &self.currentNumberScheduled())?;
      s.serialize_field("numberMisscheduled", &self.numberMisscheduled())?;
      s.serialize_field("desiredNumberScheduled", &self.desiredNumberScheduled())?;
      s.serialize_field("numberReady", &self.numberReady())?;
      s.serialize_field("observedGeneration", &self.observedGeneration())?;
      s.serialize_field("updatedNumberScheduled", &self.updatedNumberScheduled())?;
      s.serialize_field("numberAvailable", &self.numberAvailable())?;
      s.serialize_field("numberUnavailable", &self.numberUnavailable())?;
      s.serialize_field("collisionCount", &self.collisionCount())?;
      s.serialize_field("conditions", &self.conditions())?;
    s.end()
  }
}

pub struct DaemonSetStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DaemonSetStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_currentNumberScheduled(&mut self, currentNumberScheduled: i32) {
    self.fbb_.push_slot::<i32>(DaemonSetStatus::VT_CURRENTNUMBERSCHEDULED, currentNumberScheduled, 0);
  }
  #[inline]
  pub fn add_numberMisscheduled(&mut self, numberMisscheduled: i32) {
    self.fbb_.push_slot::<i32>(DaemonSetStatus::VT_NUMBERMISSCHEDULED, numberMisscheduled, 0);
  }
  #[inline]
  pub fn add_desiredNumberScheduled(&mut self, desiredNumberScheduled: i32) {
    self.fbb_.push_slot::<i32>(DaemonSetStatus::VT_DESIREDNUMBERSCHEDULED, desiredNumberScheduled, 0);
  }
  #[inline]
  pub fn add_numberReady(&mut self, numberReady: i32) {
    self.fbb_.push_slot::<i32>(DaemonSetStatus::VT_NUMBERREADY, numberReady, 0);
  }
  #[inline]
  pub fn add_observedGeneration(&mut self, observedGeneration: i64) {
    self.fbb_.push_slot::<i64>(DaemonSetStatus::VT_OBSERVEDGENERATION, observedGeneration, 0);
  }
  #[inline]
  pub fn add_updatedNumberScheduled(&mut self, updatedNumberScheduled: i32) {
    self.fbb_.push_slot::<i32>(DaemonSetStatus::VT_UPDATEDNUMBERSCHEDULED, updatedNumberScheduled, 0);
  }
  #[inline]
  pub fn add_numberAvailable(&mut self, numberAvailable: i32) {
    self.fbb_.push_slot::<i32>(DaemonSetStatus::VT_NUMBERAVAILABLE, numberAvailable, 0);
  }
  #[inline]
  pub fn add_numberUnavailable(&mut self, numberUnavailable: i32) {
    self.fbb_.push_slot::<i32>(DaemonSetStatus::VT_NUMBERUNAVAILABLE, numberUnavailable, 0);
  }
  #[inline]
  pub fn add_collisionCount(&mut self, collisionCount: i32) {
    self.fbb_.push_slot::<i32>(DaemonSetStatus::VT_COLLISIONCOUNT, collisionCount, 0);
  }
  #[inline]
  pub fn add_conditions(&mut self, conditions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<DaemonSetCondition<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DaemonSetStatus::VT_CONDITIONS, conditions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DaemonSetStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DaemonSetStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DaemonSetStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DaemonSetStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DaemonSetStatus");
      ds.field("currentNumberScheduled", &self.currentNumberScheduled());
      ds.field("numberMisscheduled", &self.numberMisscheduled());
      ds.field("desiredNumberScheduled", &self.desiredNumberScheduled());
      ds.field("numberReady", &self.numberReady());
      ds.field("observedGeneration", &self.observedGeneration());
      ds.field("updatedNumberScheduled", &self.updatedNumberScheduled());
      ds.field("numberAvailable", &self.numberAvailable());
      ds.field("numberUnavailable", &self.numberUnavailable());
      ds.field("collisionCount", &self.collisionCount());
      ds.field("conditions", &self.conditions());
      ds.finish()
  }
}
