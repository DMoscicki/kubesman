// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum DeploymentRollbackOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct DeploymentRollback<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DeploymentRollback<'a> {
  type Inner = DeploymentRollback<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DeploymentRollback<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_UPDATEDANNOTATIONS: flatbuffers::VOffsetT = 6;
  pub const VT_ROLLBACKTO: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DeploymentRollback { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DeploymentRollbackArgs<'args>
  ) -> flatbuffers::WIPOffset<DeploymentRollback<'bldr>> {
    let mut builder = DeploymentRollbackBuilder::new(_fbb);
    if let Some(x) = args.rollbackTo { builder.add_rollbackTo(x); }
    if let Some(x) = args.updatedAnnotations { builder.add_updatedAnnotations(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DeploymentRollback::VT_NAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn updatedAnnotations(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<deployment_rollback_::UpdatedAnnotationsEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<deployment_rollback_::UpdatedAnnotationsEntry>>>>(DeploymentRollback::VT_UPDATEDANNOTATIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn rollbackTo(&self) -> RollbackConfig<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<RollbackConfig>>(DeploymentRollback::VT_ROLLBACKTO, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for DeploymentRollback<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<deployment_rollback_::UpdatedAnnotationsEntry>>>>("updatedAnnotations", Self::VT_UPDATEDANNOTATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<RollbackConfig>>("rollbackTo", Self::VT_ROLLBACKTO, false)?
     .finish();
    Ok(())
  }
}
pub struct DeploymentRollbackArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAnnotations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<deployment_rollback_::UpdatedAnnotationsEntry<'a>>>>>,
    pub rollbackTo: Option<flatbuffers::WIPOffset<RollbackConfig<'a>>>,
}
impl<'a> Default for DeploymentRollbackArgs<'a> {
  #[inline]
  fn default() -> Self {
    DeploymentRollbackArgs {
      name: None,
      updatedAnnotations: None,
      rollbackTo: None,
    }
  }
}

impl Serialize for DeploymentRollback<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("DeploymentRollback", 3)?;
      s.serialize_field("name", &self.name())?;
      s.serialize_field("updatedAnnotations", &self.updatedAnnotations())?;
      s.serialize_field("rollbackTo", &self.rollbackTo())?;
    s.end()
  }
}

pub struct DeploymentRollbackBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DeploymentRollbackBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeploymentRollback::VT_NAME, name);
  }
  #[inline]
  pub fn add_updatedAnnotations(&mut self, updatedAnnotations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<deployment_rollback_::UpdatedAnnotationsEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DeploymentRollback::VT_UPDATEDANNOTATIONS, updatedAnnotations);
  }
  #[inline]
  pub fn add_rollbackTo(&mut self, rollbackTo: flatbuffers::WIPOffset<RollbackConfig<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<RollbackConfig>>(DeploymentRollback::VT_ROLLBACKTO, rollbackTo);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DeploymentRollbackBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DeploymentRollbackBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DeploymentRollback<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DeploymentRollback<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DeploymentRollback");
      ds.field("name", &self.name());
      ds.field("updatedAnnotations", &self.updatedAnnotations());
      ds.field("rollbackTo", &self.rollbackTo());
      ds.finish()
  }
}
