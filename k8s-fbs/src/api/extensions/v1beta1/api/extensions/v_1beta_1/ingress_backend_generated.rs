// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum IngressBackendOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct IngressBackend<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IngressBackend<'a> {
  type Inner = IngressBackend<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IngressBackend<'a> {
  pub const VT_SERVICENAME: flatbuffers::VOffsetT = 4;
  pub const VT_SERVICEPORT: flatbuffers::VOffsetT = 6;
  pub const VT_RESOURCE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IngressBackend { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IngressBackendArgs<'args>
  ) -> flatbuffers::WIPOffset<IngressBackend<'bldr>> {
    let mut builder = IngressBackendBuilder::new(_fbb);
    if let Some(x) = args.resource { builder.add_resource(x); }
    if let Some(x) = args.servicePort { builder.add_servicePort(x); }
    if let Some(x) = args.serviceName { builder.add_serviceName(x); }
    builder.finish()
  }


  #[inline]
  pub fn serviceName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IngressBackend::VT_SERVICENAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn servicePort(&self) -> super::super::super::apimachinery::pkg::util::intstr::IntOrString<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>(IngressBackend::VT_SERVICEPORT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resource(&self) -> super::super::core::v_1::TypedLocalObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::core::v_1::TypedLocalObjectReference>>(IngressBackend::VT_RESOURCE, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for IngressBackend<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("serviceName", Self::VT_SERVICENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>("servicePort", Self::VT_SERVICEPORT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::core::v_1::TypedLocalObjectReference>>("resource", Self::VT_RESOURCE, false)?
     .finish();
    Ok(())
  }
}
pub struct IngressBackendArgs<'a> {
    pub serviceName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub servicePort: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString<'a>>>,
    pub resource: Option<flatbuffers::WIPOffset<super::super::core::v_1::TypedLocalObjectReference<'a>>>,
}
impl<'a> Default for IngressBackendArgs<'a> {
  #[inline]
  fn default() -> Self {
    IngressBackendArgs {
      serviceName: None,
      servicePort: None,
      resource: None,
    }
  }
}

impl Serialize for IngressBackend<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("IngressBackend", 3)?;
      s.serialize_field("serviceName", &self.serviceName())?;
      s.serialize_field("servicePort", &self.servicePort())?;
      s.serialize_field("resource", &self.resource())?;
    s.end()
  }
}

pub struct IngressBackendBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IngressBackendBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_serviceName(&mut self, serviceName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IngressBackend::VT_SERVICENAME, serviceName);
  }
  #[inline]
  pub fn add_servicePort(&mut self, servicePort: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>(IngressBackend::VT_SERVICEPORT, servicePort);
  }
  #[inline]
  pub fn add_resource(&mut self, resource: flatbuffers::WIPOffset<super::super::core::v_1::TypedLocalObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::core::v_1::TypedLocalObjectReference>>(IngressBackend::VT_RESOURCE, resource);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IngressBackendBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IngressBackendBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IngressBackend<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IngressBackend<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IngressBackend");
      ds.field("serviceName", &self.serviceName());
      ds.field("servicePort", &self.servicePort());
      ds.field("resource", &self.resource());
      ds.finish()
  }
}
