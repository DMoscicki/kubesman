// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum IngressSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct IngressSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IngressSpec<'a> {
  type Inner = IngressSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IngressSpec<'a> {
  pub const VT_INGRESSCLASSNAME: flatbuffers::VOffsetT = 4;
  pub const VT_BACKEND: flatbuffers::VOffsetT = 6;
  pub const VT_TLS: flatbuffers::VOffsetT = 8;
  pub const VT_RULES: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IngressSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IngressSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<IngressSpec<'bldr>> {
    let mut builder = IngressSpecBuilder::new(_fbb);
    if let Some(x) = args.rules { builder.add_rules(x); }
    if let Some(x) = args.tls { builder.add_tls(x); }
    if let Some(x) = args.backend { builder.add_backend(x); }
    if let Some(x) = args.ingressClassName { builder.add_ingressClassName(x); }
    builder.finish()
  }


  #[inline]
  pub fn ingressClassName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IngressSpec::VT_INGRESSCLASSNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn backend(&self) -> IngressBackend<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<IngressBackend>>(IngressSpec::VT_BACKEND, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn tls(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<IngressTLS<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<IngressTLS>>>>(IngressSpec::VT_TLS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn rules(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<IngressRule<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<IngressRule>>>>(IngressSpec::VT_RULES, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for IngressSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ingressClassName", Self::VT_INGRESSCLASSNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<IngressBackend>>("backend", Self::VT_BACKEND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<IngressTLS>>>>("tls", Self::VT_TLS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<IngressRule>>>>("rules", Self::VT_RULES, false)?
     .finish();
    Ok(())
  }
}
pub struct IngressSpecArgs<'a> {
    pub ingressClassName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub backend: Option<flatbuffers::WIPOffset<IngressBackend<'a>>>,
    pub tls: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<IngressTLS<'a>>>>>,
    pub rules: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<IngressRule<'a>>>>>,
}
impl<'a> Default for IngressSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    IngressSpecArgs {
      ingressClassName: None,
      backend: None,
      tls: None,
      rules: None,
    }
  }
}

impl Serialize for IngressSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("IngressSpec", 4)?;
      s.serialize_field("ingressClassName", &self.ingressClassName())?;
      s.serialize_field("backend", &self.backend())?;
      s.serialize_field("tls", &self.tls())?;
      s.serialize_field("rules", &self.rules())?;
    s.end()
  }
}

pub struct IngressSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IngressSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ingressClassName(&mut self, ingressClassName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IngressSpec::VT_INGRESSCLASSNAME, ingressClassName);
  }
  #[inline]
  pub fn add_backend(&mut self, backend: flatbuffers::WIPOffset<IngressBackend<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<IngressBackend>>(IngressSpec::VT_BACKEND, backend);
  }
  #[inline]
  pub fn add_tls(&mut self, tls: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<IngressTLS<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IngressSpec::VT_TLS, tls);
  }
  #[inline]
  pub fn add_rules(&mut self, rules: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<IngressRule<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IngressSpec::VT_RULES, rules);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IngressSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IngressSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IngressSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IngressSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IngressSpec");
      ds.field("ingressClassName", &self.ingressClassName());
      ds.field("backend", &self.backend());
      ds.field("tls", &self.tls());
      ds.field("rules", &self.rules());
      ds.finish()
  }
}
