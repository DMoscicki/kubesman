// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum NetworkPolicyPeerOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NetworkPolicyPeer<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NetworkPolicyPeer<'a> {
  type Inner = NetworkPolicyPeer<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NetworkPolicyPeer<'a> {
  pub const VT_PODSELECTOR: flatbuffers::VOffsetT = 4;
  pub const VT_NAMESPACESELECTOR: flatbuffers::VOffsetT = 6;
  pub const VT_IPBLOCK: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NetworkPolicyPeer { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NetworkPolicyPeerArgs<'args>
  ) -> flatbuffers::WIPOffset<NetworkPolicyPeer<'bldr>> {
    let mut builder = NetworkPolicyPeerBuilder::new(_fbb);
    if let Some(x) = args.ipBlock { builder.add_ipBlock(x); }
    if let Some(x) = args.namespaceSelector { builder.add_namespaceSelector(x); }
    if let Some(x) = args.podSelector { builder.add_podSelector(x); }
    builder.finish()
  }


  #[inline]
  pub fn podSelector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(NetworkPolicyPeer::VT_PODSELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn namespaceSelector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(NetworkPolicyPeer::VT_NAMESPACESELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn ipBlock(&self) -> IPBlock<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<IPBlock>>(NetworkPolicyPeer::VT_IPBLOCK, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for NetworkPolicyPeer<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("podSelector", Self::VT_PODSELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("namespaceSelector", Self::VT_NAMESPACESELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<IPBlock>>("ipBlock", Self::VT_IPBLOCK, false)?
     .finish();
    Ok(())
  }
}
pub struct NetworkPolicyPeerArgs<'a> {
    pub podSelector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub namespaceSelector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub ipBlock: Option<flatbuffers::WIPOffset<IPBlock<'a>>>,
}
impl<'a> Default for NetworkPolicyPeerArgs<'a> {
  #[inline]
  fn default() -> Self {
    NetworkPolicyPeerArgs {
      podSelector: None,
      namespaceSelector: None,
      ipBlock: None,
    }
  }
}

impl Serialize for NetworkPolicyPeer<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("NetworkPolicyPeer", 3)?;
      s.serialize_field("podSelector", &self.podSelector())?;
      s.serialize_field("namespaceSelector", &self.namespaceSelector())?;
      s.serialize_field("ipBlock", &self.ipBlock())?;
    s.end()
  }
}

pub struct NetworkPolicyPeerBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NetworkPolicyPeerBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_podSelector(&mut self, podSelector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(NetworkPolicyPeer::VT_PODSELECTOR, podSelector);
  }
  #[inline]
  pub fn add_namespaceSelector(&mut self, namespaceSelector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(NetworkPolicyPeer::VT_NAMESPACESELECTOR, namespaceSelector);
  }
  #[inline]
  pub fn add_ipBlock(&mut self, ipBlock: flatbuffers::WIPOffset<IPBlock<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<IPBlock>>(NetworkPolicyPeer::VT_IPBLOCK, ipBlock);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NetworkPolicyPeerBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NetworkPolicyPeerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NetworkPolicyPeer<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NetworkPolicyPeer<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NetworkPolicyPeer");
      ds.field("podSelector", &self.podSelector());
      ds.field("namespaceSelector", &self.namespaceSelector());
      ds.field("ipBlock", &self.ipBlock());
      ds.finish()
  }
}
