// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum FlowSchemaSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FlowSchemaSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FlowSchemaSpec<'a> {
  type Inner = FlowSchemaSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FlowSchemaSpec<'a> {
  pub const VT_PRIORITYLEVELCONFIGURATION: flatbuffers::VOffsetT = 4;
  pub const VT_MATCHINGPRECEDENCE: flatbuffers::VOffsetT = 6;
  pub const VT_DISTINGUISHERMETHOD: flatbuffers::VOffsetT = 8;
  pub const VT_RULES: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FlowSchemaSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FlowSchemaSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<FlowSchemaSpec<'bldr>> {
    let mut builder = FlowSchemaSpecBuilder::new(_fbb);
    if let Some(x) = args.rules { builder.add_rules(x); }
    if let Some(x) = args.distinguisherMethod { builder.add_distinguisherMethod(x); }
    builder.add_matchingPrecedence(args.matchingPrecedence);
    if let Some(x) = args.priorityLevelConfiguration { builder.add_priorityLevelConfiguration(x); }
    builder.finish()
  }


  #[inline]
  pub fn priorityLevelConfiguration(&self) -> PriorityLevelConfigurationReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PriorityLevelConfigurationReference>>(FlowSchemaSpec::VT_PRIORITYLEVELCONFIGURATION, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn matchingPrecedence(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FlowSchemaSpec::VT_MATCHINGPRECEDENCE, Some(0)).unwrap()}
  }
  #[inline]
  pub fn distinguisherMethod(&self) -> FlowDistinguisherMethod<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<FlowDistinguisherMethod>>(FlowSchemaSpec::VT_DISTINGUISHERMETHOD, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn rules(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PolicyRulesWithSubjects<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PolicyRulesWithSubjects>>>>(FlowSchemaSpec::VT_RULES, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for FlowSchemaSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<PriorityLevelConfigurationReference>>("priorityLevelConfiguration", Self::VT_PRIORITYLEVELCONFIGURATION, false)?
     .visit_field::<i32>("matchingPrecedence", Self::VT_MATCHINGPRECEDENCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<FlowDistinguisherMethod>>("distinguisherMethod", Self::VT_DISTINGUISHERMETHOD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PolicyRulesWithSubjects>>>>("rules", Self::VT_RULES, false)?
     .finish();
    Ok(())
  }
}
pub struct FlowSchemaSpecArgs<'a> {
    pub priorityLevelConfiguration: Option<flatbuffers::WIPOffset<PriorityLevelConfigurationReference<'a>>>,
    pub matchingPrecedence: i32,
    pub distinguisherMethod: Option<flatbuffers::WIPOffset<FlowDistinguisherMethod<'a>>>,
    pub rules: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PolicyRulesWithSubjects<'a>>>>>,
}
impl<'a> Default for FlowSchemaSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    FlowSchemaSpecArgs {
      priorityLevelConfiguration: None,
      matchingPrecedence: 0,
      distinguisherMethod: None,
      rules: None,
    }
  }
}

impl Serialize for FlowSchemaSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("FlowSchemaSpec", 4)?;
      s.serialize_field("priorityLevelConfiguration", &self.priorityLevelConfiguration())?;
      s.serialize_field("matchingPrecedence", &self.matchingPrecedence())?;
      s.serialize_field("distinguisherMethod", &self.distinguisherMethod())?;
      s.serialize_field("rules", &self.rules())?;
    s.end()
  }
}

pub struct FlowSchemaSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FlowSchemaSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_priorityLevelConfiguration(&mut self, priorityLevelConfiguration: flatbuffers::WIPOffset<PriorityLevelConfigurationReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PriorityLevelConfigurationReference>>(FlowSchemaSpec::VT_PRIORITYLEVELCONFIGURATION, priorityLevelConfiguration);
  }
  #[inline]
  pub fn add_matchingPrecedence(&mut self, matchingPrecedence: i32) {
    self.fbb_.push_slot::<i32>(FlowSchemaSpec::VT_MATCHINGPRECEDENCE, matchingPrecedence, 0);
  }
  #[inline]
  pub fn add_distinguisherMethod(&mut self, distinguisherMethod: flatbuffers::WIPOffset<FlowDistinguisherMethod<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<FlowDistinguisherMethod>>(FlowSchemaSpec::VT_DISTINGUISHERMETHOD, distinguisherMethod);
  }
  #[inline]
  pub fn add_rules(&mut self, rules: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PolicyRulesWithSubjects<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlowSchemaSpec::VT_RULES, rules);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FlowSchemaSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FlowSchemaSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FlowSchemaSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FlowSchemaSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FlowSchemaSpec");
      ds.field("priorityLevelConfiguration", &self.priorityLevelConfiguration());
      ds.field("matchingPrecedence", &self.matchingPrecedence());
      ds.field("distinguisherMethod", &self.distinguisherMethod());
      ds.field("rules", &self.rules());
      ds.finish()
  }
}
