// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LimitedPriorityLevelConfigurationOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LimitedPriorityLevelConfiguration<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LimitedPriorityLevelConfiguration<'a> {
  type Inner = LimitedPriorityLevelConfiguration<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LimitedPriorityLevelConfiguration<'a> {
  pub const VT_NOMINALCONCURRENCYSHARES: flatbuffers::VOffsetT = 4;
  pub const VT_LIMITRESPONSE: flatbuffers::VOffsetT = 6;
  pub const VT_LENDABLEPERCENT: flatbuffers::VOffsetT = 8;
  pub const VT_BORROWINGLIMITPERCENT: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LimitedPriorityLevelConfiguration { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LimitedPriorityLevelConfigurationArgs<'args>
  ) -> flatbuffers::WIPOffset<LimitedPriorityLevelConfiguration<'bldr>> {
    let mut builder = LimitedPriorityLevelConfigurationBuilder::new(_fbb);
    builder.add_borrowingLimitPercent(args.borrowingLimitPercent);
    builder.add_lendablePercent(args.lendablePercent);
    if let Some(x) = args.limitResponse { builder.add_limitResponse(x); }
    builder.add_nominalConcurrencyShares(args.nominalConcurrencyShares);
    builder.finish()
  }


  #[inline]
  pub fn nominalConcurrencyShares(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LimitedPriorityLevelConfiguration::VT_NOMINALCONCURRENCYSHARES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn limitResponse(&self) -> LimitResponse<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<LimitResponse>>(LimitedPriorityLevelConfiguration::VT_LIMITRESPONSE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn lendablePercent(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LimitedPriorityLevelConfiguration::VT_LENDABLEPERCENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn borrowingLimitPercent(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LimitedPriorityLevelConfiguration::VT_BORROWINGLIMITPERCENT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for LimitedPriorityLevelConfiguration<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("nominalConcurrencyShares", Self::VT_NOMINALCONCURRENCYSHARES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<LimitResponse>>("limitResponse", Self::VT_LIMITRESPONSE, false)?
     .visit_field::<i32>("lendablePercent", Self::VT_LENDABLEPERCENT, false)?
     .visit_field::<i32>("borrowingLimitPercent", Self::VT_BORROWINGLIMITPERCENT, false)?
     .finish();
    Ok(())
  }
}
pub struct LimitedPriorityLevelConfigurationArgs<'a> {
    pub nominalConcurrencyShares: i32,
    pub limitResponse: Option<flatbuffers::WIPOffset<LimitResponse<'a>>>,
    pub lendablePercent: i32,
    pub borrowingLimitPercent: i32,
}
impl<'a> Default for LimitedPriorityLevelConfigurationArgs<'a> {
  #[inline]
  fn default() -> Self {
    LimitedPriorityLevelConfigurationArgs {
      nominalConcurrencyShares: 0,
      limitResponse: None,
      lendablePercent: 0,
      borrowingLimitPercent: 0,
    }
  }
}

impl Serialize for LimitedPriorityLevelConfiguration<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LimitedPriorityLevelConfiguration", 4)?;
      s.serialize_field("nominalConcurrencyShares", &self.nominalConcurrencyShares())?;
      s.serialize_field("limitResponse", &self.limitResponse())?;
      s.serialize_field("lendablePercent", &self.lendablePercent())?;
      s.serialize_field("borrowingLimitPercent", &self.borrowingLimitPercent())?;
    s.end()
  }
}

pub struct LimitedPriorityLevelConfigurationBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LimitedPriorityLevelConfigurationBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_nominalConcurrencyShares(&mut self, nominalConcurrencyShares: i32) {
    self.fbb_.push_slot::<i32>(LimitedPriorityLevelConfiguration::VT_NOMINALCONCURRENCYSHARES, nominalConcurrencyShares, 0);
  }
  #[inline]
  pub fn add_limitResponse(&mut self, limitResponse: flatbuffers::WIPOffset<LimitResponse<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<LimitResponse>>(LimitedPriorityLevelConfiguration::VT_LIMITRESPONSE, limitResponse);
  }
  #[inline]
  pub fn add_lendablePercent(&mut self, lendablePercent: i32) {
    self.fbb_.push_slot::<i32>(LimitedPriorityLevelConfiguration::VT_LENDABLEPERCENT, lendablePercent, 0);
  }
  #[inline]
  pub fn add_borrowingLimitPercent(&mut self, borrowingLimitPercent: i32) {
    self.fbb_.push_slot::<i32>(LimitedPriorityLevelConfiguration::VT_BORROWINGLIMITPERCENT, borrowingLimitPercent, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LimitedPriorityLevelConfigurationBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LimitedPriorityLevelConfigurationBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LimitedPriorityLevelConfiguration<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LimitedPriorityLevelConfiguration<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LimitedPriorityLevelConfiguration");
      ds.field("nominalConcurrencyShares", &self.nominalConcurrencyShares());
      ds.field("limitResponse", &self.limitResponse());
      ds.field("lendablePercent", &self.lendablePercent());
      ds.field("borrowingLimitPercent", &self.borrowingLimitPercent());
      ds.finish()
  }
}
