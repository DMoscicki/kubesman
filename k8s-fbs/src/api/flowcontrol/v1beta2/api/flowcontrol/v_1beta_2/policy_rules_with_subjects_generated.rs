// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PolicyRulesWithSubjectsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PolicyRulesWithSubjects<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PolicyRulesWithSubjects<'a> {
  type Inner = PolicyRulesWithSubjects<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PolicyRulesWithSubjects<'a> {
  pub const VT_SUBJECTS: flatbuffers::VOffsetT = 4;
  pub const VT_RESOURCERULES: flatbuffers::VOffsetT = 6;
  pub const VT_NONRESOURCERULES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PolicyRulesWithSubjects { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PolicyRulesWithSubjectsArgs<'args>
  ) -> flatbuffers::WIPOffset<PolicyRulesWithSubjects<'bldr>> {
    let mut builder = PolicyRulesWithSubjectsBuilder::new(_fbb);
    if let Some(x) = args.nonResourceRules { builder.add_nonResourceRules(x); }
    if let Some(x) = args.resourceRules { builder.add_resourceRules(x); }
    if let Some(x) = args.subjects { builder.add_subjects(x); }
    builder.finish()
  }


  #[inline]
  pub fn subjects(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Subject<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Subject>>>>(PolicyRulesWithSubjects::VT_SUBJECTS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resourceRules(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ResourcePolicyRule<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ResourcePolicyRule>>>>(PolicyRulesWithSubjects::VT_RESOURCERULES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn nonResourceRules(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NonResourcePolicyRule<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NonResourcePolicyRule>>>>(PolicyRulesWithSubjects::VT_NONRESOURCERULES, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for PolicyRulesWithSubjects<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Subject>>>>("subjects", Self::VT_SUBJECTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ResourcePolicyRule>>>>("resourceRules", Self::VT_RESOURCERULES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<NonResourcePolicyRule>>>>("nonResourceRules", Self::VT_NONRESOURCERULES, false)?
     .finish();
    Ok(())
  }
}
pub struct PolicyRulesWithSubjectsArgs<'a> {
    pub subjects: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Subject<'a>>>>>,
    pub resourceRules: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ResourcePolicyRule<'a>>>>>,
    pub nonResourceRules: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NonResourcePolicyRule<'a>>>>>,
}
impl<'a> Default for PolicyRulesWithSubjectsArgs<'a> {
  #[inline]
  fn default() -> Self {
    PolicyRulesWithSubjectsArgs {
      subjects: None,
      resourceRules: None,
      nonResourceRules: None,
    }
  }
}

impl Serialize for PolicyRulesWithSubjects<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PolicyRulesWithSubjects", 3)?;
      s.serialize_field("subjects", &self.subjects())?;
      s.serialize_field("resourceRules", &self.resourceRules())?;
      s.serialize_field("nonResourceRules", &self.nonResourceRules())?;
    s.end()
  }
}

pub struct PolicyRulesWithSubjectsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PolicyRulesWithSubjectsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_subjects(&mut self, subjects: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Subject<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PolicyRulesWithSubjects::VT_SUBJECTS, subjects);
  }
  #[inline]
  pub fn add_resourceRules(&mut self, resourceRules: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ResourcePolicyRule<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PolicyRulesWithSubjects::VT_RESOURCERULES, resourceRules);
  }
  #[inline]
  pub fn add_nonResourceRules(&mut self, nonResourceRules: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<NonResourcePolicyRule<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PolicyRulesWithSubjects::VT_NONRESOURCERULES, nonResourceRules);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PolicyRulesWithSubjectsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PolicyRulesWithSubjectsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PolicyRulesWithSubjects<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PolicyRulesWithSubjects<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PolicyRulesWithSubjects");
      ds.field("subjects", &self.subjects());
      ds.field("resourceRules", &self.resourceRules());
      ds.field("nonResourceRules", &self.nonResourceRules());
      ds.finish()
  }
}
