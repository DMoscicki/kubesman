// Generated from generated.proto

namespace apimachinery.pkg.runtime;

table RawExtension {
  raw:[ubyte] (id: 0);
}

table TypeMeta {
  apiVersion:string (id: 0);
  kind:string (id: 1);
}

table Unknown {
  typeMeta:apimachinery.pkg.runtime.TypeMeta (id: 0);
  raw:[ubyte] (id: 1);
  contentEncoding:string (id: 2);
  contentType:string (id: 3);
}

namespace apimachinery.pkg.apis.meta.v1;

table APIGroup {
  name:string (id: 0);
  versions:[apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery] (id: 1);
  preferredVersion:apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery (id: 2);
  serverAddressByClientCIDRs:[apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR] (id: 3);
}

table APIGroupList {
  groups:[apimachinery.pkg.apis.meta.v1.APIGroup] (id: 0);
}

table APIResource {
  name:string (id: 0);
  singularName:string (id: 5);
  namespaced:bool (id: 1);
  group:string (id: 7);
  version:string (id: 8);
  kind:string (id: 2);
  verbs:apimachinery.pkg.apis.meta.v1.Verbs (id: 3);
  shortNames:[string] (id: 4);
  categories:[string] (id: 6);
  storageVersionHash:string (id: 9);
}

table APIResourceList {
  groupVersion:string (id: 0);
  resources:[apimachinery.pkg.apis.meta.v1.APIResource] (id: 1);
}

table APIVersions {
  versions:[string] (id: 0);
  serverAddressByClientCIDRs:[apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR] (id: 1);
}

table ApplyOptions {
  dryRun:[string] (id: 0);
  force:bool (id: 1);
  fieldManager:string (id: 2);
}

table Condition {
  type:string (id: 0);
  status:string (id: 1);
  observedGeneration:long (id: 2);
  lastTransitionTime:apimachinery.pkg.apis.meta.v1.Time (id: 3);
  reason:string (id: 4);
  message:string (id: 5);
}

table CreateOptions {
  dryRun:[string] (id: 0);
  fieldManager:string (id: 1);
  fieldValidation:string (id: 2);
}

table DeleteOptions {
  gracePeriodSeconds:long (id: 0);
  preconditions:apimachinery.pkg.apis.meta.v1.Preconditions (id: 1);
  orphanDependents:bool (id: 2);
  propagationPolicy:string (id: 3);
  dryRun:[string] (id: 4);
}

table Duration {
  duration:long (id: 0);
}

table FieldsV1 {
  Raw:[ubyte] (id: 0);
}

table GetOptions {
  resourceVersion:string (id: 0);
}

table GroupKind {
  group:string (id: 0);
  kind:string (id: 1);
}

table GroupResource {
  group:string (id: 0);
  resource:string (id: 1);
}

table GroupVersion {
  group:string (id: 0);
  version:string (id: 1);
}

table GroupVersionForDiscovery {
  groupVersion:string (id: 0);
  version:string (id: 1);
}

table GroupVersionKind {
  group:string (id: 0);
  version:string (id: 1);
  kind:string (id: 2);
}

table GroupVersionResource {
  group:string (id: 0);
  version:string (id: 1);
  resource:string (id: 2);
}

table LabelSelector {
  matchLabels:[apimachinery.pkg.apis.meta.v1.LabelSelector_.MatchLabelsEntry] (id: 0);
  matchExpressions:[apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement] (id: 1);
}

namespace apimachinery.pkg.apis.meta.v1.LabelSelector_;

table MatchLabelsEntry {
  key:string (key);
  value:string;
}

namespace apimachinery.pkg.apis.meta.v1;

table LabelSelectorRequirement {
  key:string (id: 0);
  operator:string (id: 1);
  values:[string] (id: 2);
}

table List {
  metadata:apimachinery.pkg.apis.meta.v1.ListMeta (id: 0);
  items:[apimachinery.pkg.runtime.RawExtension] (id: 1);
}

table ListMeta {
  selfLink:string (id: 0);
  resourceVersion:string (id: 1);
  continue:string (id: 2);
  remainingItemCount:long (id: 3);
}

table ListOptions {
  labelSelector:string (id: 0);
  fieldSelector:string (id: 1);
  watch:bool (id: 2);
  allowWatchBookmarks:bool (id: 7);
  resourceVersion:string (id: 3);
  resourceVersionMatch:string (id: 8);
  timeoutSeconds:long (id: 4);
  limit:long (id: 5);
  continue:string (id: 6);
  sendInitialEvents:bool (id: 9);
}

table ManagedFieldsEntry {
  manager:string (id: 0);
  operation:string (id: 1);
  apiVersion:string (id: 2);
  time:apimachinery.pkg.apis.meta.v1.Time (id: 3);
  fieldsType:string (id: 4);
  fieldsV1:apimachinery.pkg.apis.meta.v1.FieldsV1 (id: 5);
  subresource:string (id: 6);
}

table MicroTime {
  seconds:long (id: 0);
  nanos:int (id: 1);
}

table ObjectMeta {
  name:string (id: 0);
  generateName:string (id: 1);
  namespace:string (id: 2);
  selfLink:string (id: 3);
  uid:string (id: 4);
  resourceVersion:string (id: 5);
  generation:long (id: 6);
  creationTimestamp:apimachinery.pkg.apis.meta.v1.Time (id: 7);
  deletionTimestamp:apimachinery.pkg.apis.meta.v1.Time (id: 8);
  deletionGracePeriodSeconds:long (id: 9);
  labels:[apimachinery.pkg.apis.meta.v1.ObjectMeta_.LabelsEntry] (id: 10);
  annotations:[apimachinery.pkg.apis.meta.v1.ObjectMeta_.AnnotationsEntry] (id: 11);
  ownerReferences:[apimachinery.pkg.apis.meta.v1.OwnerReference] (id: 12);
  finalizers:[string] (id: 13);
  managedFields:[apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry] (id: 14);
}

namespace apimachinery.pkg.apis.meta.v1.ObjectMeta_;

table LabelsEntry {
  key:string (key);
  value:string;
}

table AnnotationsEntry {
  key:string (key);
  value:string;
}

namespace apimachinery.pkg.apis.meta.v1;

table OwnerReference {
  apiVersion:string (id: 3);
  kind:string (id: 0);
  name:string (id: 1);
  uid:string (id: 2);
  controller:bool (id: 4);
  blockOwnerDeletion:bool (id: 5);
}

table PartialObjectMetadata {
  metadata:apimachinery.pkg.apis.meta.v1.ObjectMeta (id: 0);
}

table PartialObjectMetadataList {
  metadata:apimachinery.pkg.apis.meta.v1.ListMeta (id: 0);
  items:[apimachinery.pkg.apis.meta.v1.PartialObjectMetadata] (id: 1);
}

table Patch {
}

table PatchOptions {
  dryRun:[string] (id: 0);
  force:bool (id: 1);
  fieldManager:string (id: 2);
  fieldValidation:string (id: 3);
}

table Preconditions {
  uid:string (id: 0);
  resourceVersion:string (id: 1);
}

table RootPaths {
  paths:[string] (id: 0);
}

table ServerAddressByClientCIDR {
  clientCIDR:string (id: 0);
  serverAddress:string (id: 1);
}

table Status {
  metadata:apimachinery.pkg.apis.meta.v1.ListMeta (id: 0);
  status:string (id: 1);
  message:string (id: 2);
  reason:string (id: 3);
  details:apimachinery.pkg.apis.meta.v1.StatusDetails (id: 4);
  code:int (id: 5);
}

table StatusCause {
  reason:string (id: 0);
  message:string (id: 1);
  field:string (id: 2);
}

table StatusDetails {
  name:string (id: 0);
  group:string (id: 1);
  kind:string (id: 2);
  uid:string (id: 5);
  causes:[apimachinery.pkg.apis.meta.v1.StatusCause] (id: 3);
  retryAfterSeconds:int (id: 4);
}

table TableOptions {
  includeObject:string (id: 0);
}

table Time {
  seconds:long (id: 0);
  nanos:int (id: 1);
}

table Timestamp {
  seconds:long (id: 0);
  nanos:int (id: 1);
}

table TypeMeta {
  kind:string (id: 0);
  apiVersion:string (id: 1);
}

table UpdateOptions {
  dryRun:[string] (id: 0);
  fieldManager:string (id: 1);
  fieldValidation:string (id: 2);
}

table Verbs {
  items:[string] (id: 0);
}

table WatchEvent {
  type:string (id: 0);
  object:apimachinery.pkg.runtime.RawExtension (id: 1);
}

namespace api.flowcontrol.v1beta3;

table ExemptPriorityLevelConfiguration {
  nominalConcurrencyShares:int (id: 0);
  lendablePercent:int (id: 1);
}

table FlowDistinguisherMethod {
  type:string (id: 0);
}

table FlowSchema {
  metadata:apimachinery.pkg.apis.meta.v1.ObjectMeta (id: 0);
  spec:api.flowcontrol.v1beta3.FlowSchemaSpec (id: 1);
  status:api.flowcontrol.v1beta3.FlowSchemaStatus (id: 2);
}

table FlowSchemaCondition {
  type:string (id: 0);
  status:string (id: 1);
  lastTransitionTime:apimachinery.pkg.apis.meta.v1.Time (id: 2);
  reason:string (id: 3);
  message:string (id: 4);
}

table FlowSchemaList {
  metadata:apimachinery.pkg.apis.meta.v1.ListMeta (id: 0);
  items:[api.flowcontrol.v1beta3.FlowSchema] (id: 1);
}

table FlowSchemaSpec {
  priorityLevelConfiguration:api.flowcontrol.v1beta3.PriorityLevelConfigurationReference (id: 0);
  matchingPrecedence:int (id: 1);
  distinguisherMethod:api.flowcontrol.v1beta3.FlowDistinguisherMethod (id: 2);
  rules:[api.flowcontrol.v1beta3.PolicyRulesWithSubjects] (id: 3);
}

table FlowSchemaStatus {
  conditions:[api.flowcontrol.v1beta3.FlowSchemaCondition] (id: 0);
}

table GroupSubject {
  name:string (id: 0);
}

table LimitResponse {
  type:string (id: 0);
  queuing:api.flowcontrol.v1beta3.QueuingConfiguration (id: 1);
}

table LimitedPriorityLevelConfiguration {
  nominalConcurrencyShares:int (id: 0);
  limitResponse:api.flowcontrol.v1beta3.LimitResponse (id: 1);
  lendablePercent:int (id: 2);
  borrowingLimitPercent:int (id: 3);
}

table NonResourcePolicyRule {
  verbs:[string] (id: 0);
  nonResourceURLs:[string] (id: 1);
}

table PolicyRulesWithSubjects {
  subjects:[api.flowcontrol.v1beta3.Subject] (id: 0);
  resourceRules:[api.flowcontrol.v1beta3.ResourcePolicyRule] (id: 1);
  nonResourceRules:[api.flowcontrol.v1beta3.NonResourcePolicyRule] (id: 2);
}

table PriorityLevelConfiguration {
  metadata:apimachinery.pkg.apis.meta.v1.ObjectMeta (id: 0);
  spec:api.flowcontrol.v1beta3.PriorityLevelConfigurationSpec (id: 1);
  status:api.flowcontrol.v1beta3.PriorityLevelConfigurationStatus (id: 2);
}

table PriorityLevelConfigurationCondition {
  type:string (id: 0);
  status:string (id: 1);
  lastTransitionTime:apimachinery.pkg.apis.meta.v1.Time (id: 2);
  reason:string (id: 3);
  message:string (id: 4);
}

table PriorityLevelConfigurationList {
  metadata:apimachinery.pkg.apis.meta.v1.ListMeta (id: 0);
  items:[api.flowcontrol.v1beta3.PriorityLevelConfiguration] (id: 1);
}

table PriorityLevelConfigurationReference {
  name:string (id: 0);
}

table PriorityLevelConfigurationSpec {
  type:string (id: 0);
  limited:api.flowcontrol.v1beta3.LimitedPriorityLevelConfiguration (id: 1);
  exempt:api.flowcontrol.v1beta3.ExemptPriorityLevelConfiguration (id: 2);
}

table PriorityLevelConfigurationStatus {
  conditions:[api.flowcontrol.v1beta3.PriorityLevelConfigurationCondition] (id: 0);
}

table QueuingConfiguration {
  queues:int (id: 0);
  handSize:int (id: 1);
  queueLengthLimit:int (id: 2);
}

table ResourcePolicyRule {
  verbs:[string] (id: 0);
  apiGroups:[string] (id: 1);
  resources:[string] (id: 2);
  clusterScope:bool (id: 3);
  namespaces:[string] (id: 4);
}

table ServiceAccountSubject {
  namespace:string (id: 0);
  name:string (id: 1);
}

table Subject {
  kind:string (id: 0);
  user:api.flowcontrol.v1beta3.UserSubject (id: 1);
  group:api.flowcontrol.v1beta3.GroupSubject (id: 2);
  serviceAccount:api.flowcontrol.v1beta3.ServiceAccountSubject (id: 3);
}

table UserSubject {
  name:string (id: 0);
}

