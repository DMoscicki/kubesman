// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AffinityOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Affinity<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Affinity<'a> {
  type Inner = Affinity<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Affinity<'a> {
  pub const VT_NODEAFFINITY: flatbuffers::VOffsetT = 4;
  pub const VT_PODAFFINITY: flatbuffers::VOffsetT = 6;
  pub const VT_PODANTIAFFINITY: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Affinity { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AffinityArgs<'args>
  ) -> flatbuffers::WIPOffset<Affinity<'bldr>> {
    let mut builder = AffinityBuilder::new(_fbb);
    if let Some(x) = args.podAntiAffinity { builder.add_podAntiAffinity(x); }
    if let Some(x) = args.podAffinity { builder.add_podAffinity(x); }
    if let Some(x) = args.nodeAffinity { builder.add_nodeAffinity(x); }
    builder.finish()
  }


  #[inline]
  pub fn nodeAffinity(&self) -> NodeAffinity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<NodeAffinity>>(Affinity::VT_NODEAFFINITY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn podAffinity(&self) -> PodAffinity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PodAffinity>>(Affinity::VT_PODAFFINITY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn podAntiAffinity(&self) -> PodAntiAffinity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PodAntiAffinity>>(Affinity::VT_PODANTIAFFINITY, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for Affinity<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<NodeAffinity>>("nodeAffinity", Self::VT_NODEAFFINITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PodAffinity>>("podAffinity", Self::VT_PODAFFINITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PodAntiAffinity>>("podAntiAffinity", Self::VT_PODANTIAFFINITY, false)?
     .finish();
    Ok(())
  }
}
pub struct AffinityArgs<'a> {
    pub nodeAffinity: Option<flatbuffers::WIPOffset<NodeAffinity<'a>>>,
    pub podAffinity: Option<flatbuffers::WIPOffset<PodAffinity<'a>>>,
    pub podAntiAffinity: Option<flatbuffers::WIPOffset<PodAntiAffinity<'a>>>,
}
impl<'a> Default for AffinityArgs<'a> {
  #[inline]
  fn default() -> Self {
    AffinityArgs {
      nodeAffinity: None,
      podAffinity: None,
      podAntiAffinity: None,
    }
  }
}

impl Serialize for Affinity<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("Affinity", 3)?;
      s.serialize_field("nodeAffinity", &self.nodeAffinity())?;
      s.serialize_field("podAffinity", &self.podAffinity())?;
      s.serialize_field("podAntiAffinity", &self.podAntiAffinity())?;
    s.end()
  }
}

pub struct AffinityBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AffinityBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_nodeAffinity(&mut self, nodeAffinity: flatbuffers::WIPOffset<NodeAffinity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<NodeAffinity>>(Affinity::VT_NODEAFFINITY, nodeAffinity);
  }
  #[inline]
  pub fn add_podAffinity(&mut self, podAffinity: flatbuffers::WIPOffset<PodAffinity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PodAffinity>>(Affinity::VT_PODAFFINITY, podAffinity);
  }
  #[inline]
  pub fn add_podAntiAffinity(&mut self, podAntiAffinity: flatbuffers::WIPOffset<PodAntiAffinity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PodAntiAffinity>>(Affinity::VT_PODANTIAFFINITY, podAntiAffinity);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AffinityBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AffinityBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Affinity<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Affinity<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Affinity");
      ds.field("nodeAffinity", &self.nodeAffinity());
      ds.field("podAffinity", &self.podAffinity());
      ds.field("podAntiAffinity", &self.podAntiAffinity());
      ds.finish()
  }
}
