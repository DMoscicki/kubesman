// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AzureDiskVolumeSourceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AzureDiskVolumeSource<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AzureDiskVolumeSource<'a> {
  type Inner = AzureDiskVolumeSource<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AzureDiskVolumeSource<'a> {
  pub const VT_DISKNAME: flatbuffers::VOffsetT = 4;
  pub const VT_DISKURI: flatbuffers::VOffsetT = 6;
  pub const VT_CACHINGMODE: flatbuffers::VOffsetT = 8;
  pub const VT_FSTYPE: flatbuffers::VOffsetT = 10;
  pub const VT_READONLY: flatbuffers::VOffsetT = 12;
  pub const VT_KIND: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AzureDiskVolumeSource { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AzureDiskVolumeSourceArgs<'args>
  ) -> flatbuffers::WIPOffset<AzureDiskVolumeSource<'bldr>> {
    let mut builder = AzureDiskVolumeSourceBuilder::new(_fbb);
    if let Some(x) = args.kind { builder.add_kind(x); }
    if let Some(x) = args.fsType { builder.add_fsType(x); }
    if let Some(x) = args.cachingMode { builder.add_cachingMode(x); }
    if let Some(x) = args.diskURI { builder.add_diskURI(x); }
    if let Some(x) = args.diskName { builder.add_diskName(x); }
    builder.add_readOnly(args.readOnly);
    builder.finish()
  }


  #[inline]
  pub fn diskName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AzureDiskVolumeSource::VT_DISKNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn diskURI(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AzureDiskVolumeSource::VT_DISKURI, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn cachingMode(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AzureDiskVolumeSource::VT_CACHINGMODE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn fsType(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AzureDiskVolumeSource::VT_FSTYPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn readOnly(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AzureDiskVolumeSource::VT_READONLY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn kind(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AzureDiskVolumeSource::VT_KIND, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for AzureDiskVolumeSource<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("diskName", Self::VT_DISKNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("diskURI", Self::VT_DISKURI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cachingMode", Self::VT_CACHINGMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fsType", Self::VT_FSTYPE, false)?
     .visit_field::<bool>("readOnly", Self::VT_READONLY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("kind", Self::VT_KIND, false)?
     .finish();
    Ok(())
  }
}
pub struct AzureDiskVolumeSourceArgs<'a> {
    pub diskName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub diskURI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cachingMode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fsType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub readOnly: bool,
    pub kind: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AzureDiskVolumeSourceArgs<'a> {
  #[inline]
  fn default() -> Self {
    AzureDiskVolumeSourceArgs {
      diskName: None,
      diskURI: None,
      cachingMode: None,
      fsType: None,
      readOnly: false,
      kind: None,
    }
  }
}

impl Serialize for AzureDiskVolumeSource<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AzureDiskVolumeSource", 6)?;
      s.serialize_field("diskName", &self.diskName())?;
      s.serialize_field("diskURI", &self.diskURI())?;
      s.serialize_field("cachingMode", &self.cachingMode())?;
      s.serialize_field("fsType", &self.fsType())?;
      s.serialize_field("readOnly", &self.readOnly())?;
      s.serialize_field("kind", &self.kind())?;
    s.end()
  }
}

pub struct AzureDiskVolumeSourceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AzureDiskVolumeSourceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_diskName(&mut self, diskName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AzureDiskVolumeSource::VT_DISKNAME, diskName);
  }
  #[inline]
  pub fn add_diskURI(&mut self, diskURI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AzureDiskVolumeSource::VT_DISKURI, diskURI);
  }
  #[inline]
  pub fn add_cachingMode(&mut self, cachingMode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AzureDiskVolumeSource::VT_CACHINGMODE, cachingMode);
  }
  #[inline]
  pub fn add_fsType(&mut self, fsType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AzureDiskVolumeSource::VT_FSTYPE, fsType);
  }
  #[inline]
  pub fn add_readOnly(&mut self, readOnly: bool) {
    self.fbb_.push_slot::<bool>(AzureDiskVolumeSource::VT_READONLY, readOnly, false);
  }
  #[inline]
  pub fn add_kind(&mut self, kind: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AzureDiskVolumeSource::VT_KIND, kind);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AzureDiskVolumeSourceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AzureDiskVolumeSourceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AzureDiskVolumeSource<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AzureDiskVolumeSource<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AzureDiskVolumeSource");
      ds.field("diskName", &self.diskName());
      ds.field("diskURI", &self.diskURI());
      ds.field("cachingMode", &self.cachingMode());
      ds.field("fsType", &self.fsType());
      ds.field("readOnly", &self.readOnly());
      ds.field("kind", &self.kind());
      ds.finish()
  }
}
