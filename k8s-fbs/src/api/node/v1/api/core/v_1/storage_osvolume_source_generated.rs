// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StorageOSVolumeSourceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StorageOSVolumeSource<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StorageOSVolumeSource<'a> {
  type Inner = StorageOSVolumeSource<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StorageOSVolumeSource<'a> {
  pub const VT_VOLUMENAME: flatbuffers::VOffsetT = 4;
  pub const VT_VOLUMENAMESPACE: flatbuffers::VOffsetT = 6;
  pub const VT_FSTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_READONLY: flatbuffers::VOffsetT = 10;
  pub const VT_SECRETREF: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StorageOSVolumeSource { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StorageOSVolumeSourceArgs<'args>
  ) -> flatbuffers::WIPOffset<StorageOSVolumeSource<'bldr>> {
    let mut builder = StorageOSVolumeSourceBuilder::new(_fbb);
    if let Some(x) = args.secretRef { builder.add_secretRef(x); }
    if let Some(x) = args.fsType { builder.add_fsType(x); }
    if let Some(x) = args.volumeNamespace { builder.add_volumeNamespace(x); }
    if let Some(x) = args.volumeName { builder.add_volumeName(x); }
    builder.add_readOnly(args.readOnly);
    builder.finish()
  }


  #[inline]
  pub fn volumeName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StorageOSVolumeSource::VT_VOLUMENAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn volumeNamespace(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StorageOSVolumeSource::VT_VOLUMENAMESPACE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn fsType(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StorageOSVolumeSource::VT_FSTYPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn readOnly(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StorageOSVolumeSource::VT_READONLY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn secretRef(&self) -> LocalObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<LocalObjectReference>>(StorageOSVolumeSource::VT_SECRETREF, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for StorageOSVolumeSource<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volumeName", Self::VT_VOLUMENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volumeNamespace", Self::VT_VOLUMENAMESPACE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fsType", Self::VT_FSTYPE, false)?
     .visit_field::<bool>("readOnly", Self::VT_READONLY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<LocalObjectReference>>("secretRef", Self::VT_SECRETREF, false)?
     .finish();
    Ok(())
  }
}
pub struct StorageOSVolumeSourceArgs<'a> {
    pub volumeName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub volumeNamespace: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fsType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub readOnly: bool,
    pub secretRef: Option<flatbuffers::WIPOffset<LocalObjectReference<'a>>>,
}
impl<'a> Default for StorageOSVolumeSourceArgs<'a> {
  #[inline]
  fn default() -> Self {
    StorageOSVolumeSourceArgs {
      volumeName: None,
      volumeNamespace: None,
      fsType: None,
      readOnly: false,
      secretRef: None,
    }
  }
}

impl Serialize for StorageOSVolumeSource<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("StorageOSVolumeSource", 5)?;
      s.serialize_field("volumeName", &self.volumeName())?;
      s.serialize_field("volumeNamespace", &self.volumeNamespace())?;
      s.serialize_field("fsType", &self.fsType())?;
      s.serialize_field("readOnly", &self.readOnly())?;
      s.serialize_field("secretRef", &self.secretRef())?;
    s.end()
  }
}

pub struct StorageOSVolumeSourceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StorageOSVolumeSourceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_volumeName(&mut self, volumeName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageOSVolumeSource::VT_VOLUMENAME, volumeName);
  }
  #[inline]
  pub fn add_volumeNamespace(&mut self, volumeNamespace: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageOSVolumeSource::VT_VOLUMENAMESPACE, volumeNamespace);
  }
  #[inline]
  pub fn add_fsType(&mut self, fsType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageOSVolumeSource::VT_FSTYPE, fsType);
  }
  #[inline]
  pub fn add_readOnly(&mut self, readOnly: bool) {
    self.fbb_.push_slot::<bool>(StorageOSVolumeSource::VT_READONLY, readOnly, false);
  }
  #[inline]
  pub fn add_secretRef(&mut self, secretRef: flatbuffers::WIPOffset<LocalObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<LocalObjectReference>>(StorageOSVolumeSource::VT_SECRETREF, secretRef);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StorageOSVolumeSourceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StorageOSVolumeSourceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StorageOSVolumeSource<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StorageOSVolumeSource<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StorageOSVolumeSource");
      ds.field("volumeName", &self.volumeName());
      ds.field("volumeNamespace", &self.volumeNamespace());
      ds.field("fsType", &self.fsType());
      ds.field("readOnly", &self.readOnly());
      ds.field("secretRef", &self.secretRef());
      ds.finish()
  }
}
