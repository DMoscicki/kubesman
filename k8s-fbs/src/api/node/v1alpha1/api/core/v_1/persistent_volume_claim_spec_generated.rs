// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PersistentVolumeClaimSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PersistentVolumeClaimSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PersistentVolumeClaimSpec<'a> {
  type Inner = PersistentVolumeClaimSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PersistentVolumeClaimSpec<'a> {
  pub const VT_ACCESSMODES: flatbuffers::VOffsetT = 4;
  pub const VT_SELECTOR: flatbuffers::VOffsetT = 6;
  pub const VT_RESOURCES: flatbuffers::VOffsetT = 8;
  pub const VT_VOLUMENAME: flatbuffers::VOffsetT = 10;
  pub const VT_STORAGECLASSNAME: flatbuffers::VOffsetT = 12;
  pub const VT_VOLUMEMODE: flatbuffers::VOffsetT = 14;
  pub const VT_DATASOURCE: flatbuffers::VOffsetT = 16;
  pub const VT_DATASOURCEREF: flatbuffers::VOffsetT = 18;
  pub const VT_VOLUMEATTRIBUTESCLASSNAME: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PersistentVolumeClaimSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PersistentVolumeClaimSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<PersistentVolumeClaimSpec<'bldr>> {
    let mut builder = PersistentVolumeClaimSpecBuilder::new(_fbb);
    if let Some(x) = args.volumeAttributesClassName { builder.add_volumeAttributesClassName(x); }
    if let Some(x) = args.dataSourceRef { builder.add_dataSourceRef(x); }
    if let Some(x) = args.dataSource { builder.add_dataSource(x); }
    if let Some(x) = args.volumeMode { builder.add_volumeMode(x); }
    if let Some(x) = args.storageClassName { builder.add_storageClassName(x); }
    if let Some(x) = args.volumeName { builder.add_volumeName(x); }
    if let Some(x) = args.resources { builder.add_resources(x); }
    if let Some(x) = args.selector { builder.add_selector(x); }
    if let Some(x) = args.accessModes { builder.add_accessModes(x); }
    builder.finish()
  }


  #[inline]
  pub fn accessModes(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PersistentVolumeClaimSpec::VT_ACCESSMODES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn selector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(PersistentVolumeClaimSpec::VT_SELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resources(&self) -> VolumeResourceRequirements<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VolumeResourceRequirements>>(PersistentVolumeClaimSpec::VT_RESOURCES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn volumeName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeClaimSpec::VT_VOLUMENAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn storageClassName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeClaimSpec::VT_STORAGECLASSNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn volumeMode(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeClaimSpec::VT_VOLUMEMODE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn dataSource(&self) -> TypedLocalObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<TypedLocalObjectReference>>(PersistentVolumeClaimSpec::VT_DATASOURCE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn dataSourceRef(&self) -> TypedObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<TypedObjectReference>>(PersistentVolumeClaimSpec::VT_DATASOURCEREF, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn volumeAttributesClassName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeClaimSpec::VT_VOLUMEATTRIBUTESCLASSNAME, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for PersistentVolumeClaimSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("accessModes", Self::VT_ACCESSMODES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("selector", Self::VT_SELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VolumeResourceRequirements>>("resources", Self::VT_RESOURCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volumeName", Self::VT_VOLUMENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("storageClassName", Self::VT_STORAGECLASSNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volumeMode", Self::VT_VOLUMEMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<TypedLocalObjectReference>>("dataSource", Self::VT_DATASOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<TypedObjectReference>>("dataSourceRef", Self::VT_DATASOURCEREF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volumeAttributesClassName", Self::VT_VOLUMEATTRIBUTESCLASSNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct PersistentVolumeClaimSpecArgs<'a> {
    pub accessModes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub selector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub resources: Option<flatbuffers::WIPOffset<VolumeResourceRequirements<'a>>>,
    pub volumeName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub storageClassName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub volumeMode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataSource: Option<flatbuffers::WIPOffset<TypedLocalObjectReference<'a>>>,
    pub dataSourceRef: Option<flatbuffers::WIPOffset<TypedObjectReference<'a>>>,
    pub volumeAttributesClassName: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PersistentVolumeClaimSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    PersistentVolumeClaimSpecArgs {
      accessModes: None,
      selector: None,
      resources: None,
      volumeName: None,
      storageClassName: None,
      volumeMode: None,
      dataSource: None,
      dataSourceRef: None,
      volumeAttributesClassName: None,
    }
  }
}

impl Serialize for PersistentVolumeClaimSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PersistentVolumeClaimSpec", 9)?;
      s.serialize_field("accessModes", &self.accessModes())?;
      s.serialize_field("selector", &self.selector())?;
      s.serialize_field("resources", &self.resources())?;
      s.serialize_field("volumeName", &self.volumeName())?;
      s.serialize_field("storageClassName", &self.storageClassName())?;
      s.serialize_field("volumeMode", &self.volumeMode())?;
      s.serialize_field("dataSource", &self.dataSource())?;
      s.serialize_field("dataSourceRef", &self.dataSourceRef())?;
      s.serialize_field("volumeAttributesClassName", &self.volumeAttributesClassName())?;
    s.end()
  }
}

pub struct PersistentVolumeClaimSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PersistentVolumeClaimSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_accessModes(&mut self, accessModes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimSpec::VT_ACCESSMODES, accessModes);
  }
  #[inline]
  pub fn add_selector(&mut self, selector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(PersistentVolumeClaimSpec::VT_SELECTOR, selector);
  }
  #[inline]
  pub fn add_resources(&mut self, resources: flatbuffers::WIPOffset<VolumeResourceRequirements<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VolumeResourceRequirements>>(PersistentVolumeClaimSpec::VT_RESOURCES, resources);
  }
  #[inline]
  pub fn add_volumeName(&mut self, volumeName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimSpec::VT_VOLUMENAME, volumeName);
  }
  #[inline]
  pub fn add_storageClassName(&mut self, storageClassName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimSpec::VT_STORAGECLASSNAME, storageClassName);
  }
  #[inline]
  pub fn add_volumeMode(&mut self, volumeMode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimSpec::VT_VOLUMEMODE, volumeMode);
  }
  #[inline]
  pub fn add_dataSource(&mut self, dataSource: flatbuffers::WIPOffset<TypedLocalObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<TypedLocalObjectReference>>(PersistentVolumeClaimSpec::VT_DATASOURCE, dataSource);
  }
  #[inline]
  pub fn add_dataSourceRef(&mut self, dataSourceRef: flatbuffers::WIPOffset<TypedObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<TypedObjectReference>>(PersistentVolumeClaimSpec::VT_DATASOURCEREF, dataSourceRef);
  }
  #[inline]
  pub fn add_volumeAttributesClassName(&mut self, volumeAttributesClassName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimSpec::VT_VOLUMEATTRIBUTESCLASSNAME, volumeAttributesClassName);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PersistentVolumeClaimSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PersistentVolumeClaimSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PersistentVolumeClaimSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PersistentVolumeClaimSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PersistentVolumeClaimSpec");
      ds.field("accessModes", &self.accessModes());
      ds.field("selector", &self.selector());
      ds.field("resources", &self.resources());
      ds.field("volumeName", &self.volumeName());
      ds.field("storageClassName", &self.storageClassName());
      ds.field("volumeMode", &self.volumeMode());
      ds.field("dataSource", &self.dataSource());
      ds.field("dataSourceRef", &self.dataSourceRef());
      ds.field("volumeAttributesClassName", &self.volumeAttributesClassName());
      ds.finish()
  }
}
