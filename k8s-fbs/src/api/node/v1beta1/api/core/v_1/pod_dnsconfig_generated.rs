// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PodDNSConfigOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PodDNSConfig<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PodDNSConfig<'a> {
  type Inner = PodDNSConfig<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PodDNSConfig<'a> {
  pub const VT_NAMESERVERS: flatbuffers::VOffsetT = 4;
  pub const VT_SEARCHES: flatbuffers::VOffsetT = 6;
  pub const VT_OPTIONS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PodDNSConfig { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PodDNSConfigArgs<'args>
  ) -> flatbuffers::WIPOffset<PodDNSConfig<'bldr>> {
    let mut builder = PodDNSConfigBuilder::new(_fbb);
    if let Some(x) = args.options { builder.add_options(x); }
    if let Some(x) = args.searches { builder.add_searches(x); }
    if let Some(x) = args.nameservers { builder.add_nameservers(x); }
    builder.finish()
  }


  #[inline]
  pub fn nameservers(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PodDNSConfig::VT_NAMESERVERS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn searches(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PodDNSConfig::VT_SEARCHES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn options(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodDNSConfigOption<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodDNSConfigOption>>>>(PodDNSConfig::VT_OPTIONS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for PodDNSConfig<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("nameservers", Self::VT_NAMESERVERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("searches", Self::VT_SEARCHES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PodDNSConfigOption>>>>("options", Self::VT_OPTIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct PodDNSConfigArgs<'a> {
    pub nameservers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub searches: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub options: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PodDNSConfigOption<'a>>>>>,
}
impl<'a> Default for PodDNSConfigArgs<'a> {
  #[inline]
  fn default() -> Self {
    PodDNSConfigArgs {
      nameservers: None,
      searches: None,
      options: None,
    }
  }
}

impl Serialize for PodDNSConfig<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PodDNSConfig", 3)?;
      s.serialize_field("nameservers", &self.nameservers())?;
      s.serialize_field("searches", &self.searches())?;
      s.serialize_field("options", &self.options())?;
    s.end()
  }
}

pub struct PodDNSConfigBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PodDNSConfigBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_nameservers(&mut self, nameservers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodDNSConfig::VT_NAMESERVERS, nameservers);
  }
  #[inline]
  pub fn add_searches(&mut self, searches: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodDNSConfig::VT_SEARCHES, searches);
  }
  #[inline]
  pub fn add_options(&mut self, options: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PodDNSConfigOption<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodDNSConfig::VT_OPTIONS, options);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PodDNSConfigBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PodDNSConfigBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PodDNSConfig<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PodDNSConfig<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PodDNSConfig");
      ds.field("nameservers", &self.nameservers());
      ds.field("searches", &self.searches());
      ds.field("options", &self.options());
      ds.finish()
  }
}
