// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PodDisruptionBudgetSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PodDisruptionBudgetSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PodDisruptionBudgetSpec<'a> {
  type Inner = PodDisruptionBudgetSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PodDisruptionBudgetSpec<'a> {
  pub const VT_MINAVAILABLE: flatbuffers::VOffsetT = 4;
  pub const VT_SELECTOR: flatbuffers::VOffsetT = 6;
  pub const VT_MAXUNAVAILABLE: flatbuffers::VOffsetT = 8;
  pub const VT_UNHEALTHYPODEVICTIONPOLICY: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PodDisruptionBudgetSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PodDisruptionBudgetSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<PodDisruptionBudgetSpec<'bldr>> {
    let mut builder = PodDisruptionBudgetSpecBuilder::new(_fbb);
    if let Some(x) = args.unhealthyPodEvictionPolicy { builder.add_unhealthyPodEvictionPolicy(x); }
    if let Some(x) = args.maxUnavailable { builder.add_maxUnavailable(x); }
    if let Some(x) = args.selector { builder.add_selector(x); }
    if let Some(x) = args.minAvailable { builder.add_minAvailable(x); }
    builder.finish()
  }


  #[inline]
  pub fn minAvailable(&self) -> super::super::super::apimachinery::pkg::util::intstr::IntOrString<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>(PodDisruptionBudgetSpec::VT_MINAVAILABLE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn selector(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(PodDisruptionBudgetSpec::VT_SELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn maxUnavailable(&self) -> super::super::super::apimachinery::pkg::util::intstr::IntOrString<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>(PodDisruptionBudgetSpec::VT_MAXUNAVAILABLE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn unhealthyPodEvictionPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PodDisruptionBudgetSpec::VT_UNHEALTHYPODEVICTIONPOLICY, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for PodDisruptionBudgetSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>("minAvailable", Self::VT_MINAVAILABLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>("selector", Self::VT_SELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>("maxUnavailable", Self::VT_MAXUNAVAILABLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unhealthyPodEvictionPolicy", Self::VT_UNHEALTHYPODEVICTIONPOLICY, false)?
     .finish();
    Ok(())
  }
}
pub struct PodDisruptionBudgetSpecArgs<'a> {
    pub minAvailable: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString<'a>>>,
    pub selector: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'a>>>,
    pub maxUnavailable: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString<'a>>>,
    pub unhealthyPodEvictionPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PodDisruptionBudgetSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    PodDisruptionBudgetSpecArgs {
      minAvailable: None,
      selector: None,
      maxUnavailable: None,
      unhealthyPodEvictionPolicy: None,
    }
  }
}

impl Serialize for PodDisruptionBudgetSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PodDisruptionBudgetSpec", 4)?;
      s.serialize_field("minAvailable", &self.minAvailable())?;
      s.serialize_field("selector", &self.selector())?;
      s.serialize_field("maxUnavailable", &self.maxUnavailable())?;
      s.serialize_field("unhealthyPodEvictionPolicy", &self.unhealthyPodEvictionPolicy())?;
    s.end()
  }
}

pub struct PodDisruptionBudgetSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PodDisruptionBudgetSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_minAvailable(&mut self, minAvailable: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>(PodDisruptionBudgetSpec::VT_MINAVAILABLE, minAvailable);
  }
  #[inline]
  pub fn add_selector(&mut self, selector: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::LabelSelector>>(PodDisruptionBudgetSpec::VT_SELECTOR, selector);
  }
  #[inline]
  pub fn add_maxUnavailable(&mut self, maxUnavailable: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>(PodDisruptionBudgetSpec::VT_MAXUNAVAILABLE, maxUnavailable);
  }
  #[inline]
  pub fn add_unhealthyPodEvictionPolicy(&mut self, unhealthyPodEvictionPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PodDisruptionBudgetSpec::VT_UNHEALTHYPODEVICTIONPOLICY, unhealthyPodEvictionPolicy);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PodDisruptionBudgetSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PodDisruptionBudgetSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PodDisruptionBudgetSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PodDisruptionBudgetSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PodDisruptionBudgetSpec");
      ds.field("minAvailable", &self.minAvailable());
      ds.field("selector", &self.selector());
      ds.field("maxUnavailable", &self.maxUnavailable());
      ds.field("unhealthyPodEvictionPolicy", &self.unhealthyPodEvictionPolicy());
      ds.finish()
  }
}
