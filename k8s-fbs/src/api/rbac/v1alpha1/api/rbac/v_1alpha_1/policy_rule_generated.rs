// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PolicyRuleOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PolicyRule<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PolicyRule<'a> {
  type Inner = PolicyRule<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PolicyRule<'a> {
  pub const VT_VERBS: flatbuffers::VOffsetT = 4;
  pub const VT_APIGROUPS: flatbuffers::VOffsetT = 6;
  pub const VT_RESOURCES: flatbuffers::VOffsetT = 8;
  pub const VT_RESOURCENAMES: flatbuffers::VOffsetT = 10;
  pub const VT_NONRESOURCEURLS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PolicyRule { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PolicyRuleArgs<'args>
  ) -> flatbuffers::WIPOffset<PolicyRule<'bldr>> {
    let mut builder = PolicyRuleBuilder::new(_fbb);
    if let Some(x) = args.nonResourceURLs { builder.add_nonResourceURLs(x); }
    if let Some(x) = args.resourceNames { builder.add_resourceNames(x); }
    if let Some(x) = args.resources { builder.add_resources(x); }
    if let Some(x) = args.apiGroups { builder.add_apiGroups(x); }
    if let Some(x) = args.verbs { builder.add_verbs(x); }
    builder.finish()
  }


  #[inline]
  pub fn verbs(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PolicyRule::VT_VERBS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn apiGroups(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PolicyRule::VT_APIGROUPS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resources(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PolicyRule::VT_RESOURCES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resourceNames(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PolicyRule::VT_RESOURCENAMES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn nonResourceURLs(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PolicyRule::VT_NONRESOURCEURLS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for PolicyRule<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("verbs", Self::VT_VERBS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("apiGroups", Self::VT_APIGROUPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("resources", Self::VT_RESOURCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("resourceNames", Self::VT_RESOURCENAMES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("nonResourceURLs", Self::VT_NONRESOURCEURLS, false)?
     .finish();
    Ok(())
  }
}
pub struct PolicyRuleArgs<'a> {
    pub verbs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub apiGroups: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub resources: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub resourceNames: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub nonResourceURLs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for PolicyRuleArgs<'a> {
  #[inline]
  fn default() -> Self {
    PolicyRuleArgs {
      verbs: None,
      apiGroups: None,
      resources: None,
      resourceNames: None,
      nonResourceURLs: None,
    }
  }
}

impl Serialize for PolicyRule<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PolicyRule", 5)?;
      s.serialize_field("verbs", &self.verbs())?;
      s.serialize_field("apiGroups", &self.apiGroups())?;
      s.serialize_field("resources", &self.resources())?;
      s.serialize_field("resourceNames", &self.resourceNames())?;
      s.serialize_field("nonResourceURLs", &self.nonResourceURLs())?;
    s.end()
  }
}

pub struct PolicyRuleBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PolicyRuleBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_verbs(&mut self, verbs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PolicyRule::VT_VERBS, verbs);
  }
  #[inline]
  pub fn add_apiGroups(&mut self, apiGroups: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PolicyRule::VT_APIGROUPS, apiGroups);
  }
  #[inline]
  pub fn add_resources(&mut self, resources: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PolicyRule::VT_RESOURCES, resources);
  }
  #[inline]
  pub fn add_resourceNames(&mut self, resourceNames: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PolicyRule::VT_RESOURCENAMES, resourceNames);
  }
  #[inline]
  pub fn add_nonResourceURLs(&mut self, nonResourceURLs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PolicyRule::VT_NONRESOURCEURLS, nonResourceURLs);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PolicyRuleBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PolicyRuleBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PolicyRule<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PolicyRule<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PolicyRule");
      ds.field("verbs", &self.verbs());
      ds.field("apiGroups", &self.apiGroups());
      ds.field("resources", &self.resources());
      ds.field("resourceNames", &self.resourceNames());
      ds.field("nonResourceURLs", &self.nonResourceURLs());
      ds.finish()
  }
}
