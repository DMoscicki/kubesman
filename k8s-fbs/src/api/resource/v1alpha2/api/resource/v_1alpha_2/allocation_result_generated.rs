// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum AllocationResultOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AllocationResult<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AllocationResult<'a> {
  type Inner = AllocationResult<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AllocationResult<'a> {
  pub const VT_RESOURCEHANDLES: flatbuffers::VOffsetT = 4;
  pub const VT_AVAILABLEONNODES: flatbuffers::VOffsetT = 6;
  pub const VT_SHAREABLE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AllocationResult { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AllocationResultArgs<'args>
  ) -> flatbuffers::WIPOffset<AllocationResult<'bldr>> {
    let mut builder = AllocationResultBuilder::new(_fbb);
    if let Some(x) = args.availableOnNodes { builder.add_availableOnNodes(x); }
    if let Some(x) = args.resourceHandles { builder.add_resourceHandles(x); }
    builder.add_shareable(args.shareable);
    builder.finish()
  }


  #[inline]
  pub fn resourceHandles(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ResourceHandle<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ResourceHandle>>>>(AllocationResult::VT_RESOURCEHANDLES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn availableOnNodes(&self) -> super::super::core::v_1::NodeSelector<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::core::v_1::NodeSelector>>(AllocationResult::VT_AVAILABLEONNODES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn shareable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AllocationResult::VT_SHAREABLE, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AllocationResult<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ResourceHandle>>>>("resourceHandles", Self::VT_RESOURCEHANDLES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::core::v_1::NodeSelector>>("availableOnNodes", Self::VT_AVAILABLEONNODES, false)?
     .visit_field::<bool>("shareable", Self::VT_SHAREABLE, false)?
     .finish();
    Ok(())
  }
}
pub struct AllocationResultArgs<'a> {
    pub resourceHandles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ResourceHandle<'a>>>>>,
    pub availableOnNodes: Option<flatbuffers::WIPOffset<super::super::core::v_1::NodeSelector<'a>>>,
    pub shareable: bool,
}
impl<'a> Default for AllocationResultArgs<'a> {
  #[inline]
  fn default() -> Self {
    AllocationResultArgs {
      resourceHandles: None,
      availableOnNodes: None,
      shareable: false,
    }
  }
}

impl Serialize for AllocationResult<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("AllocationResult", 3)?;
      s.serialize_field("resourceHandles", &self.resourceHandles())?;
      s.serialize_field("availableOnNodes", &self.availableOnNodes())?;
      s.serialize_field("shareable", &self.shareable())?;
    s.end()
  }
}

pub struct AllocationResultBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AllocationResultBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_resourceHandles(&mut self, resourceHandles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ResourceHandle<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AllocationResult::VT_RESOURCEHANDLES, resourceHandles);
  }
  #[inline]
  pub fn add_availableOnNodes(&mut self, availableOnNodes: flatbuffers::WIPOffset<super::super::core::v_1::NodeSelector<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::core::v_1::NodeSelector>>(AllocationResult::VT_AVAILABLEONNODES, availableOnNodes);
  }
  #[inline]
  pub fn add_shareable(&mut self, shareable: bool) {
    self.fbb_.push_slot::<bool>(AllocationResult::VT_SHAREABLE, shareable, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AllocationResultBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AllocationResultBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AllocationResult<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AllocationResult<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AllocationResult");
      ds.field("resourceHandles", &self.resourceHandles());
      ds.field("availableOnNodes", &self.availableOnNodes());
      ds.field("shareable", &self.shareable());
      ds.finish()
  }
}
