// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum NamedResourcesAttributeValueOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NamedResourcesAttributeValue<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NamedResourcesAttributeValue<'a> {
  type Inner = NamedResourcesAttributeValue<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NamedResourcesAttributeValue<'a> {
  pub const VT_QUANTITY: flatbuffers::VOffsetT = 4;
  pub const VT_BOOL: flatbuffers::VOffsetT = 6;
  pub const VT_INT: flatbuffers::VOffsetT = 8;
  pub const VT_INTSLICE: flatbuffers::VOffsetT = 10;
  pub const VT_STRING: flatbuffers::VOffsetT = 12;
  pub const VT_STRINGSLICE: flatbuffers::VOffsetT = 14;
  pub const VT_VERSION: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NamedResourcesAttributeValue { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NamedResourcesAttributeValueArgs<'args>
  ) -> flatbuffers::WIPOffset<NamedResourcesAttributeValue<'bldr>> {
    let mut builder = NamedResourcesAttributeValueBuilder::new(_fbb);
    builder.add_int(args.int);
    if let Some(x) = args.version { builder.add_version(x); }
    if let Some(x) = args.stringSlice { builder.add_stringSlice(x); }
    if let Some(x) = args.string { builder.add_string(x); }
    if let Some(x) = args.intSlice { builder.add_intSlice(x); }
    if let Some(x) = args.quantity { builder.add_quantity(x); }
    builder.add_bool(args.bool);
    builder.finish()
  }


  #[inline]
  pub fn quantity(&self) -> super::super::super::apimachinery::pkg::api::resource::Quantity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(NamedResourcesAttributeValue::VT_QUANTITY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn bool(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(NamedResourcesAttributeValue::VT_BOOL, Some(false)).unwrap()}
  }
  #[inline]
  pub fn int(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(NamedResourcesAttributeValue::VT_INT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn intSlice(&self) -> NamedResourcesIntSlice<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<NamedResourcesIntSlice>>(NamedResourcesAttributeValue::VT_INTSLICE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn string(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NamedResourcesAttributeValue::VT_STRING, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn stringSlice(&self) -> NamedResourcesStringSlice<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<NamedResourcesStringSlice>>(NamedResourcesAttributeValue::VT_STRINGSLICE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn version(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NamedResourcesAttributeValue::VT_VERSION, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for NamedResourcesAttributeValue<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>("quantity", Self::VT_QUANTITY, false)?
     .visit_field::<bool>("bool", Self::VT_BOOL, false)?
     .visit_field::<i64>("int", Self::VT_INT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<NamedResourcesIntSlice>>("intSlice", Self::VT_INTSLICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("string", Self::VT_STRING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<NamedResourcesStringSlice>>("stringSlice", Self::VT_STRINGSLICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("version", Self::VT_VERSION, false)?
     .finish();
    Ok(())
  }
}
pub struct NamedResourcesAttributeValueArgs<'a> {
    pub quantity: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'a>>>,
    pub bool: bool,
    pub int: i64,
    pub intSlice: Option<flatbuffers::WIPOffset<NamedResourcesIntSlice<'a>>>,
    pub string: Option<flatbuffers::WIPOffset<&'a str>>,
    pub stringSlice: Option<flatbuffers::WIPOffset<NamedResourcesStringSlice<'a>>>,
    pub version: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for NamedResourcesAttributeValueArgs<'a> {
  #[inline]
  fn default() -> Self {
    NamedResourcesAttributeValueArgs {
      quantity: None,
      bool: false,
      int: 0,
      intSlice: None,
      string: None,
      stringSlice: None,
      version: None,
    }
  }
}

impl Serialize for NamedResourcesAttributeValue<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("NamedResourcesAttributeValue", 7)?;
      s.serialize_field("quantity", &self.quantity())?;
      s.serialize_field("bool", &self.bool())?;
      s.serialize_field("int", &self.int())?;
      s.serialize_field("intSlice", &self.intSlice())?;
      s.serialize_field("string", &self.string())?;
      s.serialize_field("stringSlice", &self.stringSlice())?;
      s.serialize_field("version", &self.version())?;
    s.end()
  }
}

pub struct NamedResourcesAttributeValueBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NamedResourcesAttributeValueBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_quantity(&mut self, quantity: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::api::resource::Quantity>>(NamedResourcesAttributeValue::VT_QUANTITY, quantity);
  }
  #[inline]
  pub fn add_bool(&mut self, bool: bool) {
    self.fbb_.push_slot::<bool>(NamedResourcesAttributeValue::VT_BOOL, bool, false);
  }
  #[inline]
  pub fn add_int(&mut self, int: i64) {
    self.fbb_.push_slot::<i64>(NamedResourcesAttributeValue::VT_INT, int, 0);
  }
  #[inline]
  pub fn add_intSlice(&mut self, intSlice: flatbuffers::WIPOffset<NamedResourcesIntSlice<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<NamedResourcesIntSlice>>(NamedResourcesAttributeValue::VT_INTSLICE, intSlice);
  }
  #[inline]
  pub fn add_string(&mut self, string: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NamedResourcesAttributeValue::VT_STRING, string);
  }
  #[inline]
  pub fn add_stringSlice(&mut self, stringSlice: flatbuffers::WIPOffset<NamedResourcesStringSlice<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<NamedResourcesStringSlice>>(NamedResourcesAttributeValue::VT_STRINGSLICE, stringSlice);
  }
  #[inline]
  pub fn add_version(&mut self, version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NamedResourcesAttributeValue::VT_VERSION, version);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NamedResourcesAttributeValueBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NamedResourcesAttributeValueBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NamedResourcesAttributeValue<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NamedResourcesAttributeValue<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NamedResourcesAttributeValue");
      ds.field("quantity", &self.quantity());
      ds.field("bool", &self.bool());
      ds.field("int", &self.int());
      ds.field("intSlice", &self.intSlice());
      ds.field("string", &self.string());
      ds.field("stringSlice", &self.stringSlice());
      ds.field("version", &self.version());
      ds.finish()
  }
}
