// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ResourceClaimConsumerReferenceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ResourceClaimConsumerReference<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ResourceClaimConsumerReference<'a> {
  type Inner = ResourceClaimConsumerReference<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ResourceClaimConsumerReference<'a> {
  pub const VT_APIGROUP: flatbuffers::VOffsetT = 4;
  pub const VT_RESOURCE: flatbuffers::VOffsetT = 6;
  pub const VT_NAME: flatbuffers::VOffsetT = 8;
  pub const VT_UID: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ResourceClaimConsumerReference { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ResourceClaimConsumerReferenceArgs<'args>
  ) -> flatbuffers::WIPOffset<ResourceClaimConsumerReference<'bldr>> {
    let mut builder = ResourceClaimConsumerReferenceBuilder::new(_fbb);
    if let Some(x) = args.uid { builder.add_uid(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.resource { builder.add_resource(x); }
    if let Some(x) = args.apiGroup { builder.add_apiGroup(x); }
    builder.finish()
  }


  #[inline]
  pub fn apiGroup(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ResourceClaimConsumerReference::VT_APIGROUP, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn resource(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ResourceClaimConsumerReference::VT_RESOURCE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ResourceClaimConsumerReference::VT_NAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn uid(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ResourceClaimConsumerReference::VT_UID, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for ResourceClaimConsumerReference<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("apiGroup", Self::VT_APIGROUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resource", Self::VT_RESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("uid", Self::VT_UID, false)?
     .finish();
    Ok(())
  }
}
pub struct ResourceClaimConsumerReferenceArgs<'a> {
    pub apiGroup: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub uid: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ResourceClaimConsumerReferenceArgs<'a> {
  #[inline]
  fn default() -> Self {
    ResourceClaimConsumerReferenceArgs {
      apiGroup: None,
      resource: None,
      name: None,
      uid: None,
    }
  }
}

impl Serialize for ResourceClaimConsumerReference<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ResourceClaimConsumerReference", 4)?;
      s.serialize_field("apiGroup", &self.apiGroup())?;
      s.serialize_field("resource", &self.resource())?;
      s.serialize_field("name", &self.name())?;
      s.serialize_field("uid", &self.uid())?;
    s.end()
  }
}

pub struct ResourceClaimConsumerReferenceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ResourceClaimConsumerReferenceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_apiGroup(&mut self, apiGroup: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ResourceClaimConsumerReference::VT_APIGROUP, apiGroup);
  }
  #[inline]
  pub fn add_resource(&mut self, resource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ResourceClaimConsumerReference::VT_RESOURCE, resource);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ResourceClaimConsumerReference::VT_NAME, name);
  }
  #[inline]
  pub fn add_uid(&mut self, uid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ResourceClaimConsumerReference::VT_UID, uid);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ResourceClaimConsumerReferenceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ResourceClaimConsumerReferenceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ResourceClaimConsumerReference<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ResourceClaimConsumerReference<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ResourceClaimConsumerReference");
      ds.field("apiGroup", &self.apiGroup());
      ds.field("resource", &self.resource());
      ds.field("name", &self.name());
      ds.field("uid", &self.uid());
      ds.finish()
  }
}
