// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ContainerOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Container<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Container<'a> {
  type Inner = Container<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Container<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_IMAGE: flatbuffers::VOffsetT = 6;
  pub const VT_COMMAND: flatbuffers::VOffsetT = 8;
  pub const VT_ARGS: flatbuffers::VOffsetT = 10;
  pub const VT_WORKINGDIR: flatbuffers::VOffsetT = 12;
  pub const VT_PORTS: flatbuffers::VOffsetT = 14;
  pub const VT_ENVFROM: flatbuffers::VOffsetT = 16;
  pub const VT_ENV: flatbuffers::VOffsetT = 18;
  pub const VT_RESOURCES: flatbuffers::VOffsetT = 20;
  pub const VT_RESIZEPOLICY: flatbuffers::VOffsetT = 22;
  pub const VT_RESTARTPOLICY: flatbuffers::VOffsetT = 24;
  pub const VT_VOLUMEMOUNTS: flatbuffers::VOffsetT = 26;
  pub const VT_VOLUMEDEVICES: flatbuffers::VOffsetT = 28;
  pub const VT_LIVENESSPROBE: flatbuffers::VOffsetT = 30;
  pub const VT_READINESSPROBE: flatbuffers::VOffsetT = 32;
  pub const VT_STARTUPPROBE: flatbuffers::VOffsetT = 34;
  pub const VT_LIFECYCLE: flatbuffers::VOffsetT = 36;
  pub const VT_TERMINATIONMESSAGEPATH: flatbuffers::VOffsetT = 38;
  pub const VT_TERMINATIONMESSAGEPOLICY: flatbuffers::VOffsetT = 40;
  pub const VT_IMAGEPULLPOLICY: flatbuffers::VOffsetT = 42;
  pub const VT_SECURITYCONTEXT: flatbuffers::VOffsetT = 44;
  pub const VT_STDIN: flatbuffers::VOffsetT = 46;
  pub const VT_STDINONCE: flatbuffers::VOffsetT = 48;
  pub const VT_TTY: flatbuffers::VOffsetT = 50;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Container { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ContainerArgs<'args>
  ) -> flatbuffers::WIPOffset<Container<'bldr>> {
    let mut builder = ContainerBuilder::new(_fbb);
    if let Some(x) = args.securityContext { builder.add_securityContext(x); }
    if let Some(x) = args.imagePullPolicy { builder.add_imagePullPolicy(x); }
    if let Some(x) = args.terminationMessagePolicy { builder.add_terminationMessagePolicy(x); }
    if let Some(x) = args.terminationMessagePath { builder.add_terminationMessagePath(x); }
    if let Some(x) = args.lifecycle { builder.add_lifecycle(x); }
    if let Some(x) = args.startupProbe { builder.add_startupProbe(x); }
    if let Some(x) = args.readinessProbe { builder.add_readinessProbe(x); }
    if let Some(x) = args.livenessProbe { builder.add_livenessProbe(x); }
    if let Some(x) = args.volumeDevices { builder.add_volumeDevices(x); }
    if let Some(x) = args.volumeMounts { builder.add_volumeMounts(x); }
    if let Some(x) = args.restartPolicy { builder.add_restartPolicy(x); }
    if let Some(x) = args.resizePolicy { builder.add_resizePolicy(x); }
    if let Some(x) = args.resources { builder.add_resources(x); }
    if let Some(x) = args.env { builder.add_env(x); }
    if let Some(x) = args.envFrom { builder.add_envFrom(x); }
    if let Some(x) = args.ports { builder.add_ports(x); }
    if let Some(x) = args.workingDir { builder.add_workingDir(x); }
    if let Some(x) = args.args { builder.add_args(x); }
    if let Some(x) = args.command { builder.add_command(x); }
    if let Some(x) = args.image { builder.add_image(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_tty(args.tty);
    builder.add_stdinOnce(args.stdinOnce);
    builder.add_stdin(args.stdin);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Container::VT_NAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn image(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Container::VT_IMAGE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn command(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Container::VT_COMMAND, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn args(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Container::VT_ARGS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn workingDir(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Container::VT_WORKINGDIR, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn ports(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerPort<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerPort>>>>(Container::VT_PORTS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn envFrom(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EnvFromSource<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EnvFromSource>>>>(Container::VT_ENVFROM, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn env(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EnvVar<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EnvVar>>>>(Container::VT_ENV, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resources(&self) -> ResourceRequirements<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ResourceRequirements>>(Container::VT_RESOURCES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resizePolicy(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerResizePolicy<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerResizePolicy>>>>(Container::VT_RESIZEPOLICY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn restartPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Container::VT_RESTARTPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn volumeMounts(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VolumeMount<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VolumeMount>>>>(Container::VT_VOLUMEMOUNTS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn volumeDevices(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VolumeDevice<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VolumeDevice>>>>(Container::VT_VOLUMEDEVICES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn livenessProbe(&self) -> Probe<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Probe>>(Container::VT_LIVENESSPROBE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn readinessProbe(&self) -> Probe<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Probe>>(Container::VT_READINESSPROBE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn startupProbe(&self) -> Probe<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Probe>>(Container::VT_STARTUPPROBE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn lifecycle(&self) -> Lifecycle<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Lifecycle>>(Container::VT_LIFECYCLE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn terminationMessagePath(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Container::VT_TERMINATIONMESSAGEPATH, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn terminationMessagePolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Container::VT_TERMINATIONMESSAGEPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn imagePullPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Container::VT_IMAGEPULLPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn securityContext(&self) -> SecurityContext<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SecurityContext>>(Container::VT_SECURITYCONTEXT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn stdin(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Container::VT_STDIN, Some(false)).unwrap()}
  }
  #[inline]
  pub fn stdinOnce(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Container::VT_STDINONCE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn tty(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Container::VT_TTY, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Container<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("image", Self::VT_IMAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("command", Self::VT_COMMAND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("args", Self::VT_ARGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("workingDir", Self::VT_WORKINGDIR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ContainerPort>>>>("ports", Self::VT_PORTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<EnvFromSource>>>>("envFrom", Self::VT_ENVFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<EnvVar>>>>("env", Self::VT_ENV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ResourceRequirements>>("resources", Self::VT_RESOURCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ContainerResizePolicy>>>>("resizePolicy", Self::VT_RESIZEPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("restartPolicy", Self::VT_RESTARTPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<VolumeMount>>>>("volumeMounts", Self::VT_VOLUMEMOUNTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<VolumeDevice>>>>("volumeDevices", Self::VT_VOLUMEDEVICES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Probe>>("livenessProbe", Self::VT_LIVENESSPROBE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Probe>>("readinessProbe", Self::VT_READINESSPROBE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Probe>>("startupProbe", Self::VT_STARTUPPROBE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Lifecycle>>("lifecycle", Self::VT_LIFECYCLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("terminationMessagePath", Self::VT_TERMINATIONMESSAGEPATH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("terminationMessagePolicy", Self::VT_TERMINATIONMESSAGEPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("imagePullPolicy", Self::VT_IMAGEPULLPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SecurityContext>>("securityContext", Self::VT_SECURITYCONTEXT, false)?
     .visit_field::<bool>("stdin", Self::VT_STDIN, false)?
     .visit_field::<bool>("stdinOnce", Self::VT_STDINONCE, false)?
     .visit_field::<bool>("tty", Self::VT_TTY, false)?
     .finish();
    Ok(())
  }
}
pub struct ContainerArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub image: Option<flatbuffers::WIPOffset<&'a str>>,
    pub command: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub args: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub workingDir: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ports: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerPort<'a>>>>>,
    pub envFrom: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EnvFromSource<'a>>>>>,
    pub env: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<EnvVar<'a>>>>>,
    pub resources: Option<flatbuffers::WIPOffset<ResourceRequirements<'a>>>,
    pub resizePolicy: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ContainerResizePolicy<'a>>>>>,
    pub restartPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub volumeMounts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VolumeMount<'a>>>>>,
    pub volumeDevices: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VolumeDevice<'a>>>>>,
    pub livenessProbe: Option<flatbuffers::WIPOffset<Probe<'a>>>,
    pub readinessProbe: Option<flatbuffers::WIPOffset<Probe<'a>>>,
    pub startupProbe: Option<flatbuffers::WIPOffset<Probe<'a>>>,
    pub lifecycle: Option<flatbuffers::WIPOffset<Lifecycle<'a>>>,
    pub terminationMessagePath: Option<flatbuffers::WIPOffset<&'a str>>,
    pub terminationMessagePolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub imagePullPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub securityContext: Option<flatbuffers::WIPOffset<SecurityContext<'a>>>,
    pub stdin: bool,
    pub stdinOnce: bool,
    pub tty: bool,
}
impl<'a> Default for ContainerArgs<'a> {
  #[inline]
  fn default() -> Self {
    ContainerArgs {
      name: None,
      image: None,
      command: None,
      args: None,
      workingDir: None,
      ports: None,
      envFrom: None,
      env: None,
      resources: None,
      resizePolicy: None,
      restartPolicy: None,
      volumeMounts: None,
      volumeDevices: None,
      livenessProbe: None,
      readinessProbe: None,
      startupProbe: None,
      lifecycle: None,
      terminationMessagePath: None,
      terminationMessagePolicy: None,
      imagePullPolicy: None,
      securityContext: None,
      stdin: false,
      stdinOnce: false,
      tty: false,
    }
  }
}

impl Serialize for Container<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("Container", 24)?;
      s.serialize_field("name", &self.name())?;
      s.serialize_field("image", &self.image())?;
      s.serialize_field("command", &self.command())?;
      s.serialize_field("args", &self.args())?;
      s.serialize_field("workingDir", &self.workingDir())?;
      s.serialize_field("ports", &self.ports())?;
      s.serialize_field("envFrom", &self.envFrom())?;
      s.serialize_field("env", &self.env())?;
      s.serialize_field("resources", &self.resources())?;
      s.serialize_field("resizePolicy", &self.resizePolicy())?;
      s.serialize_field("restartPolicy", &self.restartPolicy())?;
      s.serialize_field("volumeMounts", &self.volumeMounts())?;
      s.serialize_field("volumeDevices", &self.volumeDevices())?;
      s.serialize_field("livenessProbe", &self.livenessProbe())?;
      s.serialize_field("readinessProbe", &self.readinessProbe())?;
      s.serialize_field("startupProbe", &self.startupProbe())?;
      s.serialize_field("lifecycle", &self.lifecycle())?;
      s.serialize_field("terminationMessagePath", &self.terminationMessagePath())?;
      s.serialize_field("terminationMessagePolicy", &self.terminationMessagePolicy())?;
      s.serialize_field("imagePullPolicy", &self.imagePullPolicy())?;
      s.serialize_field("securityContext", &self.securityContext())?;
      s.serialize_field("stdin", &self.stdin())?;
      s.serialize_field("stdinOnce", &self.stdinOnce())?;
      s.serialize_field("tty", &self.tty())?;
    s.end()
  }
}

pub struct ContainerBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ContainerBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_NAME, name);
  }
  #[inline]
  pub fn add_image(&mut self, image: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_IMAGE, image);
  }
  #[inline]
  pub fn add_command(&mut self, command: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_COMMAND, command);
  }
  #[inline]
  pub fn add_args(&mut self, args: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_ARGS, args);
  }
  #[inline]
  pub fn add_workingDir(&mut self, workingDir: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_WORKINGDIR, workingDir);
  }
  #[inline]
  pub fn add_ports(&mut self, ports: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ContainerPort<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_PORTS, ports);
  }
  #[inline]
  pub fn add_envFrom(&mut self, envFrom: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<EnvFromSource<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_ENVFROM, envFrom);
  }
  #[inline]
  pub fn add_env(&mut self, env: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<EnvVar<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_ENV, env);
  }
  #[inline]
  pub fn add_resources(&mut self, resources: flatbuffers::WIPOffset<ResourceRequirements<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ResourceRequirements>>(Container::VT_RESOURCES, resources);
  }
  #[inline]
  pub fn add_resizePolicy(&mut self, resizePolicy: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ContainerResizePolicy<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_RESIZEPOLICY, resizePolicy);
  }
  #[inline]
  pub fn add_restartPolicy(&mut self, restartPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_RESTARTPOLICY, restartPolicy);
  }
  #[inline]
  pub fn add_volumeMounts(&mut self, volumeMounts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<VolumeMount<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_VOLUMEMOUNTS, volumeMounts);
  }
  #[inline]
  pub fn add_volumeDevices(&mut self, volumeDevices: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<VolumeDevice<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_VOLUMEDEVICES, volumeDevices);
  }
  #[inline]
  pub fn add_livenessProbe(&mut self, livenessProbe: flatbuffers::WIPOffset<Probe<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Probe>>(Container::VT_LIVENESSPROBE, livenessProbe);
  }
  #[inline]
  pub fn add_readinessProbe(&mut self, readinessProbe: flatbuffers::WIPOffset<Probe<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Probe>>(Container::VT_READINESSPROBE, readinessProbe);
  }
  #[inline]
  pub fn add_startupProbe(&mut self, startupProbe: flatbuffers::WIPOffset<Probe<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Probe>>(Container::VT_STARTUPPROBE, startupProbe);
  }
  #[inline]
  pub fn add_lifecycle(&mut self, lifecycle: flatbuffers::WIPOffset<Lifecycle<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Lifecycle>>(Container::VT_LIFECYCLE, lifecycle);
  }
  #[inline]
  pub fn add_terminationMessagePath(&mut self, terminationMessagePath: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_TERMINATIONMESSAGEPATH, terminationMessagePath);
  }
  #[inline]
  pub fn add_terminationMessagePolicy(&mut self, terminationMessagePolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_TERMINATIONMESSAGEPOLICY, terminationMessagePolicy);
  }
  #[inline]
  pub fn add_imagePullPolicy(&mut self, imagePullPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Container::VT_IMAGEPULLPOLICY, imagePullPolicy);
  }
  #[inline]
  pub fn add_securityContext(&mut self, securityContext: flatbuffers::WIPOffset<SecurityContext<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SecurityContext>>(Container::VT_SECURITYCONTEXT, securityContext);
  }
  #[inline]
  pub fn add_stdin(&mut self, stdin: bool) {
    self.fbb_.push_slot::<bool>(Container::VT_STDIN, stdin, false);
  }
  #[inline]
  pub fn add_stdinOnce(&mut self, stdinOnce: bool) {
    self.fbb_.push_slot::<bool>(Container::VT_STDINONCE, stdinOnce, false);
  }
  #[inline]
  pub fn add_tty(&mut self, tty: bool) {
    self.fbb_.push_slot::<bool>(Container::VT_TTY, tty, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ContainerBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ContainerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Container<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Container<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Container");
      ds.field("name", &self.name());
      ds.field("image", &self.image());
      ds.field("command", &self.command());
      ds.field("args", &self.args());
      ds.field("workingDir", &self.workingDir());
      ds.field("ports", &self.ports());
      ds.field("envFrom", &self.envFrom());
      ds.field("env", &self.env());
      ds.field("resources", &self.resources());
      ds.field("resizePolicy", &self.resizePolicy());
      ds.field("restartPolicy", &self.restartPolicy());
      ds.field("volumeMounts", &self.volumeMounts());
      ds.field("volumeDevices", &self.volumeDevices());
      ds.field("livenessProbe", &self.livenessProbe());
      ds.field("readinessProbe", &self.readinessProbe());
      ds.field("startupProbe", &self.startupProbe());
      ds.field("lifecycle", &self.lifecycle());
      ds.field("terminationMessagePath", &self.terminationMessagePath());
      ds.field("terminationMessagePolicy", &self.terminationMessagePolicy());
      ds.field("imagePullPolicy", &self.imagePullPolicy());
      ds.field("securityContext", &self.securityContext());
      ds.field("stdin", &self.stdin());
      ds.field("stdinOnce", &self.stdinOnce());
      ds.field("tty", &self.tty());
      ds.finish()
  }
}
