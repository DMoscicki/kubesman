// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ServicePortOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ServicePort<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ServicePort<'a> {
  type Inner = ServicePort<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ServicePort<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_PROTOCOL: flatbuffers::VOffsetT = 6;
  pub const VT_APPPROTOCOL: flatbuffers::VOffsetT = 8;
  pub const VT_PORT: flatbuffers::VOffsetT = 10;
  pub const VT_TARGETPORT: flatbuffers::VOffsetT = 12;
  pub const VT_NODEPORT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ServicePort { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ServicePortArgs<'args>
  ) -> flatbuffers::WIPOffset<ServicePort<'bldr>> {
    let mut builder = ServicePortBuilder::new(_fbb);
    builder.add_nodePort(args.nodePort);
    if let Some(x) = args.targetPort { builder.add_targetPort(x); }
    builder.add_port(args.port);
    if let Some(x) = args.appProtocol { builder.add_appProtocol(x); }
    if let Some(x) = args.protocol { builder.add_protocol(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ServicePort::VT_NAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn protocol(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ServicePort::VT_PROTOCOL, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn appProtocol(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ServicePort::VT_APPPROTOCOL, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn port(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ServicePort::VT_PORT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn targetPort(&self) -> super::super::super::apimachinery::pkg::util::intstr::IntOrString<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>(ServicePort::VT_TARGETPORT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn nodePort(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ServicePort::VT_NODEPORT, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ServicePort<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("protocol", Self::VT_PROTOCOL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("appProtocol", Self::VT_APPPROTOCOL, false)?
     .visit_field::<i32>("port", Self::VT_PORT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>("targetPort", Self::VT_TARGETPORT, false)?
     .visit_field::<i32>("nodePort", Self::VT_NODEPORT, false)?
     .finish();
    Ok(())
  }
}
pub struct ServicePortArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub protocol: Option<flatbuffers::WIPOffset<&'a str>>,
    pub appProtocol: Option<flatbuffers::WIPOffset<&'a str>>,
    pub port: i32,
    pub targetPort: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString<'a>>>,
    pub nodePort: i32,
}
impl<'a> Default for ServicePortArgs<'a> {
  #[inline]
  fn default() -> Self {
    ServicePortArgs {
      name: None,
      protocol: None,
      appProtocol: None,
      port: 0,
      targetPort: None,
      nodePort: 0,
    }
  }
}

impl Serialize for ServicePort<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ServicePort", 6)?;
      s.serialize_field("name", &self.name())?;
      s.serialize_field("protocol", &self.protocol())?;
      s.serialize_field("appProtocol", &self.appProtocol())?;
      s.serialize_field("port", &self.port())?;
      s.serialize_field("targetPort", &self.targetPort())?;
      s.serialize_field("nodePort", &self.nodePort())?;
    s.end()
  }
}

pub struct ServicePortBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ServicePortBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServicePort::VT_NAME, name);
  }
  #[inline]
  pub fn add_protocol(&mut self, protocol: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServicePort::VT_PROTOCOL, protocol);
  }
  #[inline]
  pub fn add_appProtocol(&mut self, appProtocol: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ServicePort::VT_APPPROTOCOL, appProtocol);
  }
  #[inline]
  pub fn add_port(&mut self, port: i32) {
    self.fbb_.push_slot::<i32>(ServicePort::VT_PORT, port, 0);
  }
  #[inline]
  pub fn add_targetPort(&mut self, targetPort: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::util::intstr::IntOrString>>(ServicePort::VT_TARGETPORT, targetPort);
  }
  #[inline]
  pub fn add_nodePort(&mut self, nodePort: i32) {
    self.fbb_.push_slot::<i32>(ServicePort::VT_NODEPORT, nodePort, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ServicePortBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ServicePortBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ServicePort<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ServicePort<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ServicePort");
      ds.field("name", &self.name());
      ds.field("protocol", &self.protocol());
      ds.field("appProtocol", &self.appProtocol());
      ds.field("port", &self.port());
      ds.field("targetPort", &self.targetPort());
      ds.field("nodePort", &self.nodePort());
      ds.finish()
  }
}
