// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CSIDriverSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CSIDriverSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CSIDriverSpec<'a> {
  type Inner = CSIDriverSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CSIDriverSpec<'a> {
  pub const VT_ATTACHREQUIRED: flatbuffers::VOffsetT = 4;
  pub const VT_PODINFOONMOUNT: flatbuffers::VOffsetT = 6;
  pub const VT_VOLUMELIFECYCLEMODES: flatbuffers::VOffsetT = 8;
  pub const VT_STORAGECAPACITY: flatbuffers::VOffsetT = 10;
  pub const VT_FSGROUPPOLICY: flatbuffers::VOffsetT = 12;
  pub const VT_TOKENREQUESTS: flatbuffers::VOffsetT = 14;
  pub const VT_REQUIRESREPUBLISH: flatbuffers::VOffsetT = 16;
  pub const VT_SELINUXMOUNT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CSIDriverSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CSIDriverSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<CSIDriverSpec<'bldr>> {
    let mut builder = CSIDriverSpecBuilder::new(_fbb);
    if let Some(x) = args.tokenRequests { builder.add_tokenRequests(x); }
    if let Some(x) = args.fsGroupPolicy { builder.add_fsGroupPolicy(x); }
    if let Some(x) = args.volumeLifecycleModes { builder.add_volumeLifecycleModes(x); }
    builder.add_seLinuxMount(args.seLinuxMount);
    builder.add_requiresRepublish(args.requiresRepublish);
    builder.add_storageCapacity(args.storageCapacity);
    builder.add_podInfoOnMount(args.podInfoOnMount);
    builder.add_attachRequired(args.attachRequired);
    builder.finish()
  }


  #[inline]
  pub fn attachRequired(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CSIDriverSpec::VT_ATTACHREQUIRED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn podInfoOnMount(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CSIDriverSpec::VT_PODINFOONMOUNT, Some(false)).unwrap()}
  }
  #[inline]
  pub fn volumeLifecycleModes(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CSIDriverSpec::VT_VOLUMELIFECYCLEMODES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn storageCapacity(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CSIDriverSpec::VT_STORAGECAPACITY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn fsGroupPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CSIDriverSpec::VT_FSGROUPPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn tokenRequests(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TokenRequest<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TokenRequest>>>>(CSIDriverSpec::VT_TOKENREQUESTS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn requiresRepublish(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CSIDriverSpec::VT_REQUIRESREPUBLISH, Some(false)).unwrap()}
  }
  #[inline]
  pub fn seLinuxMount(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CSIDriverSpec::VT_SELINUXMOUNT, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CSIDriverSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("attachRequired", Self::VT_ATTACHREQUIRED, false)?
     .visit_field::<bool>("podInfoOnMount", Self::VT_PODINFOONMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("volumeLifecycleModes", Self::VT_VOLUMELIFECYCLEMODES, false)?
     .visit_field::<bool>("storageCapacity", Self::VT_STORAGECAPACITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fsGroupPolicy", Self::VT_FSGROUPPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TokenRequest>>>>("tokenRequests", Self::VT_TOKENREQUESTS, false)?
     .visit_field::<bool>("requiresRepublish", Self::VT_REQUIRESREPUBLISH, false)?
     .visit_field::<bool>("seLinuxMount", Self::VT_SELINUXMOUNT, false)?
     .finish();
    Ok(())
  }
}
pub struct CSIDriverSpecArgs<'a> {
    pub attachRequired: bool,
    pub podInfoOnMount: bool,
    pub volumeLifecycleModes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub storageCapacity: bool,
    pub fsGroupPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tokenRequests: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TokenRequest<'a>>>>>,
    pub requiresRepublish: bool,
    pub seLinuxMount: bool,
}
impl<'a> Default for CSIDriverSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    CSIDriverSpecArgs {
      attachRequired: false,
      podInfoOnMount: false,
      volumeLifecycleModes: None,
      storageCapacity: false,
      fsGroupPolicy: None,
      tokenRequests: None,
      requiresRepublish: false,
      seLinuxMount: false,
    }
  }
}

impl Serialize for CSIDriverSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CSIDriverSpec", 8)?;
      s.serialize_field("attachRequired", &self.attachRequired())?;
      s.serialize_field("podInfoOnMount", &self.podInfoOnMount())?;
      s.serialize_field("volumeLifecycleModes", &self.volumeLifecycleModes())?;
      s.serialize_field("storageCapacity", &self.storageCapacity())?;
      s.serialize_field("fsGroupPolicy", &self.fsGroupPolicy())?;
      s.serialize_field("tokenRequests", &self.tokenRequests())?;
      s.serialize_field("requiresRepublish", &self.requiresRepublish())?;
      s.serialize_field("seLinuxMount", &self.seLinuxMount())?;
    s.end()
  }
}

pub struct CSIDriverSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CSIDriverSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_attachRequired(&mut self, attachRequired: bool) {
    self.fbb_.push_slot::<bool>(CSIDriverSpec::VT_ATTACHREQUIRED, attachRequired, false);
  }
  #[inline]
  pub fn add_podInfoOnMount(&mut self, podInfoOnMount: bool) {
    self.fbb_.push_slot::<bool>(CSIDriverSpec::VT_PODINFOONMOUNT, podInfoOnMount, false);
  }
  #[inline]
  pub fn add_volumeLifecycleModes(&mut self, volumeLifecycleModes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CSIDriverSpec::VT_VOLUMELIFECYCLEMODES, volumeLifecycleModes);
  }
  #[inline]
  pub fn add_storageCapacity(&mut self, storageCapacity: bool) {
    self.fbb_.push_slot::<bool>(CSIDriverSpec::VT_STORAGECAPACITY, storageCapacity, false);
  }
  #[inline]
  pub fn add_fsGroupPolicy(&mut self, fsGroupPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CSIDriverSpec::VT_FSGROUPPOLICY, fsGroupPolicy);
  }
  #[inline]
  pub fn add_tokenRequests(&mut self, tokenRequests: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<TokenRequest<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CSIDriverSpec::VT_TOKENREQUESTS, tokenRequests);
  }
  #[inline]
  pub fn add_requiresRepublish(&mut self, requiresRepublish: bool) {
    self.fbb_.push_slot::<bool>(CSIDriverSpec::VT_REQUIRESREPUBLISH, requiresRepublish, false);
  }
  #[inline]
  pub fn add_seLinuxMount(&mut self, seLinuxMount: bool) {
    self.fbb_.push_slot::<bool>(CSIDriverSpec::VT_SELINUXMOUNT, seLinuxMount, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CSIDriverSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CSIDriverSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CSIDriverSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CSIDriverSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CSIDriverSpec");
      ds.field("attachRequired", &self.attachRequired());
      ds.field("podInfoOnMount", &self.podInfoOnMount());
      ds.field("volumeLifecycleModes", &self.volumeLifecycleModes());
      ds.field("storageCapacity", &self.storageCapacity());
      ds.field("fsGroupPolicy", &self.fsGroupPolicy());
      ds.field("tokenRequests", &self.tokenRequests());
      ds.field("requiresRepublish", &self.requiresRepublish());
      ds.field("seLinuxMount", &self.seLinuxMount());
      ds.finish()
  }
}
