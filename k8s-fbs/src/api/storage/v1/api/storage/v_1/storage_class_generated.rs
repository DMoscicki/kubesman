// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum StorageClassOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct StorageClass<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StorageClass<'a> {
  type Inner = StorageClass<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StorageClass<'a> {
  pub const VT_METADATA: flatbuffers::VOffsetT = 4;
  pub const VT_PROVISIONER: flatbuffers::VOffsetT = 6;
  pub const VT_PARAMETERS: flatbuffers::VOffsetT = 8;
  pub const VT_RECLAIMPOLICY: flatbuffers::VOffsetT = 10;
  pub const VT_MOUNTOPTIONS: flatbuffers::VOffsetT = 12;
  pub const VT_ALLOWVOLUMEEXPANSION: flatbuffers::VOffsetT = 14;
  pub const VT_VOLUMEBINDINGMODE: flatbuffers::VOffsetT = 16;
  pub const VT_ALLOWEDTOPOLOGIES: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StorageClass { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StorageClassArgs<'args>
  ) -> flatbuffers::WIPOffset<StorageClass<'bldr>> {
    let mut builder = StorageClassBuilder::new(_fbb);
    if let Some(x) = args.allowedTopologies { builder.add_allowedTopologies(x); }
    if let Some(x) = args.volumeBindingMode { builder.add_volumeBindingMode(x); }
    if let Some(x) = args.mountOptions { builder.add_mountOptions(x); }
    if let Some(x) = args.reclaimPolicy { builder.add_reclaimPolicy(x); }
    if let Some(x) = args.parameters { builder.add_parameters(x); }
    if let Some(x) = args.provisioner { builder.add_provisioner(x); }
    if let Some(x) = args.metadata { builder.add_metadata(x); }
    builder.add_allowVolumeExpansion(args.allowVolumeExpansion);
    builder.finish()
  }


  #[inline]
  pub fn metadata(&self) -> super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta>>(StorageClass::VT_METADATA, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn provisioner(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StorageClass::VT_PROVISIONER, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn parameters(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<storage_class_::ParametersEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<storage_class_::ParametersEntry>>>>(StorageClass::VT_PARAMETERS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn reclaimPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StorageClass::VT_RECLAIMPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn mountOptions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(StorageClass::VT_MOUNTOPTIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn allowVolumeExpansion(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StorageClass::VT_ALLOWVOLUMEEXPANSION, Some(false)).unwrap()}
  }
  #[inline]
  pub fn volumeBindingMode(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StorageClass::VT_VOLUMEBINDINGMODE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn allowedTopologies(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::super::core::v_1::TopologySelectorTerm<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::super::core::v_1::TopologySelectorTerm>>>>(StorageClass::VT_ALLOWEDTOPOLOGIES, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for StorageClass<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta>>("metadata", Self::VT_METADATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("provisioner", Self::VT_PROVISIONER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<storage_class_::ParametersEntry>>>>("parameters", Self::VT_PARAMETERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reclaimPolicy", Self::VT_RECLAIMPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("mountOptions", Self::VT_MOUNTOPTIONS, false)?
     .visit_field::<bool>("allowVolumeExpansion", Self::VT_ALLOWVOLUMEEXPANSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volumeBindingMode", Self::VT_VOLUMEBINDINGMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::super::core::v_1::TopologySelectorTerm>>>>("allowedTopologies", Self::VT_ALLOWEDTOPOLOGIES, false)?
     .finish();
    Ok(())
  }
}
pub struct StorageClassArgs<'a> {
    pub metadata: Option<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta<'a>>>,
    pub provisioner: Option<flatbuffers::WIPOffset<&'a str>>,
    pub parameters: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<storage_class_::ParametersEntry<'a>>>>>,
    pub reclaimPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mountOptions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub allowVolumeExpansion: bool,
    pub volumeBindingMode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub allowedTopologies: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::super::core::v_1::TopologySelectorTerm<'a>>>>>,
}
impl<'a> Default for StorageClassArgs<'a> {
  #[inline]
  fn default() -> Self {
    StorageClassArgs {
      metadata: None,
      provisioner: None,
      parameters: None,
      reclaimPolicy: None,
      mountOptions: None,
      allowVolumeExpansion: false,
      volumeBindingMode: None,
      allowedTopologies: None,
    }
  }
}

impl Serialize for StorageClass<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("StorageClass", 8)?;
      s.serialize_field("metadata", &self.metadata())?;
      s.serialize_field("provisioner", &self.provisioner())?;
      s.serialize_field("parameters", &self.parameters())?;
      s.serialize_field("reclaimPolicy", &self.reclaimPolicy())?;
      s.serialize_field("mountOptions", &self.mountOptions())?;
      s.serialize_field("allowVolumeExpansion", &self.allowVolumeExpansion())?;
      s.serialize_field("volumeBindingMode", &self.volumeBindingMode())?;
      s.serialize_field("allowedTopologies", &self.allowedTopologies())?;
    s.end()
  }
}

pub struct StorageClassBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StorageClassBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_metadata(&mut self, metadata: flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::apimachinery::pkg::apis::meta::v_1::ObjectMeta>>(StorageClass::VT_METADATA, metadata);
  }
  #[inline]
  pub fn add_provisioner(&mut self, provisioner: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageClass::VT_PROVISIONER, provisioner);
  }
  #[inline]
  pub fn add_parameters(&mut self, parameters: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<storage_class_::ParametersEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageClass::VT_PARAMETERS, parameters);
  }
  #[inline]
  pub fn add_reclaimPolicy(&mut self, reclaimPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageClass::VT_RECLAIMPOLICY, reclaimPolicy);
  }
  #[inline]
  pub fn add_mountOptions(&mut self, mountOptions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageClass::VT_MOUNTOPTIONS, mountOptions);
  }
  #[inline]
  pub fn add_allowVolumeExpansion(&mut self, allowVolumeExpansion: bool) {
    self.fbb_.push_slot::<bool>(StorageClass::VT_ALLOWVOLUMEEXPANSION, allowVolumeExpansion, false);
  }
  #[inline]
  pub fn add_volumeBindingMode(&mut self, volumeBindingMode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageClass::VT_VOLUMEBINDINGMODE, volumeBindingMode);
  }
  #[inline]
  pub fn add_allowedTopologies(&mut self, allowedTopologies: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::super::core::v_1::TopologySelectorTerm<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StorageClass::VT_ALLOWEDTOPOLOGIES, allowedTopologies);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StorageClassBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StorageClassBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StorageClass<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StorageClass<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StorageClass");
      ds.field("metadata", &self.metadata());
      ds.field("provisioner", &self.provisioner());
      ds.field("parameters", &self.parameters());
      ds.field("reclaimPolicy", &self.reclaimPolicy());
      ds.field("mountOptions", &self.mountOptions());
      ds.field("allowVolumeExpansion", &self.allowVolumeExpansion());
      ds.field("volumeBindingMode", &self.volumeBindingMode());
      ds.field("allowedTopologies", &self.allowedTopologies());
      ds.finish()
  }
}
