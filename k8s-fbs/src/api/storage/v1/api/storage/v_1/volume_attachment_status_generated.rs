// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum VolumeAttachmentStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct VolumeAttachmentStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for VolumeAttachmentStatus<'a> {
  type Inner = VolumeAttachmentStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> VolumeAttachmentStatus<'a> {
  pub const VT_ATTACHED: flatbuffers::VOffsetT = 4;
  pub const VT_ATTACHMENTMETADATA: flatbuffers::VOffsetT = 6;
  pub const VT_ATTACHERROR: flatbuffers::VOffsetT = 8;
  pub const VT_DETACHERROR: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    VolumeAttachmentStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args VolumeAttachmentStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<VolumeAttachmentStatus<'bldr>> {
    let mut builder = VolumeAttachmentStatusBuilder::new(_fbb);
    if let Some(x) = args.detachError { builder.add_detachError(x); }
    if let Some(x) = args.attachError { builder.add_attachError(x); }
    if let Some(x) = args.attachmentMetadata { builder.add_attachmentMetadata(x); }
    builder.add_attached(args.attached);
    builder.finish()
  }


  #[inline]
  pub fn attached(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(VolumeAttachmentStatus::VT_ATTACHED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn attachmentMetadata(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<volume_attachment_status_::AttachmentMetadataEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<volume_attachment_status_::AttachmentMetadataEntry>>>>(VolumeAttachmentStatus::VT_ATTACHMENTMETADATA, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn attachError(&self) -> VolumeError<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VolumeError>>(VolumeAttachmentStatus::VT_ATTACHERROR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn detachError(&self) -> VolumeError<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VolumeError>>(VolumeAttachmentStatus::VT_DETACHERROR, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for VolumeAttachmentStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("attached", Self::VT_ATTACHED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<volume_attachment_status_::AttachmentMetadataEntry>>>>("attachmentMetadata", Self::VT_ATTACHMENTMETADATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VolumeError>>("attachError", Self::VT_ATTACHERROR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VolumeError>>("detachError", Self::VT_DETACHERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct VolumeAttachmentStatusArgs<'a> {
    pub attached: bool,
    pub attachmentMetadata: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<volume_attachment_status_::AttachmentMetadataEntry<'a>>>>>,
    pub attachError: Option<flatbuffers::WIPOffset<VolumeError<'a>>>,
    pub detachError: Option<flatbuffers::WIPOffset<VolumeError<'a>>>,
}
impl<'a> Default for VolumeAttachmentStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    VolumeAttachmentStatusArgs {
      attached: false,
      attachmentMetadata: None,
      attachError: None,
      detachError: None,
    }
  }
}

impl Serialize for VolumeAttachmentStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("VolumeAttachmentStatus", 4)?;
      s.serialize_field("attached", &self.attached())?;
      s.serialize_field("attachmentMetadata", &self.attachmentMetadata())?;
      s.serialize_field("attachError", &self.attachError())?;
      s.serialize_field("detachError", &self.detachError())?;
    s.end()
  }
}

pub struct VolumeAttachmentStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> VolumeAttachmentStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_attached(&mut self, attached: bool) {
    self.fbb_.push_slot::<bool>(VolumeAttachmentStatus::VT_ATTACHED, attached, false);
  }
  #[inline]
  pub fn add_attachmentMetadata(&mut self, attachmentMetadata: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<volume_attachment_status_::AttachmentMetadataEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(VolumeAttachmentStatus::VT_ATTACHMENTMETADATA, attachmentMetadata);
  }
  #[inline]
  pub fn add_attachError(&mut self, attachError: flatbuffers::WIPOffset<VolumeError<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VolumeError>>(VolumeAttachmentStatus::VT_ATTACHERROR, attachError);
  }
  #[inline]
  pub fn add_detachError(&mut self, detachError: flatbuffers::WIPOffset<VolumeError<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VolumeError>>(VolumeAttachmentStatus::VT_DETACHERROR, detachError);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> VolumeAttachmentStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    VolumeAttachmentStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<VolumeAttachmentStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for VolumeAttachmentStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("VolumeAttachmentStatus");
      ds.field("attached", &self.attached());
      ds.field("attachmentMetadata", &self.attachmentMetadata());
      ds.field("attachError", &self.attachError());
      ds.field("detachError", &self.detachError());
      ds.finish()
  }
}
