// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProbeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Probe<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Probe<'a> {
  type Inner = Probe<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Probe<'a> {
  pub const VT_HANDLER: flatbuffers::VOffsetT = 4;
  pub const VT_INITIALDELAYSECONDS: flatbuffers::VOffsetT = 6;
  pub const VT_TIMEOUTSECONDS: flatbuffers::VOffsetT = 8;
  pub const VT_PERIODSECONDS: flatbuffers::VOffsetT = 10;
  pub const VT_SUCCESSTHRESHOLD: flatbuffers::VOffsetT = 12;
  pub const VT_FAILURETHRESHOLD: flatbuffers::VOffsetT = 14;
  pub const VT_TERMINATIONGRACEPERIODSECONDS: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Probe { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ProbeArgs<'args>
  ) -> flatbuffers::WIPOffset<Probe<'bldr>> {
    let mut builder = ProbeBuilder::new(_fbb);
    builder.add_terminationGracePeriodSeconds(args.terminationGracePeriodSeconds);
    builder.add_failureThreshold(args.failureThreshold);
    builder.add_successThreshold(args.successThreshold);
    builder.add_periodSeconds(args.periodSeconds);
    builder.add_timeoutSeconds(args.timeoutSeconds);
    builder.add_initialDelaySeconds(args.initialDelaySeconds);
    if let Some(x) = args.handler { builder.add_handler(x); }
    builder.finish()
  }


  #[inline]
  pub fn handler(&self) -> ProbeHandler<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ProbeHandler>>(Probe::VT_HANDLER, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn initialDelaySeconds(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Probe::VT_INITIALDELAYSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn timeoutSeconds(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Probe::VT_TIMEOUTSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn periodSeconds(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Probe::VT_PERIODSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn successThreshold(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Probe::VT_SUCCESSTHRESHOLD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn failureThreshold(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Probe::VT_FAILURETHRESHOLD, Some(0)).unwrap()}
  }
  #[inline]
  pub fn terminationGracePeriodSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(Probe::VT_TERMINATIONGRACEPERIODSECONDS, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Probe<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<ProbeHandler>>("handler", Self::VT_HANDLER, false)?
     .visit_field::<i32>("initialDelaySeconds", Self::VT_INITIALDELAYSECONDS, false)?
     .visit_field::<i32>("timeoutSeconds", Self::VT_TIMEOUTSECONDS, false)?
     .visit_field::<i32>("periodSeconds", Self::VT_PERIODSECONDS, false)?
     .visit_field::<i32>("successThreshold", Self::VT_SUCCESSTHRESHOLD, false)?
     .visit_field::<i32>("failureThreshold", Self::VT_FAILURETHRESHOLD, false)?
     .visit_field::<i64>("terminationGracePeriodSeconds", Self::VT_TERMINATIONGRACEPERIODSECONDS, false)?
     .finish();
    Ok(())
  }
}
pub struct ProbeArgs<'a> {
    pub handler: Option<flatbuffers::WIPOffset<ProbeHandler<'a>>>,
    pub initialDelaySeconds: i32,
    pub timeoutSeconds: i32,
    pub periodSeconds: i32,
    pub successThreshold: i32,
    pub failureThreshold: i32,
    pub terminationGracePeriodSeconds: i64,
}
impl<'a> Default for ProbeArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProbeArgs {
      handler: None,
      initialDelaySeconds: 0,
      timeoutSeconds: 0,
      periodSeconds: 0,
      successThreshold: 0,
      failureThreshold: 0,
      terminationGracePeriodSeconds: 0,
    }
  }
}

impl Serialize for Probe<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("Probe", 7)?;
      s.serialize_field("handler", &self.handler())?;
      s.serialize_field("initialDelaySeconds", &self.initialDelaySeconds())?;
      s.serialize_field("timeoutSeconds", &self.timeoutSeconds())?;
      s.serialize_field("periodSeconds", &self.periodSeconds())?;
      s.serialize_field("successThreshold", &self.successThreshold())?;
      s.serialize_field("failureThreshold", &self.failureThreshold())?;
      s.serialize_field("terminationGracePeriodSeconds", &self.terminationGracePeriodSeconds())?;
    s.end()
  }
}

pub struct ProbeBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ProbeBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_handler(&mut self, handler: flatbuffers::WIPOffset<ProbeHandler<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ProbeHandler>>(Probe::VT_HANDLER, handler);
  }
  #[inline]
  pub fn add_initialDelaySeconds(&mut self, initialDelaySeconds: i32) {
    self.fbb_.push_slot::<i32>(Probe::VT_INITIALDELAYSECONDS, initialDelaySeconds, 0);
  }
  #[inline]
  pub fn add_timeoutSeconds(&mut self, timeoutSeconds: i32) {
    self.fbb_.push_slot::<i32>(Probe::VT_TIMEOUTSECONDS, timeoutSeconds, 0);
  }
  #[inline]
  pub fn add_periodSeconds(&mut self, periodSeconds: i32) {
    self.fbb_.push_slot::<i32>(Probe::VT_PERIODSECONDS, periodSeconds, 0);
  }
  #[inline]
  pub fn add_successThreshold(&mut self, successThreshold: i32) {
    self.fbb_.push_slot::<i32>(Probe::VT_SUCCESSTHRESHOLD, successThreshold, 0);
  }
  #[inline]
  pub fn add_failureThreshold(&mut self, failureThreshold: i32) {
    self.fbb_.push_slot::<i32>(Probe::VT_FAILURETHRESHOLD, failureThreshold, 0);
  }
  #[inline]
  pub fn add_terminationGracePeriodSeconds(&mut self, terminationGracePeriodSeconds: i64) {
    self.fbb_.push_slot::<i64>(Probe::VT_TERMINATIONGRACEPERIODSECONDS, terminationGracePeriodSeconds, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ProbeBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ProbeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Probe<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Probe<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Probe");
      ds.field("handler", &self.handler());
      ds.field("initialDelaySeconds", &self.initialDelaySeconds());
      ds.field("timeoutSeconds", &self.timeoutSeconds());
      ds.field("periodSeconds", &self.periodSeconds());
      ds.field("successThreshold", &self.successThreshold());
      ds.field("failureThreshold", &self.failureThreshold());
      ds.field("terminationGracePeriodSeconds", &self.terminationGracePeriodSeconds());
      ds.finish()
  }
}
