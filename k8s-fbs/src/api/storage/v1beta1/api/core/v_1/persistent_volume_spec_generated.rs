// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PersistentVolumeSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PersistentVolumeSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PersistentVolumeSpec<'a> {
  type Inner = PersistentVolumeSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PersistentVolumeSpec<'a> {
  pub const VT_CAPACITY: flatbuffers::VOffsetT = 4;
  pub const VT_PERSISTENTVOLUMESOURCE: flatbuffers::VOffsetT = 6;
  pub const VT_ACCESSMODES: flatbuffers::VOffsetT = 8;
  pub const VT_CLAIMREF: flatbuffers::VOffsetT = 10;
  pub const VT_PERSISTENTVOLUMERECLAIMPOLICY: flatbuffers::VOffsetT = 12;
  pub const VT_STORAGECLASSNAME: flatbuffers::VOffsetT = 14;
  pub const VT_MOUNTOPTIONS: flatbuffers::VOffsetT = 16;
  pub const VT_VOLUMEMODE: flatbuffers::VOffsetT = 18;
  pub const VT_NODEAFFINITY: flatbuffers::VOffsetT = 20;
  pub const VT_VOLUMEATTRIBUTESCLASSNAME: flatbuffers::VOffsetT = 22;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PersistentVolumeSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PersistentVolumeSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<PersistentVolumeSpec<'bldr>> {
    let mut builder = PersistentVolumeSpecBuilder::new(_fbb);
    if let Some(x) = args.volumeAttributesClassName { builder.add_volumeAttributesClassName(x); }
    if let Some(x) = args.nodeAffinity { builder.add_nodeAffinity(x); }
    if let Some(x) = args.volumeMode { builder.add_volumeMode(x); }
    if let Some(x) = args.mountOptions { builder.add_mountOptions(x); }
    if let Some(x) = args.storageClassName { builder.add_storageClassName(x); }
    if let Some(x) = args.persistentVolumeReclaimPolicy { builder.add_persistentVolumeReclaimPolicy(x); }
    if let Some(x) = args.claimRef { builder.add_claimRef(x); }
    if let Some(x) = args.accessModes { builder.add_accessModes(x); }
    if let Some(x) = args.persistentVolumeSource { builder.add_persistentVolumeSource(x); }
    if let Some(x) = args.capacity { builder.add_capacity(x); }
    builder.finish()
  }


  #[inline]
  pub fn capacity(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_spec_::CapacityEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_spec_::CapacityEntry>>>>(PersistentVolumeSpec::VT_CAPACITY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn persistentVolumeSource(&self) -> PersistentVolumeSource<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<PersistentVolumeSource>>(PersistentVolumeSpec::VT_PERSISTENTVOLUMESOURCE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn accessModes(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PersistentVolumeSpec::VT_ACCESSMODES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn claimRef(&self) -> ObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ObjectReference>>(PersistentVolumeSpec::VT_CLAIMREF, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn persistentVolumeReclaimPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeSpec::VT_PERSISTENTVOLUMERECLAIMPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn storageClassName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeSpec::VT_STORAGECLASSNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn mountOptions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PersistentVolumeSpec::VT_MOUNTOPTIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn volumeMode(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeSpec::VT_VOLUMEMODE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn nodeAffinity(&self) -> VolumeNodeAffinity<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<VolumeNodeAffinity>>(PersistentVolumeSpec::VT_NODEAFFINITY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn volumeAttributesClassName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeSpec::VT_VOLUMEATTRIBUTESCLASSNAME, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for PersistentVolumeSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<persistent_volume_spec_::CapacityEntry>>>>("capacity", Self::VT_CAPACITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<PersistentVolumeSource>>("persistentVolumeSource", Self::VT_PERSISTENTVOLUMESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("accessModes", Self::VT_ACCESSMODES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ObjectReference>>("claimRef", Self::VT_CLAIMREF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("persistentVolumeReclaimPolicy", Self::VT_PERSISTENTVOLUMERECLAIMPOLICY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("storageClassName", Self::VT_STORAGECLASSNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("mountOptions", Self::VT_MOUNTOPTIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volumeMode", Self::VT_VOLUMEMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<VolumeNodeAffinity>>("nodeAffinity", Self::VT_NODEAFFINITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volumeAttributesClassName", Self::VT_VOLUMEATTRIBUTESCLASSNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct PersistentVolumeSpecArgs<'a> {
    pub capacity: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_spec_::CapacityEntry<'a>>>>>,
    pub persistentVolumeSource: Option<flatbuffers::WIPOffset<PersistentVolumeSource<'a>>>,
    pub accessModes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub claimRef: Option<flatbuffers::WIPOffset<ObjectReference<'a>>>,
    pub persistentVolumeReclaimPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub storageClassName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mountOptions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub volumeMode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nodeAffinity: Option<flatbuffers::WIPOffset<VolumeNodeAffinity<'a>>>,
    pub volumeAttributesClassName: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PersistentVolumeSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    PersistentVolumeSpecArgs {
      capacity: None,
      persistentVolumeSource: None,
      accessModes: None,
      claimRef: None,
      persistentVolumeReclaimPolicy: None,
      storageClassName: None,
      mountOptions: None,
      volumeMode: None,
      nodeAffinity: None,
      volumeAttributesClassName: None,
    }
  }
}

impl Serialize for PersistentVolumeSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PersistentVolumeSpec", 10)?;
      s.serialize_field("capacity", &self.capacity())?;
      s.serialize_field("persistentVolumeSource", &self.persistentVolumeSource())?;
      s.serialize_field("accessModes", &self.accessModes())?;
      s.serialize_field("claimRef", &self.claimRef())?;
      s.serialize_field("persistentVolumeReclaimPolicy", &self.persistentVolumeReclaimPolicy())?;
      s.serialize_field("storageClassName", &self.storageClassName())?;
      s.serialize_field("mountOptions", &self.mountOptions())?;
      s.serialize_field("volumeMode", &self.volumeMode())?;
      s.serialize_field("nodeAffinity", &self.nodeAffinity())?;
      s.serialize_field("volumeAttributesClassName", &self.volumeAttributesClassName())?;
    s.end()
  }
}

pub struct PersistentVolumeSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PersistentVolumeSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_capacity(&mut self, capacity: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<persistent_volume_spec_::CapacityEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeSpec::VT_CAPACITY, capacity);
  }
  #[inline]
  pub fn add_persistentVolumeSource(&mut self, persistentVolumeSource: flatbuffers::WIPOffset<PersistentVolumeSource<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<PersistentVolumeSource>>(PersistentVolumeSpec::VT_PERSISTENTVOLUMESOURCE, persistentVolumeSource);
  }
  #[inline]
  pub fn add_accessModes(&mut self, accessModes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeSpec::VT_ACCESSMODES, accessModes);
  }
  #[inline]
  pub fn add_claimRef(&mut self, claimRef: flatbuffers::WIPOffset<ObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ObjectReference>>(PersistentVolumeSpec::VT_CLAIMREF, claimRef);
  }
  #[inline]
  pub fn add_persistentVolumeReclaimPolicy(&mut self, persistentVolumeReclaimPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeSpec::VT_PERSISTENTVOLUMERECLAIMPOLICY, persistentVolumeReclaimPolicy);
  }
  #[inline]
  pub fn add_storageClassName(&mut self, storageClassName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeSpec::VT_STORAGECLASSNAME, storageClassName);
  }
  #[inline]
  pub fn add_mountOptions(&mut self, mountOptions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeSpec::VT_MOUNTOPTIONS, mountOptions);
  }
  #[inline]
  pub fn add_volumeMode(&mut self, volumeMode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeSpec::VT_VOLUMEMODE, volumeMode);
  }
  #[inline]
  pub fn add_nodeAffinity(&mut self, nodeAffinity: flatbuffers::WIPOffset<VolumeNodeAffinity<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<VolumeNodeAffinity>>(PersistentVolumeSpec::VT_NODEAFFINITY, nodeAffinity);
  }
  #[inline]
  pub fn add_volumeAttributesClassName(&mut self, volumeAttributesClassName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeSpec::VT_VOLUMEATTRIBUTESCLASSNAME, volumeAttributesClassName);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PersistentVolumeSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PersistentVolumeSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PersistentVolumeSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PersistentVolumeSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PersistentVolumeSpec");
      ds.field("capacity", &self.capacity());
      ds.field("persistentVolumeSource", &self.persistentVolumeSource());
      ds.field("accessModes", &self.accessModes());
      ds.field("claimRef", &self.claimRef());
      ds.field("persistentVolumeReclaimPolicy", &self.persistentVolumeReclaimPolicy());
      ds.field("storageClassName", &self.storageClassName());
      ds.field("mountOptions", &self.mountOptions());
      ds.field("volumeMode", &self.volumeMode());
      ds.field("nodeAffinity", &self.nodeAffinity());
      ds.field("volumeAttributesClassName", &self.volumeAttributesClassName());
      ds.finish()
  }
}
