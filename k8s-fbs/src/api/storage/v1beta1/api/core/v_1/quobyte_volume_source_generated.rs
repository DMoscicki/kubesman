// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum QuobyteVolumeSourceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct QuobyteVolumeSource<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for QuobyteVolumeSource<'a> {
  type Inner = QuobyteVolumeSource<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> QuobyteVolumeSource<'a> {
  pub const VT_REGISTRY: flatbuffers::VOffsetT = 4;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 6;
  pub const VT_READONLY: flatbuffers::VOffsetT = 8;
  pub const VT_USER: flatbuffers::VOffsetT = 10;
  pub const VT_GROUP: flatbuffers::VOffsetT = 12;
  pub const VT_TENANT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    QuobyteVolumeSource { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args QuobyteVolumeSourceArgs<'args>
  ) -> flatbuffers::WIPOffset<QuobyteVolumeSource<'bldr>> {
    let mut builder = QuobyteVolumeSourceBuilder::new(_fbb);
    if let Some(x) = args.tenant { builder.add_tenant(x); }
    if let Some(x) = args.group { builder.add_group(x); }
    if let Some(x) = args.user { builder.add_user(x); }
    if let Some(x) = args.volume { builder.add_volume(x); }
    if let Some(x) = args.registry { builder.add_registry(x); }
    builder.add_readOnly(args.readOnly);
    builder.finish()
  }


  #[inline]
  pub fn registry(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(QuobyteVolumeSource::VT_REGISTRY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn volume(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(QuobyteVolumeSource::VT_VOLUME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn readOnly(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(QuobyteVolumeSource::VT_READONLY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn user(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(QuobyteVolumeSource::VT_USER, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn group(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(QuobyteVolumeSource::VT_GROUP, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn tenant(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(QuobyteVolumeSource::VT_TENANT, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for QuobyteVolumeSource<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("registry", Self::VT_REGISTRY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("volume", Self::VT_VOLUME, false)?
     .visit_field::<bool>("readOnly", Self::VT_READONLY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("user", Self::VT_USER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("group", Self::VT_GROUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tenant", Self::VT_TENANT, false)?
     .finish();
    Ok(())
  }
}
pub struct QuobyteVolumeSourceArgs<'a> {
    pub registry: Option<flatbuffers::WIPOffset<&'a str>>,
    pub volume: Option<flatbuffers::WIPOffset<&'a str>>,
    pub readOnly: bool,
    pub user: Option<flatbuffers::WIPOffset<&'a str>>,
    pub group: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tenant: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for QuobyteVolumeSourceArgs<'a> {
  #[inline]
  fn default() -> Self {
    QuobyteVolumeSourceArgs {
      registry: None,
      volume: None,
      readOnly: false,
      user: None,
      group: None,
      tenant: None,
    }
  }
}

impl Serialize for QuobyteVolumeSource<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("QuobyteVolumeSource", 6)?;
      s.serialize_field("registry", &self.registry())?;
      s.serialize_field("volume", &self.volume())?;
      s.serialize_field("readOnly", &self.readOnly())?;
      s.serialize_field("user", &self.user())?;
      s.serialize_field("group", &self.group())?;
      s.serialize_field("tenant", &self.tenant())?;
    s.end()
  }
}

pub struct QuobyteVolumeSourceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> QuobyteVolumeSourceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_registry(&mut self, registry: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(QuobyteVolumeSource::VT_REGISTRY, registry);
  }
  #[inline]
  pub fn add_volume(&mut self, volume: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(QuobyteVolumeSource::VT_VOLUME, volume);
  }
  #[inline]
  pub fn add_readOnly(&mut self, readOnly: bool) {
    self.fbb_.push_slot::<bool>(QuobyteVolumeSource::VT_READONLY, readOnly, false);
  }
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(QuobyteVolumeSource::VT_USER, user);
  }
  #[inline]
  pub fn add_group(&mut self, group: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(QuobyteVolumeSource::VT_GROUP, group);
  }
  #[inline]
  pub fn add_tenant(&mut self, tenant: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(QuobyteVolumeSource::VT_TENANT, tenant);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> QuobyteVolumeSourceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    QuobyteVolumeSourceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<QuobyteVolumeSource<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for QuobyteVolumeSource<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("QuobyteVolumeSource");
      ds.field("registry", &self.registry());
      ds.field("volume", &self.volume());
      ds.field("readOnly", &self.readOnly());
      ds.field("user", &self.user());
      ds.field("group", &self.group());
      ds.field("tenant", &self.tenant());
      ds.finish()
  }
}
