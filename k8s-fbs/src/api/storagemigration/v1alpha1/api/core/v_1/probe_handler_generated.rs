// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ProbeHandlerOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ProbeHandler<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ProbeHandler<'a> {
  type Inner = ProbeHandler<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ProbeHandler<'a> {
  pub const VT_EXEC: flatbuffers::VOffsetT = 4;
  pub const VT_HTTPGET: flatbuffers::VOffsetT = 6;
  pub const VT_TCPSOCKET: flatbuffers::VOffsetT = 8;
  pub const VT_GRPC: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ProbeHandler { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ProbeHandlerArgs<'args>
  ) -> flatbuffers::WIPOffset<ProbeHandler<'bldr>> {
    let mut builder = ProbeHandlerBuilder::new(_fbb);
    if let Some(x) = args.grpc { builder.add_grpc(x); }
    if let Some(x) = args.tcpSocket { builder.add_tcpSocket(x); }
    if let Some(x) = args.httpGet { builder.add_httpGet(x); }
    if let Some(x) = args.exec { builder.add_exec(x); }
    builder.finish()
  }


  #[inline]
  pub fn exec(&self) -> ExecAction<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ExecAction>>(ProbeHandler::VT_EXEC, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn httpGet(&self) -> HTTPGetAction<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<HTTPGetAction>>(ProbeHandler::VT_HTTPGET, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn tcpSocket(&self) -> TCPSocketAction<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<TCPSocketAction>>(ProbeHandler::VT_TCPSOCKET, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn grpc(&self) -> GRPCAction<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<GRPCAction>>(ProbeHandler::VT_GRPC, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for ProbeHandler<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<ExecAction>>("exec", Self::VT_EXEC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<HTTPGetAction>>("httpGet", Self::VT_HTTPGET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<TCPSocketAction>>("tcpSocket", Self::VT_TCPSOCKET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<GRPCAction>>("grpc", Self::VT_GRPC, false)?
     .finish();
    Ok(())
  }
}
pub struct ProbeHandlerArgs<'a> {
    pub exec: Option<flatbuffers::WIPOffset<ExecAction<'a>>>,
    pub httpGet: Option<flatbuffers::WIPOffset<HTTPGetAction<'a>>>,
    pub tcpSocket: Option<flatbuffers::WIPOffset<TCPSocketAction<'a>>>,
    pub grpc: Option<flatbuffers::WIPOffset<GRPCAction<'a>>>,
}
impl<'a> Default for ProbeHandlerArgs<'a> {
  #[inline]
  fn default() -> Self {
    ProbeHandlerArgs {
      exec: None,
      httpGet: None,
      tcpSocket: None,
      grpc: None,
    }
  }
}

impl Serialize for ProbeHandler<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ProbeHandler", 4)?;
      s.serialize_field("exec", &self.exec())?;
      s.serialize_field("httpGet", &self.httpGet())?;
      s.serialize_field("tcpSocket", &self.tcpSocket())?;
      s.serialize_field("grpc", &self.grpc())?;
    s.end()
  }
}

pub struct ProbeHandlerBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ProbeHandlerBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_exec(&mut self, exec: flatbuffers::WIPOffset<ExecAction<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ExecAction>>(ProbeHandler::VT_EXEC, exec);
  }
  #[inline]
  pub fn add_httpGet(&mut self, httpGet: flatbuffers::WIPOffset<HTTPGetAction<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<HTTPGetAction>>(ProbeHandler::VT_HTTPGET, httpGet);
  }
  #[inline]
  pub fn add_tcpSocket(&mut self, tcpSocket: flatbuffers::WIPOffset<TCPSocketAction<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<TCPSocketAction>>(ProbeHandler::VT_TCPSOCKET, tcpSocket);
  }
  #[inline]
  pub fn add_grpc(&mut self, grpc: flatbuffers::WIPOffset<GRPCAction<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<GRPCAction>>(ProbeHandler::VT_GRPC, grpc);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ProbeHandlerBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ProbeHandlerBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ProbeHandler<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ProbeHandler<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ProbeHandler");
      ds.field("exec", &self.exec());
      ds.field("httpGet", &self.httpGet());
      ds.field("tcpSocket", &self.tcpSocket());
      ds.field("grpc", &self.grpc());
      ds.finish()
  }
}
