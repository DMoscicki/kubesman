// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ConversionResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ConversionResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ConversionResponse<'a> {
  type Inner = ConversionResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ConversionResponse<'a> {
  pub const VT_UID: flatbuffers::VOffsetT = 4;
  pub const VT_CONVERTEDOBJECTS: flatbuffers::VOffsetT = 6;
  pub const VT_RESULT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ConversionResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ConversionResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<ConversionResponse<'bldr>> {
    let mut builder = ConversionResponseBuilder::new(_fbb);
    if let Some(x) = args.result { builder.add_result(x); }
    if let Some(x) = args.convertedObjects { builder.add_convertedObjects(x); }
    if let Some(x) = args.uid { builder.add_uid(x); }
    builder.finish()
  }


  #[inline]
  pub fn uid(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ConversionResponse::VT_UID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn convertedObjects(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::super::super::super::super::apimachinery::pkg::runtime::RawExtension<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::super::super::super::super::apimachinery::pkg::runtime::RawExtension>>>>(ConversionResponse::VT_CONVERTEDOBJECTS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn result(&self) -> super::super::super::super::super::apimachinery::pkg::apis::meta::v_1::Status<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::super::super::super::super::apimachinery::pkg::apis::meta::v_1::Status>>(ConversionResponse::VT_RESULT, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for ConversionResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("uid", Self::VT_UID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<super::super::super::super::super::apimachinery::pkg::runtime::RawExtension>>>>("convertedObjects", Self::VT_CONVERTEDOBJECTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::super::super::super::super::apimachinery::pkg::apis::meta::v_1::Status>>("result", Self::VT_RESULT, false)?
     .finish();
    Ok(())
  }
}
pub struct ConversionResponseArgs<'a> {
    pub uid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub convertedObjects: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<super::super::super::super::super::apimachinery::pkg::runtime::RawExtension<'a>>>>>,
    pub result: Option<flatbuffers::WIPOffset<super::super::super::super::super::apimachinery::pkg::apis::meta::v_1::Status<'a>>>,
}
impl<'a> Default for ConversionResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    ConversionResponseArgs {
      uid: None,
      convertedObjects: None,
      result: None,
    }
  }
}

impl Serialize for ConversionResponse<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ConversionResponse", 3)?;
      s.serialize_field("uid", &self.uid())?;
      s.serialize_field("convertedObjects", &self.convertedObjects())?;
      s.serialize_field("result", &self.result())?;
    s.end()
  }
}

pub struct ConversionResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ConversionResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_uid(&mut self, uid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConversionResponse::VT_UID, uid);
  }
  #[inline]
  pub fn add_convertedObjects(&mut self, convertedObjects: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<super::super::super::super::super::apimachinery::pkg::runtime::RawExtension<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ConversionResponse::VT_CONVERTEDOBJECTS, convertedObjects);
  }
  #[inline]
  pub fn add_result(&mut self, result: flatbuffers::WIPOffset<super::super::super::super::super::apimachinery::pkg::apis::meta::v_1::Status<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::super::super::super::super::apimachinery::pkg::apis::meta::v_1::Status>>(ConversionResponse::VT_RESULT, result);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ConversionResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ConversionResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ConversionResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ConversionResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ConversionResponse");
      ds.field("uid", &self.uid());
      ds.field("convertedObjects", &self.convertedObjects());
      ds.field("result", &self.result());
      ds.finish()
  }
}
