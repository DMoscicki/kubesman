// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum JSONSchemaPropsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct JSONSchemaProps<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for JSONSchemaProps<'a> {
  type Inner = JSONSchemaProps<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> JSONSchemaProps<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SCHEMA: flatbuffers::VOffsetT = 6;
  pub const VT_REF_: flatbuffers::VOffsetT = 8;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 10;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 12;
  pub const VT_FORMAT: flatbuffers::VOffsetT = 14;
  pub const VT_TITLE: flatbuffers::VOffsetT = 16;
  pub const VT_DEFAULT: flatbuffers::VOffsetT = 18;
  pub const VT_MAXIMUM: flatbuffers::VOffsetT = 20;
  pub const VT_EXCLUSIVEMAXIMUM: flatbuffers::VOffsetT = 22;
  pub const VT_MINIMUM: flatbuffers::VOffsetT = 24;
  pub const VT_EXCLUSIVEMINIMUM: flatbuffers::VOffsetT = 26;
  pub const VT_MAXLENGTH: flatbuffers::VOffsetT = 28;
  pub const VT_MINLENGTH: flatbuffers::VOffsetT = 30;
  pub const VT_PATTERN: flatbuffers::VOffsetT = 32;
  pub const VT_MAXITEMS: flatbuffers::VOffsetT = 34;
  pub const VT_MINITEMS: flatbuffers::VOffsetT = 36;
  pub const VT_UNIQUEITEMS: flatbuffers::VOffsetT = 38;
  pub const VT_MULTIPLEOF: flatbuffers::VOffsetT = 40;
  pub const VT_ENUM_: flatbuffers::VOffsetT = 42;
  pub const VT_MAXPROPERTIES: flatbuffers::VOffsetT = 44;
  pub const VT_MINPROPERTIES: flatbuffers::VOffsetT = 46;
  pub const VT_REQUIRED: flatbuffers::VOffsetT = 48;
  pub const VT_ITEMS: flatbuffers::VOffsetT = 50;
  pub const VT_ALLOF: flatbuffers::VOffsetT = 52;
  pub const VT_ONEOF: flatbuffers::VOffsetT = 54;
  pub const VT_ANYOF: flatbuffers::VOffsetT = 56;
  pub const VT_NOT: flatbuffers::VOffsetT = 58;
  pub const VT_PROPERTIES: flatbuffers::VOffsetT = 60;
  pub const VT_ADDITIONALPROPERTIES: flatbuffers::VOffsetT = 62;
  pub const VT_PATTERNPROPERTIES: flatbuffers::VOffsetT = 64;
  pub const VT_DEPENDENCIES: flatbuffers::VOffsetT = 66;
  pub const VT_ADDITIONALITEMS: flatbuffers::VOffsetT = 68;
  pub const VT_DEFINITIONS: flatbuffers::VOffsetT = 70;
  pub const VT_EXTERNALDOCS: flatbuffers::VOffsetT = 72;
  pub const VT_EXAMPLE: flatbuffers::VOffsetT = 74;
  pub const VT_NULLABLE: flatbuffers::VOffsetT = 76;
  pub const VT_XKUBERNETESPRESERVEUNKNOWNFIELDS: flatbuffers::VOffsetT = 78;
  pub const VT_XKUBERNETESEMBEDDEDRESOURCE: flatbuffers::VOffsetT = 80;
  pub const VT_XKUBERNETESINTORSTRING: flatbuffers::VOffsetT = 82;
  pub const VT_XKUBERNETESLISTMAPKEYS: flatbuffers::VOffsetT = 84;
  pub const VT_XKUBERNETESLISTTYPE: flatbuffers::VOffsetT = 86;
  pub const VT_XKUBERNETESMAPTYPE: flatbuffers::VOffsetT = 88;
  pub const VT_XKUBERNETESVALIDATIONS: flatbuffers::VOffsetT = 90;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    JSONSchemaProps { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args JSONSchemaPropsArgs<'args>
  ) -> flatbuffers::WIPOffset<JSONSchemaProps<'bldr>> {
    let mut builder = JSONSchemaPropsBuilder::new(_fbb);
    builder.add_minProperties(args.minProperties);
    builder.add_maxProperties(args.maxProperties);
    builder.add_multipleOf(args.multipleOf);
    builder.add_minItems(args.minItems);
    builder.add_maxItems(args.maxItems);
    builder.add_minLength(args.minLength);
    builder.add_maxLength(args.maxLength);
    builder.add_minimum(args.minimum);
    builder.add_maximum(args.maximum);
    if let Some(x) = args.xKubernetesValidations { builder.add_xKubernetesValidations(x); }
    if let Some(x) = args.xKubernetesMapType { builder.add_xKubernetesMapType(x); }
    if let Some(x) = args.xKubernetesListType { builder.add_xKubernetesListType(x); }
    if let Some(x) = args.xKubernetesListMapKeys { builder.add_xKubernetesListMapKeys(x); }
    if let Some(x) = args.example { builder.add_example(x); }
    if let Some(x) = args.externalDocs { builder.add_externalDocs(x); }
    if let Some(x) = args.definitions { builder.add_definitions(x); }
    if let Some(x) = args.additionalItems { builder.add_additionalItems(x); }
    if let Some(x) = args.dependencies { builder.add_dependencies(x); }
    if let Some(x) = args.patternProperties { builder.add_patternProperties(x); }
    if let Some(x) = args.additionalProperties { builder.add_additionalProperties(x); }
    if let Some(x) = args.properties { builder.add_properties(x); }
    if let Some(x) = args.not { builder.add_not(x); }
    if let Some(x) = args.anyOf { builder.add_anyOf(x); }
    if let Some(x) = args.oneOf { builder.add_oneOf(x); }
    if let Some(x) = args.allOf { builder.add_allOf(x); }
    if let Some(x) = args.items { builder.add_items(x); }
    if let Some(x) = args.required { builder.add_required(x); }
    if let Some(x) = args.enum_ { builder.add_enum_(x); }
    if let Some(x) = args.pattern { builder.add_pattern(x); }
    if let Some(x) = args.default { builder.add_default(x); }
    if let Some(x) = args.title { builder.add_title(x); }
    if let Some(x) = args.format { builder.add_format(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.ref_ { builder.add_ref_(x); }
    if let Some(x) = args.schema { builder.add_schema(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_xKubernetesIntOrString(args.xKubernetesIntOrString);
    builder.add_xKubernetesEmbeddedResource(args.xKubernetesEmbeddedResource);
    builder.add_xKubernetesPreserveUnknownFields(args.xKubernetesPreserveUnknownFields);
    builder.add_nullable(args.nullable);
    builder.add_uniqueItems(args.uniqueItems);
    builder.add_exclusiveMinimum(args.exclusiveMinimum);
    builder.add_exclusiveMaximum(args.exclusiveMaximum);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_ID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn schema(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_SCHEMA, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn ref_(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_REF_, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn description(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_DESCRIPTION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn type_(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_TYPE_, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn format(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_FORMAT, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn title(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_TITLE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn default(&self) -> JSON<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<JSON>>(JSONSchemaProps::VT_DEFAULT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn maximum(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(JSONSchemaProps::VT_MAXIMUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn exclusiveMaximum(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JSONSchemaProps::VT_EXCLUSIVEMAXIMUM, Some(false)).unwrap()}
  }
  #[inline]
  pub fn minimum(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(JSONSchemaProps::VT_MINIMUM, Some(0)).unwrap()}
  }
  #[inline]
  pub fn exclusiveMinimum(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JSONSchemaProps::VT_EXCLUSIVEMINIMUM, Some(false)).unwrap()}
  }
  #[inline]
  pub fn maxLength(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JSONSchemaProps::VT_MAXLENGTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn minLength(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JSONSchemaProps::VT_MINLENGTH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn pattern(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_PATTERN, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn maxItems(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JSONSchemaProps::VT_MAXITEMS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn minItems(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JSONSchemaProps::VT_MINITEMS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn uniqueItems(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JSONSchemaProps::VT_UNIQUEITEMS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn multipleOf(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(JSONSchemaProps::VT_MULTIPLEOF, Some(0)).unwrap()}
  }
  #[inline]
  pub fn enum_(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSON<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSON>>>>(JSONSchemaProps::VT_ENUM_, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn maxProperties(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JSONSchemaProps::VT_MAXPROPERTIES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn minProperties(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(JSONSchemaProps::VT_MINPROPERTIES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn required(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(JSONSchemaProps::VT_REQUIRED, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn items(&self) -> JSONSchemaPropsOrArray<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<JSONSchemaPropsOrArray>>(JSONSchemaProps::VT_ITEMS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn allOf(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSONSchemaProps<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSONSchemaProps>>>>(JSONSchemaProps::VT_ALLOF, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn oneOf(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSONSchemaProps<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSONSchemaProps>>>>(JSONSchemaProps::VT_ONEOF, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn anyOf(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSONSchemaProps<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSONSchemaProps>>>>(JSONSchemaProps::VT_ANYOF, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn not(&self) -> JSONSchemaProps<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<JSONSchemaProps>>(JSONSchemaProps::VT_NOT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn properties(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::PropertiesEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::PropertiesEntry>>>>(JSONSchemaProps::VT_PROPERTIES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn additionalProperties(&self) -> JSONSchemaPropsOrBool<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<JSONSchemaPropsOrBool>>(JSONSchemaProps::VT_ADDITIONALPROPERTIES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn patternProperties(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::PatternPropertiesEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::PatternPropertiesEntry>>>>(JSONSchemaProps::VT_PATTERNPROPERTIES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn dependencies(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::DependenciesEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::DependenciesEntry>>>>(JSONSchemaProps::VT_DEPENDENCIES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn additionalItems(&self) -> JSONSchemaPropsOrBool<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<JSONSchemaPropsOrBool>>(JSONSchemaProps::VT_ADDITIONALITEMS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn definitions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::DefinitionsEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::DefinitionsEntry>>>>(JSONSchemaProps::VT_DEFINITIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn externalDocs(&self) -> ExternalDocumentation<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ExternalDocumentation>>(JSONSchemaProps::VT_EXTERNALDOCS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn example(&self) -> JSON<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<JSON>>(JSONSchemaProps::VT_EXAMPLE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn nullable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JSONSchemaProps::VT_NULLABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn xKubernetesPreserveUnknownFields(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JSONSchemaProps::VT_XKUBERNETESPRESERVEUNKNOWNFIELDS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn xKubernetesEmbeddedResource(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JSONSchemaProps::VT_XKUBERNETESEMBEDDEDRESOURCE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn xKubernetesIntOrString(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(JSONSchemaProps::VT_XKUBERNETESINTORSTRING, Some(false)).unwrap()}
  }
  #[inline]
  pub fn xKubernetesListMapKeys(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(JSONSchemaProps::VT_XKUBERNETESLISTMAPKEYS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn xKubernetesListType(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_XKUBERNETESLISTTYPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn xKubernetesMapType(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(JSONSchemaProps::VT_XKUBERNETESMAPTYPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn xKubernetesValidations(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ValidationRule<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ValidationRule>>>>(JSONSchemaProps::VT_XKUBERNETESVALIDATIONS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for JSONSchemaProps<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("schema", Self::VT_SCHEMA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ref_", Self::VT_REF_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("format", Self::VT_FORMAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("title", Self::VT_TITLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<JSON>>("default", Self::VT_DEFAULT, false)?
     .visit_field::<f64>("maximum", Self::VT_MAXIMUM, false)?
     .visit_field::<bool>("exclusiveMaximum", Self::VT_EXCLUSIVEMAXIMUM, false)?
     .visit_field::<f64>("minimum", Self::VT_MINIMUM, false)?
     .visit_field::<bool>("exclusiveMinimum", Self::VT_EXCLUSIVEMINIMUM, false)?
     .visit_field::<i64>("maxLength", Self::VT_MAXLENGTH, false)?
     .visit_field::<i64>("minLength", Self::VT_MINLENGTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pattern", Self::VT_PATTERN, false)?
     .visit_field::<i64>("maxItems", Self::VT_MAXITEMS, false)?
     .visit_field::<i64>("minItems", Self::VT_MINITEMS, false)?
     .visit_field::<bool>("uniqueItems", Self::VT_UNIQUEITEMS, false)?
     .visit_field::<f64>("multipleOf", Self::VT_MULTIPLEOF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JSON>>>>("enum_", Self::VT_ENUM_, false)?
     .visit_field::<i64>("maxProperties", Self::VT_MAXPROPERTIES, false)?
     .visit_field::<i64>("minProperties", Self::VT_MINPROPERTIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("required", Self::VT_REQUIRED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<JSONSchemaPropsOrArray>>("items", Self::VT_ITEMS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JSONSchemaProps>>>>("allOf", Self::VT_ALLOF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JSONSchemaProps>>>>("oneOf", Self::VT_ONEOF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<JSONSchemaProps>>>>("anyOf", Self::VT_ANYOF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<JSONSchemaProps>>("not", Self::VT_NOT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<jsonschema_props_::PropertiesEntry>>>>("properties", Self::VT_PROPERTIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<JSONSchemaPropsOrBool>>("additionalProperties", Self::VT_ADDITIONALPROPERTIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<jsonschema_props_::PatternPropertiesEntry>>>>("patternProperties", Self::VT_PATTERNPROPERTIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<jsonschema_props_::DependenciesEntry>>>>("dependencies", Self::VT_DEPENDENCIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<JSONSchemaPropsOrBool>>("additionalItems", Self::VT_ADDITIONALITEMS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<jsonschema_props_::DefinitionsEntry>>>>("definitions", Self::VT_DEFINITIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ExternalDocumentation>>("externalDocs", Self::VT_EXTERNALDOCS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<JSON>>("example", Self::VT_EXAMPLE, false)?
     .visit_field::<bool>("nullable", Self::VT_NULLABLE, false)?
     .visit_field::<bool>("xKubernetesPreserveUnknownFields", Self::VT_XKUBERNETESPRESERVEUNKNOWNFIELDS, false)?
     .visit_field::<bool>("xKubernetesEmbeddedResource", Self::VT_XKUBERNETESEMBEDDEDRESOURCE, false)?
     .visit_field::<bool>("xKubernetesIntOrString", Self::VT_XKUBERNETESINTORSTRING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("xKubernetesListMapKeys", Self::VT_XKUBERNETESLISTMAPKEYS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("xKubernetesListType", Self::VT_XKUBERNETESLISTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("xKubernetesMapType", Self::VT_XKUBERNETESMAPTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ValidationRule>>>>("xKubernetesValidations", Self::VT_XKUBERNETESVALIDATIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct JSONSchemaPropsArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub schema: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ref_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub format: Option<flatbuffers::WIPOffset<&'a str>>,
    pub title: Option<flatbuffers::WIPOffset<&'a str>>,
    pub default: Option<flatbuffers::WIPOffset<JSON<'a>>>,
    pub maximum: f64,
    pub exclusiveMaximum: bool,
    pub minimum: f64,
    pub exclusiveMinimum: bool,
    pub maxLength: i64,
    pub minLength: i64,
    pub pattern: Option<flatbuffers::WIPOffset<&'a str>>,
    pub maxItems: i64,
    pub minItems: i64,
    pub uniqueItems: bool,
    pub multipleOf: f64,
    pub enum_: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSON<'a>>>>>,
    pub maxProperties: i64,
    pub minProperties: i64,
    pub required: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub items: Option<flatbuffers::WIPOffset<JSONSchemaPropsOrArray<'a>>>,
    pub allOf: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSONSchemaProps<'a>>>>>,
    pub oneOf: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSONSchemaProps<'a>>>>>,
    pub anyOf: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<JSONSchemaProps<'a>>>>>,
    pub not: Option<flatbuffers::WIPOffset<JSONSchemaProps<'a>>>,
    pub properties: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::PropertiesEntry<'a>>>>>,
    pub additionalProperties: Option<flatbuffers::WIPOffset<JSONSchemaPropsOrBool<'a>>>,
    pub patternProperties: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::PatternPropertiesEntry<'a>>>>>,
    pub dependencies: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::DependenciesEntry<'a>>>>>,
    pub additionalItems: Option<flatbuffers::WIPOffset<JSONSchemaPropsOrBool<'a>>>,
    pub definitions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<jsonschema_props_::DefinitionsEntry<'a>>>>>,
    pub externalDocs: Option<flatbuffers::WIPOffset<ExternalDocumentation<'a>>>,
    pub example: Option<flatbuffers::WIPOffset<JSON<'a>>>,
    pub nullable: bool,
    pub xKubernetesPreserveUnknownFields: bool,
    pub xKubernetesEmbeddedResource: bool,
    pub xKubernetesIntOrString: bool,
    pub xKubernetesListMapKeys: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub xKubernetesListType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub xKubernetesMapType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub xKubernetesValidations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ValidationRule<'a>>>>>,
}
impl<'a> Default for JSONSchemaPropsArgs<'a> {
  #[inline]
  fn default() -> Self {
    JSONSchemaPropsArgs {
      id: None,
      schema: None,
      ref_: None,
      description: None,
      type_: None,
      format: None,
      title: None,
      default: None,
      maximum: 0,
      exclusiveMaximum: false,
      minimum: 0,
      exclusiveMinimum: false,
      maxLength: 0,
      minLength: 0,
      pattern: None,
      maxItems: 0,
      minItems: 0,
      uniqueItems: false,
      multipleOf: 0,
      enum_: None,
      maxProperties: 0,
      minProperties: 0,
      required: None,
      items: None,
      allOf: None,
      oneOf: None,
      anyOf: None,
      not: None,
      properties: None,
      additionalProperties: None,
      patternProperties: None,
      dependencies: None,
      additionalItems: None,
      definitions: None,
      externalDocs: None,
      example: None,
      nullable: false,
      xKubernetesPreserveUnknownFields: false,
      xKubernetesEmbeddedResource: false,
      xKubernetesIntOrString: false,
      xKubernetesListMapKeys: None,
      xKubernetesListType: None,
      xKubernetesMapType: None,
      xKubernetesValidations: None,
    }
  }
}

impl Serialize for JSONSchemaProps<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("JSONSchemaProps", 44)?;
      s.serialize_field("id", &self.id())?;
      s.serialize_field("schema", &self.schema())?;
      s.serialize_field("ref_", &self.ref_())?;
      s.serialize_field("description", &self.description())?;
      s.serialize_field("type_", &self.type_())?;
      s.serialize_field("format", &self.format())?;
      s.serialize_field("title", &self.title())?;
      s.serialize_field("default", &self.default())?;
      s.serialize_field("maximum", &self.maximum())?;
      s.serialize_field("exclusiveMaximum", &self.exclusiveMaximum())?;
      s.serialize_field("minimum", &self.minimum())?;
      s.serialize_field("exclusiveMinimum", &self.exclusiveMinimum())?;
      s.serialize_field("maxLength", &self.maxLength())?;
      s.serialize_field("minLength", &self.minLength())?;
      s.serialize_field("pattern", &self.pattern())?;
      s.serialize_field("maxItems", &self.maxItems())?;
      s.serialize_field("minItems", &self.minItems())?;
      s.serialize_field("uniqueItems", &self.uniqueItems())?;
      s.serialize_field("multipleOf", &self.multipleOf())?;
      s.serialize_field("enum_", &self.enum_())?;
      s.serialize_field("maxProperties", &self.maxProperties())?;
      s.serialize_field("minProperties", &self.minProperties())?;
      s.serialize_field("required", &self.required())?;
      s.serialize_field("items", &self.items())?;
      s.serialize_field("allOf", &self.allOf())?;
      s.serialize_field("oneOf", &self.oneOf())?;
      s.serialize_field("anyOf", &self.anyOf())?;
      s.serialize_field("not", &self.not())?;
      s.serialize_field("properties", &self.properties())?;
      s.serialize_field("additionalProperties", &self.additionalProperties())?;
      s.serialize_field("patternProperties", &self.patternProperties())?;
      s.serialize_field("dependencies", &self.dependencies())?;
      s.serialize_field("additionalItems", &self.additionalItems())?;
      s.serialize_field("definitions", &self.definitions())?;
      s.serialize_field("externalDocs", &self.externalDocs())?;
      s.serialize_field("example", &self.example())?;
      s.serialize_field("nullable", &self.nullable())?;
      s.serialize_field("xKubernetesPreserveUnknownFields", &self.xKubernetesPreserveUnknownFields())?;
      s.serialize_field("xKubernetesEmbeddedResource", &self.xKubernetesEmbeddedResource())?;
      s.serialize_field("xKubernetesIntOrString", &self.xKubernetesIntOrString())?;
      s.serialize_field("xKubernetesListMapKeys", &self.xKubernetesListMapKeys())?;
      s.serialize_field("xKubernetesListType", &self.xKubernetesListType())?;
      s.serialize_field("xKubernetesMapType", &self.xKubernetesMapType())?;
      s.serialize_field("xKubernetesValidations", &self.xKubernetesValidations())?;
    s.end()
  }
}

pub struct JSONSchemaPropsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> JSONSchemaPropsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_ID, id);
  }
  #[inline]
  pub fn add_schema(&mut self, schema: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_SCHEMA, schema);
  }
  #[inline]
  pub fn add_ref_(&mut self, ref_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_REF_, ref_);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_format(&mut self, format: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_FORMAT, format);
  }
  #[inline]
  pub fn add_title(&mut self, title: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_TITLE, title);
  }
  #[inline]
  pub fn add_default(&mut self, default: flatbuffers::WIPOffset<JSON<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<JSON>>(JSONSchemaProps::VT_DEFAULT, default);
  }
  #[inline]
  pub fn add_maximum(&mut self, maximum: f64) {
    self.fbb_.push_slot::<f64>(JSONSchemaProps::VT_MAXIMUM, maximum, 0);
  }
  #[inline]
  pub fn add_exclusiveMaximum(&mut self, exclusiveMaximum: bool) {
    self.fbb_.push_slot::<bool>(JSONSchemaProps::VT_EXCLUSIVEMAXIMUM, exclusiveMaximum, false);
  }
  #[inline]
  pub fn add_minimum(&mut self, minimum: f64) {
    self.fbb_.push_slot::<f64>(JSONSchemaProps::VT_MINIMUM, minimum, 0);
  }
  #[inline]
  pub fn add_exclusiveMinimum(&mut self, exclusiveMinimum: bool) {
    self.fbb_.push_slot::<bool>(JSONSchemaProps::VT_EXCLUSIVEMINIMUM, exclusiveMinimum, false);
  }
  #[inline]
  pub fn add_maxLength(&mut self, maxLength: i64) {
    self.fbb_.push_slot::<i64>(JSONSchemaProps::VT_MAXLENGTH, maxLength, 0);
  }
  #[inline]
  pub fn add_minLength(&mut self, minLength: i64) {
    self.fbb_.push_slot::<i64>(JSONSchemaProps::VT_MINLENGTH, minLength, 0);
  }
  #[inline]
  pub fn add_pattern(&mut self, pattern: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_PATTERN, pattern);
  }
  #[inline]
  pub fn add_maxItems(&mut self, maxItems: i64) {
    self.fbb_.push_slot::<i64>(JSONSchemaProps::VT_MAXITEMS, maxItems, 0);
  }
  #[inline]
  pub fn add_minItems(&mut self, minItems: i64) {
    self.fbb_.push_slot::<i64>(JSONSchemaProps::VT_MINITEMS, minItems, 0);
  }
  #[inline]
  pub fn add_uniqueItems(&mut self, uniqueItems: bool) {
    self.fbb_.push_slot::<bool>(JSONSchemaProps::VT_UNIQUEITEMS, uniqueItems, false);
  }
  #[inline]
  pub fn add_multipleOf(&mut self, multipleOf: f64) {
    self.fbb_.push_slot::<f64>(JSONSchemaProps::VT_MULTIPLEOF, multipleOf, 0);
  }
  #[inline]
  pub fn add_enum_(&mut self, enum_: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JSON<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_ENUM_, enum_);
  }
  #[inline]
  pub fn add_maxProperties(&mut self, maxProperties: i64) {
    self.fbb_.push_slot::<i64>(JSONSchemaProps::VT_MAXPROPERTIES, maxProperties, 0);
  }
  #[inline]
  pub fn add_minProperties(&mut self, minProperties: i64) {
    self.fbb_.push_slot::<i64>(JSONSchemaProps::VT_MINPROPERTIES, minProperties, 0);
  }
  #[inline]
  pub fn add_required(&mut self, required: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_REQUIRED, required);
  }
  #[inline]
  pub fn add_items(&mut self, items: flatbuffers::WIPOffset<JSONSchemaPropsOrArray<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<JSONSchemaPropsOrArray>>(JSONSchemaProps::VT_ITEMS, items);
  }
  #[inline]
  pub fn add_allOf(&mut self, allOf: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JSONSchemaProps<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_ALLOF, allOf);
  }
  #[inline]
  pub fn add_oneOf(&mut self, oneOf: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JSONSchemaProps<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_ONEOF, oneOf);
  }
  #[inline]
  pub fn add_anyOf(&mut self, anyOf: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<JSONSchemaProps<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_ANYOF, anyOf);
  }
  #[inline]
  pub fn add_not(&mut self, not: flatbuffers::WIPOffset<JSONSchemaProps<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<JSONSchemaProps>>(JSONSchemaProps::VT_NOT, not);
  }
  #[inline]
  pub fn add_properties(&mut self, properties: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<jsonschema_props_::PropertiesEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_PROPERTIES, properties);
  }
  #[inline]
  pub fn add_additionalProperties(&mut self, additionalProperties: flatbuffers::WIPOffset<JSONSchemaPropsOrBool<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<JSONSchemaPropsOrBool>>(JSONSchemaProps::VT_ADDITIONALPROPERTIES, additionalProperties);
  }
  #[inline]
  pub fn add_patternProperties(&mut self, patternProperties: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<jsonschema_props_::PatternPropertiesEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_PATTERNPROPERTIES, patternProperties);
  }
  #[inline]
  pub fn add_dependencies(&mut self, dependencies: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<jsonschema_props_::DependenciesEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_DEPENDENCIES, dependencies);
  }
  #[inline]
  pub fn add_additionalItems(&mut self, additionalItems: flatbuffers::WIPOffset<JSONSchemaPropsOrBool<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<JSONSchemaPropsOrBool>>(JSONSchemaProps::VT_ADDITIONALITEMS, additionalItems);
  }
  #[inline]
  pub fn add_definitions(&mut self, definitions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<jsonschema_props_::DefinitionsEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_DEFINITIONS, definitions);
  }
  #[inline]
  pub fn add_externalDocs(&mut self, externalDocs: flatbuffers::WIPOffset<ExternalDocumentation<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ExternalDocumentation>>(JSONSchemaProps::VT_EXTERNALDOCS, externalDocs);
  }
  #[inline]
  pub fn add_example(&mut self, example: flatbuffers::WIPOffset<JSON<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<JSON>>(JSONSchemaProps::VT_EXAMPLE, example);
  }
  #[inline]
  pub fn add_nullable(&mut self, nullable: bool) {
    self.fbb_.push_slot::<bool>(JSONSchemaProps::VT_NULLABLE, nullable, false);
  }
  #[inline]
  pub fn add_xKubernetesPreserveUnknownFields(&mut self, xKubernetesPreserveUnknownFields: bool) {
    self.fbb_.push_slot::<bool>(JSONSchemaProps::VT_XKUBERNETESPRESERVEUNKNOWNFIELDS, xKubernetesPreserveUnknownFields, false);
  }
  #[inline]
  pub fn add_xKubernetesEmbeddedResource(&mut self, xKubernetesEmbeddedResource: bool) {
    self.fbb_.push_slot::<bool>(JSONSchemaProps::VT_XKUBERNETESEMBEDDEDRESOURCE, xKubernetesEmbeddedResource, false);
  }
  #[inline]
  pub fn add_xKubernetesIntOrString(&mut self, xKubernetesIntOrString: bool) {
    self.fbb_.push_slot::<bool>(JSONSchemaProps::VT_XKUBERNETESINTORSTRING, xKubernetesIntOrString, false);
  }
  #[inline]
  pub fn add_xKubernetesListMapKeys(&mut self, xKubernetesListMapKeys: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_XKUBERNETESLISTMAPKEYS, xKubernetesListMapKeys);
  }
  #[inline]
  pub fn add_xKubernetesListType(&mut self, xKubernetesListType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_XKUBERNETESLISTTYPE, xKubernetesListType);
  }
  #[inline]
  pub fn add_xKubernetesMapType(&mut self, xKubernetesMapType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_XKUBERNETESMAPTYPE, xKubernetesMapType);
  }
  #[inline]
  pub fn add_xKubernetesValidations(&mut self, xKubernetesValidations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ValidationRule<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(JSONSchemaProps::VT_XKUBERNETESVALIDATIONS, xKubernetesValidations);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> JSONSchemaPropsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    JSONSchemaPropsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<JSONSchemaProps<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for JSONSchemaProps<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("JSONSchemaProps");
      ds.field("id", &self.id());
      ds.field("schema", &self.schema());
      ds.field("ref_", &self.ref_());
      ds.field("description", &self.description());
      ds.field("type_", &self.type_());
      ds.field("format", &self.format());
      ds.field("title", &self.title());
      ds.field("default", &self.default());
      ds.field("maximum", &self.maximum());
      ds.field("exclusiveMaximum", &self.exclusiveMaximum());
      ds.field("minimum", &self.minimum());
      ds.field("exclusiveMinimum", &self.exclusiveMinimum());
      ds.field("maxLength", &self.maxLength());
      ds.field("minLength", &self.minLength());
      ds.field("pattern", &self.pattern());
      ds.field("maxItems", &self.maxItems());
      ds.field("minItems", &self.minItems());
      ds.field("uniqueItems", &self.uniqueItems());
      ds.field("multipleOf", &self.multipleOf());
      ds.field("enum_", &self.enum_());
      ds.field("maxProperties", &self.maxProperties());
      ds.field("minProperties", &self.minProperties());
      ds.field("required", &self.required());
      ds.field("items", &self.items());
      ds.field("allOf", &self.allOf());
      ds.field("oneOf", &self.oneOf());
      ds.field("anyOf", &self.anyOf());
      ds.field("not", &self.not());
      ds.field("properties", &self.properties());
      ds.field("additionalProperties", &self.additionalProperties());
      ds.field("patternProperties", &self.patternProperties());
      ds.field("dependencies", &self.dependencies());
      ds.field("additionalItems", &self.additionalItems());
      ds.field("definitions", &self.definitions());
      ds.field("externalDocs", &self.externalDocs());
      ds.field("example", &self.example());
      ds.field("nullable", &self.nullable());
      ds.field("xKubernetesPreserveUnknownFields", &self.xKubernetesPreserveUnknownFields());
      ds.field("xKubernetesEmbeddedResource", &self.xKubernetesEmbeddedResource());
      ds.field("xKubernetesIntOrString", &self.xKubernetesIntOrString());
      ds.field("xKubernetesListMapKeys", &self.xKubernetesListMapKeys());
      ds.field("xKubernetesListType", &self.xKubernetesListType());
      ds.field("xKubernetesMapType", &self.xKubernetesMapType());
      ds.field("xKubernetesValidations", &self.xKubernetesValidations());
      ds.finish()
  }
}
