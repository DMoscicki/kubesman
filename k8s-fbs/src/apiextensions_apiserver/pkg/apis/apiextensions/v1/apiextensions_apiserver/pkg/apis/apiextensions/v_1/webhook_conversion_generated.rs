// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum WebhookConversionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WebhookConversion<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WebhookConversion<'a> {
  type Inner = WebhookConversion<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WebhookConversion<'a> {
  pub const VT_CLIENTCONFIG: flatbuffers::VOffsetT = 4;
  pub const VT_CONVERSIONREVIEWVERSIONS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WebhookConversion { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WebhookConversionArgs<'args>
  ) -> flatbuffers::WIPOffset<WebhookConversion<'bldr>> {
    let mut builder = WebhookConversionBuilder::new(_fbb);
    if let Some(x) = args.conversionReviewVersions { builder.add_conversionReviewVersions(x); }
    if let Some(x) = args.clientConfig { builder.add_clientConfig(x); }
    builder.finish()
  }


  #[inline]
  pub fn clientConfig(&self) -> WebhookClientConfig<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<WebhookClientConfig>>(WebhookConversion::VT_CLIENTCONFIG, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn conversionReviewVersions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WebhookConversion::VT_CONVERSIONREVIEWVERSIONS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for WebhookConversion<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<WebhookClientConfig>>("clientConfig", Self::VT_CLIENTCONFIG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("conversionReviewVersions", Self::VT_CONVERSIONREVIEWVERSIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct WebhookConversionArgs<'a> {
    pub clientConfig: Option<flatbuffers::WIPOffset<WebhookClientConfig<'a>>>,
    pub conversionReviewVersions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for WebhookConversionArgs<'a> {
  #[inline]
  fn default() -> Self {
    WebhookConversionArgs {
      clientConfig: None,
      conversionReviewVersions: None,
    }
  }
}

impl Serialize for WebhookConversion<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("WebhookConversion", 2)?;
      s.serialize_field("clientConfig", &self.clientConfig())?;
      s.serialize_field("conversionReviewVersions", &self.conversionReviewVersions())?;
    s.end()
  }
}

pub struct WebhookConversionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WebhookConversionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_clientConfig(&mut self, clientConfig: flatbuffers::WIPOffset<WebhookClientConfig<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<WebhookClientConfig>>(WebhookConversion::VT_CLIENTCONFIG, clientConfig);
  }
  #[inline]
  pub fn add_conversionReviewVersions(&mut self, conversionReviewVersions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WebhookConversion::VT_CONVERSIONREVIEWVERSIONS, conversionReviewVersions);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WebhookConversionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WebhookConversionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WebhookConversion<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WebhookConversion<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WebhookConversion");
      ds.field("clientConfig", &self.clientConfig());
      ds.field("conversionReviewVersions", &self.conversionReviewVersions());
      ds.finish()
  }
}
