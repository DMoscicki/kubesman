// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CustomResourceDefinitionSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CustomResourceDefinitionSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CustomResourceDefinitionSpec<'a> {
  type Inner = CustomResourceDefinitionSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CustomResourceDefinitionSpec<'a> {
  pub const VT_GROUP: flatbuffers::VOffsetT = 4;
  pub const VT_VERSION: flatbuffers::VOffsetT = 6;
  pub const VT_NAMES: flatbuffers::VOffsetT = 8;
  pub const VT_SCOPE: flatbuffers::VOffsetT = 10;
  pub const VT_VALIDATION: flatbuffers::VOffsetT = 12;
  pub const VT_SUBRESOURCES: flatbuffers::VOffsetT = 14;
  pub const VT_VERSIONS: flatbuffers::VOffsetT = 16;
  pub const VT_ADDITIONALPRINTERCOLUMNS: flatbuffers::VOffsetT = 18;
  pub const VT_SELECTABLEFIELDS: flatbuffers::VOffsetT = 20;
  pub const VT_CONVERSION: flatbuffers::VOffsetT = 22;
  pub const VT_PRESERVEUNKNOWNFIELDS: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CustomResourceDefinitionSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CustomResourceDefinitionSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<CustomResourceDefinitionSpec<'bldr>> {
    let mut builder = CustomResourceDefinitionSpecBuilder::new(_fbb);
    if let Some(x) = args.conversion { builder.add_conversion(x); }
    if let Some(x) = args.selectableFields { builder.add_selectableFields(x); }
    if let Some(x) = args.additionalPrinterColumns { builder.add_additionalPrinterColumns(x); }
    if let Some(x) = args.versions { builder.add_versions(x); }
    if let Some(x) = args.subresources { builder.add_subresources(x); }
    if let Some(x) = args.validation { builder.add_validation(x); }
    if let Some(x) = args.scope { builder.add_scope(x); }
    if let Some(x) = args.names { builder.add_names(x); }
    if let Some(x) = args.version { builder.add_version(x); }
    if let Some(x) = args.group { builder.add_group(x); }
    builder.add_preserveUnknownFields(args.preserveUnknownFields);
    builder.finish()
  }


  #[inline]
  pub fn group(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CustomResourceDefinitionSpec::VT_GROUP, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn version(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CustomResourceDefinitionSpec::VT_VERSION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn names(&self) -> CustomResourceDefinitionNames<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CustomResourceDefinitionNames>>(CustomResourceDefinitionSpec::VT_NAMES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn scope(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CustomResourceDefinitionSpec::VT_SCOPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn validation(&self) -> CustomResourceValidation<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CustomResourceValidation>>(CustomResourceDefinitionSpec::VT_VALIDATION, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn subresources(&self) -> CustomResourceSubresources<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CustomResourceSubresources>>(CustomResourceDefinitionSpec::VT_SUBRESOURCES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn versions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomResourceDefinitionVersion<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomResourceDefinitionVersion>>>>(CustomResourceDefinitionSpec::VT_VERSIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn additionalPrinterColumns(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomResourceColumnDefinition<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomResourceColumnDefinition>>>>(CustomResourceDefinitionSpec::VT_ADDITIONALPRINTERCOLUMNS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn selectableFields(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SelectableField<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SelectableField>>>>(CustomResourceDefinitionSpec::VT_SELECTABLEFIELDS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn conversion(&self) -> CustomResourceConversion<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CustomResourceConversion>>(CustomResourceDefinitionSpec::VT_CONVERSION, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn preserveUnknownFields(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CustomResourceDefinitionSpec::VT_PRESERVEUNKNOWNFIELDS, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CustomResourceDefinitionSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("group", Self::VT_GROUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<CustomResourceDefinitionNames>>("names", Self::VT_NAMES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scope", Self::VT_SCOPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<CustomResourceValidation>>("validation", Self::VT_VALIDATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<CustomResourceSubresources>>("subresources", Self::VT_SUBRESOURCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<CustomResourceDefinitionVersion>>>>("versions", Self::VT_VERSIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<CustomResourceColumnDefinition>>>>("additionalPrinterColumns", Self::VT_ADDITIONALPRINTERCOLUMNS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<SelectableField>>>>("selectableFields", Self::VT_SELECTABLEFIELDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<CustomResourceConversion>>("conversion", Self::VT_CONVERSION, false)?
     .visit_field::<bool>("preserveUnknownFields", Self::VT_PRESERVEUNKNOWNFIELDS, false)?
     .finish();
    Ok(())
  }
}
pub struct CustomResourceDefinitionSpecArgs<'a> {
    pub group: Option<flatbuffers::WIPOffset<&'a str>>,
    pub version: Option<flatbuffers::WIPOffset<&'a str>>,
    pub names: Option<flatbuffers::WIPOffset<CustomResourceDefinitionNames<'a>>>,
    pub scope: Option<flatbuffers::WIPOffset<&'a str>>,
    pub validation: Option<flatbuffers::WIPOffset<CustomResourceValidation<'a>>>,
    pub subresources: Option<flatbuffers::WIPOffset<CustomResourceSubresources<'a>>>,
    pub versions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomResourceDefinitionVersion<'a>>>>>,
    pub additionalPrinterColumns: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CustomResourceColumnDefinition<'a>>>>>,
    pub selectableFields: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SelectableField<'a>>>>>,
    pub conversion: Option<flatbuffers::WIPOffset<CustomResourceConversion<'a>>>,
    pub preserveUnknownFields: bool,
}
impl<'a> Default for CustomResourceDefinitionSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    CustomResourceDefinitionSpecArgs {
      group: None,
      version: None,
      names: None,
      scope: None,
      validation: None,
      subresources: None,
      versions: None,
      additionalPrinterColumns: None,
      selectableFields: None,
      conversion: None,
      preserveUnknownFields: false,
    }
  }
}

impl Serialize for CustomResourceDefinitionSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CustomResourceDefinitionSpec", 11)?;
      s.serialize_field("group", &self.group())?;
      s.serialize_field("version", &self.version())?;
      s.serialize_field("names", &self.names())?;
      s.serialize_field("scope", &self.scope())?;
      s.serialize_field("validation", &self.validation())?;
      s.serialize_field("subresources", &self.subresources())?;
      s.serialize_field("versions", &self.versions())?;
      s.serialize_field("additionalPrinterColumns", &self.additionalPrinterColumns())?;
      s.serialize_field("selectableFields", &self.selectableFields())?;
      s.serialize_field("conversion", &self.conversion())?;
      s.serialize_field("preserveUnknownFields", &self.preserveUnknownFields())?;
    s.end()
  }
}

pub struct CustomResourceDefinitionSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CustomResourceDefinitionSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_group(&mut self, group: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CustomResourceDefinitionSpec::VT_GROUP, group);
  }
  #[inline]
  pub fn add_version(&mut self, version: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CustomResourceDefinitionSpec::VT_VERSION, version);
  }
  #[inline]
  pub fn add_names(&mut self, names: flatbuffers::WIPOffset<CustomResourceDefinitionNames<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CustomResourceDefinitionNames>>(CustomResourceDefinitionSpec::VT_NAMES, names);
  }
  #[inline]
  pub fn add_scope(&mut self, scope: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CustomResourceDefinitionSpec::VT_SCOPE, scope);
  }
  #[inline]
  pub fn add_validation(&mut self, validation: flatbuffers::WIPOffset<CustomResourceValidation<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CustomResourceValidation>>(CustomResourceDefinitionSpec::VT_VALIDATION, validation);
  }
  #[inline]
  pub fn add_subresources(&mut self, subresources: flatbuffers::WIPOffset<CustomResourceSubresources<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CustomResourceSubresources>>(CustomResourceDefinitionSpec::VT_SUBRESOURCES, subresources);
  }
  #[inline]
  pub fn add_versions(&mut self, versions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CustomResourceDefinitionVersion<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CustomResourceDefinitionSpec::VT_VERSIONS, versions);
  }
  #[inline]
  pub fn add_additionalPrinterColumns(&mut self, additionalPrinterColumns: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CustomResourceColumnDefinition<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CustomResourceDefinitionSpec::VT_ADDITIONALPRINTERCOLUMNS, additionalPrinterColumns);
  }
  #[inline]
  pub fn add_selectableFields(&mut self, selectableFields: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<SelectableField<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CustomResourceDefinitionSpec::VT_SELECTABLEFIELDS, selectableFields);
  }
  #[inline]
  pub fn add_conversion(&mut self, conversion: flatbuffers::WIPOffset<CustomResourceConversion<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CustomResourceConversion>>(CustomResourceDefinitionSpec::VT_CONVERSION, conversion);
  }
  #[inline]
  pub fn add_preserveUnknownFields(&mut self, preserveUnknownFields: bool) {
    self.fbb_.push_slot::<bool>(CustomResourceDefinitionSpec::VT_PRESERVEUNKNOWNFIELDS, preserveUnknownFields, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CustomResourceDefinitionSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CustomResourceDefinitionSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CustomResourceDefinitionSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CustomResourceDefinitionSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CustomResourceDefinitionSpec");
      ds.field("group", &self.group());
      ds.field("version", &self.version());
      ds.field("names", &self.names());
      ds.field("scope", &self.scope());
      ds.field("validation", &self.validation());
      ds.field("subresources", &self.subresources());
      ds.field("versions", &self.versions());
      ds.field("additionalPrinterColumns", &self.additionalPrinterColumns());
      ds.field("selectableFields", &self.selectableFields());
      ds.field("conversion", &self.conversion());
      ds.field("preserveUnknownFields", &self.preserveUnknownFields());
      ds.finish()
  }
}
