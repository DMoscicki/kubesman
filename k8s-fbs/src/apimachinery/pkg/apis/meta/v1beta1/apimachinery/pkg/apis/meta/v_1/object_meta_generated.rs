// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ObjectMetaOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ObjectMeta<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ObjectMeta<'a> {
  type Inner = ObjectMeta<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ObjectMeta<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_GENERATENAME: flatbuffers::VOffsetT = 6;
  pub const VT_NAMESPACE: flatbuffers::VOffsetT = 8;
  pub const VT_SELFLINK: flatbuffers::VOffsetT = 10;
  pub const VT_UID: flatbuffers::VOffsetT = 12;
  pub const VT_RESOURCEVERSION: flatbuffers::VOffsetT = 14;
  pub const VT_GENERATION: flatbuffers::VOffsetT = 16;
  pub const VT_CREATIONTIMESTAMP: flatbuffers::VOffsetT = 18;
  pub const VT_DELETIONTIMESTAMP: flatbuffers::VOffsetT = 20;
  pub const VT_DELETIONGRACEPERIODSECONDS: flatbuffers::VOffsetT = 22;
  pub const VT_LABELS: flatbuffers::VOffsetT = 24;
  pub const VT_ANNOTATIONS: flatbuffers::VOffsetT = 26;
  pub const VT_OWNERREFERENCES: flatbuffers::VOffsetT = 28;
  pub const VT_FINALIZERS: flatbuffers::VOffsetT = 30;
  pub const VT_MANAGEDFIELDS: flatbuffers::VOffsetT = 32;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ObjectMeta { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ObjectMetaArgs<'args>
  ) -> flatbuffers::WIPOffset<ObjectMeta<'bldr>> {
    let mut builder = ObjectMetaBuilder::new(_fbb);
    builder.add_deletionGracePeriodSeconds(args.deletionGracePeriodSeconds);
    builder.add_generation(args.generation);
    if let Some(x) = args.managedFields { builder.add_managedFields(x); }
    if let Some(x) = args.finalizers { builder.add_finalizers(x); }
    if let Some(x) = args.ownerReferences { builder.add_ownerReferences(x); }
    if let Some(x) = args.annotations { builder.add_annotations(x); }
    if let Some(x) = args.labels { builder.add_labels(x); }
    if let Some(x) = args.deletionTimestamp { builder.add_deletionTimestamp(x); }
    if let Some(x) = args.creationTimestamp { builder.add_creationTimestamp(x); }
    if let Some(x) = args.resourceVersion { builder.add_resourceVersion(x); }
    if let Some(x) = args.uid { builder.add_uid(x); }
    if let Some(x) = args.selfLink { builder.add_selfLink(x); }
    if let Some(x) = args.namespace { builder.add_namespace(x); }
    if let Some(x) = args.generateName { builder.add_generateName(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectMeta::VT_NAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn generateName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectMeta::VT_GENERATENAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn namespace(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectMeta::VT_NAMESPACE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn selfLink(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectMeta::VT_SELFLINK, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn uid(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectMeta::VT_UID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn resourceVersion(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectMeta::VT_RESOURCEVERSION, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn generation(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObjectMeta::VT_GENERATION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn creationTimestamp(&self) -> Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Time>>(ObjectMeta::VT_CREATIONTIMESTAMP, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn deletionTimestamp(&self) -> Time<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<Time>>(ObjectMeta::VT_DELETIONTIMESTAMP, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn deletionGracePeriodSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ObjectMeta::VT_DELETIONGRACEPERIODSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn labels(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<object_meta_::LabelsEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<object_meta_::LabelsEntry>>>>(ObjectMeta::VT_LABELS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn annotations(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<object_meta_::AnnotationsEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<object_meta_::AnnotationsEntry>>>>(ObjectMeta::VT_ANNOTATIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn ownerReferences(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<OwnerReference<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<OwnerReference>>>>(ObjectMeta::VT_OWNERREFERENCES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn finalizers(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ObjectMeta::VT_FINALIZERS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn managedFields(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ManagedFieldsEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ManagedFieldsEntry>>>>(ObjectMeta::VT_MANAGEDFIELDS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for ObjectMeta<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("generateName", Self::VT_GENERATENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("namespace", Self::VT_NAMESPACE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("selfLink", Self::VT_SELFLINK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("uid", Self::VT_UID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resourceVersion", Self::VT_RESOURCEVERSION, false)?
     .visit_field::<i64>("generation", Self::VT_GENERATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Time>>("creationTimestamp", Self::VT_CREATIONTIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<Time>>("deletionTimestamp", Self::VT_DELETIONTIMESTAMP, false)?
     .visit_field::<i64>("deletionGracePeriodSeconds", Self::VT_DELETIONGRACEPERIODSECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<object_meta_::LabelsEntry>>>>("labels", Self::VT_LABELS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<object_meta_::AnnotationsEntry>>>>("annotations", Self::VT_ANNOTATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<OwnerReference>>>>("ownerReferences", Self::VT_OWNERREFERENCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("finalizers", Self::VT_FINALIZERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ManagedFieldsEntry>>>>("managedFields", Self::VT_MANAGEDFIELDS, false)?
     .finish();
    Ok(())
  }
}
pub struct ObjectMetaArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub generateName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub namespace: Option<flatbuffers::WIPOffset<&'a str>>,
    pub selfLink: Option<flatbuffers::WIPOffset<&'a str>>,
    pub uid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resourceVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub generation: i64,
    pub creationTimestamp: Option<flatbuffers::WIPOffset<Time<'a>>>,
    pub deletionTimestamp: Option<flatbuffers::WIPOffset<Time<'a>>>,
    pub deletionGracePeriodSeconds: i64,
    pub labels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<object_meta_::LabelsEntry<'a>>>>>,
    pub annotations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<object_meta_::AnnotationsEntry<'a>>>>>,
    pub ownerReferences: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<OwnerReference<'a>>>>>,
    pub finalizers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub managedFields: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ManagedFieldsEntry<'a>>>>>,
}
impl<'a> Default for ObjectMetaArgs<'a> {
  #[inline]
  fn default() -> Self {
    ObjectMetaArgs {
      name: None,
      generateName: None,
      namespace: None,
      selfLink: None,
      uid: None,
      resourceVersion: None,
      generation: 0,
      creationTimestamp: None,
      deletionTimestamp: None,
      deletionGracePeriodSeconds: 0,
      labels: None,
      annotations: None,
      ownerReferences: None,
      finalizers: None,
      managedFields: None,
    }
  }
}

impl Serialize for ObjectMeta<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ObjectMeta", 15)?;
      s.serialize_field("name", &self.name())?;
      s.serialize_field("generateName", &self.generateName())?;
      s.serialize_field("namespace", &self.namespace())?;
      s.serialize_field("selfLink", &self.selfLink())?;
      s.serialize_field("uid", &self.uid())?;
      s.serialize_field("resourceVersion", &self.resourceVersion())?;
      s.serialize_field("generation", &self.generation())?;
      s.serialize_field("creationTimestamp", &self.creationTimestamp())?;
      s.serialize_field("deletionTimestamp", &self.deletionTimestamp())?;
      s.serialize_field("deletionGracePeriodSeconds", &self.deletionGracePeriodSeconds())?;
      s.serialize_field("labels", &self.labels())?;
      s.serialize_field("annotations", &self.annotations())?;
      s.serialize_field("ownerReferences", &self.ownerReferences())?;
      s.serialize_field("finalizers", &self.finalizers())?;
      s.serialize_field("managedFields", &self.managedFields())?;
    s.end()
  }
}

pub struct ObjectMetaBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ObjectMetaBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_NAME, name);
  }
  #[inline]
  pub fn add_generateName(&mut self, generateName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_GENERATENAME, generateName);
  }
  #[inline]
  pub fn add_namespace(&mut self, namespace: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_NAMESPACE, namespace);
  }
  #[inline]
  pub fn add_selfLink(&mut self, selfLink: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_SELFLINK, selfLink);
  }
  #[inline]
  pub fn add_uid(&mut self, uid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_UID, uid);
  }
  #[inline]
  pub fn add_resourceVersion(&mut self, resourceVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_RESOURCEVERSION, resourceVersion);
  }
  #[inline]
  pub fn add_generation(&mut self, generation: i64) {
    self.fbb_.push_slot::<i64>(ObjectMeta::VT_GENERATION, generation, 0);
  }
  #[inline]
  pub fn add_creationTimestamp(&mut self, creationTimestamp: flatbuffers::WIPOffset<Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Time>>(ObjectMeta::VT_CREATIONTIMESTAMP, creationTimestamp);
  }
  #[inline]
  pub fn add_deletionTimestamp(&mut self, deletionTimestamp: flatbuffers::WIPOffset<Time<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<Time>>(ObjectMeta::VT_DELETIONTIMESTAMP, deletionTimestamp);
  }
  #[inline]
  pub fn add_deletionGracePeriodSeconds(&mut self, deletionGracePeriodSeconds: i64) {
    self.fbb_.push_slot::<i64>(ObjectMeta::VT_DELETIONGRACEPERIODSECONDS, deletionGracePeriodSeconds, 0);
  }
  #[inline]
  pub fn add_labels(&mut self, labels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<object_meta_::LabelsEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_LABELS, labels);
  }
  #[inline]
  pub fn add_annotations(&mut self, annotations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<object_meta_::AnnotationsEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_ANNOTATIONS, annotations);
  }
  #[inline]
  pub fn add_ownerReferences(&mut self, ownerReferences: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<OwnerReference<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_OWNERREFERENCES, ownerReferences);
  }
  #[inline]
  pub fn add_finalizers(&mut self, finalizers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_FINALIZERS, finalizers);
  }
  #[inline]
  pub fn add_managedFields(&mut self, managedFields: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ManagedFieldsEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectMeta::VT_MANAGEDFIELDS, managedFields);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ObjectMetaBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ObjectMetaBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ObjectMeta<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ObjectMeta<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ObjectMeta");
      ds.field("name", &self.name());
      ds.field("generateName", &self.generateName());
      ds.field("namespace", &self.namespace());
      ds.field("selfLink", &self.selfLink());
      ds.field("uid", &self.uid());
      ds.field("resourceVersion", &self.resourceVersion());
      ds.field("generation", &self.generation());
      ds.field("creationTimestamp", &self.creationTimestamp());
      ds.field("deletionTimestamp", &self.deletionTimestamp());
      ds.field("deletionGracePeriodSeconds", &self.deletionGracePeriodSeconds());
      ds.field("labels", &self.labels());
      ds.field("annotations", &self.annotations());
      ds.field("ownerReferences", &self.ownerReferences());
      ds.field("finalizers", &self.finalizers());
      ds.field("managedFields", &self.managedFields());
      ds.finish()
  }
}
