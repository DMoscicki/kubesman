// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CarpSpecOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CarpSpec<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CarpSpec<'a> {
  type Inner = CarpSpec<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CarpSpec<'a> {
  pub const VT_RESTARTPOLICY: flatbuffers::VOffsetT = 4;
  pub const VT_TERMINATIONGRACEPERIODSECONDS: flatbuffers::VOffsetT = 6;
  pub const VT_ACTIVEDEADLINESECONDS: flatbuffers::VOffsetT = 8;
  pub const VT_NODESELECTOR: flatbuffers::VOffsetT = 10;
  pub const VT_SERVICEACCOUNTNAME: flatbuffers::VOffsetT = 12;
  pub const VT_SERVICEACCOUNT: flatbuffers::VOffsetT = 14;
  pub const VT_NODENAME: flatbuffers::VOffsetT = 16;
  pub const VT_HOSTNETWORK: flatbuffers::VOffsetT = 18;
  pub const VT_HOSTPID: flatbuffers::VOffsetT = 20;
  pub const VT_HOSTIPC: flatbuffers::VOffsetT = 22;
  pub const VT_HOSTNAME: flatbuffers::VOffsetT = 24;
  pub const VT_SUBDOMAIN: flatbuffers::VOffsetT = 26;
  pub const VT_SCHEDULERNAME: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CarpSpec { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CarpSpecArgs<'args>
  ) -> flatbuffers::WIPOffset<CarpSpec<'bldr>> {
    let mut builder = CarpSpecBuilder::new(_fbb);
    builder.add_activeDeadlineSeconds(args.activeDeadlineSeconds);
    builder.add_terminationGracePeriodSeconds(args.terminationGracePeriodSeconds);
    if let Some(x) = args.schedulername { builder.add_schedulername(x); }
    if let Some(x) = args.subdomain { builder.add_subdomain(x); }
    if let Some(x) = args.hostname { builder.add_hostname(x); }
    if let Some(x) = args.nodeName { builder.add_nodeName(x); }
    if let Some(x) = args.serviceAccount { builder.add_serviceAccount(x); }
    if let Some(x) = args.serviceAccountName { builder.add_serviceAccountName(x); }
    if let Some(x) = args.nodeSelector { builder.add_nodeSelector(x); }
    if let Some(x) = args.restartPolicy { builder.add_restartPolicy(x); }
    builder.add_hostIPC(args.hostIPC);
    builder.add_hostPID(args.hostPID);
    builder.add_hostNetwork(args.hostNetwork);
    builder.finish()
  }


  #[inline]
  pub fn restartPolicy(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CarpSpec::VT_RESTARTPOLICY, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn terminationGracePeriodSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CarpSpec::VT_TERMINATIONGRACEPERIODSECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn activeDeadlineSeconds(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(CarpSpec::VT_ACTIVEDEADLINESECONDS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn nodeSelector(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<carp_spec_::NodeSelectorEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<carp_spec_::NodeSelectorEntry>>>>(CarpSpec::VT_NODESELECTOR, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn serviceAccountName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CarpSpec::VT_SERVICEACCOUNTNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn serviceAccount(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CarpSpec::VT_SERVICEACCOUNT, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn nodeName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CarpSpec::VT_NODENAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn hostNetwork(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CarpSpec::VT_HOSTNETWORK, Some(false)).unwrap()}
  }
  #[inline]
  pub fn hostPID(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CarpSpec::VT_HOSTPID, Some(false)).unwrap()}
  }
  #[inline]
  pub fn hostIPC(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CarpSpec::VT_HOSTIPC, Some(false)).unwrap()}
  }
  #[inline]
  pub fn hostname(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CarpSpec::VT_HOSTNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn subdomain(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CarpSpec::VT_SUBDOMAIN, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn schedulername(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CarpSpec::VT_SCHEDULERNAME, Some(&"0")).unwrap()}
  }
}

impl flatbuffers::Verifiable for CarpSpec<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("restartPolicy", Self::VT_RESTARTPOLICY, false)?
     .visit_field::<i64>("terminationGracePeriodSeconds", Self::VT_TERMINATIONGRACEPERIODSECONDS, false)?
     .visit_field::<i64>("activeDeadlineSeconds", Self::VT_ACTIVEDEADLINESECONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<carp_spec_::NodeSelectorEntry>>>>("nodeSelector", Self::VT_NODESELECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("serviceAccountName", Self::VT_SERVICEACCOUNTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("serviceAccount", Self::VT_SERVICEACCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nodeName", Self::VT_NODENAME, false)?
     .visit_field::<bool>("hostNetwork", Self::VT_HOSTNETWORK, false)?
     .visit_field::<bool>("hostPID", Self::VT_HOSTPID, false)?
     .visit_field::<bool>("hostIPC", Self::VT_HOSTIPC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hostname", Self::VT_HOSTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("subdomain", Self::VT_SUBDOMAIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("schedulername", Self::VT_SCHEDULERNAME, false)?
     .finish();
    Ok(())
  }
}
pub struct CarpSpecArgs<'a> {
    pub restartPolicy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub terminationGracePeriodSeconds: i64,
    pub activeDeadlineSeconds: i64,
    pub nodeSelector: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<carp_spec_::NodeSelectorEntry<'a>>>>>,
    pub serviceAccountName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub serviceAccount: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nodeName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hostNetwork: bool,
    pub hostPID: bool,
    pub hostIPC: bool,
    pub hostname: Option<flatbuffers::WIPOffset<&'a str>>,
    pub subdomain: Option<flatbuffers::WIPOffset<&'a str>>,
    pub schedulername: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CarpSpecArgs<'a> {
  #[inline]
  fn default() -> Self {
    CarpSpecArgs {
      restartPolicy: None,
      terminationGracePeriodSeconds: 0,
      activeDeadlineSeconds: 0,
      nodeSelector: None,
      serviceAccountName: None,
      serviceAccount: None,
      nodeName: None,
      hostNetwork: false,
      hostPID: false,
      hostIPC: false,
      hostname: None,
      subdomain: None,
      schedulername: None,
    }
  }
}

impl Serialize for CarpSpec<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CarpSpec", 13)?;
      s.serialize_field("restartPolicy", &self.restartPolicy())?;
      s.serialize_field("terminationGracePeriodSeconds", &self.terminationGracePeriodSeconds())?;
      s.serialize_field("activeDeadlineSeconds", &self.activeDeadlineSeconds())?;
      s.serialize_field("nodeSelector", &self.nodeSelector())?;
      s.serialize_field("serviceAccountName", &self.serviceAccountName())?;
      s.serialize_field("serviceAccount", &self.serviceAccount())?;
      s.serialize_field("nodeName", &self.nodeName())?;
      s.serialize_field("hostNetwork", &self.hostNetwork())?;
      s.serialize_field("hostPID", &self.hostPID())?;
      s.serialize_field("hostIPC", &self.hostIPC())?;
      s.serialize_field("hostname", &self.hostname())?;
      s.serialize_field("subdomain", &self.subdomain())?;
      s.serialize_field("schedulername", &self.schedulername())?;
    s.end()
  }
}

pub struct CarpSpecBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CarpSpecBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_restartPolicy(&mut self, restartPolicy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CarpSpec::VT_RESTARTPOLICY, restartPolicy);
  }
  #[inline]
  pub fn add_terminationGracePeriodSeconds(&mut self, terminationGracePeriodSeconds: i64) {
    self.fbb_.push_slot::<i64>(CarpSpec::VT_TERMINATIONGRACEPERIODSECONDS, terminationGracePeriodSeconds, 0);
  }
  #[inline]
  pub fn add_activeDeadlineSeconds(&mut self, activeDeadlineSeconds: i64) {
    self.fbb_.push_slot::<i64>(CarpSpec::VT_ACTIVEDEADLINESECONDS, activeDeadlineSeconds, 0);
  }
  #[inline]
  pub fn add_nodeSelector(&mut self, nodeSelector: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<carp_spec_::NodeSelectorEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CarpSpec::VT_NODESELECTOR, nodeSelector);
  }
  #[inline]
  pub fn add_serviceAccountName(&mut self, serviceAccountName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CarpSpec::VT_SERVICEACCOUNTNAME, serviceAccountName);
  }
  #[inline]
  pub fn add_serviceAccount(&mut self, serviceAccount: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CarpSpec::VT_SERVICEACCOUNT, serviceAccount);
  }
  #[inline]
  pub fn add_nodeName(&mut self, nodeName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CarpSpec::VT_NODENAME, nodeName);
  }
  #[inline]
  pub fn add_hostNetwork(&mut self, hostNetwork: bool) {
    self.fbb_.push_slot::<bool>(CarpSpec::VT_HOSTNETWORK, hostNetwork, false);
  }
  #[inline]
  pub fn add_hostPID(&mut self, hostPID: bool) {
    self.fbb_.push_slot::<bool>(CarpSpec::VT_HOSTPID, hostPID, false);
  }
  #[inline]
  pub fn add_hostIPC(&mut self, hostIPC: bool) {
    self.fbb_.push_slot::<bool>(CarpSpec::VT_HOSTIPC, hostIPC, false);
  }
  #[inline]
  pub fn add_hostname(&mut self, hostname: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CarpSpec::VT_HOSTNAME, hostname);
  }
  #[inline]
  pub fn add_subdomain(&mut self, subdomain: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CarpSpec::VT_SUBDOMAIN, subdomain);
  }
  #[inline]
  pub fn add_schedulername(&mut self, schedulername: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CarpSpec::VT_SCHEDULERNAME, schedulername);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CarpSpecBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CarpSpecBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CarpSpec<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CarpSpec<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CarpSpec");
      ds.field("restartPolicy", &self.restartPolicy());
      ds.field("terminationGracePeriodSeconds", &self.terminationGracePeriodSeconds());
      ds.field("activeDeadlineSeconds", &self.activeDeadlineSeconds());
      ds.field("nodeSelector", &self.nodeSelector());
      ds.field("serviceAccountName", &self.serviceAccountName());
      ds.field("serviceAccount", &self.serviceAccount());
      ds.field("nodeName", &self.nodeName());
      ds.field("hostNetwork", &self.hostNetwork());
      ds.field("hostPID", &self.hostPID());
      ds.field("hostIPC", &self.hostIPC());
      ds.field("hostname", &self.hostname());
      ds.field("subdomain", &self.subdomain());
      ds.field("schedulername", &self.schedulername());
      ds.finish()
  }
}
