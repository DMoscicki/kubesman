// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ContainerStateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContainerState<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContainerState<'a> {
  type Inner = ContainerState<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ContainerState<'a> {
  pub const VT_WAITING: flatbuffers::VOffsetT = 4;
  pub const VT_RUNNING: flatbuffers::VOffsetT = 6;
  pub const VT_TERMINATED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ContainerState { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ContainerStateArgs<'args>
  ) -> flatbuffers::WIPOffset<ContainerState<'bldr>> {
    let mut builder = ContainerStateBuilder::new(_fbb);
    if let Some(x) = args.terminated { builder.add_terminated(x); }
    if let Some(x) = args.running { builder.add_running(x); }
    if let Some(x) = args.waiting { builder.add_waiting(x); }
    builder.finish()
  }


  #[inline]
  pub fn waiting(&self) -> ContainerStateWaiting<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ContainerStateWaiting>>(ContainerState::VT_WAITING, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn running(&self) -> ContainerStateRunning<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ContainerStateRunning>>(ContainerState::VT_RUNNING, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn terminated(&self) -> ContainerStateTerminated<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ContainerStateTerminated>>(ContainerState::VT_TERMINATED, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for ContainerState<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<ContainerStateWaiting>>("waiting", Self::VT_WAITING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ContainerStateRunning>>("running", Self::VT_RUNNING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ContainerStateTerminated>>("terminated", Self::VT_TERMINATED, false)?
     .finish();
    Ok(())
  }
}
pub struct ContainerStateArgs<'a> {
    pub waiting: Option<flatbuffers::WIPOffset<ContainerStateWaiting<'a>>>,
    pub running: Option<flatbuffers::WIPOffset<ContainerStateRunning<'a>>>,
    pub terminated: Option<flatbuffers::WIPOffset<ContainerStateTerminated<'a>>>,
}
impl<'a> Default for ContainerStateArgs<'a> {
  #[inline]
  fn default() -> Self {
    ContainerStateArgs {
      waiting: None,
      running: None,
      terminated: None,
    }
  }
}

impl Serialize for ContainerState<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ContainerState", 3)?;
      s.serialize_field("waiting", &self.waiting())?;
      s.serialize_field("running", &self.running())?;
      s.serialize_field("terminated", &self.terminated())?;
    s.end()
  }
}

pub struct ContainerStateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ContainerStateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_waiting(&mut self, waiting: flatbuffers::WIPOffset<ContainerStateWaiting<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ContainerStateWaiting>>(ContainerState::VT_WAITING, waiting);
  }
  #[inline]
  pub fn add_running(&mut self, running: flatbuffers::WIPOffset<ContainerStateRunning<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ContainerStateRunning>>(ContainerState::VT_RUNNING, running);
  }
  #[inline]
  pub fn add_terminated(&mut self, terminated: flatbuffers::WIPOffset<ContainerStateTerminated<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ContainerStateTerminated>>(ContainerState::VT_TERMINATED, terminated);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ContainerStateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ContainerStateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContainerState<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ContainerState<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ContainerState");
      ds.field("waiting", &self.waiting());
      ds.field("running", &self.running());
      ds.field("terminated", &self.terminated());
      ds.finish()
  }
}
