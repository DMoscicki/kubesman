// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum LimitRangeItemOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct LimitRangeItem<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LimitRangeItem<'a> {
  type Inner = LimitRangeItem<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LimitRangeItem<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_MAX: flatbuffers::VOffsetT = 6;
  pub const VT_MIN: flatbuffers::VOffsetT = 8;
  pub const VT_DEFAULT: flatbuffers::VOffsetT = 10;
  pub const VT_DEFAULTREQUEST: flatbuffers::VOffsetT = 12;
  pub const VT_MAXLIMITREQUESTRATIO: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LimitRangeItem { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LimitRangeItemArgs<'args>
  ) -> flatbuffers::WIPOffset<LimitRangeItem<'bldr>> {
    let mut builder = LimitRangeItemBuilder::new(_fbb);
    if let Some(x) = args.maxLimitRequestRatio { builder.add_maxLimitRequestRatio(x); }
    if let Some(x) = args.defaultRequest { builder.add_defaultRequest(x); }
    if let Some(x) = args.default { builder.add_default(x); }
    if let Some(x) = args.min { builder.add_min(x); }
    if let Some(x) = args.max { builder.add_max(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.finish()
  }


  #[inline]
  pub fn type_(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LimitRangeItem::VT_TYPE_, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn max(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::MaxEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::MaxEntry>>>>(LimitRangeItem::VT_MAX, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn min(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::MinEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::MinEntry>>>>(LimitRangeItem::VT_MIN, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn default(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::DefaultEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::DefaultEntry>>>>(LimitRangeItem::VT_DEFAULT, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn defaultRequest(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::DefaultRequestEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::DefaultRequestEntry>>>>(LimitRangeItem::VT_DEFAULTREQUEST, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn maxLimitRequestRatio(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::MaxLimitRequestRatioEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::MaxLimitRequestRatioEntry>>>>(LimitRangeItem::VT_MAXLIMITREQUESTRATIO, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for LimitRangeItem<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<limit_range_item_::MaxEntry>>>>("max", Self::VT_MAX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<limit_range_item_::MinEntry>>>>("min", Self::VT_MIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<limit_range_item_::DefaultEntry>>>>("default", Self::VT_DEFAULT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<limit_range_item_::DefaultRequestEntry>>>>("defaultRequest", Self::VT_DEFAULTREQUEST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<limit_range_item_::MaxLimitRequestRatioEntry>>>>("maxLimitRequestRatio", Self::VT_MAXLIMITREQUESTRATIO, false)?
     .finish();
    Ok(())
  }
}
pub struct LimitRangeItemArgs<'a> {
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub max: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::MaxEntry<'a>>>>>,
    pub min: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::MinEntry<'a>>>>>,
    pub default: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::DefaultEntry<'a>>>>>,
    pub defaultRequest: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::DefaultRequestEntry<'a>>>>>,
    pub maxLimitRequestRatio: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<limit_range_item_::MaxLimitRequestRatioEntry<'a>>>>>,
}
impl<'a> Default for LimitRangeItemArgs<'a> {
  #[inline]
  fn default() -> Self {
    LimitRangeItemArgs {
      type_: None,
      max: None,
      min: None,
      default: None,
      defaultRequest: None,
      maxLimitRequestRatio: None,
    }
  }
}

impl Serialize for LimitRangeItem<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("LimitRangeItem", 6)?;
      s.serialize_field("type_", &self.type_())?;
      s.serialize_field("max", &self.max())?;
      s.serialize_field("min", &self.min())?;
      s.serialize_field("default", &self.default())?;
      s.serialize_field("defaultRequest", &self.defaultRequest())?;
      s.serialize_field("maxLimitRequestRatio", &self.maxLimitRequestRatio())?;
    s.end()
  }
}

pub struct LimitRangeItemBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LimitRangeItemBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitRangeItem::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_max(&mut self, max: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<limit_range_item_::MaxEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitRangeItem::VT_MAX, max);
  }
  #[inline]
  pub fn add_min(&mut self, min: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<limit_range_item_::MinEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitRangeItem::VT_MIN, min);
  }
  #[inline]
  pub fn add_default(&mut self, default: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<limit_range_item_::DefaultEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitRangeItem::VT_DEFAULT, default);
  }
  #[inline]
  pub fn add_defaultRequest(&mut self, defaultRequest: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<limit_range_item_::DefaultRequestEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitRangeItem::VT_DEFAULTREQUEST, defaultRequest);
  }
  #[inline]
  pub fn add_maxLimitRequestRatio(&mut self, maxLimitRequestRatio: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<limit_range_item_::MaxLimitRequestRatioEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LimitRangeItem::VT_MAXLIMITREQUESTRATIO, maxLimitRequestRatio);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LimitRangeItemBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LimitRangeItemBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LimitRangeItem<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LimitRangeItem<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LimitRangeItem");
      ds.field("type_", &self.type_());
      ds.field("max", &self.max());
      ds.field("min", &self.min());
      ds.field("default", &self.default());
      ds.field("defaultRequest", &self.defaultRequest());
      ds.field("maxLimitRequestRatio", &self.maxLimitRequestRatio());
      ds.finish()
  }
}
