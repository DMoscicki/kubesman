// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum ContainerStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ContainerStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ContainerStatus<'a> {
  type Inner = ContainerStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ContainerStatus<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_STATE: flatbuffers::VOffsetT = 6;
  pub const VT_LASTSTATE: flatbuffers::VOffsetT = 8;
  pub const VT_READY: flatbuffers::VOffsetT = 10;
  pub const VT_RESTARTCOUNT: flatbuffers::VOffsetT = 12;
  pub const VT_IMAGE: flatbuffers::VOffsetT = 14;
  pub const VT_IMAGEID: flatbuffers::VOffsetT = 16;
  pub const VT_CONTAINERID: flatbuffers::VOffsetT = 18;
  pub const VT_STARTED: flatbuffers::VOffsetT = 20;
  pub const VT_ALLOCATEDRESOURCES: flatbuffers::VOffsetT = 22;
  pub const VT_RESOURCES: flatbuffers::VOffsetT = 24;
  pub const VT_VOLUMEMOUNTS: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ContainerStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ContainerStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<ContainerStatus<'bldr>> {
    let mut builder = ContainerStatusBuilder::new(_fbb);
    if let Some(x) = args.volumeMounts { builder.add_volumeMounts(x); }
    if let Some(x) = args.resources { builder.add_resources(x); }
    if let Some(x) = args.allocatedResources { builder.add_allocatedResources(x); }
    if let Some(x) = args.containerID { builder.add_containerID(x); }
    if let Some(x) = args.imageID { builder.add_imageID(x); }
    if let Some(x) = args.image { builder.add_image(x); }
    builder.add_restartCount(args.restartCount);
    if let Some(x) = args.lastState { builder.add_lastState(x); }
    if let Some(x) = args.state { builder.add_state(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_started(args.started);
    builder.add_ready(args.ready);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContainerStatus::VT_NAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn state(&self) -> ContainerState<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ContainerState>>(ContainerStatus::VT_STATE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn lastState(&self) -> ContainerState<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ContainerState>>(ContainerStatus::VT_LASTSTATE, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn ready(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ContainerStatus::VT_READY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn restartCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ContainerStatus::VT_RESTARTCOUNT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn image(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContainerStatus::VT_IMAGE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn imageID(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContainerStatus::VT_IMAGEID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn containerID(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ContainerStatus::VT_CONTAINERID, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn started(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(ContainerStatus::VT_STARTED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn allocatedResources(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<container_status_::AllocatedResourcesEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<container_status_::AllocatedResourcesEntry>>>>(ContainerStatus::VT_ALLOCATEDRESOURCES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn resources(&self) -> ResourceRequirements<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ResourceRequirements>>(ContainerStatus::VT_RESOURCES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn volumeMounts(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VolumeMountStatus<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VolumeMountStatus>>>>(ContainerStatus::VT_VOLUMEMOUNTS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for ContainerStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ContainerState>>("state", Self::VT_STATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ContainerState>>("lastState", Self::VT_LASTSTATE, false)?
     .visit_field::<bool>("ready", Self::VT_READY, false)?
     .visit_field::<i32>("restartCount", Self::VT_RESTARTCOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("image", Self::VT_IMAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("imageID", Self::VT_IMAGEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("containerID", Self::VT_CONTAINERID, false)?
     .visit_field::<bool>("started", Self::VT_STARTED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<container_status_::AllocatedResourcesEntry>>>>("allocatedResources", Self::VT_ALLOCATEDRESOURCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ResourceRequirements>>("resources", Self::VT_RESOURCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<VolumeMountStatus>>>>("volumeMounts", Self::VT_VOLUMEMOUNTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ContainerStatusArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub state: Option<flatbuffers::WIPOffset<ContainerState<'a>>>,
    pub lastState: Option<flatbuffers::WIPOffset<ContainerState<'a>>>,
    pub ready: bool,
    pub restartCount: i32,
    pub image: Option<flatbuffers::WIPOffset<&'a str>>,
    pub imageID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub containerID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub started: bool,
    pub allocatedResources: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<container_status_::AllocatedResourcesEntry<'a>>>>>,
    pub resources: Option<flatbuffers::WIPOffset<ResourceRequirements<'a>>>,
    pub volumeMounts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<VolumeMountStatus<'a>>>>>,
}
impl<'a> Default for ContainerStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    ContainerStatusArgs {
      name: None,
      state: None,
      lastState: None,
      ready: false,
      restartCount: 0,
      image: None,
      imageID: None,
      containerID: None,
      started: false,
      allocatedResources: None,
      resources: None,
      volumeMounts: None,
    }
  }
}

impl Serialize for ContainerStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("ContainerStatus", 12)?;
      s.serialize_field("name", &self.name())?;
      s.serialize_field("state", &self.state())?;
      s.serialize_field("lastState", &self.lastState())?;
      s.serialize_field("ready", &self.ready())?;
      s.serialize_field("restartCount", &self.restartCount())?;
      s.serialize_field("image", &self.image())?;
      s.serialize_field("imageID", &self.imageID())?;
      s.serialize_field("containerID", &self.containerID())?;
      s.serialize_field("started", &self.started())?;
      s.serialize_field("allocatedResources", &self.allocatedResources())?;
      s.serialize_field("resources", &self.resources())?;
      s.serialize_field("volumeMounts", &self.volumeMounts())?;
    s.end()
  }
}

pub struct ContainerStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ContainerStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContainerStatus::VT_NAME, name);
  }
  #[inline]
  pub fn add_state(&mut self, state: flatbuffers::WIPOffset<ContainerState<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ContainerState>>(ContainerStatus::VT_STATE, state);
  }
  #[inline]
  pub fn add_lastState(&mut self, lastState: flatbuffers::WIPOffset<ContainerState<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ContainerState>>(ContainerStatus::VT_LASTSTATE, lastState);
  }
  #[inline]
  pub fn add_ready(&mut self, ready: bool) {
    self.fbb_.push_slot::<bool>(ContainerStatus::VT_READY, ready, false);
  }
  #[inline]
  pub fn add_restartCount(&mut self, restartCount: i32) {
    self.fbb_.push_slot::<i32>(ContainerStatus::VT_RESTARTCOUNT, restartCount, 0);
  }
  #[inline]
  pub fn add_image(&mut self, image: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContainerStatus::VT_IMAGE, image);
  }
  #[inline]
  pub fn add_imageID(&mut self, imageID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContainerStatus::VT_IMAGEID, imageID);
  }
  #[inline]
  pub fn add_containerID(&mut self, containerID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContainerStatus::VT_CONTAINERID, containerID);
  }
  #[inline]
  pub fn add_started(&mut self, started: bool) {
    self.fbb_.push_slot::<bool>(ContainerStatus::VT_STARTED, started, false);
  }
  #[inline]
  pub fn add_allocatedResources(&mut self, allocatedResources: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<container_status_::AllocatedResourcesEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContainerStatus::VT_ALLOCATEDRESOURCES, allocatedResources);
  }
  #[inline]
  pub fn add_resources(&mut self, resources: flatbuffers::WIPOffset<ResourceRequirements<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ResourceRequirements>>(ContainerStatus::VT_RESOURCES, resources);
  }
  #[inline]
  pub fn add_volumeMounts(&mut self, volumeMounts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<VolumeMountStatus<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ContainerStatus::VT_VOLUMEMOUNTS, volumeMounts);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ContainerStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ContainerStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ContainerStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ContainerStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ContainerStatus");
      ds.field("name", &self.name());
      ds.field("state", &self.state());
      ds.field("lastState", &self.lastState());
      ds.field("ready", &self.ready());
      ds.field("restartCount", &self.restartCount());
      ds.field("image", &self.image());
      ds.field("imageID", &self.imageID());
      ds.field("containerID", &self.containerID());
      ds.field("started", &self.started());
      ds.field("allocatedResources", &self.allocatedResources());
      ds.field("resources", &self.resources());
      ds.field("volumeMounts", &self.volumeMounts());
      ds.finish()
  }
}
