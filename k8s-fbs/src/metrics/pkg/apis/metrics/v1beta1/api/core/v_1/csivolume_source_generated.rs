// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum CSIVolumeSourceOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CSIVolumeSource<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CSIVolumeSource<'a> {
  type Inner = CSIVolumeSource<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CSIVolumeSource<'a> {
  pub const VT_DRIVER: flatbuffers::VOffsetT = 4;
  pub const VT_READONLY: flatbuffers::VOffsetT = 6;
  pub const VT_FSTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_VOLUMEATTRIBUTES: flatbuffers::VOffsetT = 10;
  pub const VT_NODEPUBLISHSECRETREF: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CSIVolumeSource { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CSIVolumeSourceArgs<'args>
  ) -> flatbuffers::WIPOffset<CSIVolumeSource<'bldr>> {
    let mut builder = CSIVolumeSourceBuilder::new(_fbb);
    if let Some(x) = args.nodePublishSecretRef { builder.add_nodePublishSecretRef(x); }
    if let Some(x) = args.volumeAttributes { builder.add_volumeAttributes(x); }
    if let Some(x) = args.fsType { builder.add_fsType(x); }
    if let Some(x) = args.driver { builder.add_driver(x); }
    builder.add_readOnly(args.readOnly);
    builder.finish()
  }


  #[inline]
  pub fn driver(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CSIVolumeSource::VT_DRIVER, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn readOnly(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(CSIVolumeSource::VT_READONLY, Some(false)).unwrap()}
  }
  #[inline]
  pub fn fsType(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CSIVolumeSource::VT_FSTYPE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn volumeAttributes(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<csivolume_source_::VolumeAttributesEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<csivolume_source_::VolumeAttributesEntry>>>>(CSIVolumeSource::VT_VOLUMEATTRIBUTES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn nodePublishSecretRef(&self) -> LocalObjectReference<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<LocalObjectReference>>(CSIVolumeSource::VT_NODEPUBLISHSECRETREF, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for CSIVolumeSource<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("driver", Self::VT_DRIVER, false)?
     .visit_field::<bool>("readOnly", Self::VT_READONLY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fsType", Self::VT_FSTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<csivolume_source_::VolumeAttributesEntry>>>>("volumeAttributes", Self::VT_VOLUMEATTRIBUTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<LocalObjectReference>>("nodePublishSecretRef", Self::VT_NODEPUBLISHSECRETREF, false)?
     .finish();
    Ok(())
  }
}
pub struct CSIVolumeSourceArgs<'a> {
    pub driver: Option<flatbuffers::WIPOffset<&'a str>>,
    pub readOnly: bool,
    pub fsType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub volumeAttributes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<csivolume_source_::VolumeAttributesEntry<'a>>>>>,
    pub nodePublishSecretRef: Option<flatbuffers::WIPOffset<LocalObjectReference<'a>>>,
}
impl<'a> Default for CSIVolumeSourceArgs<'a> {
  #[inline]
  fn default() -> Self {
    CSIVolumeSourceArgs {
      driver: None,
      readOnly: false,
      fsType: None,
      volumeAttributes: None,
      nodePublishSecretRef: None,
    }
  }
}

impl Serialize for CSIVolumeSource<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("CSIVolumeSource", 5)?;
      s.serialize_field("driver", &self.driver())?;
      s.serialize_field("readOnly", &self.readOnly())?;
      s.serialize_field("fsType", &self.fsType())?;
      s.serialize_field("volumeAttributes", &self.volumeAttributes())?;
      s.serialize_field("nodePublishSecretRef", &self.nodePublishSecretRef())?;
    s.end()
  }
}

pub struct CSIVolumeSourceBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CSIVolumeSourceBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_driver(&mut self, driver: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CSIVolumeSource::VT_DRIVER, driver);
  }
  #[inline]
  pub fn add_readOnly(&mut self, readOnly: bool) {
    self.fbb_.push_slot::<bool>(CSIVolumeSource::VT_READONLY, readOnly, false);
  }
  #[inline]
  pub fn add_fsType(&mut self, fsType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CSIVolumeSource::VT_FSTYPE, fsType);
  }
  #[inline]
  pub fn add_volumeAttributes(&mut self, volumeAttributes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<csivolume_source_::VolumeAttributesEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CSIVolumeSource::VT_VOLUMEATTRIBUTES, volumeAttributes);
  }
  #[inline]
  pub fn add_nodePublishSecretRef(&mut self, nodePublishSecretRef: flatbuffers::WIPOffset<LocalObjectReference<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<LocalObjectReference>>(CSIVolumeSource::VT_NODEPUBLISHSECRETREF, nodePublishSecretRef);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CSIVolumeSourceBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CSIVolumeSourceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CSIVolumeSource<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CSIVolumeSource<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CSIVolumeSource");
      ds.field("driver", &self.driver());
      ds.field("readOnly", &self.readOnly());
      ds.field("fsType", &self.fsType());
      ds.field("volumeAttributes", &self.volumeAttributes());
      ds.field("nodePublishSecretRef", &self.nodePublishSecretRef());
      ds.finish()
  }
}
