// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
extern crate serde;
use self::serde::ser::{Serialize, Serializer, SerializeStruct};
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PersistentVolumeClaimStatusOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PersistentVolumeClaimStatus<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PersistentVolumeClaimStatus<'a> {
  type Inner = PersistentVolumeClaimStatus<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PersistentVolumeClaimStatus<'a> {
  pub const VT_PHASE: flatbuffers::VOffsetT = 4;
  pub const VT_ACCESSMODES: flatbuffers::VOffsetT = 6;
  pub const VT_CAPACITY: flatbuffers::VOffsetT = 8;
  pub const VT_CONDITIONS: flatbuffers::VOffsetT = 10;
  pub const VT_ALLOCATEDRESOURCES: flatbuffers::VOffsetT = 12;
  pub const VT_ALLOCATEDRESOURCESTATUSES: flatbuffers::VOffsetT = 14;
  pub const VT_CURRENTVOLUMEATTRIBUTESCLASSNAME: flatbuffers::VOffsetT = 16;
  pub const VT_MODIFYVOLUMESTATUS: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PersistentVolumeClaimStatus { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PersistentVolumeClaimStatusArgs<'args>
  ) -> flatbuffers::WIPOffset<PersistentVolumeClaimStatus<'bldr>> {
    let mut builder = PersistentVolumeClaimStatusBuilder::new(_fbb);
    if let Some(x) = args.modifyVolumeStatus { builder.add_modifyVolumeStatus(x); }
    if let Some(x) = args.currentVolumeAttributesClassName { builder.add_currentVolumeAttributesClassName(x); }
    if let Some(x) = args.allocatedResourceStatuses { builder.add_allocatedResourceStatuses(x); }
    if let Some(x) = args.allocatedResources { builder.add_allocatedResources(x); }
    if let Some(x) = args.conditions { builder.add_conditions(x); }
    if let Some(x) = args.capacity { builder.add_capacity(x); }
    if let Some(x) = args.accessModes { builder.add_accessModes(x); }
    if let Some(x) = args.phase { builder.add_phase(x); }
    builder.finish()
  }


  #[inline]
  pub fn phase(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeClaimStatus::VT_PHASE, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn accessModes(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PersistentVolumeClaimStatus::VT_ACCESSMODES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn capacity(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::CapacityEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::CapacityEntry>>>>(PersistentVolumeClaimStatus::VT_CAPACITY, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn conditions(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PersistentVolumeClaimCondition<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PersistentVolumeClaimCondition>>>>(PersistentVolumeClaimStatus::VT_CONDITIONS, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn allocatedResources(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourcesEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourcesEntry>>>>(PersistentVolumeClaimStatus::VT_ALLOCATEDRESOURCES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn allocatedResourceStatuses(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourceStatusesEntry<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourceStatusesEntry>>>>(PersistentVolumeClaimStatus::VT_ALLOCATEDRESOURCESTATUSES, Some(Default::default())).unwrap()}
  }
  #[inline]
  pub fn currentVolumeAttributesClassName(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersistentVolumeClaimStatus::VT_CURRENTVOLUMEATTRIBUTESCLASSNAME, Some(&"0")).unwrap()}
  }
  #[inline]
  pub fn modifyVolumeStatus(&self) -> ModifyVolumeStatus<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ModifyVolumeStatus>>(PersistentVolumeClaimStatus::VT_MODIFYVOLUMESTATUS, Some(Default::default())).unwrap()}
  }
}

impl flatbuffers::Verifiable for PersistentVolumeClaimStatus<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("phase", Self::VT_PHASE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("accessModes", Self::VT_ACCESSMODES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::CapacityEntry>>>>("capacity", Self::VT_CAPACITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PersistentVolumeClaimCondition>>>>("conditions", Self::VT_CONDITIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourcesEntry>>>>("allocatedResources", Self::VT_ALLOCATEDRESOURCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourceStatusesEntry>>>>("allocatedResourceStatuses", Self::VT_ALLOCATEDRESOURCESTATUSES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("currentVolumeAttributesClassName", Self::VT_CURRENTVOLUMEATTRIBUTESCLASSNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ModifyVolumeStatus>>("modifyVolumeStatus", Self::VT_MODIFYVOLUMESTATUS, false)?
     .finish();
    Ok(())
  }
}
pub struct PersistentVolumeClaimStatusArgs<'a> {
    pub phase: Option<flatbuffers::WIPOffset<&'a str>>,
    pub accessModes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub capacity: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::CapacityEntry<'a>>>>>,
    pub conditions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PersistentVolumeClaimCondition<'a>>>>>,
    pub allocatedResources: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourcesEntry<'a>>>>>,
    pub allocatedResourceStatuses: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourceStatusesEntry<'a>>>>>,
    pub currentVolumeAttributesClassName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub modifyVolumeStatus: Option<flatbuffers::WIPOffset<ModifyVolumeStatus<'a>>>,
}
impl<'a> Default for PersistentVolumeClaimStatusArgs<'a> {
  #[inline]
  fn default() -> Self {
    PersistentVolumeClaimStatusArgs {
      phase: None,
      accessModes: None,
      capacity: None,
      conditions: None,
      allocatedResources: None,
      allocatedResourceStatuses: None,
      currentVolumeAttributesClassName: None,
      modifyVolumeStatus: None,
    }
  }
}

impl Serialize for PersistentVolumeClaimStatus<'_> {
  fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  where
    S: Serializer,
  {
    let mut s = serializer.serialize_struct("PersistentVolumeClaimStatus", 8)?;
      s.serialize_field("phase", &self.phase())?;
      s.serialize_field("accessModes", &self.accessModes())?;
      s.serialize_field("capacity", &self.capacity())?;
      s.serialize_field("conditions", &self.conditions())?;
      s.serialize_field("allocatedResources", &self.allocatedResources())?;
      s.serialize_field("allocatedResourceStatuses", &self.allocatedResourceStatuses())?;
      s.serialize_field("currentVolumeAttributesClassName", &self.currentVolumeAttributesClassName())?;
      s.serialize_field("modifyVolumeStatus", &self.modifyVolumeStatus())?;
    s.end()
  }
}

pub struct PersistentVolumeClaimStatusBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PersistentVolumeClaimStatusBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_phase(&mut self, phase: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimStatus::VT_PHASE, phase);
  }
  #[inline]
  pub fn add_accessModes(&mut self, accessModes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimStatus::VT_ACCESSMODES, accessModes);
  }
  #[inline]
  pub fn add_capacity(&mut self, capacity: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::CapacityEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimStatus::VT_CAPACITY, capacity);
  }
  #[inline]
  pub fn add_conditions(&mut self, conditions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PersistentVolumeClaimCondition<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimStatus::VT_CONDITIONS, conditions);
  }
  #[inline]
  pub fn add_allocatedResources(&mut self, allocatedResources: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourcesEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimStatus::VT_ALLOCATEDRESOURCES, allocatedResources);
  }
  #[inline]
  pub fn add_allocatedResourceStatuses(&mut self, allocatedResourceStatuses: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<persistent_volume_claim_status_::AllocatedResourceStatusesEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimStatus::VT_ALLOCATEDRESOURCESTATUSES, allocatedResourceStatuses);
  }
  #[inline]
  pub fn add_currentVolumeAttributesClassName(&mut self, currentVolumeAttributesClassName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersistentVolumeClaimStatus::VT_CURRENTVOLUMEATTRIBUTESCLASSNAME, currentVolumeAttributesClassName);
  }
  #[inline]
  pub fn add_modifyVolumeStatus(&mut self, modifyVolumeStatus: flatbuffers::WIPOffset<ModifyVolumeStatus<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ModifyVolumeStatus>>(PersistentVolumeClaimStatus::VT_MODIFYVOLUMESTATUS, modifyVolumeStatus);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PersistentVolumeClaimStatusBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PersistentVolumeClaimStatusBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PersistentVolumeClaimStatus<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PersistentVolumeClaimStatus<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PersistentVolumeClaimStatus");
      ds.field("phase", &self.phase());
      ds.field("accessModes", &self.accessModes());
      ds.field("capacity", &self.capacity());
      ds.field("conditions", &self.conditions());
      ds.field("allocatedResources", &self.allocatedResources());
      ds.field("allocatedResourceStatuses", &self.allocatedResourceStatuses());
      ds.field("currentVolumeAttributesClassName", &self.currentVolumeAttributesClassName());
      ds.field("modifyVolumeStatus", &self.modifyVolumeStatus());
      ds.finish()
  }
}
