// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `metrics/pkg/apis/metrics/v1beta1/generated.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

///  ContainerMetrics sets resource usage metrics of a container.
// @@protoc_insertion_point(message:metrics.pkg.apis.metrics.v1beta1.ContainerMetrics)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContainerMetrics {
    // message fields
    ///  Container name corresponding to the one from pod.spec.containers.
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.ContainerMetrics.name)
    pub name: ::std::option::Option<::std::string::String>,
    ///  The memory usage is the memory working set.
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.ContainerMetrics.usage)
    pub usage: ::std::collections::HashMap<::std::string::String, super::generated::Quantity>,
    // special fields
    // @@protoc_insertion_point(special_field:metrics.pkg.apis.metrics.v1beta1.ContainerMetrics.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ContainerMetrics {
    fn default() -> &'a ContainerMetrics {
        <ContainerMetrics as ::protobuf::Message>::default_instance()
    }
}

impl ContainerMetrics {
    pub fn new() -> ContainerMetrics {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &ContainerMetrics| { &m.name },
            |m: &mut ContainerMetrics| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "usage",
            |m: &ContainerMetrics| { &m.usage },
            |m: &mut ContainerMetrics| { &mut m.usage },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ContainerMetrics>(
            "ContainerMetrics",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ContainerMetrics {
    const NAME: &'static str = "ContainerMetrics";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.usage.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for (k, v) in &self.usage {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        for (k, v) in &self.usage {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ContainerMetrics {
        ContainerMetrics::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.usage.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ContainerMetrics {
        static instance: ::protobuf::rt::Lazy<ContainerMetrics> = ::protobuf::rt::Lazy::new();
        instance.get(ContainerMetrics::new)
    }
}

impl ::protobuf::MessageFull for ContainerMetrics {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ContainerMetrics").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ContainerMetrics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContainerMetrics {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  NodeMetrics sets resource usage metrics of a node.
// @@protoc_insertion_point(message:metrics.pkg.apis.metrics.v1beta1.NodeMetrics)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NodeMetrics {
    // message fields
    ///  Standard object's metadata.
    ///  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    ///  +optional
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.NodeMetrics.metadata)
    pub metadata: ::protobuf::MessageField<super::generated::ObjectMeta>,
    ///  The following fields define time interval from which metrics were
    ///  collected from the interval [Timestamp-Window, Timestamp].
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.NodeMetrics.timestamp)
    pub timestamp: ::protobuf::MessageField<super::generated::Time>,
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.NodeMetrics.window)
    pub window: ::protobuf::MessageField<super::generated::Duration>,
    ///  The memory usage is the memory working set.
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.NodeMetrics.usage)
    pub usage: ::std::collections::HashMap<::std::string::String, super::generated::Quantity>,
    // special fields
    // @@protoc_insertion_point(special_field:metrics.pkg.apis.metrics.v1beta1.NodeMetrics.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NodeMetrics {
    fn default() -> &'a NodeMetrics {
        <NodeMetrics as ::protobuf::Message>::default_instance()
    }
}

impl NodeMetrics {
    pub fn new() -> NodeMetrics {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::generated::ObjectMeta>(
            "metadata",
            |m: &NodeMetrics| { &m.metadata },
            |m: &mut NodeMetrics| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::generated::Time>(
            "timestamp",
            |m: &NodeMetrics| { &m.timestamp },
            |m: &mut NodeMetrics| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::generated::Duration>(
            "window",
            |m: &NodeMetrics| { &m.window },
            |m: &mut NodeMetrics| { &mut m.window },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor_new::<_, _>(
            "usage",
            |m: &NodeMetrics| { &m.usage },
            |m: &mut NodeMetrics| { &mut m.usage },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NodeMetrics>(
            "NodeMetrics",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NodeMetrics {
    const NAME: &'static str = "NodeMetrics";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.window)?;
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.usage.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.window.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for (k, v) in &self.usage {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.window.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for (k, v) in &self.usage {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NodeMetrics {
        NodeMetrics::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.timestamp.clear();
        self.window.clear();
        self.usage.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NodeMetrics {
        static instance: ::protobuf::rt::Lazy<NodeMetrics> = ::protobuf::rt::Lazy::new();
        instance.get(NodeMetrics::new)
    }
}

impl ::protobuf::MessageFull for NodeMetrics {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NodeMetrics").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NodeMetrics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeMetrics {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  NodeMetricsList is a list of NodeMetrics.
// @@protoc_insertion_point(message:metrics.pkg.apis.metrics.v1beta1.NodeMetricsList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NodeMetricsList {
    // message fields
    ///  Standard list metadata.
    ///  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.NodeMetricsList.metadata)
    pub metadata: ::protobuf::MessageField<super::generated::ListMeta>,
    ///  List of node metrics.
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.NodeMetricsList.items)
    pub items: ::std::vec::Vec<NodeMetrics>,
    // special fields
    // @@protoc_insertion_point(special_field:metrics.pkg.apis.metrics.v1beta1.NodeMetricsList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NodeMetricsList {
    fn default() -> &'a NodeMetricsList {
        <NodeMetricsList as ::protobuf::Message>::default_instance()
    }
}

impl NodeMetricsList {
    pub fn new() -> NodeMetricsList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::generated::ListMeta>(
            "metadata",
            |m: &NodeMetricsList| { &m.metadata },
            |m: &mut NodeMetricsList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &NodeMetricsList| { &m.items },
            |m: &mut NodeMetricsList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NodeMetricsList>(
            "NodeMetricsList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NodeMetricsList {
    const NAME: &'static str = "NodeMetricsList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NodeMetricsList {
        NodeMetricsList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NodeMetricsList {
        static instance: NodeMetricsList = NodeMetricsList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NodeMetricsList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NodeMetricsList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NodeMetricsList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeMetricsList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PodMetrics sets resource usage metrics of a pod.
// @@protoc_insertion_point(message:metrics.pkg.apis.metrics.v1beta1.PodMetrics)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodMetrics {
    // message fields
    ///  Standard object's metadata.
    ///  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
    ///  +optional
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.PodMetrics.metadata)
    pub metadata: ::protobuf::MessageField<super::generated::ObjectMeta>,
    ///  The following fields define time interval from which metrics were
    ///  collected from the interval [Timestamp-Window, Timestamp].
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.PodMetrics.timestamp)
    pub timestamp: ::protobuf::MessageField<super::generated::Time>,
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.PodMetrics.window)
    pub window: ::protobuf::MessageField<super::generated::Duration>,
    ///  Metrics for all containers are collected within the same time window.
    ///  +listType=atomic
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.PodMetrics.containers)
    pub containers: ::std::vec::Vec<ContainerMetrics>,
    // special fields
    // @@protoc_insertion_point(special_field:metrics.pkg.apis.metrics.v1beta1.PodMetrics.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodMetrics {
    fn default() -> &'a PodMetrics {
        <PodMetrics as ::protobuf::Message>::default_instance()
    }
}

impl PodMetrics {
    pub fn new() -> PodMetrics {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::generated::ObjectMeta>(
            "metadata",
            |m: &PodMetrics| { &m.metadata },
            |m: &mut PodMetrics| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::generated::Time>(
            "timestamp",
            |m: &PodMetrics| { &m.timestamp },
            |m: &mut PodMetrics| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::generated::Duration>(
            "window",
            |m: &PodMetrics| { &m.window },
            |m: &mut PodMetrics| { &mut m.window },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "containers",
            |m: &PodMetrics| { &m.containers },
            |m: &mut PodMetrics| { &mut m.containers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodMetrics>(
            "PodMetrics",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodMetrics {
    const NAME: &'static str = "PodMetrics";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.window)?;
                },
                34 => {
                    self.containers.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.window.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.containers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.window.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        for v in &self.containers {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodMetrics {
        PodMetrics::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.timestamp.clear();
        self.window.clear();
        self.containers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodMetrics {
        static instance: PodMetrics = PodMetrics {
            metadata: ::protobuf::MessageField::none(),
            timestamp: ::protobuf::MessageField::none(),
            window: ::protobuf::MessageField::none(),
            containers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodMetrics {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodMetrics").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodMetrics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodMetrics {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  PodMetricsList is a list of PodMetrics.
// @@protoc_insertion_point(message:metrics.pkg.apis.metrics.v1beta1.PodMetricsList)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct PodMetricsList {
    // message fields
    ///  Standard list metadata.
    ///  More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.PodMetricsList.metadata)
    pub metadata: ::protobuf::MessageField<super::generated::ListMeta>,
    ///  List of pod metrics.
    // @@protoc_insertion_point(field:metrics.pkg.apis.metrics.v1beta1.PodMetricsList.items)
    pub items: ::std::vec::Vec<PodMetrics>,
    // special fields
    // @@protoc_insertion_point(special_field:metrics.pkg.apis.metrics.v1beta1.PodMetricsList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PodMetricsList {
    fn default() -> &'a PodMetricsList {
        <PodMetricsList as ::protobuf::Message>::default_instance()
    }
}

impl PodMetricsList {
    pub fn new() -> PodMetricsList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::generated::ListMeta>(
            "metadata",
            |m: &PodMetricsList| { &m.metadata },
            |m: &mut PodMetricsList| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "items",
            |m: &PodMetricsList| { &m.items },
            |m: &mut PodMetricsList| { &mut m.items },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PodMetricsList>(
            "PodMetricsList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PodMetricsList {
    const NAME: &'static str = "PodMetricsList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.items.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PodMetricsList {
        PodMetricsList::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.items.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PodMetricsList {
        static instance: PodMetricsList = PodMetricsList {
            metadata: ::protobuf::MessageField::none(),
            items: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PodMetricsList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PodMetricsList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PodMetricsList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PodMetricsList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n0metrics/pkg/apis/metrics/v1beta1/generated.proto\x12\x20metrics.pkg.a\
    pis.metrics.v1beta1\x1a\x1bapi/core/v1/generated.proto\x1a-apimachinery/\
    pkg/api/resource/generated.proto\x1a-apimachinery/pkg/apis/meta/v1/gener\
    ated.proto\x1a(apimachinery/pkg/runtime/generated.proto\x1a/apimachinery\
    /pkg/runtime/schema/generated.proto\"\xde\x01\n\x10ContainerMetrics\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12S\n\x05usage\x18\x02\x20\
    \x03(\x0b2=.metrics.pkg.apis.metrics.v1beta1.ContainerMetrics.UsageEntry\
    R\x05usage\x1aa\n\nUsageEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03ke\
    y\x12=\n\x05value\x18\x02\x20\x01(\x0b2'.apimachinery.pkg.api.resource.Q\
    uantityR\x05value:\x028\x01\"\x8b\x03\n\x0bNodeMetrics\x12E\n\x08metadat\
    a\x18\x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08me\
    tadata\x12A\n\ttimestamp\x18\x02\x20\x01(\x0b2#.apimachinery.pkg.apis.me\
    ta.v1.TimeR\ttimestamp\x12?\n\x06window\x18\x03\x20\x01(\x0b2'.apimachin\
    ery.pkg.apis.meta.v1.DurationR\x06window\x12N\n\x05usage\x18\x04\x20\x03\
    (\x0b28.metrics.pkg.apis.metrics.v1beta1.NodeMetrics.UsageEntryR\x05usag\
    e\x1aa\n\nUsageEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12=\n\
    \x05value\x18\x02\x20\x01(\x0b2'.apimachinery.pkg.api.resource.QuantityR\
    \x05value:\x028\x01\"\x9b\x01\n\x0fNodeMetricsList\x12C\n\x08metadata\
    \x18\x01\x20\x01(\x0b2'.apimachinery.pkg.apis.meta.v1.ListMetaR\x08metad\
    ata\x12C\n\x05items\x18\x02\x20\x03(\x0b2-.metrics.pkg.apis.metrics.v1be\
    ta1.NodeMetricsR\x05items\"\xab\x02\n\nPodMetrics\x12E\n\x08metadata\x18\
    \x01\x20\x01(\x0b2).apimachinery.pkg.apis.meta.v1.ObjectMetaR\x08metadat\
    a\x12A\n\ttimestamp\x18\x02\x20\x01(\x0b2#.apimachinery.pkg.apis.meta.v1\
    .TimeR\ttimestamp\x12?\n\x06window\x18\x03\x20\x01(\x0b2'.apimachinery.p\
    kg.apis.meta.v1.DurationR\x06window\x12R\n\ncontainers\x18\x04\x20\x03(\
    \x0b22.metrics.pkg.apis.metrics.v1beta1.ContainerMetricsR\ncontainers\"\
    \x99\x01\n\x0ePodMetricsList\x12C\n\x08metadata\x18\x01\x20\x01(\x0b2'.a\
    pimachinery.pkg.apis.meta.v1.ListMetaR\x08metadata\x12B\n\x05items\x18\
    \x02\x20\x03(\x0b2,.metrics.pkg.apis.metrics.v1beta1.PodMetricsR\x05item\
    sB)Z'k8s.io/metrics/pkg/apis/metrics/v1beta1J\xac\x19\n\x06\x12\x04\x13\
    \0^\x01\n\x82\x05\n\x01\x0c\x12\x03\x13\0\x122\xac\x04\nCopyright\x20The\
    \x20Kubernetes\x20Authors.\n\nLicensed\x20under\x20the\x20Apache\x20Lice\
    nse,\x20Version\x202.0\x20(the\x20\"License\");\nyou\x20may\x20not\x20us\
    e\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20Licens\
    e.\nYou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\nh\
    ttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless\x20required\x20by\
    \x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20softwar\
    e\ndistributed\x20under\x20the\x20License\x20is\x20distributed\x20on\x20\
    an\x20\"AS\x20IS\"\x20BASIS,\nWITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\
    \x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\nSee\x20th\
    e\x20License\x20for\x20the\x20specific\x20language\x20governing\x20permi\
    ssions\x20and\nlimitations\x20under\x20the\x20License.\n2I\x20This\x20fi\
    le\x20was\x20autogenerated\x20by\x20go-to-protobuf.\x20Do\x20not\x20edit\
    \x20it\x20manually!\n\n\x08\n\x01\x02\x12\x03\x15\0)\n\t\n\x02\x03\0\x12\
    \x03\x17\0%\n\t\n\x02\x03\x01\x12\x03\x18\07\n\t\n\x02\x03\x02\x12\x03\
    \x19\07\n\t\n\x02\x03\x03\x12\x03\x1a\02\n\t\n\x02\x03\x04\x12\x03\x1b\0\
    9\n\x08\n\x01\x08\x12\x03\x1e\0>\n?\n\x02\x08\x0b\x12\x03\x1e\0>\x1a4\
    \x20Package-wide\x20variables\x20from\x20generator\x20\"generated\".\n\n\
    J\n\x02\x04\0\x12\x04!\0'\x01\x1a>\x20ContainerMetrics\x20sets\x20resour\
    ce\x20usage\x20metrics\x20of\x20a\x20container.\n\n\n\n\x03\x04\0\x01\
    \x12\x03!\x08\x18\nP\n\x04\x04\0\x02\0\x12\x03#\x02\x1b\x1aC\x20Containe\
    r\x20name\x20corresponding\x20to\x20the\x20one\x20from\x20pod.spec.conta\
    iners.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03#\x02\n\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03#\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03#\x12\x16\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03#\x19\x1a\n:\n\x04\x04\0\x02\x01\x12\
    \x03&\x02@\x1a-\x20The\x20memory\x20usage\x20is\x20the\x20memory\x20work\
    ing\x20set.\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03&\x025\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03&6;\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03&>?\n\
    @\n\x02\x04\x01\x12\x04*\08\x01\x1a4\x20NodeMetrics\x20sets\x20resource\
    \x20usage\x20metrics\x20of\x20a\x20node.\n\n\n\n\x03\x04\x01\x01\x12\x03\
    *\x08\x13\n\x9f\x01\n\x04\x04\x01\x02\0\x12\x03.\x02A\x1a\x91\x01\x20Sta\
    ndard\x20object's\x20metadata.\n\x20More\x20info:\x20https://git.k8s.io/\
    community/contributors/devel/sig-architecture/api-conventions.md#metadat\
    a\n\x20+optional\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03.\x02\n\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03.\x0b3\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03.4<\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03.?@\n\x8c\x01\n\x04\x04\x01\
    \x02\x01\x12\x032\x02<\x1a\x7f\x20The\x20following\x20fields\x20define\
    \x20time\x20interval\x20from\x20which\x20metrics\x20were\n\x20collected\
    \x20from\x20the\x20interval\x20[Timestamp-Window,\x20Timestamp].\n\n\x0c\
    \n\x05\x04\x01\x02\x01\x04\x12\x032\x02\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x06\x12\x032\x0b-\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x032.7\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x032:;\n\x0b\n\x04\x04\x01\x02\x02\x12\x034\
    \x02=\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\x034\x02\n\n\x0c\n\x05\x04\x01\
    \x02\x02\x06\x12\x034\x0b1\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03428\n\
    \x0c\n\x05\x04\x01\x02\x02\x03\x12\x034;<\n:\n\x04\x04\x01\x02\x03\x12\
    \x037\x02@\x1a-\x20The\x20memory\x20usage\x20is\x20the\x20memory\x20work\
    ing\x20set.\n\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x037\x025\n\x0c\n\x05\
    \x04\x01\x02\x03\x01\x12\x0376;\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x037\
    >?\n7\n\x02\x04\x02\x12\x04;\0B\x01\x1a+\x20NodeMetricsList\x20is\x20a\
    \x20list\x20of\x20NodeMetrics.\n\n\n\n\x03\x04\x02\x01\x12\x03;\x08\x17\
    \n\x93\x01\n\x04\x04\x02\x02\0\x12\x03>\x02?\x1a\x85\x01\x20Standard\x20\
    list\x20metadata.\n\x20More\x20info:\x20https://git.k8s.io/community/con\
    tributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n\x0c\
    \n\x05\x04\x02\x02\0\x04\x12\x03>\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\
    \x12\x03>\x0b1\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03>2:\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03>=>\n$\n\x04\x04\x02\x02\x01\x12\x03A\x02!\x1a\x17\
    \x20List\x20of\x20node\x20metrics.\n\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\
    \x03A\x02\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03A\x0b\x16\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03A\x17\x1c\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03A\x1f\x20\n>\n\x02\x04\x03\x12\x04E\0T\x01\x1a2\x20PodMetrics\
    \x20sets\x20resource\x20usage\x20metrics\x20of\x20a\x20pod.\n\n\n\n\x03\
    \x04\x03\x01\x12\x03E\x08\x12\n\x9f\x01\n\x04\x04\x03\x02\0\x12\x03I\x02\
    A\x1a\x91\x01\x20Standard\x20object's\x20metadata.\n\x20More\x20info:\
    \x20https://git.k8s.io/community/contributors/devel/sig-architecture/api\
    -conventions.md#metadata\n\x20+optional\n\n\x0c\n\x05\x04\x03\x02\0\x04\
    \x12\x03I\x02\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03I\x0b3\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03I4<\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03I?@\n\
    \x8c\x01\n\x04\x04\x03\x02\x01\x12\x03M\x02<\x1a\x7f\x20The\x20following\
    \x20fields\x20define\x20time\x20interval\x20from\x20which\x20metrics\x20\
    were\n\x20collected\x20from\x20the\x20interval\x20[Timestamp-Window,\x20\
    Timestamp].\n\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03M\x02\n\n\x0c\n\x05\
    \x04\x03\x02\x01\x06\x12\x03M\x0b-\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03M.7\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03M:;\n\x0b\n\x04\x04\x03\
    \x02\x02\x12\x03O\x02=\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x03O\x02\n\n\
    \x0c\n\x05\x04\x03\x02\x02\x06\x12\x03O\x0b1\n\x0c\n\x05\x04\x03\x02\x02\
    \x01\x12\x03O28\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03O;<\nf\n\x04\x04\
    \x03\x02\x03\x12\x03S\x02+\x1aY\x20Metrics\x20for\x20all\x20containers\
    \x20are\x20collected\x20within\x20the\x20same\x20time\x20window.\n\x20+l\
    istType=atomic\n\n\x0c\n\x05\x04\x03\x02\x03\x04\x12\x03S\x02\n\n\x0c\n\
    \x05\x04\x03\x02\x03\x06\x12\x03S\x0b\x1b\n\x0c\n\x05\x04\x03\x02\x03\
    \x01\x12\x03S\x1c&\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03S)*\n5\n\x02\
    \x04\x04\x12\x04W\0^\x01\x1a)\x20PodMetricsList\x20is\x20a\x20list\x20of\
    \x20PodMetrics.\n\n\n\n\x03\x04\x04\x01\x12\x03W\x08\x16\n\x93\x01\n\x04\
    \x04\x04\x02\0\x12\x03Z\x02?\x1a\x85\x01\x20Standard\x20list\x20metadata\
    .\n\x20More\x20info:\x20https://git.k8s.io/community/contributors/devel/\
    sig-architecture/api-conventions.md#types-kinds\n\n\x0c\n\x05\x04\x04\
    \x02\0\x04\x12\x03Z\x02\n\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03Z\x0b1\n\
    \x0c\n\x05\x04\x04\x02\0\x01\x12\x03Z2:\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03Z=>\n#\n\x04\x04\x04\x02\x01\x12\x03]\x02\x20\x1a\x16\x20List\
    \x20of\x20pod\x20metrics.\n\n\x0c\n\x05\x04\x04\x02\x01\x04\x12\x03]\x02\
    \n\n\x0c\n\x05\x04\x04\x02\x01\x06\x12\x03]\x0b\x15\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x03]\x16\x1b\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03]\
    \x1e\x1f\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(5);
            deps.push(super::generated::file_descriptor().clone());
            deps.push(super::generated::file_descriptor().clone());
            deps.push(super::generated::file_descriptor().clone());
            deps.push(super::generated::file_descriptor().clone());
            deps.push(super::generated::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(ContainerMetrics::generated_message_descriptor_data());
            messages.push(NodeMetrics::generated_message_descriptor_data());
            messages.push(NodeMetricsList::generated_message_descriptor_data());
            messages.push(PodMetrics::generated_message_descriptor_data());
            messages.push(PodMetricsList::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
