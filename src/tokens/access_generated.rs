// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod access {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum AccessResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AccessResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AccessResponse<'a> {
  type Inner = AccessResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AccessResponse<'a> {
  pub const VT_ACCESS_TOKEN: flatbuffers::VOffsetT = 4;
  pub const VT_EXPIRES_IN: flatbuffers::VOffsetT = 6;
  pub const VT_REFRESH_TOKEN: flatbuffers::VOffsetT = 8;
  pub const VT_SCOPE: flatbuffers::VOffsetT = 10;
  pub const VT_TOKEN_TYPE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AccessResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AccessResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<AccessResponse<'bldr>> {
    let mut builder = AccessResponseBuilder::new(_fbb);
    if let Some(x) = args.token_type { builder.add_token_type(x); }
    if let Some(x) = args.scope { builder.add_scope(x); }
    if let Some(x) = args.refresh_token { builder.add_refresh_token(x); }
    if let Some(x) = args.expires_in { builder.add_expires_in(x); }
    if let Some(x) = args.access_token { builder.add_access_token(x); }
    builder.finish()
  }


  #[inline]
  pub fn access_token(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AccessResponse::VT_ACCESS_TOKEN, None)}
  }
  #[inline]
  pub fn expires_in(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AccessResponse::VT_EXPIRES_IN, None)}
  }
  #[inline]
  pub fn refresh_token(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AccessResponse::VT_REFRESH_TOKEN, None)}
  }
  #[inline]
  pub fn scope(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AccessResponse::VT_SCOPE, None)}
  }
  #[inline]
  pub fn token_type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AccessResponse::VT_TOKEN_TYPE, None)}
  }
}

impl flatbuffers::Verifiable for AccessResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("access_token", Self::VT_ACCESS_TOKEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("expires_in", Self::VT_EXPIRES_IN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refresh_token", Self::VT_REFRESH_TOKEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scope", Self::VT_SCOPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("token_type", Self::VT_TOKEN_TYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct AccessResponseArgs<'a> {
    pub access_token: Option<flatbuffers::WIPOffset<&'a str>>,
    pub expires_in: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refresh_token: Option<flatbuffers::WIPOffset<&'a str>>,
    pub scope: Option<flatbuffers::WIPOffset<&'a str>>,
    pub token_type: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AccessResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    AccessResponseArgs {
      access_token: None,
      expires_in: None,
      refresh_token: None,
      scope: None,
      token_type: None,
    }
  }
}

pub struct AccessResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AccessResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_access_token(&mut self, access_token: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccessResponse::VT_ACCESS_TOKEN, access_token);
  }
  #[inline]
  pub fn add_expires_in(&mut self, expires_in: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccessResponse::VT_EXPIRES_IN, expires_in);
  }
  #[inline]
  pub fn add_refresh_token(&mut self, refresh_token: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccessResponse::VT_REFRESH_TOKEN, refresh_token);
  }
  #[inline]
  pub fn add_scope(&mut self, scope: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccessResponse::VT_SCOPE, scope);
  }
  #[inline]
  pub fn add_token_type(&mut self, token_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AccessResponse::VT_TOKEN_TYPE, token_type);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AccessResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AccessResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AccessResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AccessResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AccessResponse");
      ds.field("access_token", &self.access_token());
      ds.field("expires_in", &self.expires_in());
      ds.field("refresh_token", &self.refresh_token());
      ds.field("scope", &self.scope());
      ds.field("token_type", &self.token_type());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AccessResponse`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_access_response_unchecked`.
pub fn root_as_access_response(buf: &[u8]) -> Result<AccessResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AccessResponse>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AccessResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_access_response_unchecked`.
pub fn size_prefixed_root_as_access_response(buf: &[u8]) -> Result<AccessResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AccessResponse>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AccessResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_access_response_unchecked`.
pub fn root_as_access_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AccessResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AccessResponse<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AccessResponse` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_access_response_unchecked`.
pub fn size_prefixed_root_as_access_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AccessResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AccessResponse<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AccessResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AccessResponse`.
pub unsafe fn root_as_access_response_unchecked(buf: &[u8]) -> AccessResponse {
  flatbuffers::root_unchecked::<AccessResponse>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AccessResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AccessResponse`.
pub unsafe fn size_prefixed_root_as_access_response_unchecked(buf: &[u8]) -> AccessResponse {
  flatbuffers::size_prefixed_root_unchecked::<AccessResponse>(buf)
}
#[inline]
pub fn finish_access_response_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AccessResponse<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_access_response_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AccessResponse<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Access

