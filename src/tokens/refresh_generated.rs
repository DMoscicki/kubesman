// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod refresh {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum RefreshResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RefreshResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RefreshResponse<'a> {
  type Inner = RefreshResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RefreshResponse<'a> {
  pub const VT_GRANT_TYPE: flatbuffers::VOffsetT = 4;
  pub const VT_REFRESH_TOKEN: flatbuffers::VOffsetT = 6;
  pub const VT_SCOPE: flatbuffers::VOffsetT = 8;
  pub const VT_CLIENT_ID: flatbuffers::VOffsetT = 10;
  pub const VT_CLIENT_SECRET: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RefreshResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RefreshResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<RefreshResponse<'bldr>> {
    let mut builder = RefreshResponseBuilder::new(_fbb);
    if let Some(x) = args.client_secret { builder.add_client_secret(x); }
    if let Some(x) = args.client_id { builder.add_client_id(x); }
    if let Some(x) = args.scope { builder.add_scope(x); }
    if let Some(x) = args.refresh_token { builder.add_refresh_token(x); }
    if let Some(x) = args.grant_type { builder.add_grant_type(x); }
    builder.finish()
  }


  #[inline]
  pub fn grant_type(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RefreshResponse::VT_GRANT_TYPE, None)}
  }
  #[inline]
  pub fn refresh_token(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RefreshResponse::VT_REFRESH_TOKEN, None)}
  }
  #[inline]
  pub fn scope(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RefreshResponse::VT_SCOPE, None)}
  }
  #[inline]
  pub fn client_id(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(RefreshResponse::VT_CLIENT_ID, None)}
  }
  #[inline]
  pub fn client_secret(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(RefreshResponse::VT_CLIENT_SECRET, None)}
  }
}

impl flatbuffers::Verifiable for RefreshResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("grant_type", Self::VT_GRANT_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refresh_token", Self::VT_REFRESH_TOKEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scope", Self::VT_SCOPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("client_id", Self::VT_CLIENT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("client_secret", Self::VT_CLIENT_SECRET, false)?
     .finish();
    Ok(())
  }
}
pub struct RefreshResponseArgs<'a> {
    pub grant_type: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refresh_token: Option<flatbuffers::WIPOffset<&'a str>>,
    pub scope: Option<flatbuffers::WIPOffset<&'a str>>,
    pub client_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub client_secret: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for RefreshResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    RefreshResponseArgs {
      grant_type: None,
      refresh_token: None,
      scope: None,
      client_id: None,
      client_secret: None,
    }
  }
}

pub struct RefreshResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RefreshResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_grant_type(&mut self, grant_type: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RefreshResponse::VT_GRANT_TYPE, grant_type);
  }
  #[inline]
  pub fn add_refresh_token(&mut self, refresh_token: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RefreshResponse::VT_REFRESH_TOKEN, refresh_token);
  }
  #[inline]
  pub fn add_scope(&mut self, scope: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RefreshResponse::VT_SCOPE, scope);
  }
  #[inline]
  pub fn add_client_id(&mut self, client_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RefreshResponse::VT_CLIENT_ID, client_id);
  }
  #[inline]
  pub fn add_client_secret(&mut self, client_secret: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RefreshResponse::VT_CLIENT_SECRET, client_secret);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RefreshResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RefreshResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RefreshResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RefreshResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RefreshResponse");
      ds.field("grant_type", &self.grant_type());
      ds.field("refresh_token", &self.refresh_token());
      ds.field("scope", &self.scope());
      ds.field("client_id", &self.client_id());
      ds.field("client_secret", &self.client_secret());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RefreshResponse`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_refresh_response_unchecked`.
pub fn root_as_refresh_response(buf: &[u8]) -> Result<RefreshResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RefreshResponse>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RefreshResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_refresh_response_unchecked`.
pub fn size_prefixed_root_as_refresh_response(buf: &[u8]) -> Result<RefreshResponse, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RefreshResponse>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RefreshResponse` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_refresh_response_unchecked`.
pub fn root_as_refresh_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RefreshResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RefreshResponse<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RefreshResponse` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_refresh_response_unchecked`.
pub fn size_prefixed_root_as_refresh_response_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RefreshResponse<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RefreshResponse<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RefreshResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RefreshResponse`.
pub unsafe fn root_as_refresh_response_unchecked(buf: &[u8]) -> RefreshResponse {
  flatbuffers::root_unchecked::<RefreshResponse>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RefreshResponse and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RefreshResponse`.
pub unsafe fn size_prefixed_root_as_refresh_response_unchecked(buf: &[u8]) -> RefreshResponse {
  flatbuffers::size_prefixed_root_unchecked::<RefreshResponse>(buf)
}
#[inline]
pub fn finish_refresh_response_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<RefreshResponse<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_refresh_response_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<RefreshResponse<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Refresh

